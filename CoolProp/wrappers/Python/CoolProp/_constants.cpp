/* Generated by Cython 0.29.22 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "include_dirs": [
            "../..",
            "../../include",
            "../../src",
            "../../externals/Eigen",
            "../../externals/fmtlib",
            "../../externals/msgpack-c/include"
        ],
        "language": "c++",
        "name": "CoolProp._constants",
        "sources": [
            "CoolProp/_constants.pyx"
        ]
    },
    "module_name": "CoolProp._constants"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_22"
#define CYTHON_HEX_VERSION 0x001D16F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__CoolProp___constants
#define __PYX_HAVE_API__CoolProp___constants
/* Early includes */
#include "DataStructures.h"
#include "Configuration.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 1
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING "ascii"
#define __Pyx_PyObject_FromString __Pyx_PyUnicode_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "CoolProp/_constants.pyx",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
  static PyCodeObject *__pyx_frame_code = NULL;\
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
  int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
                  (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          tstate->tracing++;\
          tstate->use_tracing = 0;\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          tstate->use_tracing = 1;\
          tstate->tracing--;\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      tstate->tracing++;
      tstate->use_tracing = 0;
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      tstate->use_tracing = 1;
      tstate->tracing--;
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (tstate->use_tracing) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (tstate->use_tracing) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      tstate->tracing++;
      tstate->use_tracing = 0;
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      tstate->use_tracing = 1;
      tstate->tracing--;
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::parameters value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::input_pairs value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CoolProp_3a__3a_fluid_types(CoolProp::fluid_types value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CoolProp_3a__3a_phases(CoolProp::phases value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_configuration_keys(configuration_keys value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'CoolProp' */

/* Module declarations from 'CoolProp.constants_header' */

/* Module declarations from 'CoolProp._constants' */
#define __Pyx_MODULE_NAME "CoolProp._constants"
extern int __pyx_module_is_main_CoolProp___constants;
int __pyx_module_is_main_CoolProp___constants = 0;

/* Implementation of 'CoolProp._constants' */
static const char __pyx_k_iP[] = "iP";
static const char __pyx_k_iQ[] = "iQ";
static const char __pyx_k_iT[] = "iT";
static const char __pyx_k_iZ[] = "iZ";
static const char __pyx_k_iFH[] = "iFH";
static const char __pyx_k_iHH[] = "iHH";
static const char __pyx_k_iPH[] = "iPH";
static const char __pyx_k_iODP[] = "iODP";
static const char __pyx_k_iPIP[] = "iPIP";
static const char __pyx_k_iTau[] = "iTau";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_iDelta[] = "iDelta";
static const char __pyx_k_iDmass[] = "iDmass";
static const char __pyx_k_iGWP20[] = "iGWP20";
static const char __pyx_k_iGmass[] = "iGmass";
static const char __pyx_k_iHmass[] = "iHmass";
static const char __pyx_k_iP_max[] = "iP_max";
static const char __pyx_k_iP_min[] = "iP_min";
static const char __pyx_k_iPhase[] = "iPhase";
static const char __pyx_k_iSmass[] = "iSmass";
static const char __pyx_k_iT_max[] = "iT_max";
static const char __pyx_k_iT_min[] = "iT_min";
static const char __pyx_k_iUmass[] = "iUmass";
static const char __pyx_k_iCpmass[] = "iCpmass";
static const char __pyx_k_iCvmass[] = "iCvmass";
static const char __pyx_k_iDmolar[] = "iDmolar";
static const char __pyx_k_iGWP100[] = "iGWP100";
static const char __pyx_k_iGWP500[] = "iGWP500";
static const char __pyx_k_iGmolar[] = "iGmolar";
static const char __pyx_k_iHmolar[] = "iHmolar";
static const char __pyx_k_iSmolar[] = "iSmolar";
static const char __pyx_k_iUmolar[] = "iUmolar";
static const char __pyx_k_ialpha0[] = "ialpha0";
static const char __pyx_k_ialphar[] = "ialphar";
static const char __pyx_k_iBvirial[] = "iBvirial";
static const char __pyx_k_iCp0mass[] = "iCp0mass";
static const char __pyx_k_iCpmolar[] = "iCpmolar";
static const char __pyx_k_iCvirial[] = "iCvirial";
static const char __pyx_k_iCvmolar[] = "iCvmolar";
static const char __pyx_k_iPrandtl[] = "iPrandtl";
static const char __pyx_k_PQ_INPUTS[] = "PQ_INPUTS";
static const char __pyx_k_PT_INPUTS[] = "PT_INPUTS";
static const char __pyx_k_QT_INPUTS[] = "QT_INPUTS";
static const char __pyx_k_iCp0molar[] = "iCp0molar";
static const char __pyx_k_iP_triple[] = "iP_triple";
static const char __pyx_k_iT_freeze[] = "iT_freeze";
static const char __pyx_k_iT_triple[] = "iT_triple";
static const char __pyx_k_R_U_CODATA[] = "R_U_CODATA";
static const char __pyx_k_iphase_gas[] = "iphase_gas";
static const char __pyx_k_iviscosity[] = "iviscosity";
static const char __pyx_k_iP_critical[] = "iP_critical";
static const char __pyx_k_iP_reducing[] = "iP_reducing";
static const char __pyx_k_iT_critical[] = "iT_critical";
static const char __pyx_k_iT_reducing[] = "iT_reducing";
static const char __pyx_k_imolar_mass[] = "imolar_mass";
static const char __pyx_k_idBvirial_dT[] = "idBvirial_dT";
static const char __pyx_k_idCvirial_dT[] = "idCvirial_dT";
static const char __pyx_k_ispeed_sound[] = "ispeed_sound";
static const char __pyx_k_DmassP_INPUTS[] = "DmassP_INPUTS";
static const char __pyx_k_DmassQ_INPUTS[] = "DmassQ_INPUTS";
static const char __pyx_k_DmassT_INPUTS[] = "DmassT_INPUTS";
static const char __pyx_k_HmassP_INPUTS[] = "HmassP_INPUTS";
static const char __pyx_k_HmassQ_INPUTS[] = "HmassQ_INPUTS";
static const char __pyx_k_HmassT_INPUTS[] = "HmassT_INPUTS";
static const char __pyx_k_PSmass_INPUTS[] = "PSmass_INPUTS";
static const char __pyx_k_PUmass_INPUTS[] = "PUmass_INPUTS";
static const char __pyx_k_QSmass_INPUTS[] = "QSmass_INPUTS";
static const char __pyx_k_SmassT_INPUTS[] = "SmassT_INPUTS";
static const char __pyx_k_TUmass_INPUTS[] = "TUmass_INPUTS";
static const char __pyx_k_iconductivity[] = "iconductivity";
static const char __pyx_k_ifraction_max[] = "ifraction_max";
static const char __pyx_k_ifraction_min[] = "ifraction_min";
static const char __pyx_k_igas_constant[] = "igas_constant";
static const char __pyx_k_iphase_liquid[] = "iphase_liquid";
static const char __pyx_k_DmolarP_INPUTS[] = "DmolarP_INPUTS";
static const char __pyx_k_DmolarQ_INPUTS[] = "DmolarQ_INPUTS";
static const char __pyx_k_DmolarT_INPUTS[] = "DmolarT_INPUTS";
static const char __pyx_k_HmolarP_INPUTS[] = "HmolarP_INPUTS";
static const char __pyx_k_HmolarQ_INPUTS[] = "HmolarQ_INPUTS";
static const char __pyx_k_HmolarT_INPUTS[] = "HmolarT_INPUTS";
static const char __pyx_k_PSmolar_INPUTS[] = "PSmolar_INPUTS";
static const char __pyx_k_PUmolar_INPUTS[] = "PUmolar_INPUTS";
static const char __pyx_k_QSmolar_INPUTS[] = "QSmolar_INPUTS";
static const char __pyx_k_SmolarT_INPUTS[] = "SmolarT_INPUTS";
static const char __pyx_k_TUmolar_INPUTS[] = "TUmolar_INPUTS";
static const char __pyx_k_iHelmholtzmass[] = "iHelmholtzmass";
static const char __pyx_k_idipole_moment[] = "idipole_moment";
static const char __pyx_k_iphase_unknown[] = "iphase_unknown";
static const char __pyx_k_FLUID_TYPE_PURE[] = "FLUID_TYPE_PURE";
static const char __pyx_k_SAVE_RAW_TABLES[] = "SAVE_RAW_TABLES";
static const char __pyx_k_iHelmholtzmolar[] = "iHelmholtzmolar";
static const char __pyx_k_iphase_twophase[] = "iphase_twophase";
static const char __pyx_k_OVERWRITE_FLUIDS[] = "OVERWRITE_FLUIDS";
static const char __pyx_k_REFPROP_USE_GERG[] = "REFPROP_USE_GERG";
static const char __pyx_k_VTPR_UNIFAC_PATH[] = "VTPR_UNIFAC_PATH";
static const char __pyx_k_iGmolar_residual[] = "iGmolar_residual";
static const char __pyx_k_iHmolar_residual[] = "iHmolar_residual";
static const char __pyx_k_iSmolar_residual[] = "iSmolar_residual";
static const char __pyx_k_iacentric_factor[] = "iacentric_factor";
static const char __pyx_k_isurface_tension[] = "isurface_tension";
static const char __pyx_k_DmassHmass_INPUTS[] = "DmassHmass_INPUTS";
static const char __pyx_k_DmassSmass_INPUTS[] = "DmassSmass_INPUTS";
static const char __pyx_k_DmassUmass_INPUTS[] = "DmassUmass_INPUTS";
static const char __pyx_k_FLOAT_PUNCTUATION[] = "FLOAT_PUNCTUATION";
static const char __pyx_k_HmassSmass_INPUTS[] = "HmassSmass_INPUTS";
static const char __pyx_k_INVALID_PARAMETER[] = "INVALID_PARAMETER";
static const char __pyx_k_SmassUmass_INPUTS[] = "SmassUmass_INPUTS";
static const char __pyx_k_irhomass_critical[] = "irhomass_critical";
static const char __pyx_k_irhomass_reducing[] = "irhomass_reducing";
static const char __pyx_k_FLUID_TYPE_REFPROP[] = "FLUID_TYPE_REFPROP";
static const char __pyx_k_INPUT_PAIR_INVALID[] = "INPUT_PAIR_INVALID";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_iphase_not_imposed[] = "iphase_not_imposed";
static const char __pyx_k_irhomolar_critical[] = "irhomolar_critical";
static const char __pyx_k_irhomolar_reducing[] = "irhomolar_reducing";
static const char __pyx_k_CRITICAL_WITHIN_1UK[] = "CRITICAL_WITHIN_1UK";
static const char __pyx_k_DmolarHmolar_INPUTS[] = "DmolarHmolar_INPUTS";
static const char __pyx_k_DmolarSmolar_INPUTS[] = "DmolarSmolar_INPUTS";
static const char __pyx_k_DmolarUmolar_INPUTS[] = "DmolarUmolar_INPUTS";
static const char __pyx_k_HmolarSmolar_INPUTS[] = "HmolarSmolar_INPUTS";
static const char __pyx_k_SmolarUmolar_INPUTS[] = "SmolarUmolar_INPUTS";
static const char __pyx_k_FLUID_TYPE_UNDEFINED[] = "FLUID_TYPE_UNDEFINED";
static const char __pyx_k_iphase_supercritical[] = "iphase_supercritical";
static const char __pyx_k_iundefined_parameter[] = "iundefined_parameter";
static const char __pyx_k_FLUID_TYPE_PSEUDOPURE[] = "FLUID_TYPE_PSEUDOPURE";
static const char __pyx_k_LIST_STRING_DELIMITER[] = "LIST_STRING_DELIMITER";
static const char __pyx_k_iphase_critical_point[] = "iphase_critical_point";
static const char __pyx_k_SPINODAL_MINIMUM_DELTA[] = "SPINODAL_MINIMUM_DELTA";
static const char __pyx_k_USE_GUESSES_IN_PROPSSI[] = "USE_GUESSES_IN_PROPSSI";
static const char __pyx_k_NORMALIZE_GAS_CONSTANTS[] = "NORMALIZE_GAS_CONSTANTS";
static const char __pyx_k_REFPROP_ERROR_THRESHOLD[] = "REFPROP_ERROR_THRESHOLD";
static const char __pyx_k_ALTERNATIVE_REFPROP_PATH[] = "ALTERNATIVE_REFPROP_PATH";
static const char __pyx_k_CRITICAL_SPLINES_ENABLED[] = "CRITICAL_SPLINES_ENABLED";
static const char __pyx_k_REFPROP_USE_PENGROBINSON[] = "REFPROP_USE_PENGROBINSON";
static const char __pyx_k_idalpha0_ddelta_consttau[] = "idalpha0_ddelta_consttau";
static const char __pyx_k_idalpha0_dtau_constdelta[] = "idalpha0_dtau_constdelta";
static const char __pyx_k_idalphar_ddelta_consttau[] = "idalphar_ddelta_consttau";
static const char __pyx_k_idalphar_dtau_constdelta[] = "idalphar_dtau_constdelta";
static const char __pyx_k_iphase_supercritical_gas[] = "iphase_supercritical_gas";
static const char __pyx_k_DONT_CHECK_PROPERTY_LIMITS[] = "DONT_CHECK_PROPERTY_LIMITS";
static const char __pyx_k_VTPR_ALWAYS_RELOAD_LIBRARY[] = "VTPR_ALWAYS_RELOAD_LIBRARY";
static const char __pyx_k_id2alpha0_ddelta2_consttau[] = "id2alpha0_ddelta2_consttau";
static const char __pyx_k_id3alpha0_ddelta3_consttau[] = "id3alpha0_ddelta3_consttau";
static const char __pyx_k_iisothermal_compressibility[] = "iisothermal_compressibility";
static const char __pyx_k_iphase_supercritical_liquid[] = "iphase_supercritical_liquid";
static const char __pyx_k_ALTERNATIVE_TABLES_DIRECTORY[] = "ALTERNATIVE_TABLES_DIRECTORY";
static const char __pyx_k_ASSUME_CRITICAL_POINT_STABLE[] = "ASSUME_CRITICAL_POINT_STABLE";
static const char __pyx_k_OVERWRITE_BINARY_INTERACTION[] = "OVERWRITE_BINARY_INTERACTION";
static const char __pyx_k_OVERWRITE_DEPARTURE_FUNCTION[] = "OVERWRITE_DEPARTURE_FUNCTION";
static const char __pyx_k_MAXIMUM_TABLE_DIRECTORY_SIZE_IN[] = "MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB";
static const char __pyx_k_iisobaric_expansion_coefficient[] = "iisobaric_expansion_coefficient";
static const char __pyx_k_ALTERNATIVE_REFPROP_HMX_BNC_PATH[] = "ALTERNATIVE_REFPROP_HMX_BNC_PATH";
static const char __pyx_k_ALTERNATIVE_REFPROP_LIBRARY_PATH[] = "ALTERNATIVE_REFPROP_LIBRARY_PATH";
static const char __pyx_k_FLUID_TYPE_INCOMPRESSIBLE_LIQUID[] = "FLUID_TYPE_INCOMPRESSIBLE_LIQUID";
static const char __pyx_k_FLUID_TYPE_INCOMPRESSIBLE_SOLUTI[] = "FLUID_TYPE_INCOMPRESSIBLE_SOLUTION";
static const char __pyx_k_HENRYS_LAW_TO_GENERATE_VLE_GUESS[] = "HENRYS_LAW_TO_GENERATE_VLE_GUESSES";
static const char __pyx_k_PHASE_ENVELOPE_STARTING_PRESSURE[] = "PHASE_ENVELOPE_STARTING_PRESSURE_PA";
static const char __pyx_k_REFPROP_DONT_ESTIMATE_INTERACTIO[] = "REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS";
static const char __pyx_k_REFPROP_IGNORE_ERROR_ESTIMATED_I[] = "REFPROP_IGNORE_ERROR_ESTIMATED_INTERACTION_PARAMETERS";
static const char __pyx_k_ifundamental_derivative_of_gas_d[] = "ifundamental_derivative_of_gas_dynamics";
static const char __pyx_k_iisentropic_expansion_coefficien[] = "iisentropic_expansion_coefficient";
static PyObject *__pyx_n_s_ALTERNATIVE_REFPROP_HMX_BNC_PATH;
static PyObject *__pyx_n_s_ALTERNATIVE_REFPROP_LIBRARY_PATH;
static PyObject *__pyx_n_s_ALTERNATIVE_REFPROP_PATH;
static PyObject *__pyx_n_s_ALTERNATIVE_TABLES_DIRECTORY;
static PyObject *__pyx_n_s_ASSUME_CRITICAL_POINT_STABLE;
static PyObject *__pyx_n_s_CRITICAL_SPLINES_ENABLED;
static PyObject *__pyx_n_s_CRITICAL_WITHIN_1UK;
static PyObject *__pyx_n_s_DONT_CHECK_PROPERTY_LIMITS;
static PyObject *__pyx_n_s_DmassHmass_INPUTS;
static PyObject *__pyx_n_s_DmassP_INPUTS;
static PyObject *__pyx_n_s_DmassQ_INPUTS;
static PyObject *__pyx_n_s_DmassSmass_INPUTS;
static PyObject *__pyx_n_s_DmassT_INPUTS;
static PyObject *__pyx_n_s_DmassUmass_INPUTS;
static PyObject *__pyx_n_s_DmolarHmolar_INPUTS;
static PyObject *__pyx_n_s_DmolarP_INPUTS;
static PyObject *__pyx_n_s_DmolarQ_INPUTS;
static PyObject *__pyx_n_s_DmolarSmolar_INPUTS;
static PyObject *__pyx_n_s_DmolarT_INPUTS;
static PyObject *__pyx_n_s_DmolarUmolar_INPUTS;
static PyObject *__pyx_n_s_FLOAT_PUNCTUATION;
static PyObject *__pyx_n_s_FLUID_TYPE_INCOMPRESSIBLE_LIQUID;
static PyObject *__pyx_n_s_FLUID_TYPE_INCOMPRESSIBLE_SOLUTI;
static PyObject *__pyx_n_s_FLUID_TYPE_PSEUDOPURE;
static PyObject *__pyx_n_s_FLUID_TYPE_PURE;
static PyObject *__pyx_n_s_FLUID_TYPE_REFPROP;
static PyObject *__pyx_n_s_FLUID_TYPE_UNDEFINED;
static PyObject *__pyx_n_s_HENRYS_LAW_TO_GENERATE_VLE_GUESS;
static PyObject *__pyx_n_s_HmassP_INPUTS;
static PyObject *__pyx_n_s_HmassQ_INPUTS;
static PyObject *__pyx_n_s_HmassSmass_INPUTS;
static PyObject *__pyx_n_s_HmassT_INPUTS;
static PyObject *__pyx_n_s_HmolarP_INPUTS;
static PyObject *__pyx_n_s_HmolarQ_INPUTS;
static PyObject *__pyx_n_s_HmolarSmolar_INPUTS;
static PyObject *__pyx_n_s_HmolarT_INPUTS;
static PyObject *__pyx_n_s_INPUT_PAIR_INVALID;
static PyObject *__pyx_n_s_INVALID_PARAMETER;
static PyObject *__pyx_n_s_LIST_STRING_DELIMITER;
static PyObject *__pyx_n_s_MAXIMUM_TABLE_DIRECTORY_SIZE_IN;
static PyObject *__pyx_n_s_NORMALIZE_GAS_CONSTANTS;
static PyObject *__pyx_n_s_OVERWRITE_BINARY_INTERACTION;
static PyObject *__pyx_n_s_OVERWRITE_DEPARTURE_FUNCTION;
static PyObject *__pyx_n_s_OVERWRITE_FLUIDS;
static PyObject *__pyx_n_s_PHASE_ENVELOPE_STARTING_PRESSURE;
static PyObject *__pyx_n_s_PQ_INPUTS;
static PyObject *__pyx_n_s_PSmass_INPUTS;
static PyObject *__pyx_n_s_PSmolar_INPUTS;
static PyObject *__pyx_n_s_PT_INPUTS;
static PyObject *__pyx_n_s_PUmass_INPUTS;
static PyObject *__pyx_n_s_PUmolar_INPUTS;
static PyObject *__pyx_n_s_QSmass_INPUTS;
static PyObject *__pyx_n_s_QSmolar_INPUTS;
static PyObject *__pyx_n_s_QT_INPUTS;
static PyObject *__pyx_n_s_REFPROP_DONT_ESTIMATE_INTERACTIO;
static PyObject *__pyx_n_s_REFPROP_ERROR_THRESHOLD;
static PyObject *__pyx_n_s_REFPROP_IGNORE_ERROR_ESTIMATED_I;
static PyObject *__pyx_n_s_REFPROP_USE_GERG;
static PyObject *__pyx_n_s_REFPROP_USE_PENGROBINSON;
static PyObject *__pyx_n_s_R_U_CODATA;
static PyObject *__pyx_n_s_SAVE_RAW_TABLES;
static PyObject *__pyx_n_s_SPINODAL_MINIMUM_DELTA;
static PyObject *__pyx_n_s_SmassT_INPUTS;
static PyObject *__pyx_n_s_SmassUmass_INPUTS;
static PyObject *__pyx_n_s_SmolarT_INPUTS;
static PyObject *__pyx_n_s_SmolarUmolar_INPUTS;
static PyObject *__pyx_n_s_TUmass_INPUTS;
static PyObject *__pyx_n_s_TUmolar_INPUTS;
static PyObject *__pyx_n_s_USE_GUESSES_IN_PROPSSI;
static PyObject *__pyx_n_s_VTPR_ALWAYS_RELOAD_LIBRARY;
static PyObject *__pyx_n_s_VTPR_UNIFAC_PATH;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_iBvirial;
static PyObject *__pyx_n_s_iCp0mass;
static PyObject *__pyx_n_s_iCp0molar;
static PyObject *__pyx_n_s_iCpmass;
static PyObject *__pyx_n_s_iCpmolar;
static PyObject *__pyx_n_s_iCvirial;
static PyObject *__pyx_n_s_iCvmass;
static PyObject *__pyx_n_s_iCvmolar;
static PyObject *__pyx_n_s_iDelta;
static PyObject *__pyx_n_s_iDmass;
static PyObject *__pyx_n_s_iDmolar;
static PyObject *__pyx_n_s_iFH;
static PyObject *__pyx_n_s_iGWP100;
static PyObject *__pyx_n_s_iGWP20;
static PyObject *__pyx_n_s_iGWP500;
static PyObject *__pyx_n_s_iGmass;
static PyObject *__pyx_n_s_iGmolar;
static PyObject *__pyx_n_s_iGmolar_residual;
static PyObject *__pyx_n_s_iHH;
static PyObject *__pyx_n_s_iHelmholtzmass;
static PyObject *__pyx_n_s_iHelmholtzmolar;
static PyObject *__pyx_n_s_iHmass;
static PyObject *__pyx_n_s_iHmolar;
static PyObject *__pyx_n_s_iHmolar_residual;
static PyObject *__pyx_n_s_iODP;
static PyObject *__pyx_n_s_iP;
static PyObject *__pyx_n_s_iPH;
static PyObject *__pyx_n_s_iPIP;
static PyObject *__pyx_n_s_iP_critical;
static PyObject *__pyx_n_s_iP_max;
static PyObject *__pyx_n_s_iP_min;
static PyObject *__pyx_n_s_iP_reducing;
static PyObject *__pyx_n_s_iP_triple;
static PyObject *__pyx_n_s_iPhase;
static PyObject *__pyx_n_s_iPrandtl;
static PyObject *__pyx_n_s_iQ;
static PyObject *__pyx_n_s_iSmass;
static PyObject *__pyx_n_s_iSmolar;
static PyObject *__pyx_n_s_iSmolar_residual;
static PyObject *__pyx_n_s_iT;
static PyObject *__pyx_n_s_iT_critical;
static PyObject *__pyx_n_s_iT_freeze;
static PyObject *__pyx_n_s_iT_max;
static PyObject *__pyx_n_s_iT_min;
static PyObject *__pyx_n_s_iT_reducing;
static PyObject *__pyx_n_s_iT_triple;
static PyObject *__pyx_n_s_iTau;
static PyObject *__pyx_n_s_iUmass;
static PyObject *__pyx_n_s_iUmolar;
static PyObject *__pyx_n_s_iZ;
static PyObject *__pyx_n_s_iacentric_factor;
static PyObject *__pyx_n_s_ialpha0;
static PyObject *__pyx_n_s_ialphar;
static PyObject *__pyx_n_s_iconductivity;
static PyObject *__pyx_n_s_id2alpha0_ddelta2_consttau;
static PyObject *__pyx_n_s_id3alpha0_ddelta3_consttau;
static PyObject *__pyx_n_s_idBvirial_dT;
static PyObject *__pyx_n_s_idCvirial_dT;
static PyObject *__pyx_n_s_idalpha0_ddelta_consttau;
static PyObject *__pyx_n_s_idalpha0_dtau_constdelta;
static PyObject *__pyx_n_s_idalphar_ddelta_consttau;
static PyObject *__pyx_n_s_idalphar_dtau_constdelta;
static PyObject *__pyx_n_s_idipole_moment;
static PyObject *__pyx_n_s_ifraction_max;
static PyObject *__pyx_n_s_ifraction_min;
static PyObject *__pyx_n_s_ifundamental_derivative_of_gas_d;
static PyObject *__pyx_n_s_igas_constant;
static PyObject *__pyx_n_s_iisentropic_expansion_coefficien;
static PyObject *__pyx_n_s_iisobaric_expansion_coefficient;
static PyObject *__pyx_n_s_iisothermal_compressibility;
static PyObject *__pyx_n_s_imolar_mass;
static PyObject *__pyx_n_s_iphase_critical_point;
static PyObject *__pyx_n_s_iphase_gas;
static PyObject *__pyx_n_s_iphase_liquid;
static PyObject *__pyx_n_s_iphase_not_imposed;
static PyObject *__pyx_n_s_iphase_supercritical;
static PyObject *__pyx_n_s_iphase_supercritical_gas;
static PyObject *__pyx_n_s_iphase_supercritical_liquid;
static PyObject *__pyx_n_s_iphase_twophase;
static PyObject *__pyx_n_s_iphase_unknown;
static PyObject *__pyx_n_s_irhomass_critical;
static PyObject *__pyx_n_s_irhomass_reducing;
static PyObject *__pyx_n_s_irhomolar_critical;
static PyObject *__pyx_n_s_irhomolar_reducing;
static PyObject *__pyx_n_s_ispeed_sound;
static PyObject *__pyx_n_s_isurface_tension;
static PyObject *__pyx_n_s_iundefined_parameter;
static PyObject *__pyx_n_s_iviscosity;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_test;
/* Late includes */

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__constants(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__constants},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_constants",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ALTERNATIVE_REFPROP_HMX_BNC_PATH, __pyx_k_ALTERNATIVE_REFPROP_HMX_BNC_PATH, sizeof(__pyx_k_ALTERNATIVE_REFPROP_HMX_BNC_PATH), 0, 0, 1, 1},
  {&__pyx_n_s_ALTERNATIVE_REFPROP_LIBRARY_PATH, __pyx_k_ALTERNATIVE_REFPROP_LIBRARY_PATH, sizeof(__pyx_k_ALTERNATIVE_REFPROP_LIBRARY_PATH), 0, 0, 1, 1},
  {&__pyx_n_s_ALTERNATIVE_REFPROP_PATH, __pyx_k_ALTERNATIVE_REFPROP_PATH, sizeof(__pyx_k_ALTERNATIVE_REFPROP_PATH), 0, 0, 1, 1},
  {&__pyx_n_s_ALTERNATIVE_TABLES_DIRECTORY, __pyx_k_ALTERNATIVE_TABLES_DIRECTORY, sizeof(__pyx_k_ALTERNATIVE_TABLES_DIRECTORY), 0, 0, 1, 1},
  {&__pyx_n_s_ASSUME_CRITICAL_POINT_STABLE, __pyx_k_ASSUME_CRITICAL_POINT_STABLE, sizeof(__pyx_k_ASSUME_CRITICAL_POINT_STABLE), 0, 0, 1, 1},
  {&__pyx_n_s_CRITICAL_SPLINES_ENABLED, __pyx_k_CRITICAL_SPLINES_ENABLED, sizeof(__pyx_k_CRITICAL_SPLINES_ENABLED), 0, 0, 1, 1},
  {&__pyx_n_s_CRITICAL_WITHIN_1UK, __pyx_k_CRITICAL_WITHIN_1UK, sizeof(__pyx_k_CRITICAL_WITHIN_1UK), 0, 0, 1, 1},
  {&__pyx_n_s_DONT_CHECK_PROPERTY_LIMITS, __pyx_k_DONT_CHECK_PROPERTY_LIMITS, sizeof(__pyx_k_DONT_CHECK_PROPERTY_LIMITS), 0, 0, 1, 1},
  {&__pyx_n_s_DmassHmass_INPUTS, __pyx_k_DmassHmass_INPUTS, sizeof(__pyx_k_DmassHmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmassP_INPUTS, __pyx_k_DmassP_INPUTS, sizeof(__pyx_k_DmassP_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmassQ_INPUTS, __pyx_k_DmassQ_INPUTS, sizeof(__pyx_k_DmassQ_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmassSmass_INPUTS, __pyx_k_DmassSmass_INPUTS, sizeof(__pyx_k_DmassSmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmassT_INPUTS, __pyx_k_DmassT_INPUTS, sizeof(__pyx_k_DmassT_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmassUmass_INPUTS, __pyx_k_DmassUmass_INPUTS, sizeof(__pyx_k_DmassUmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmolarHmolar_INPUTS, __pyx_k_DmolarHmolar_INPUTS, sizeof(__pyx_k_DmolarHmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmolarP_INPUTS, __pyx_k_DmolarP_INPUTS, sizeof(__pyx_k_DmolarP_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmolarQ_INPUTS, __pyx_k_DmolarQ_INPUTS, sizeof(__pyx_k_DmolarQ_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmolarSmolar_INPUTS, __pyx_k_DmolarSmolar_INPUTS, sizeof(__pyx_k_DmolarSmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmolarT_INPUTS, __pyx_k_DmolarT_INPUTS, sizeof(__pyx_k_DmolarT_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_DmolarUmolar_INPUTS, __pyx_k_DmolarUmolar_INPUTS, sizeof(__pyx_k_DmolarUmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_FLOAT_PUNCTUATION, __pyx_k_FLOAT_PUNCTUATION, sizeof(__pyx_k_FLOAT_PUNCTUATION), 0, 0, 1, 1},
  {&__pyx_n_s_FLUID_TYPE_INCOMPRESSIBLE_LIQUID, __pyx_k_FLUID_TYPE_INCOMPRESSIBLE_LIQUID, sizeof(__pyx_k_FLUID_TYPE_INCOMPRESSIBLE_LIQUID), 0, 0, 1, 1},
  {&__pyx_n_s_FLUID_TYPE_INCOMPRESSIBLE_SOLUTI, __pyx_k_FLUID_TYPE_INCOMPRESSIBLE_SOLUTI, sizeof(__pyx_k_FLUID_TYPE_INCOMPRESSIBLE_SOLUTI), 0, 0, 1, 1},
  {&__pyx_n_s_FLUID_TYPE_PSEUDOPURE, __pyx_k_FLUID_TYPE_PSEUDOPURE, sizeof(__pyx_k_FLUID_TYPE_PSEUDOPURE), 0, 0, 1, 1},
  {&__pyx_n_s_FLUID_TYPE_PURE, __pyx_k_FLUID_TYPE_PURE, sizeof(__pyx_k_FLUID_TYPE_PURE), 0, 0, 1, 1},
  {&__pyx_n_s_FLUID_TYPE_REFPROP, __pyx_k_FLUID_TYPE_REFPROP, sizeof(__pyx_k_FLUID_TYPE_REFPROP), 0, 0, 1, 1},
  {&__pyx_n_s_FLUID_TYPE_UNDEFINED, __pyx_k_FLUID_TYPE_UNDEFINED, sizeof(__pyx_k_FLUID_TYPE_UNDEFINED), 0, 0, 1, 1},
  {&__pyx_n_s_HENRYS_LAW_TO_GENERATE_VLE_GUESS, __pyx_k_HENRYS_LAW_TO_GENERATE_VLE_GUESS, sizeof(__pyx_k_HENRYS_LAW_TO_GENERATE_VLE_GUESS), 0, 0, 1, 1},
  {&__pyx_n_s_HmassP_INPUTS, __pyx_k_HmassP_INPUTS, sizeof(__pyx_k_HmassP_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_HmassQ_INPUTS, __pyx_k_HmassQ_INPUTS, sizeof(__pyx_k_HmassQ_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_HmassSmass_INPUTS, __pyx_k_HmassSmass_INPUTS, sizeof(__pyx_k_HmassSmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_HmassT_INPUTS, __pyx_k_HmassT_INPUTS, sizeof(__pyx_k_HmassT_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_HmolarP_INPUTS, __pyx_k_HmolarP_INPUTS, sizeof(__pyx_k_HmolarP_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_HmolarQ_INPUTS, __pyx_k_HmolarQ_INPUTS, sizeof(__pyx_k_HmolarQ_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_HmolarSmolar_INPUTS, __pyx_k_HmolarSmolar_INPUTS, sizeof(__pyx_k_HmolarSmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_HmolarT_INPUTS, __pyx_k_HmolarT_INPUTS, sizeof(__pyx_k_HmolarT_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_PAIR_INVALID, __pyx_k_INPUT_PAIR_INVALID, sizeof(__pyx_k_INPUT_PAIR_INVALID), 0, 0, 1, 1},
  {&__pyx_n_s_INVALID_PARAMETER, __pyx_k_INVALID_PARAMETER, sizeof(__pyx_k_INVALID_PARAMETER), 0, 0, 1, 1},
  {&__pyx_n_s_LIST_STRING_DELIMITER, __pyx_k_LIST_STRING_DELIMITER, sizeof(__pyx_k_LIST_STRING_DELIMITER), 0, 0, 1, 1},
  {&__pyx_n_s_MAXIMUM_TABLE_DIRECTORY_SIZE_IN, __pyx_k_MAXIMUM_TABLE_DIRECTORY_SIZE_IN, sizeof(__pyx_k_MAXIMUM_TABLE_DIRECTORY_SIZE_IN), 0, 0, 1, 1},
  {&__pyx_n_s_NORMALIZE_GAS_CONSTANTS, __pyx_k_NORMALIZE_GAS_CONSTANTS, sizeof(__pyx_k_NORMALIZE_GAS_CONSTANTS), 0, 0, 1, 1},
  {&__pyx_n_s_OVERWRITE_BINARY_INTERACTION, __pyx_k_OVERWRITE_BINARY_INTERACTION, sizeof(__pyx_k_OVERWRITE_BINARY_INTERACTION), 0, 0, 1, 1},
  {&__pyx_n_s_OVERWRITE_DEPARTURE_FUNCTION, __pyx_k_OVERWRITE_DEPARTURE_FUNCTION, sizeof(__pyx_k_OVERWRITE_DEPARTURE_FUNCTION), 0, 0, 1, 1},
  {&__pyx_n_s_OVERWRITE_FLUIDS, __pyx_k_OVERWRITE_FLUIDS, sizeof(__pyx_k_OVERWRITE_FLUIDS), 0, 0, 1, 1},
  {&__pyx_n_s_PHASE_ENVELOPE_STARTING_PRESSURE, __pyx_k_PHASE_ENVELOPE_STARTING_PRESSURE, sizeof(__pyx_k_PHASE_ENVELOPE_STARTING_PRESSURE), 0, 0, 1, 1},
  {&__pyx_n_s_PQ_INPUTS, __pyx_k_PQ_INPUTS, sizeof(__pyx_k_PQ_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_PSmass_INPUTS, __pyx_k_PSmass_INPUTS, sizeof(__pyx_k_PSmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_PSmolar_INPUTS, __pyx_k_PSmolar_INPUTS, sizeof(__pyx_k_PSmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_PT_INPUTS, __pyx_k_PT_INPUTS, sizeof(__pyx_k_PT_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_PUmass_INPUTS, __pyx_k_PUmass_INPUTS, sizeof(__pyx_k_PUmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_PUmolar_INPUTS, __pyx_k_PUmolar_INPUTS, sizeof(__pyx_k_PUmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_QSmass_INPUTS, __pyx_k_QSmass_INPUTS, sizeof(__pyx_k_QSmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_QSmolar_INPUTS, __pyx_k_QSmolar_INPUTS, sizeof(__pyx_k_QSmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_QT_INPUTS, __pyx_k_QT_INPUTS, sizeof(__pyx_k_QT_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_REFPROP_DONT_ESTIMATE_INTERACTIO, __pyx_k_REFPROP_DONT_ESTIMATE_INTERACTIO, sizeof(__pyx_k_REFPROP_DONT_ESTIMATE_INTERACTIO), 0, 0, 1, 1},
  {&__pyx_n_s_REFPROP_ERROR_THRESHOLD, __pyx_k_REFPROP_ERROR_THRESHOLD, sizeof(__pyx_k_REFPROP_ERROR_THRESHOLD), 0, 0, 1, 1},
  {&__pyx_n_s_REFPROP_IGNORE_ERROR_ESTIMATED_I, __pyx_k_REFPROP_IGNORE_ERROR_ESTIMATED_I, sizeof(__pyx_k_REFPROP_IGNORE_ERROR_ESTIMATED_I), 0, 0, 1, 1},
  {&__pyx_n_s_REFPROP_USE_GERG, __pyx_k_REFPROP_USE_GERG, sizeof(__pyx_k_REFPROP_USE_GERG), 0, 0, 1, 1},
  {&__pyx_n_s_REFPROP_USE_PENGROBINSON, __pyx_k_REFPROP_USE_PENGROBINSON, sizeof(__pyx_k_REFPROP_USE_PENGROBINSON), 0, 0, 1, 1},
  {&__pyx_n_s_R_U_CODATA, __pyx_k_R_U_CODATA, sizeof(__pyx_k_R_U_CODATA), 0, 0, 1, 1},
  {&__pyx_n_s_SAVE_RAW_TABLES, __pyx_k_SAVE_RAW_TABLES, sizeof(__pyx_k_SAVE_RAW_TABLES), 0, 0, 1, 1},
  {&__pyx_n_s_SPINODAL_MINIMUM_DELTA, __pyx_k_SPINODAL_MINIMUM_DELTA, sizeof(__pyx_k_SPINODAL_MINIMUM_DELTA), 0, 0, 1, 1},
  {&__pyx_n_s_SmassT_INPUTS, __pyx_k_SmassT_INPUTS, sizeof(__pyx_k_SmassT_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_SmassUmass_INPUTS, __pyx_k_SmassUmass_INPUTS, sizeof(__pyx_k_SmassUmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_SmolarT_INPUTS, __pyx_k_SmolarT_INPUTS, sizeof(__pyx_k_SmolarT_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_SmolarUmolar_INPUTS, __pyx_k_SmolarUmolar_INPUTS, sizeof(__pyx_k_SmolarUmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_TUmass_INPUTS, __pyx_k_TUmass_INPUTS, sizeof(__pyx_k_TUmass_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_TUmolar_INPUTS, __pyx_k_TUmolar_INPUTS, sizeof(__pyx_k_TUmolar_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_USE_GUESSES_IN_PROPSSI, __pyx_k_USE_GUESSES_IN_PROPSSI, sizeof(__pyx_k_USE_GUESSES_IN_PROPSSI), 0, 0, 1, 1},
  {&__pyx_n_s_VTPR_ALWAYS_RELOAD_LIBRARY, __pyx_k_VTPR_ALWAYS_RELOAD_LIBRARY, sizeof(__pyx_k_VTPR_ALWAYS_RELOAD_LIBRARY), 0, 0, 1, 1},
  {&__pyx_n_s_VTPR_UNIFAC_PATH, __pyx_k_VTPR_UNIFAC_PATH, sizeof(__pyx_k_VTPR_UNIFAC_PATH), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_iBvirial, __pyx_k_iBvirial, sizeof(__pyx_k_iBvirial), 0, 0, 1, 1},
  {&__pyx_n_s_iCp0mass, __pyx_k_iCp0mass, sizeof(__pyx_k_iCp0mass), 0, 0, 1, 1},
  {&__pyx_n_s_iCp0molar, __pyx_k_iCp0molar, sizeof(__pyx_k_iCp0molar), 0, 0, 1, 1},
  {&__pyx_n_s_iCpmass, __pyx_k_iCpmass, sizeof(__pyx_k_iCpmass), 0, 0, 1, 1},
  {&__pyx_n_s_iCpmolar, __pyx_k_iCpmolar, sizeof(__pyx_k_iCpmolar), 0, 0, 1, 1},
  {&__pyx_n_s_iCvirial, __pyx_k_iCvirial, sizeof(__pyx_k_iCvirial), 0, 0, 1, 1},
  {&__pyx_n_s_iCvmass, __pyx_k_iCvmass, sizeof(__pyx_k_iCvmass), 0, 0, 1, 1},
  {&__pyx_n_s_iCvmolar, __pyx_k_iCvmolar, sizeof(__pyx_k_iCvmolar), 0, 0, 1, 1},
  {&__pyx_n_s_iDelta, __pyx_k_iDelta, sizeof(__pyx_k_iDelta), 0, 0, 1, 1},
  {&__pyx_n_s_iDmass, __pyx_k_iDmass, sizeof(__pyx_k_iDmass), 0, 0, 1, 1},
  {&__pyx_n_s_iDmolar, __pyx_k_iDmolar, sizeof(__pyx_k_iDmolar), 0, 0, 1, 1},
  {&__pyx_n_s_iFH, __pyx_k_iFH, sizeof(__pyx_k_iFH), 0, 0, 1, 1},
  {&__pyx_n_s_iGWP100, __pyx_k_iGWP100, sizeof(__pyx_k_iGWP100), 0, 0, 1, 1},
  {&__pyx_n_s_iGWP20, __pyx_k_iGWP20, sizeof(__pyx_k_iGWP20), 0, 0, 1, 1},
  {&__pyx_n_s_iGWP500, __pyx_k_iGWP500, sizeof(__pyx_k_iGWP500), 0, 0, 1, 1},
  {&__pyx_n_s_iGmass, __pyx_k_iGmass, sizeof(__pyx_k_iGmass), 0, 0, 1, 1},
  {&__pyx_n_s_iGmolar, __pyx_k_iGmolar, sizeof(__pyx_k_iGmolar), 0, 0, 1, 1},
  {&__pyx_n_s_iGmolar_residual, __pyx_k_iGmolar_residual, sizeof(__pyx_k_iGmolar_residual), 0, 0, 1, 1},
  {&__pyx_n_s_iHH, __pyx_k_iHH, sizeof(__pyx_k_iHH), 0, 0, 1, 1},
  {&__pyx_n_s_iHelmholtzmass, __pyx_k_iHelmholtzmass, sizeof(__pyx_k_iHelmholtzmass), 0, 0, 1, 1},
  {&__pyx_n_s_iHelmholtzmolar, __pyx_k_iHelmholtzmolar, sizeof(__pyx_k_iHelmholtzmolar), 0, 0, 1, 1},
  {&__pyx_n_s_iHmass, __pyx_k_iHmass, sizeof(__pyx_k_iHmass), 0, 0, 1, 1},
  {&__pyx_n_s_iHmolar, __pyx_k_iHmolar, sizeof(__pyx_k_iHmolar), 0, 0, 1, 1},
  {&__pyx_n_s_iHmolar_residual, __pyx_k_iHmolar_residual, sizeof(__pyx_k_iHmolar_residual), 0, 0, 1, 1},
  {&__pyx_n_s_iODP, __pyx_k_iODP, sizeof(__pyx_k_iODP), 0, 0, 1, 1},
  {&__pyx_n_s_iP, __pyx_k_iP, sizeof(__pyx_k_iP), 0, 0, 1, 1},
  {&__pyx_n_s_iPH, __pyx_k_iPH, sizeof(__pyx_k_iPH), 0, 0, 1, 1},
  {&__pyx_n_s_iPIP, __pyx_k_iPIP, sizeof(__pyx_k_iPIP), 0, 0, 1, 1},
  {&__pyx_n_s_iP_critical, __pyx_k_iP_critical, sizeof(__pyx_k_iP_critical), 0, 0, 1, 1},
  {&__pyx_n_s_iP_max, __pyx_k_iP_max, sizeof(__pyx_k_iP_max), 0, 0, 1, 1},
  {&__pyx_n_s_iP_min, __pyx_k_iP_min, sizeof(__pyx_k_iP_min), 0, 0, 1, 1},
  {&__pyx_n_s_iP_reducing, __pyx_k_iP_reducing, sizeof(__pyx_k_iP_reducing), 0, 0, 1, 1},
  {&__pyx_n_s_iP_triple, __pyx_k_iP_triple, sizeof(__pyx_k_iP_triple), 0, 0, 1, 1},
  {&__pyx_n_s_iPhase, __pyx_k_iPhase, sizeof(__pyx_k_iPhase), 0, 0, 1, 1},
  {&__pyx_n_s_iPrandtl, __pyx_k_iPrandtl, sizeof(__pyx_k_iPrandtl), 0, 0, 1, 1},
  {&__pyx_n_s_iQ, __pyx_k_iQ, sizeof(__pyx_k_iQ), 0, 0, 1, 1},
  {&__pyx_n_s_iSmass, __pyx_k_iSmass, sizeof(__pyx_k_iSmass), 0, 0, 1, 1},
  {&__pyx_n_s_iSmolar, __pyx_k_iSmolar, sizeof(__pyx_k_iSmolar), 0, 0, 1, 1},
  {&__pyx_n_s_iSmolar_residual, __pyx_k_iSmolar_residual, sizeof(__pyx_k_iSmolar_residual), 0, 0, 1, 1},
  {&__pyx_n_s_iT, __pyx_k_iT, sizeof(__pyx_k_iT), 0, 0, 1, 1},
  {&__pyx_n_s_iT_critical, __pyx_k_iT_critical, sizeof(__pyx_k_iT_critical), 0, 0, 1, 1},
  {&__pyx_n_s_iT_freeze, __pyx_k_iT_freeze, sizeof(__pyx_k_iT_freeze), 0, 0, 1, 1},
  {&__pyx_n_s_iT_max, __pyx_k_iT_max, sizeof(__pyx_k_iT_max), 0, 0, 1, 1},
  {&__pyx_n_s_iT_min, __pyx_k_iT_min, sizeof(__pyx_k_iT_min), 0, 0, 1, 1},
  {&__pyx_n_s_iT_reducing, __pyx_k_iT_reducing, sizeof(__pyx_k_iT_reducing), 0, 0, 1, 1},
  {&__pyx_n_s_iT_triple, __pyx_k_iT_triple, sizeof(__pyx_k_iT_triple), 0, 0, 1, 1},
  {&__pyx_n_s_iTau, __pyx_k_iTau, sizeof(__pyx_k_iTau), 0, 0, 1, 1},
  {&__pyx_n_s_iUmass, __pyx_k_iUmass, sizeof(__pyx_k_iUmass), 0, 0, 1, 1},
  {&__pyx_n_s_iUmolar, __pyx_k_iUmolar, sizeof(__pyx_k_iUmolar), 0, 0, 1, 1},
  {&__pyx_n_s_iZ, __pyx_k_iZ, sizeof(__pyx_k_iZ), 0, 0, 1, 1},
  {&__pyx_n_s_iacentric_factor, __pyx_k_iacentric_factor, sizeof(__pyx_k_iacentric_factor), 0, 0, 1, 1},
  {&__pyx_n_s_ialpha0, __pyx_k_ialpha0, sizeof(__pyx_k_ialpha0), 0, 0, 1, 1},
  {&__pyx_n_s_ialphar, __pyx_k_ialphar, sizeof(__pyx_k_ialphar), 0, 0, 1, 1},
  {&__pyx_n_s_iconductivity, __pyx_k_iconductivity, sizeof(__pyx_k_iconductivity), 0, 0, 1, 1},
  {&__pyx_n_s_id2alpha0_ddelta2_consttau, __pyx_k_id2alpha0_ddelta2_consttau, sizeof(__pyx_k_id2alpha0_ddelta2_consttau), 0, 0, 1, 1},
  {&__pyx_n_s_id3alpha0_ddelta3_consttau, __pyx_k_id3alpha0_ddelta3_consttau, sizeof(__pyx_k_id3alpha0_ddelta3_consttau), 0, 0, 1, 1},
  {&__pyx_n_s_idBvirial_dT, __pyx_k_idBvirial_dT, sizeof(__pyx_k_idBvirial_dT), 0, 0, 1, 1},
  {&__pyx_n_s_idCvirial_dT, __pyx_k_idCvirial_dT, sizeof(__pyx_k_idCvirial_dT), 0, 0, 1, 1},
  {&__pyx_n_s_idalpha0_ddelta_consttau, __pyx_k_idalpha0_ddelta_consttau, sizeof(__pyx_k_idalpha0_ddelta_consttau), 0, 0, 1, 1},
  {&__pyx_n_s_idalpha0_dtau_constdelta, __pyx_k_idalpha0_dtau_constdelta, sizeof(__pyx_k_idalpha0_dtau_constdelta), 0, 0, 1, 1},
  {&__pyx_n_s_idalphar_ddelta_consttau, __pyx_k_idalphar_ddelta_consttau, sizeof(__pyx_k_idalphar_ddelta_consttau), 0, 0, 1, 1},
  {&__pyx_n_s_idalphar_dtau_constdelta, __pyx_k_idalphar_dtau_constdelta, sizeof(__pyx_k_idalphar_dtau_constdelta), 0, 0, 1, 1},
  {&__pyx_n_s_idipole_moment, __pyx_k_idipole_moment, sizeof(__pyx_k_idipole_moment), 0, 0, 1, 1},
  {&__pyx_n_s_ifraction_max, __pyx_k_ifraction_max, sizeof(__pyx_k_ifraction_max), 0, 0, 1, 1},
  {&__pyx_n_s_ifraction_min, __pyx_k_ifraction_min, sizeof(__pyx_k_ifraction_min), 0, 0, 1, 1},
  {&__pyx_n_s_ifundamental_derivative_of_gas_d, __pyx_k_ifundamental_derivative_of_gas_d, sizeof(__pyx_k_ifundamental_derivative_of_gas_d), 0, 0, 1, 1},
  {&__pyx_n_s_igas_constant, __pyx_k_igas_constant, sizeof(__pyx_k_igas_constant), 0, 0, 1, 1},
  {&__pyx_n_s_iisentropic_expansion_coefficien, __pyx_k_iisentropic_expansion_coefficien, sizeof(__pyx_k_iisentropic_expansion_coefficien), 0, 0, 1, 1},
  {&__pyx_n_s_iisobaric_expansion_coefficient, __pyx_k_iisobaric_expansion_coefficient, sizeof(__pyx_k_iisobaric_expansion_coefficient), 0, 0, 1, 1},
  {&__pyx_n_s_iisothermal_compressibility, __pyx_k_iisothermal_compressibility, sizeof(__pyx_k_iisothermal_compressibility), 0, 0, 1, 1},
  {&__pyx_n_s_imolar_mass, __pyx_k_imolar_mass, sizeof(__pyx_k_imolar_mass), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_critical_point, __pyx_k_iphase_critical_point, sizeof(__pyx_k_iphase_critical_point), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_gas, __pyx_k_iphase_gas, sizeof(__pyx_k_iphase_gas), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_liquid, __pyx_k_iphase_liquid, sizeof(__pyx_k_iphase_liquid), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_not_imposed, __pyx_k_iphase_not_imposed, sizeof(__pyx_k_iphase_not_imposed), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_supercritical, __pyx_k_iphase_supercritical, sizeof(__pyx_k_iphase_supercritical), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_supercritical_gas, __pyx_k_iphase_supercritical_gas, sizeof(__pyx_k_iphase_supercritical_gas), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_supercritical_liquid, __pyx_k_iphase_supercritical_liquid, sizeof(__pyx_k_iphase_supercritical_liquid), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_twophase, __pyx_k_iphase_twophase, sizeof(__pyx_k_iphase_twophase), 0, 0, 1, 1},
  {&__pyx_n_s_iphase_unknown, __pyx_k_iphase_unknown, sizeof(__pyx_k_iphase_unknown), 0, 0, 1, 1},
  {&__pyx_n_s_irhomass_critical, __pyx_k_irhomass_critical, sizeof(__pyx_k_irhomass_critical), 0, 0, 1, 1},
  {&__pyx_n_s_irhomass_reducing, __pyx_k_irhomass_reducing, sizeof(__pyx_k_irhomass_reducing), 0, 0, 1, 1},
  {&__pyx_n_s_irhomolar_critical, __pyx_k_irhomolar_critical, sizeof(__pyx_k_irhomolar_critical), 0, 0, 1, 1},
  {&__pyx_n_s_irhomolar_reducing, __pyx_k_irhomolar_reducing, sizeof(__pyx_k_irhomolar_reducing), 0, 0, 1, 1},
  {&__pyx_n_s_ispeed_sound, __pyx_k_ispeed_sound, sizeof(__pyx_k_ispeed_sound), 0, 0, 1, 1},
  {&__pyx_n_s_isurface_tension, __pyx_k_isurface_tension, sizeof(__pyx_k_isurface_tension), 0, 0, 1, 1},
  {&__pyx_n_s_iundefined_parameter, __pyx_k_iundefined_parameter, sizeof(__pyx_k_iundefined_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_iviscosity, __pyx_k_iviscosity, sizeof(__pyx_k_iviscosity), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_constants(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_constants(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__constants(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__constants(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__constants(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_constants' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__constants(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_constants", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_CoolProp___constants) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "CoolProp._constants")) {
      if (unlikely(PyDict_SetItemString(modules, "CoolProp._constants", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit__constants(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "CoolProp/_constants.pyx":5
 * from . cimport constants_header
 * 
 * INVALID_PARAMETER = constants_header.INVALID_PARAMETER             # <<<<<<<<<<<<<<
 * igas_constant = constants_header.igas_constant
 * imolar_mass = constants_header.imolar_mass
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::INVALID_PARAMETER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INVALID_PARAMETER, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":6
 * 
 * INVALID_PARAMETER = constants_header.INVALID_PARAMETER
 * igas_constant = constants_header.igas_constant             # <<<<<<<<<<<<<<
 * imolar_mass = constants_header.imolar_mass
 * iacentric_factor = constants_header.iacentric_factor
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::igas_constant); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_igas_constant, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":7
 * INVALID_PARAMETER = constants_header.INVALID_PARAMETER
 * igas_constant = constants_header.igas_constant
 * imolar_mass = constants_header.imolar_mass             # <<<<<<<<<<<<<<
 * iacentric_factor = constants_header.iacentric_factor
 * irhomolar_reducing = constants_header.irhomolar_reducing
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::imolar_mass); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_imolar_mass, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":8
 * igas_constant = constants_header.igas_constant
 * imolar_mass = constants_header.imolar_mass
 * iacentric_factor = constants_header.iacentric_factor             # <<<<<<<<<<<<<<
 * irhomolar_reducing = constants_header.irhomolar_reducing
 * irhomolar_critical = constants_header.irhomolar_critical
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iacentric_factor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iacentric_factor, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":9
 * imolar_mass = constants_header.imolar_mass
 * iacentric_factor = constants_header.iacentric_factor
 * irhomolar_reducing = constants_header.irhomolar_reducing             # <<<<<<<<<<<<<<
 * irhomolar_critical = constants_header.irhomolar_critical
 * iT_reducing = constants_header.iT_reducing
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::irhomolar_reducing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_irhomolar_reducing, __pyx_t_1) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":10
 * iacentric_factor = constants_header.iacentric_factor
 * irhomolar_reducing = constants_header.irhomolar_reducing
 * irhomolar_critical = constants_header.irhomolar_critical             # <<<<<<<<<<<<<<
 * iT_reducing = constants_header.iT_reducing
 * iT_critical = constants_header.iT_critical
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::irhomolar_critical); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_irhomolar_critical, __pyx_t_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":11
 * irhomolar_reducing = constants_header.irhomolar_reducing
 * irhomolar_critical = constants_header.irhomolar_critical
 * iT_reducing = constants_header.iT_reducing             # <<<<<<<<<<<<<<
 * iT_critical = constants_header.iT_critical
 * irhomass_reducing = constants_header.irhomass_reducing
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iT_reducing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iT_reducing, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":12
 * irhomolar_critical = constants_header.irhomolar_critical
 * iT_reducing = constants_header.iT_reducing
 * iT_critical = constants_header.iT_critical             # <<<<<<<<<<<<<<
 * irhomass_reducing = constants_header.irhomass_reducing
 * irhomass_critical = constants_header.irhomass_critical
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iT_critical); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iT_critical, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":13
 * iT_reducing = constants_header.iT_reducing
 * iT_critical = constants_header.iT_critical
 * irhomass_reducing = constants_header.irhomass_reducing             # <<<<<<<<<<<<<<
 * irhomass_critical = constants_header.irhomass_critical
 * iP_critical = constants_header.iP_critical
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::irhomass_reducing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_irhomass_reducing, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":14
 * iT_critical = constants_header.iT_critical
 * irhomass_reducing = constants_header.irhomass_reducing
 * irhomass_critical = constants_header.irhomass_critical             # <<<<<<<<<<<<<<
 * iP_critical = constants_header.iP_critical
 * iP_reducing = constants_header.iP_reducing
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::irhomass_critical); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_irhomass_critical, __pyx_t_1) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":15
 * irhomass_reducing = constants_header.irhomass_reducing
 * irhomass_critical = constants_header.irhomass_critical
 * iP_critical = constants_header.iP_critical             # <<<<<<<<<<<<<<
 * iP_reducing = constants_header.iP_reducing
 * iT_triple = constants_header.iT_triple
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iP_critical); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iP_critical, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":16
 * irhomass_critical = constants_header.irhomass_critical
 * iP_critical = constants_header.iP_critical
 * iP_reducing = constants_header.iP_reducing             # <<<<<<<<<<<<<<
 * iT_triple = constants_header.iT_triple
 * iP_triple = constants_header.iP_triple
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iP_reducing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iP_reducing, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":17
 * iP_critical = constants_header.iP_critical
 * iP_reducing = constants_header.iP_reducing
 * iT_triple = constants_header.iT_triple             # <<<<<<<<<<<<<<
 * iP_triple = constants_header.iP_triple
 * iT_min = constants_header.iT_min
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iT_triple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iT_triple, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":18
 * iP_reducing = constants_header.iP_reducing
 * iT_triple = constants_header.iT_triple
 * iP_triple = constants_header.iP_triple             # <<<<<<<<<<<<<<
 * iT_min = constants_header.iT_min
 * iT_max = constants_header.iT_max
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iP_triple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iP_triple, __pyx_t_1) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":19
 * iT_triple = constants_header.iT_triple
 * iP_triple = constants_header.iP_triple
 * iT_min = constants_header.iT_min             # <<<<<<<<<<<<<<
 * iT_max = constants_header.iT_max
 * iP_max = constants_header.iP_max
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iT_min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iT_min, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":20
 * iP_triple = constants_header.iP_triple
 * iT_min = constants_header.iT_min
 * iT_max = constants_header.iT_max             # <<<<<<<<<<<<<<
 * iP_max = constants_header.iP_max
 * iP_min = constants_header.iP_min
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iT_max); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iT_max, __pyx_t_1) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":21
 * iT_min = constants_header.iT_min
 * iT_max = constants_header.iT_max
 * iP_max = constants_header.iP_max             # <<<<<<<<<<<<<<
 * iP_min = constants_header.iP_min
 * idipole_moment = constants_header.idipole_moment
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iP_max); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iP_max, __pyx_t_1) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":22
 * iT_max = constants_header.iT_max
 * iP_max = constants_header.iP_max
 * iP_min = constants_header.iP_min             # <<<<<<<<<<<<<<
 * idipole_moment = constants_header.idipole_moment
 * iT = constants_header.iT
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iP_min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iP_min, __pyx_t_1) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":23
 * iP_max = constants_header.iP_max
 * iP_min = constants_header.iP_min
 * idipole_moment = constants_header.idipole_moment             # <<<<<<<<<<<<<<
 * iT = constants_header.iT
 * iP = constants_header.iP
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::idipole_moment); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_idipole_moment, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":24
 * iP_min = constants_header.iP_min
 * idipole_moment = constants_header.idipole_moment
 * iT = constants_header.iT             # <<<<<<<<<<<<<<
 * iP = constants_header.iP
 * iQ = constants_header.iQ
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iT, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":25
 * idipole_moment = constants_header.idipole_moment
 * iT = constants_header.iT
 * iP = constants_header.iP             # <<<<<<<<<<<<<<
 * iQ = constants_header.iQ
 * iTau = constants_header.iTau
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iP); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iP, __pyx_t_1) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":26
 * iT = constants_header.iT
 * iP = constants_header.iP
 * iQ = constants_header.iQ             # <<<<<<<<<<<<<<
 * iTau = constants_header.iTau
 * iDelta = constants_header.iDelta
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iQ); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iQ, __pyx_t_1) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":27
 * iP = constants_header.iP
 * iQ = constants_header.iQ
 * iTau = constants_header.iTau             # <<<<<<<<<<<<<<
 * iDelta = constants_header.iDelta
 * iDmolar = constants_header.iDmolar
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iTau); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iTau, __pyx_t_1) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":28
 * iQ = constants_header.iQ
 * iTau = constants_header.iTau
 * iDelta = constants_header.iDelta             # <<<<<<<<<<<<<<
 * iDmolar = constants_header.iDmolar
 * iHmolar = constants_header.iHmolar
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iDelta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iDelta, __pyx_t_1) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":29
 * iTau = constants_header.iTau
 * iDelta = constants_header.iDelta
 * iDmolar = constants_header.iDmolar             # <<<<<<<<<<<<<<
 * iHmolar = constants_header.iHmolar
 * iSmolar = constants_header.iSmolar
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iDmolar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iDmolar, __pyx_t_1) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":30
 * iDelta = constants_header.iDelta
 * iDmolar = constants_header.iDmolar
 * iHmolar = constants_header.iHmolar             # <<<<<<<<<<<<<<
 * iSmolar = constants_header.iSmolar
 * iCpmolar = constants_header.iCpmolar
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iHmolar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iHmolar, __pyx_t_1) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":31
 * iDmolar = constants_header.iDmolar
 * iHmolar = constants_header.iHmolar
 * iSmolar = constants_header.iSmolar             # <<<<<<<<<<<<<<
 * iCpmolar = constants_header.iCpmolar
 * iCp0molar = constants_header.iCp0molar
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iSmolar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iSmolar, __pyx_t_1) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":32
 * iHmolar = constants_header.iHmolar
 * iSmolar = constants_header.iSmolar
 * iCpmolar = constants_header.iCpmolar             # <<<<<<<<<<<<<<
 * iCp0molar = constants_header.iCp0molar
 * iCvmolar = constants_header.iCvmolar
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iCpmolar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iCpmolar, __pyx_t_1) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":33
 * iSmolar = constants_header.iSmolar
 * iCpmolar = constants_header.iCpmolar
 * iCp0molar = constants_header.iCp0molar             # <<<<<<<<<<<<<<
 * iCvmolar = constants_header.iCvmolar
 * iUmolar = constants_header.iUmolar
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iCp0molar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iCp0molar, __pyx_t_1) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":34
 * iCpmolar = constants_header.iCpmolar
 * iCp0molar = constants_header.iCp0molar
 * iCvmolar = constants_header.iCvmolar             # <<<<<<<<<<<<<<
 * iUmolar = constants_header.iUmolar
 * iGmolar = constants_header.iGmolar
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iCvmolar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iCvmolar, __pyx_t_1) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":35
 * iCp0molar = constants_header.iCp0molar
 * iCvmolar = constants_header.iCvmolar
 * iUmolar = constants_header.iUmolar             # <<<<<<<<<<<<<<
 * iGmolar = constants_header.iGmolar
 * iHelmholtzmolar = constants_header.iHelmholtzmolar
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iUmolar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iUmolar, __pyx_t_1) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":36
 * iCvmolar = constants_header.iCvmolar
 * iUmolar = constants_header.iUmolar
 * iGmolar = constants_header.iGmolar             # <<<<<<<<<<<<<<
 * iHelmholtzmolar = constants_header.iHelmholtzmolar
 * iHmolar_residual = constants_header.iHmolar_residual
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iGmolar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iGmolar, __pyx_t_1) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":37
 * iUmolar = constants_header.iUmolar
 * iGmolar = constants_header.iGmolar
 * iHelmholtzmolar = constants_header.iHelmholtzmolar             # <<<<<<<<<<<<<<
 * iHmolar_residual = constants_header.iHmolar_residual
 * iSmolar_residual = constants_header.iSmolar_residual
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iHelmholtzmolar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iHelmholtzmolar, __pyx_t_1) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":38
 * iGmolar = constants_header.iGmolar
 * iHelmholtzmolar = constants_header.iHelmholtzmolar
 * iHmolar_residual = constants_header.iHmolar_residual             # <<<<<<<<<<<<<<
 * iSmolar_residual = constants_header.iSmolar_residual
 * iGmolar_residual = constants_header.iGmolar_residual
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iHmolar_residual); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iHmolar_residual, __pyx_t_1) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":39
 * iHelmholtzmolar = constants_header.iHelmholtzmolar
 * iHmolar_residual = constants_header.iHmolar_residual
 * iSmolar_residual = constants_header.iSmolar_residual             # <<<<<<<<<<<<<<
 * iGmolar_residual = constants_header.iGmolar_residual
 * iDmass = constants_header.iDmass
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iSmolar_residual); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iSmolar_residual, __pyx_t_1) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":40
 * iHmolar_residual = constants_header.iHmolar_residual
 * iSmolar_residual = constants_header.iSmolar_residual
 * iGmolar_residual = constants_header.iGmolar_residual             # <<<<<<<<<<<<<<
 * iDmass = constants_header.iDmass
 * iHmass = constants_header.iHmass
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iGmolar_residual); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iGmolar_residual, __pyx_t_1) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":41
 * iSmolar_residual = constants_header.iSmolar_residual
 * iGmolar_residual = constants_header.iGmolar_residual
 * iDmass = constants_header.iDmass             # <<<<<<<<<<<<<<
 * iHmass = constants_header.iHmass
 * iSmass = constants_header.iSmass
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iDmass); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iDmass, __pyx_t_1) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":42
 * iGmolar_residual = constants_header.iGmolar_residual
 * iDmass = constants_header.iDmass
 * iHmass = constants_header.iHmass             # <<<<<<<<<<<<<<
 * iSmass = constants_header.iSmass
 * iCpmass = constants_header.iCpmass
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iHmass); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iHmass, __pyx_t_1) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":43
 * iDmass = constants_header.iDmass
 * iHmass = constants_header.iHmass
 * iSmass = constants_header.iSmass             # <<<<<<<<<<<<<<
 * iCpmass = constants_header.iCpmass
 * iCp0mass = constants_header.iCp0mass
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iSmass); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iSmass, __pyx_t_1) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":44
 * iHmass = constants_header.iHmass
 * iSmass = constants_header.iSmass
 * iCpmass = constants_header.iCpmass             # <<<<<<<<<<<<<<
 * iCp0mass = constants_header.iCp0mass
 * iCvmass = constants_header.iCvmass
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iCpmass); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iCpmass, __pyx_t_1) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":45
 * iSmass = constants_header.iSmass
 * iCpmass = constants_header.iCpmass
 * iCp0mass = constants_header.iCp0mass             # <<<<<<<<<<<<<<
 * iCvmass = constants_header.iCvmass
 * iUmass = constants_header.iUmass
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iCp0mass); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iCp0mass, __pyx_t_1) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":46
 * iCpmass = constants_header.iCpmass
 * iCp0mass = constants_header.iCp0mass
 * iCvmass = constants_header.iCvmass             # <<<<<<<<<<<<<<
 * iUmass = constants_header.iUmass
 * iGmass = constants_header.iGmass
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iCvmass); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iCvmass, __pyx_t_1) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":47
 * iCp0mass = constants_header.iCp0mass
 * iCvmass = constants_header.iCvmass
 * iUmass = constants_header.iUmass             # <<<<<<<<<<<<<<
 * iGmass = constants_header.iGmass
 * iHelmholtzmass = constants_header.iHelmholtzmass
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iUmass); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iUmass, __pyx_t_1) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":48
 * iCvmass = constants_header.iCvmass
 * iUmass = constants_header.iUmass
 * iGmass = constants_header.iGmass             # <<<<<<<<<<<<<<
 * iHelmholtzmass = constants_header.iHelmholtzmass
 * iviscosity = constants_header.iviscosity
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iGmass); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iGmass, __pyx_t_1) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":49
 * iUmass = constants_header.iUmass
 * iGmass = constants_header.iGmass
 * iHelmholtzmass = constants_header.iHelmholtzmass             # <<<<<<<<<<<<<<
 * iviscosity = constants_header.iviscosity
 * iconductivity = constants_header.iconductivity
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iHelmholtzmass); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iHelmholtzmass, __pyx_t_1) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":50
 * iGmass = constants_header.iGmass
 * iHelmholtzmass = constants_header.iHelmholtzmass
 * iviscosity = constants_header.iviscosity             # <<<<<<<<<<<<<<
 * iconductivity = constants_header.iconductivity
 * isurface_tension = constants_header.isurface_tension
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iviscosity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iviscosity, __pyx_t_1) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":51
 * iHelmholtzmass = constants_header.iHelmholtzmass
 * iviscosity = constants_header.iviscosity
 * iconductivity = constants_header.iconductivity             # <<<<<<<<<<<<<<
 * isurface_tension = constants_header.isurface_tension
 * iPrandtl = constants_header.iPrandtl
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iconductivity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iconductivity, __pyx_t_1) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":52
 * iviscosity = constants_header.iviscosity
 * iconductivity = constants_header.iconductivity
 * isurface_tension = constants_header.isurface_tension             # <<<<<<<<<<<<<<
 * iPrandtl = constants_header.iPrandtl
 * ispeed_sound = constants_header.ispeed_sound
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::isurface_tension); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_isurface_tension, __pyx_t_1) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":53
 * iconductivity = constants_header.iconductivity
 * isurface_tension = constants_header.isurface_tension
 * iPrandtl = constants_header.iPrandtl             # <<<<<<<<<<<<<<
 * ispeed_sound = constants_header.ispeed_sound
 * iisothermal_compressibility = constants_header.iisothermal_compressibility
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iPrandtl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iPrandtl, __pyx_t_1) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":54
 * isurface_tension = constants_header.isurface_tension
 * iPrandtl = constants_header.iPrandtl
 * ispeed_sound = constants_header.ispeed_sound             # <<<<<<<<<<<<<<
 * iisothermal_compressibility = constants_header.iisothermal_compressibility
 * iisobaric_expansion_coefficient = constants_header.iisobaric_expansion_coefficient
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::ispeed_sound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ispeed_sound, __pyx_t_1) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":55
 * iPrandtl = constants_header.iPrandtl
 * ispeed_sound = constants_header.ispeed_sound
 * iisothermal_compressibility = constants_header.iisothermal_compressibility             # <<<<<<<<<<<<<<
 * iisobaric_expansion_coefficient = constants_header.iisobaric_expansion_coefficient
 * iisentropic_expansion_coefficient = constants_header.iisentropic_expansion_coefficient
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iisothermal_compressibility); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iisothermal_compressibility, __pyx_t_1) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":56
 * ispeed_sound = constants_header.ispeed_sound
 * iisothermal_compressibility = constants_header.iisothermal_compressibility
 * iisobaric_expansion_coefficient = constants_header.iisobaric_expansion_coefficient             # <<<<<<<<<<<<<<
 * iisentropic_expansion_coefficient = constants_header.iisentropic_expansion_coefficient
 * ifundamental_derivative_of_gas_dynamics = constants_header.ifundamental_derivative_of_gas_dynamics
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iisobaric_expansion_coefficient); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iisobaric_expansion_coefficient, __pyx_t_1) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":57
 * iisothermal_compressibility = constants_header.iisothermal_compressibility
 * iisobaric_expansion_coefficient = constants_header.iisobaric_expansion_coefficient
 * iisentropic_expansion_coefficient = constants_header.iisentropic_expansion_coefficient             # <<<<<<<<<<<<<<
 * ifundamental_derivative_of_gas_dynamics = constants_header.ifundamental_derivative_of_gas_dynamics
 * ialphar = constants_header.ialphar
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iisentropic_expansion_coefficient); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iisentropic_expansion_coefficien, __pyx_t_1) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":58
 * iisobaric_expansion_coefficient = constants_header.iisobaric_expansion_coefficient
 * iisentropic_expansion_coefficient = constants_header.iisentropic_expansion_coefficient
 * ifundamental_derivative_of_gas_dynamics = constants_header.ifundamental_derivative_of_gas_dynamics             # <<<<<<<<<<<<<<
 * ialphar = constants_header.ialphar
 * idalphar_dtau_constdelta = constants_header.idalphar_dtau_constdelta
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::ifundamental_derivative_of_gas_dynamics); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ifundamental_derivative_of_gas_d, __pyx_t_1) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":59
 * iisentropic_expansion_coefficient = constants_header.iisentropic_expansion_coefficient
 * ifundamental_derivative_of_gas_dynamics = constants_header.ifundamental_derivative_of_gas_dynamics
 * ialphar = constants_header.ialphar             # <<<<<<<<<<<<<<
 * idalphar_dtau_constdelta = constants_header.idalphar_dtau_constdelta
 * idalphar_ddelta_consttau = constants_header.idalphar_ddelta_consttau
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::ialphar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ialphar, __pyx_t_1) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":60
 * ifundamental_derivative_of_gas_dynamics = constants_header.ifundamental_derivative_of_gas_dynamics
 * ialphar = constants_header.ialphar
 * idalphar_dtau_constdelta = constants_header.idalphar_dtau_constdelta             # <<<<<<<<<<<<<<
 * idalphar_ddelta_consttau = constants_header.idalphar_ddelta_consttau
 * ialpha0 = constants_header.ialpha0
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::idalphar_dtau_constdelta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_idalphar_dtau_constdelta, __pyx_t_1) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":61
 * ialphar = constants_header.ialphar
 * idalphar_dtau_constdelta = constants_header.idalphar_dtau_constdelta
 * idalphar_ddelta_consttau = constants_header.idalphar_ddelta_consttau             # <<<<<<<<<<<<<<
 * ialpha0 = constants_header.ialpha0
 * idalpha0_dtau_constdelta = constants_header.idalpha0_dtau_constdelta
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::idalphar_ddelta_consttau); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_idalphar_ddelta_consttau, __pyx_t_1) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":62
 * idalphar_dtau_constdelta = constants_header.idalphar_dtau_constdelta
 * idalphar_ddelta_consttau = constants_header.idalphar_ddelta_consttau
 * ialpha0 = constants_header.ialpha0             # <<<<<<<<<<<<<<
 * idalpha0_dtau_constdelta = constants_header.idalpha0_dtau_constdelta
 * idalpha0_ddelta_consttau = constants_header.idalpha0_ddelta_consttau
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::ialpha0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ialpha0, __pyx_t_1) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":63
 * idalphar_ddelta_consttau = constants_header.idalphar_ddelta_consttau
 * ialpha0 = constants_header.ialpha0
 * idalpha0_dtau_constdelta = constants_header.idalpha0_dtau_constdelta             # <<<<<<<<<<<<<<
 * idalpha0_ddelta_consttau = constants_header.idalpha0_ddelta_consttau
 * id2alpha0_ddelta2_consttau = constants_header.id2alpha0_ddelta2_consttau
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::idalpha0_dtau_constdelta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_idalpha0_dtau_constdelta, __pyx_t_1) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":64
 * ialpha0 = constants_header.ialpha0
 * idalpha0_dtau_constdelta = constants_header.idalpha0_dtau_constdelta
 * idalpha0_ddelta_consttau = constants_header.idalpha0_ddelta_consttau             # <<<<<<<<<<<<<<
 * id2alpha0_ddelta2_consttau = constants_header.id2alpha0_ddelta2_consttau
 * id3alpha0_ddelta3_consttau = constants_header.id3alpha0_ddelta3_consttau
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::idalpha0_ddelta_consttau); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_idalpha0_ddelta_consttau, __pyx_t_1) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":65
 * idalpha0_dtau_constdelta = constants_header.idalpha0_dtau_constdelta
 * idalpha0_ddelta_consttau = constants_header.idalpha0_ddelta_consttau
 * id2alpha0_ddelta2_consttau = constants_header.id2alpha0_ddelta2_consttau             # <<<<<<<<<<<<<<
 * id3alpha0_ddelta3_consttau = constants_header.id3alpha0_ddelta3_consttau
 * iBvirial = constants_header.iBvirial
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::id2alpha0_ddelta2_consttau); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_id2alpha0_ddelta2_consttau, __pyx_t_1) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":66
 * idalpha0_ddelta_consttau = constants_header.idalpha0_ddelta_consttau
 * id2alpha0_ddelta2_consttau = constants_header.id2alpha0_ddelta2_consttau
 * id3alpha0_ddelta3_consttau = constants_header.id3alpha0_ddelta3_consttau             # <<<<<<<<<<<<<<
 * iBvirial = constants_header.iBvirial
 * iCvirial = constants_header.iCvirial
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::id3alpha0_ddelta3_consttau); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_id3alpha0_ddelta3_consttau, __pyx_t_1) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":67
 * id2alpha0_ddelta2_consttau = constants_header.id2alpha0_ddelta2_consttau
 * id3alpha0_ddelta3_consttau = constants_header.id3alpha0_ddelta3_consttau
 * iBvirial = constants_header.iBvirial             # <<<<<<<<<<<<<<
 * iCvirial = constants_header.iCvirial
 * idBvirial_dT = constants_header.idBvirial_dT
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iBvirial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iBvirial, __pyx_t_1) < 0) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":68
 * id3alpha0_ddelta3_consttau = constants_header.id3alpha0_ddelta3_consttau
 * iBvirial = constants_header.iBvirial
 * iCvirial = constants_header.iCvirial             # <<<<<<<<<<<<<<
 * idBvirial_dT = constants_header.idBvirial_dT
 * idCvirial_dT = constants_header.idCvirial_dT
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iCvirial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iCvirial, __pyx_t_1) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":69
 * iBvirial = constants_header.iBvirial
 * iCvirial = constants_header.iCvirial
 * idBvirial_dT = constants_header.idBvirial_dT             # <<<<<<<<<<<<<<
 * idCvirial_dT = constants_header.idCvirial_dT
 * iZ = constants_header.iZ
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::idBvirial_dT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_idBvirial_dT, __pyx_t_1) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":70
 * iCvirial = constants_header.iCvirial
 * idBvirial_dT = constants_header.idBvirial_dT
 * idCvirial_dT = constants_header.idCvirial_dT             # <<<<<<<<<<<<<<
 * iZ = constants_header.iZ
 * iPIP = constants_header.iPIP
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::idCvirial_dT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_idCvirial_dT, __pyx_t_1) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":71
 * idBvirial_dT = constants_header.idBvirial_dT
 * idCvirial_dT = constants_header.idCvirial_dT
 * iZ = constants_header.iZ             # <<<<<<<<<<<<<<
 * iPIP = constants_header.iPIP
 * ifraction_min = constants_header.ifraction_min
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iZ); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iZ, __pyx_t_1) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":72
 * idCvirial_dT = constants_header.idCvirial_dT
 * iZ = constants_header.iZ
 * iPIP = constants_header.iPIP             # <<<<<<<<<<<<<<
 * ifraction_min = constants_header.ifraction_min
 * ifraction_max = constants_header.ifraction_max
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iPIP); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iPIP, __pyx_t_1) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":73
 * iZ = constants_header.iZ
 * iPIP = constants_header.iPIP
 * ifraction_min = constants_header.ifraction_min             # <<<<<<<<<<<<<<
 * ifraction_max = constants_header.ifraction_max
 * iT_freeze = constants_header.iT_freeze
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::ifraction_min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ifraction_min, __pyx_t_1) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":74
 * iPIP = constants_header.iPIP
 * ifraction_min = constants_header.ifraction_min
 * ifraction_max = constants_header.ifraction_max             # <<<<<<<<<<<<<<
 * iT_freeze = constants_header.iT_freeze
 * iGWP20 = constants_header.iGWP20
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::ifraction_max); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ifraction_max, __pyx_t_1) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":75
 * ifraction_min = constants_header.ifraction_min
 * ifraction_max = constants_header.ifraction_max
 * iT_freeze = constants_header.iT_freeze             # <<<<<<<<<<<<<<
 * iGWP20 = constants_header.iGWP20
 * iGWP100 = constants_header.iGWP100
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iT_freeze); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iT_freeze, __pyx_t_1) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":76
 * ifraction_max = constants_header.ifraction_max
 * iT_freeze = constants_header.iT_freeze
 * iGWP20 = constants_header.iGWP20             # <<<<<<<<<<<<<<
 * iGWP100 = constants_header.iGWP100
 * iGWP500 = constants_header.iGWP500
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iGWP20); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iGWP20, __pyx_t_1) < 0) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":77
 * iT_freeze = constants_header.iT_freeze
 * iGWP20 = constants_header.iGWP20
 * iGWP100 = constants_header.iGWP100             # <<<<<<<<<<<<<<
 * iGWP500 = constants_header.iGWP500
 * iFH = constants_header.iFH
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iGWP100); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iGWP100, __pyx_t_1) < 0) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":78
 * iGWP20 = constants_header.iGWP20
 * iGWP100 = constants_header.iGWP100
 * iGWP500 = constants_header.iGWP500             # <<<<<<<<<<<<<<
 * iFH = constants_header.iFH
 * iHH = constants_header.iHH
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iGWP500); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iGWP500, __pyx_t_1) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":79
 * iGWP100 = constants_header.iGWP100
 * iGWP500 = constants_header.iGWP500
 * iFH = constants_header.iFH             # <<<<<<<<<<<<<<
 * iHH = constants_header.iHH
 * iPH = constants_header.iPH
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iFH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iFH, __pyx_t_1) < 0) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":80
 * iGWP500 = constants_header.iGWP500
 * iFH = constants_header.iFH
 * iHH = constants_header.iHH             # <<<<<<<<<<<<<<
 * iPH = constants_header.iPH
 * iODP = constants_header.iODP
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iHH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iHH, __pyx_t_1) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":81
 * iFH = constants_header.iFH
 * iHH = constants_header.iHH
 * iPH = constants_header.iPH             # <<<<<<<<<<<<<<
 * iODP = constants_header.iODP
 * iPhase = constants_header.iPhase
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iPH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iPH, __pyx_t_1) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":82
 * iHH = constants_header.iHH
 * iPH = constants_header.iPH
 * iODP = constants_header.iODP             # <<<<<<<<<<<<<<
 * iPhase = constants_header.iPhase
 * iundefined_parameter = constants_header.iundefined_parameter
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iODP); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iODP, __pyx_t_1) < 0) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":83
 * iPH = constants_header.iPH
 * iODP = constants_header.iODP
 * iPhase = constants_header.iPhase             # <<<<<<<<<<<<<<
 * iundefined_parameter = constants_header.iundefined_parameter
 * INPUT_PAIR_INVALID = constants_header.INPUT_PAIR_INVALID
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iPhase); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iPhase, __pyx_t_1) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":84
 * iODP = constants_header.iODP
 * iPhase = constants_header.iPhase
 * iundefined_parameter = constants_header.iundefined_parameter             # <<<<<<<<<<<<<<
 * INPUT_PAIR_INVALID = constants_header.INPUT_PAIR_INVALID
 * QT_INPUTS = constants_header.QT_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::iundefined_parameter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iundefined_parameter, __pyx_t_1) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":85
 * iPhase = constants_header.iPhase
 * iundefined_parameter = constants_header.iundefined_parameter
 * INPUT_PAIR_INVALID = constants_header.INPUT_PAIR_INVALID             # <<<<<<<<<<<<<<
 * QT_INPUTS = constants_header.QT_INPUTS
 * PQ_INPUTS = constants_header.PQ_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::INPUT_PAIR_INVALID); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_PAIR_INVALID, __pyx_t_1) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":86
 * iundefined_parameter = constants_header.iundefined_parameter
 * INPUT_PAIR_INVALID = constants_header.INPUT_PAIR_INVALID
 * QT_INPUTS = constants_header.QT_INPUTS             # <<<<<<<<<<<<<<
 * PQ_INPUTS = constants_header.PQ_INPUTS
 * QSmolar_INPUTS = constants_header.QSmolar_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::QT_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_QT_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":87
 * INPUT_PAIR_INVALID = constants_header.INPUT_PAIR_INVALID
 * QT_INPUTS = constants_header.QT_INPUTS
 * PQ_INPUTS = constants_header.PQ_INPUTS             # <<<<<<<<<<<<<<
 * QSmolar_INPUTS = constants_header.QSmolar_INPUTS
 * QSmass_INPUTS = constants_header.QSmass_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::PQ_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PQ_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":88
 * QT_INPUTS = constants_header.QT_INPUTS
 * PQ_INPUTS = constants_header.PQ_INPUTS
 * QSmolar_INPUTS = constants_header.QSmolar_INPUTS             # <<<<<<<<<<<<<<
 * QSmass_INPUTS = constants_header.QSmass_INPUTS
 * HmolarQ_INPUTS = constants_header.HmolarQ_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::QSmolar_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_QSmolar_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":89
 * PQ_INPUTS = constants_header.PQ_INPUTS
 * QSmolar_INPUTS = constants_header.QSmolar_INPUTS
 * QSmass_INPUTS = constants_header.QSmass_INPUTS             # <<<<<<<<<<<<<<
 * HmolarQ_INPUTS = constants_header.HmolarQ_INPUTS
 * HmassQ_INPUTS = constants_header.HmassQ_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::QSmass_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_QSmass_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":90
 * QSmolar_INPUTS = constants_header.QSmolar_INPUTS
 * QSmass_INPUTS = constants_header.QSmass_INPUTS
 * HmolarQ_INPUTS = constants_header.HmolarQ_INPUTS             # <<<<<<<<<<<<<<
 * HmassQ_INPUTS = constants_header.HmassQ_INPUTS
 * DmolarQ_INPUTS = constants_header.DmolarQ_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::HmolarQ_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmolarQ_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":91
 * QSmass_INPUTS = constants_header.QSmass_INPUTS
 * HmolarQ_INPUTS = constants_header.HmolarQ_INPUTS
 * HmassQ_INPUTS = constants_header.HmassQ_INPUTS             # <<<<<<<<<<<<<<
 * DmolarQ_INPUTS = constants_header.DmolarQ_INPUTS
 * DmassQ_INPUTS = constants_header.DmassQ_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::HmassQ_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmassQ_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":92
 * HmolarQ_INPUTS = constants_header.HmolarQ_INPUTS
 * HmassQ_INPUTS = constants_header.HmassQ_INPUTS
 * DmolarQ_INPUTS = constants_header.DmolarQ_INPUTS             # <<<<<<<<<<<<<<
 * DmassQ_INPUTS = constants_header.DmassQ_INPUTS
 * PT_INPUTS = constants_header.PT_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::DmolarQ_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmolarQ_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":93
 * HmassQ_INPUTS = constants_header.HmassQ_INPUTS
 * DmolarQ_INPUTS = constants_header.DmolarQ_INPUTS
 * DmassQ_INPUTS = constants_header.DmassQ_INPUTS             # <<<<<<<<<<<<<<
 * PT_INPUTS = constants_header.PT_INPUTS
 * DmassT_INPUTS = constants_header.DmassT_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::DmassQ_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmassQ_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":94
 * DmolarQ_INPUTS = constants_header.DmolarQ_INPUTS
 * DmassQ_INPUTS = constants_header.DmassQ_INPUTS
 * PT_INPUTS = constants_header.PT_INPUTS             # <<<<<<<<<<<<<<
 * DmassT_INPUTS = constants_header.DmassT_INPUTS
 * DmolarT_INPUTS = constants_header.DmolarT_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::PT_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PT_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":95
 * DmassQ_INPUTS = constants_header.DmassQ_INPUTS
 * PT_INPUTS = constants_header.PT_INPUTS
 * DmassT_INPUTS = constants_header.DmassT_INPUTS             # <<<<<<<<<<<<<<
 * DmolarT_INPUTS = constants_header.DmolarT_INPUTS
 * HmolarT_INPUTS = constants_header.HmolarT_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::DmassT_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmassT_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":96
 * PT_INPUTS = constants_header.PT_INPUTS
 * DmassT_INPUTS = constants_header.DmassT_INPUTS
 * DmolarT_INPUTS = constants_header.DmolarT_INPUTS             # <<<<<<<<<<<<<<
 * HmolarT_INPUTS = constants_header.HmolarT_INPUTS
 * HmassT_INPUTS = constants_header.HmassT_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::DmolarT_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmolarT_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":97
 * DmassT_INPUTS = constants_header.DmassT_INPUTS
 * DmolarT_INPUTS = constants_header.DmolarT_INPUTS
 * HmolarT_INPUTS = constants_header.HmolarT_INPUTS             # <<<<<<<<<<<<<<
 * HmassT_INPUTS = constants_header.HmassT_INPUTS
 * SmolarT_INPUTS = constants_header.SmolarT_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::HmolarT_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmolarT_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":98
 * DmolarT_INPUTS = constants_header.DmolarT_INPUTS
 * HmolarT_INPUTS = constants_header.HmolarT_INPUTS
 * HmassT_INPUTS = constants_header.HmassT_INPUTS             # <<<<<<<<<<<<<<
 * SmolarT_INPUTS = constants_header.SmolarT_INPUTS
 * SmassT_INPUTS = constants_header.SmassT_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::HmassT_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmassT_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":99
 * HmolarT_INPUTS = constants_header.HmolarT_INPUTS
 * HmassT_INPUTS = constants_header.HmassT_INPUTS
 * SmolarT_INPUTS = constants_header.SmolarT_INPUTS             # <<<<<<<<<<<<<<
 * SmassT_INPUTS = constants_header.SmassT_INPUTS
 * TUmolar_INPUTS = constants_header.TUmolar_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::SmolarT_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SmolarT_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":100
 * HmassT_INPUTS = constants_header.HmassT_INPUTS
 * SmolarT_INPUTS = constants_header.SmolarT_INPUTS
 * SmassT_INPUTS = constants_header.SmassT_INPUTS             # <<<<<<<<<<<<<<
 * TUmolar_INPUTS = constants_header.TUmolar_INPUTS
 * TUmass_INPUTS = constants_header.TUmass_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::SmassT_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SmassT_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":101
 * SmolarT_INPUTS = constants_header.SmolarT_INPUTS
 * SmassT_INPUTS = constants_header.SmassT_INPUTS
 * TUmolar_INPUTS = constants_header.TUmolar_INPUTS             # <<<<<<<<<<<<<<
 * TUmass_INPUTS = constants_header.TUmass_INPUTS
 * DmassP_INPUTS = constants_header.DmassP_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::TUmolar_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TUmolar_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":102
 * SmassT_INPUTS = constants_header.SmassT_INPUTS
 * TUmolar_INPUTS = constants_header.TUmolar_INPUTS
 * TUmass_INPUTS = constants_header.TUmass_INPUTS             # <<<<<<<<<<<<<<
 * DmassP_INPUTS = constants_header.DmassP_INPUTS
 * DmolarP_INPUTS = constants_header.DmolarP_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::TUmass_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TUmass_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":103
 * TUmolar_INPUTS = constants_header.TUmolar_INPUTS
 * TUmass_INPUTS = constants_header.TUmass_INPUTS
 * DmassP_INPUTS = constants_header.DmassP_INPUTS             # <<<<<<<<<<<<<<
 * DmolarP_INPUTS = constants_header.DmolarP_INPUTS
 * HmassP_INPUTS = constants_header.HmassP_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::DmassP_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmassP_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":104
 * TUmass_INPUTS = constants_header.TUmass_INPUTS
 * DmassP_INPUTS = constants_header.DmassP_INPUTS
 * DmolarP_INPUTS = constants_header.DmolarP_INPUTS             # <<<<<<<<<<<<<<
 * HmassP_INPUTS = constants_header.HmassP_INPUTS
 * HmolarP_INPUTS = constants_header.HmolarP_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::DmolarP_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmolarP_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":105
 * DmassP_INPUTS = constants_header.DmassP_INPUTS
 * DmolarP_INPUTS = constants_header.DmolarP_INPUTS
 * HmassP_INPUTS = constants_header.HmassP_INPUTS             # <<<<<<<<<<<<<<
 * HmolarP_INPUTS = constants_header.HmolarP_INPUTS
 * PSmass_INPUTS = constants_header.PSmass_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::HmassP_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmassP_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":106
 * DmolarP_INPUTS = constants_header.DmolarP_INPUTS
 * HmassP_INPUTS = constants_header.HmassP_INPUTS
 * HmolarP_INPUTS = constants_header.HmolarP_INPUTS             # <<<<<<<<<<<<<<
 * PSmass_INPUTS = constants_header.PSmass_INPUTS
 * PSmolar_INPUTS = constants_header.PSmolar_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::HmolarP_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmolarP_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":107
 * HmassP_INPUTS = constants_header.HmassP_INPUTS
 * HmolarP_INPUTS = constants_header.HmolarP_INPUTS
 * PSmass_INPUTS = constants_header.PSmass_INPUTS             # <<<<<<<<<<<<<<
 * PSmolar_INPUTS = constants_header.PSmolar_INPUTS
 * PUmass_INPUTS = constants_header.PUmass_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::PSmass_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PSmass_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":108
 * HmolarP_INPUTS = constants_header.HmolarP_INPUTS
 * PSmass_INPUTS = constants_header.PSmass_INPUTS
 * PSmolar_INPUTS = constants_header.PSmolar_INPUTS             # <<<<<<<<<<<<<<
 * PUmass_INPUTS = constants_header.PUmass_INPUTS
 * PUmolar_INPUTS = constants_header.PUmolar_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::PSmolar_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PSmolar_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":109
 * PSmass_INPUTS = constants_header.PSmass_INPUTS
 * PSmolar_INPUTS = constants_header.PSmolar_INPUTS
 * PUmass_INPUTS = constants_header.PUmass_INPUTS             # <<<<<<<<<<<<<<
 * PUmolar_INPUTS = constants_header.PUmolar_INPUTS
 * HmassSmass_INPUTS = constants_header.HmassSmass_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::PUmass_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PUmass_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":110
 * PSmolar_INPUTS = constants_header.PSmolar_INPUTS
 * PUmass_INPUTS = constants_header.PUmass_INPUTS
 * PUmolar_INPUTS = constants_header.PUmolar_INPUTS             # <<<<<<<<<<<<<<
 * HmassSmass_INPUTS = constants_header.HmassSmass_INPUTS
 * HmolarSmolar_INPUTS = constants_header.HmolarSmolar_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::PUmolar_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PUmolar_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":111
 * PUmass_INPUTS = constants_header.PUmass_INPUTS
 * PUmolar_INPUTS = constants_header.PUmolar_INPUTS
 * HmassSmass_INPUTS = constants_header.HmassSmass_INPUTS             # <<<<<<<<<<<<<<
 * HmolarSmolar_INPUTS = constants_header.HmolarSmolar_INPUTS
 * SmassUmass_INPUTS = constants_header.SmassUmass_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::HmassSmass_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmassSmass_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":112
 * PUmolar_INPUTS = constants_header.PUmolar_INPUTS
 * HmassSmass_INPUTS = constants_header.HmassSmass_INPUTS
 * HmolarSmolar_INPUTS = constants_header.HmolarSmolar_INPUTS             # <<<<<<<<<<<<<<
 * SmassUmass_INPUTS = constants_header.SmassUmass_INPUTS
 * SmolarUmolar_INPUTS = constants_header.SmolarUmolar_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::HmolarSmolar_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmolarSmolar_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":113
 * HmassSmass_INPUTS = constants_header.HmassSmass_INPUTS
 * HmolarSmolar_INPUTS = constants_header.HmolarSmolar_INPUTS
 * SmassUmass_INPUTS = constants_header.SmassUmass_INPUTS             # <<<<<<<<<<<<<<
 * SmolarUmolar_INPUTS = constants_header.SmolarUmolar_INPUTS
 * DmassHmass_INPUTS = constants_header.DmassHmass_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::SmassUmass_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SmassUmass_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":114
 * HmolarSmolar_INPUTS = constants_header.HmolarSmolar_INPUTS
 * SmassUmass_INPUTS = constants_header.SmassUmass_INPUTS
 * SmolarUmolar_INPUTS = constants_header.SmolarUmolar_INPUTS             # <<<<<<<<<<<<<<
 * DmassHmass_INPUTS = constants_header.DmassHmass_INPUTS
 * DmolarHmolar_INPUTS = constants_header.DmolarHmolar_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::SmolarUmolar_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SmolarUmolar_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":115
 * SmassUmass_INPUTS = constants_header.SmassUmass_INPUTS
 * SmolarUmolar_INPUTS = constants_header.SmolarUmolar_INPUTS
 * DmassHmass_INPUTS = constants_header.DmassHmass_INPUTS             # <<<<<<<<<<<<<<
 * DmolarHmolar_INPUTS = constants_header.DmolarHmolar_INPUTS
 * DmassSmass_INPUTS = constants_header.DmassSmass_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::DmassHmass_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmassHmass_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":116
 * SmolarUmolar_INPUTS = constants_header.SmolarUmolar_INPUTS
 * DmassHmass_INPUTS = constants_header.DmassHmass_INPUTS
 * DmolarHmolar_INPUTS = constants_header.DmolarHmolar_INPUTS             # <<<<<<<<<<<<<<
 * DmassSmass_INPUTS = constants_header.DmassSmass_INPUTS
 * DmolarSmolar_INPUTS = constants_header.DmolarSmolar_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::DmolarHmolar_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmolarHmolar_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":117
 * DmassHmass_INPUTS = constants_header.DmassHmass_INPUTS
 * DmolarHmolar_INPUTS = constants_header.DmolarHmolar_INPUTS
 * DmassSmass_INPUTS = constants_header.DmassSmass_INPUTS             # <<<<<<<<<<<<<<
 * DmolarSmolar_INPUTS = constants_header.DmolarSmolar_INPUTS
 * DmassUmass_INPUTS = constants_header.DmassUmass_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::DmassSmass_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmassSmass_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":118
 * DmolarHmolar_INPUTS = constants_header.DmolarHmolar_INPUTS
 * DmassSmass_INPUTS = constants_header.DmassSmass_INPUTS
 * DmolarSmolar_INPUTS = constants_header.DmolarSmolar_INPUTS             # <<<<<<<<<<<<<<
 * DmassUmass_INPUTS = constants_header.DmassUmass_INPUTS
 * DmolarUmolar_INPUTS = constants_header.DmolarUmolar_INPUTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::DmolarSmolar_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmolarSmolar_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":119
 * DmassSmass_INPUTS = constants_header.DmassSmass_INPUTS
 * DmolarSmolar_INPUTS = constants_header.DmolarSmolar_INPUTS
 * DmassUmass_INPUTS = constants_header.DmassUmass_INPUTS             # <<<<<<<<<<<<<<
 * DmolarUmolar_INPUTS = constants_header.DmolarUmolar_INPUTS
 * FLUID_TYPE_PURE = constants_header.FLUID_TYPE_PURE
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::DmassUmass_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmassUmass_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":120
 * DmolarSmolar_INPUTS = constants_header.DmolarSmolar_INPUTS
 * DmassUmass_INPUTS = constants_header.DmassUmass_INPUTS
 * DmolarUmolar_INPUTS = constants_header.DmolarUmolar_INPUTS             # <<<<<<<<<<<<<<
 * FLUID_TYPE_PURE = constants_header.FLUID_TYPE_PURE
 * FLUID_TYPE_PSEUDOPURE = constants_header.FLUID_TYPE_PSEUDOPURE
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::DmolarUmolar_INPUTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DmolarUmolar_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":121
 * DmassUmass_INPUTS = constants_header.DmassUmass_INPUTS
 * DmolarUmolar_INPUTS = constants_header.DmolarUmolar_INPUTS
 * FLUID_TYPE_PURE = constants_header.FLUID_TYPE_PURE             # <<<<<<<<<<<<<<
 * FLUID_TYPE_PSEUDOPURE = constants_header.FLUID_TYPE_PSEUDOPURE
 * FLUID_TYPE_REFPROP = constants_header.FLUID_TYPE_REFPROP
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_fluid_types(CoolProp::FLUID_TYPE_PURE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FLUID_TYPE_PURE, __pyx_t_1) < 0) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":122
 * DmolarUmolar_INPUTS = constants_header.DmolarUmolar_INPUTS
 * FLUID_TYPE_PURE = constants_header.FLUID_TYPE_PURE
 * FLUID_TYPE_PSEUDOPURE = constants_header.FLUID_TYPE_PSEUDOPURE             # <<<<<<<<<<<<<<
 * FLUID_TYPE_REFPROP = constants_header.FLUID_TYPE_REFPROP
 * FLUID_TYPE_INCOMPRESSIBLE_LIQUID = constants_header.FLUID_TYPE_INCOMPRESSIBLE_LIQUID
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_fluid_types(CoolProp::FLUID_TYPE_PSEUDOPURE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FLUID_TYPE_PSEUDOPURE, __pyx_t_1) < 0) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":123
 * FLUID_TYPE_PURE = constants_header.FLUID_TYPE_PURE
 * FLUID_TYPE_PSEUDOPURE = constants_header.FLUID_TYPE_PSEUDOPURE
 * FLUID_TYPE_REFPROP = constants_header.FLUID_TYPE_REFPROP             # <<<<<<<<<<<<<<
 * FLUID_TYPE_INCOMPRESSIBLE_LIQUID = constants_header.FLUID_TYPE_INCOMPRESSIBLE_LIQUID
 * FLUID_TYPE_INCOMPRESSIBLE_SOLUTION = constants_header.FLUID_TYPE_INCOMPRESSIBLE_SOLUTION
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_fluid_types(CoolProp::FLUID_TYPE_REFPROP); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FLUID_TYPE_REFPROP, __pyx_t_1) < 0) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":124
 * FLUID_TYPE_PSEUDOPURE = constants_header.FLUID_TYPE_PSEUDOPURE
 * FLUID_TYPE_REFPROP = constants_header.FLUID_TYPE_REFPROP
 * FLUID_TYPE_INCOMPRESSIBLE_LIQUID = constants_header.FLUID_TYPE_INCOMPRESSIBLE_LIQUID             # <<<<<<<<<<<<<<
 * FLUID_TYPE_INCOMPRESSIBLE_SOLUTION = constants_header.FLUID_TYPE_INCOMPRESSIBLE_SOLUTION
 * FLUID_TYPE_UNDEFINED = constants_header.FLUID_TYPE_UNDEFINED
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_fluid_types(CoolProp::FLUID_TYPE_INCOMPRESSIBLE_LIQUID); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FLUID_TYPE_INCOMPRESSIBLE_LIQUID, __pyx_t_1) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":125
 * FLUID_TYPE_REFPROP = constants_header.FLUID_TYPE_REFPROP
 * FLUID_TYPE_INCOMPRESSIBLE_LIQUID = constants_header.FLUID_TYPE_INCOMPRESSIBLE_LIQUID
 * FLUID_TYPE_INCOMPRESSIBLE_SOLUTION = constants_header.FLUID_TYPE_INCOMPRESSIBLE_SOLUTION             # <<<<<<<<<<<<<<
 * FLUID_TYPE_UNDEFINED = constants_header.FLUID_TYPE_UNDEFINED
 * iphase_liquid = constants_header.iphase_liquid
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_fluid_types(CoolProp::FLUID_TYPE_INCOMPRESSIBLE_SOLUTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FLUID_TYPE_INCOMPRESSIBLE_SOLUTI, __pyx_t_1) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":126
 * FLUID_TYPE_INCOMPRESSIBLE_LIQUID = constants_header.FLUID_TYPE_INCOMPRESSIBLE_LIQUID
 * FLUID_TYPE_INCOMPRESSIBLE_SOLUTION = constants_header.FLUID_TYPE_INCOMPRESSIBLE_SOLUTION
 * FLUID_TYPE_UNDEFINED = constants_header.FLUID_TYPE_UNDEFINED             # <<<<<<<<<<<<<<
 * iphase_liquid = constants_header.iphase_liquid
 * iphase_supercritical = constants_header.iphase_supercritical
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_fluid_types(CoolProp::FLUID_TYPE_UNDEFINED); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FLUID_TYPE_UNDEFINED, __pyx_t_1) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":127
 * FLUID_TYPE_INCOMPRESSIBLE_SOLUTION = constants_header.FLUID_TYPE_INCOMPRESSIBLE_SOLUTION
 * FLUID_TYPE_UNDEFINED = constants_header.FLUID_TYPE_UNDEFINED
 * iphase_liquid = constants_header.iphase_liquid             # <<<<<<<<<<<<<<
 * iphase_supercritical = constants_header.iphase_supercritical
 * iphase_supercritical_gas = constants_header.iphase_supercritical_gas
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_phases(CoolProp::iphase_liquid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_liquid, __pyx_t_1) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":128
 * FLUID_TYPE_UNDEFINED = constants_header.FLUID_TYPE_UNDEFINED
 * iphase_liquid = constants_header.iphase_liquid
 * iphase_supercritical = constants_header.iphase_supercritical             # <<<<<<<<<<<<<<
 * iphase_supercritical_gas = constants_header.iphase_supercritical_gas
 * iphase_supercritical_liquid = constants_header.iphase_supercritical_liquid
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_phases(CoolProp::iphase_supercritical); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_supercritical, __pyx_t_1) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":129
 * iphase_liquid = constants_header.iphase_liquid
 * iphase_supercritical = constants_header.iphase_supercritical
 * iphase_supercritical_gas = constants_header.iphase_supercritical_gas             # <<<<<<<<<<<<<<
 * iphase_supercritical_liquid = constants_header.iphase_supercritical_liquid
 * iphase_critical_point = constants_header.iphase_critical_point
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_phases(CoolProp::iphase_supercritical_gas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_supercritical_gas, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":130
 * iphase_supercritical = constants_header.iphase_supercritical
 * iphase_supercritical_gas = constants_header.iphase_supercritical_gas
 * iphase_supercritical_liquid = constants_header.iphase_supercritical_liquid             # <<<<<<<<<<<<<<
 * iphase_critical_point = constants_header.iphase_critical_point
 * iphase_gas = constants_header.iphase_gas
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_phases(CoolProp::iphase_supercritical_liquid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_supercritical_liquid, __pyx_t_1) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":131
 * iphase_supercritical_gas = constants_header.iphase_supercritical_gas
 * iphase_supercritical_liquid = constants_header.iphase_supercritical_liquid
 * iphase_critical_point = constants_header.iphase_critical_point             # <<<<<<<<<<<<<<
 * iphase_gas = constants_header.iphase_gas
 * iphase_twophase = constants_header.iphase_twophase
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_phases(CoolProp::iphase_critical_point); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_critical_point, __pyx_t_1) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":132
 * iphase_supercritical_liquid = constants_header.iphase_supercritical_liquid
 * iphase_critical_point = constants_header.iphase_critical_point
 * iphase_gas = constants_header.iphase_gas             # <<<<<<<<<<<<<<
 * iphase_twophase = constants_header.iphase_twophase
 * iphase_unknown = constants_header.iphase_unknown
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_phases(CoolProp::iphase_gas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_gas, __pyx_t_1) < 0) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":133
 * iphase_critical_point = constants_header.iphase_critical_point
 * iphase_gas = constants_header.iphase_gas
 * iphase_twophase = constants_header.iphase_twophase             # <<<<<<<<<<<<<<
 * iphase_unknown = constants_header.iphase_unknown
 * iphase_not_imposed = constants_header.iphase_not_imposed
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_phases(CoolProp::iphase_twophase); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_twophase, __pyx_t_1) < 0) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":134
 * iphase_gas = constants_header.iphase_gas
 * iphase_twophase = constants_header.iphase_twophase
 * iphase_unknown = constants_header.iphase_unknown             # <<<<<<<<<<<<<<
 * iphase_not_imposed = constants_header.iphase_not_imposed
 * NORMALIZE_GAS_CONSTANTS = constants_header.NORMALIZE_GAS_CONSTANTS
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_phases(CoolProp::iphase_unknown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_unknown, __pyx_t_1) < 0) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":135
 * iphase_twophase = constants_header.iphase_twophase
 * iphase_unknown = constants_header.iphase_unknown
 * iphase_not_imposed = constants_header.iphase_not_imposed             # <<<<<<<<<<<<<<
 * NORMALIZE_GAS_CONSTANTS = constants_header.NORMALIZE_GAS_CONSTANTS
 * CRITICAL_WITHIN_1UK = constants_header.CRITICAL_WITHIN_1UK
 */
  __pyx_t_1 = __Pyx_PyInt_From_CoolProp_3a__3a_phases(CoolProp::iphase_not_imposed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iphase_not_imposed, __pyx_t_1) < 0) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":136
 * iphase_unknown = constants_header.iphase_unknown
 * iphase_not_imposed = constants_header.iphase_not_imposed
 * NORMALIZE_GAS_CONSTANTS = constants_header.NORMALIZE_GAS_CONSTANTS             # <<<<<<<<<<<<<<
 * CRITICAL_WITHIN_1UK = constants_header.CRITICAL_WITHIN_1UK
 * CRITICAL_SPLINES_ENABLED = constants_header.CRITICAL_SPLINES_ENABLED
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(NORMALIZE_GAS_CONSTANTS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NORMALIZE_GAS_CONSTANTS, __pyx_t_1) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":137
 * iphase_not_imposed = constants_header.iphase_not_imposed
 * NORMALIZE_GAS_CONSTANTS = constants_header.NORMALIZE_GAS_CONSTANTS
 * CRITICAL_WITHIN_1UK = constants_header.CRITICAL_WITHIN_1UK             # <<<<<<<<<<<<<<
 * CRITICAL_SPLINES_ENABLED = constants_header.CRITICAL_SPLINES_ENABLED
 * SAVE_RAW_TABLES = constants_header.SAVE_RAW_TABLES
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(CRITICAL_WITHIN_1UK); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CRITICAL_WITHIN_1UK, __pyx_t_1) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":138
 * NORMALIZE_GAS_CONSTANTS = constants_header.NORMALIZE_GAS_CONSTANTS
 * CRITICAL_WITHIN_1UK = constants_header.CRITICAL_WITHIN_1UK
 * CRITICAL_SPLINES_ENABLED = constants_header.CRITICAL_SPLINES_ENABLED             # <<<<<<<<<<<<<<
 * SAVE_RAW_TABLES = constants_header.SAVE_RAW_TABLES
 * ALTERNATIVE_TABLES_DIRECTORY = constants_header.ALTERNATIVE_TABLES_DIRECTORY
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(CRITICAL_SPLINES_ENABLED); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CRITICAL_SPLINES_ENABLED, __pyx_t_1) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":139
 * CRITICAL_WITHIN_1UK = constants_header.CRITICAL_WITHIN_1UK
 * CRITICAL_SPLINES_ENABLED = constants_header.CRITICAL_SPLINES_ENABLED
 * SAVE_RAW_TABLES = constants_header.SAVE_RAW_TABLES             # <<<<<<<<<<<<<<
 * ALTERNATIVE_TABLES_DIRECTORY = constants_header.ALTERNATIVE_TABLES_DIRECTORY
 * ALTERNATIVE_REFPROP_PATH = constants_header.ALTERNATIVE_REFPROP_PATH
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(SAVE_RAW_TABLES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SAVE_RAW_TABLES, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":140
 * CRITICAL_SPLINES_ENABLED = constants_header.CRITICAL_SPLINES_ENABLED
 * SAVE_RAW_TABLES = constants_header.SAVE_RAW_TABLES
 * ALTERNATIVE_TABLES_DIRECTORY = constants_header.ALTERNATIVE_TABLES_DIRECTORY             # <<<<<<<<<<<<<<
 * ALTERNATIVE_REFPROP_PATH = constants_header.ALTERNATIVE_REFPROP_PATH
 * ALTERNATIVE_REFPROP_HMX_BNC_PATH = constants_header.ALTERNATIVE_REFPROP_HMX_BNC_PATH
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(ALTERNATIVE_TABLES_DIRECTORY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ALTERNATIVE_TABLES_DIRECTORY, __pyx_t_1) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":141
 * SAVE_RAW_TABLES = constants_header.SAVE_RAW_TABLES
 * ALTERNATIVE_TABLES_DIRECTORY = constants_header.ALTERNATIVE_TABLES_DIRECTORY
 * ALTERNATIVE_REFPROP_PATH = constants_header.ALTERNATIVE_REFPROP_PATH             # <<<<<<<<<<<<<<
 * ALTERNATIVE_REFPROP_HMX_BNC_PATH = constants_header.ALTERNATIVE_REFPROP_HMX_BNC_PATH
 * ALTERNATIVE_REFPROP_LIBRARY_PATH = constants_header.ALTERNATIVE_REFPROP_LIBRARY_PATH
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(ALTERNATIVE_REFPROP_PATH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ALTERNATIVE_REFPROP_PATH, __pyx_t_1) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":142
 * ALTERNATIVE_TABLES_DIRECTORY = constants_header.ALTERNATIVE_TABLES_DIRECTORY
 * ALTERNATIVE_REFPROP_PATH = constants_header.ALTERNATIVE_REFPROP_PATH
 * ALTERNATIVE_REFPROP_HMX_BNC_PATH = constants_header.ALTERNATIVE_REFPROP_HMX_BNC_PATH             # <<<<<<<<<<<<<<
 * ALTERNATIVE_REFPROP_LIBRARY_PATH = constants_header.ALTERNATIVE_REFPROP_LIBRARY_PATH
 * REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS = constants_header.REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(ALTERNATIVE_REFPROP_HMX_BNC_PATH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ALTERNATIVE_REFPROP_HMX_BNC_PATH, __pyx_t_1) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":143
 * ALTERNATIVE_REFPROP_PATH = constants_header.ALTERNATIVE_REFPROP_PATH
 * ALTERNATIVE_REFPROP_HMX_BNC_PATH = constants_header.ALTERNATIVE_REFPROP_HMX_BNC_PATH
 * ALTERNATIVE_REFPROP_LIBRARY_PATH = constants_header.ALTERNATIVE_REFPROP_LIBRARY_PATH             # <<<<<<<<<<<<<<
 * REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS = constants_header.REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS
 * REFPROP_IGNORE_ERROR_ESTIMATED_INTERACTION_PARAMETERS = constants_header.REFPROP_IGNORE_ERROR_ESTIMATED_INTERACTION_PARAMETERS
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(ALTERNATIVE_REFPROP_LIBRARY_PATH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ALTERNATIVE_REFPROP_LIBRARY_PATH, __pyx_t_1) < 0) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":144
 * ALTERNATIVE_REFPROP_HMX_BNC_PATH = constants_header.ALTERNATIVE_REFPROP_HMX_BNC_PATH
 * ALTERNATIVE_REFPROP_LIBRARY_PATH = constants_header.ALTERNATIVE_REFPROP_LIBRARY_PATH
 * REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS = constants_header.REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS             # <<<<<<<<<<<<<<
 * REFPROP_IGNORE_ERROR_ESTIMATED_INTERACTION_PARAMETERS = constants_header.REFPROP_IGNORE_ERROR_ESTIMATED_INTERACTION_PARAMETERS
 * REFPROP_USE_GERG = constants_header.REFPROP_USE_GERG
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_REFPROP_DONT_ESTIMATE_INTERACTIO, __pyx_t_1) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":145
 * ALTERNATIVE_REFPROP_LIBRARY_PATH = constants_header.ALTERNATIVE_REFPROP_LIBRARY_PATH
 * REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS = constants_header.REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS
 * REFPROP_IGNORE_ERROR_ESTIMATED_INTERACTION_PARAMETERS = constants_header.REFPROP_IGNORE_ERROR_ESTIMATED_INTERACTION_PARAMETERS             # <<<<<<<<<<<<<<
 * REFPROP_USE_GERG = constants_header.REFPROP_USE_GERG
 * REFPROP_ERROR_THRESHOLD = constants_header.REFPROP_ERROR_THRESHOLD
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(REFPROP_IGNORE_ERROR_ESTIMATED_INTERACTION_PARAMETERS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_REFPROP_IGNORE_ERROR_ESTIMATED_I, __pyx_t_1) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":146
 * REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS = constants_header.REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS
 * REFPROP_IGNORE_ERROR_ESTIMATED_INTERACTION_PARAMETERS = constants_header.REFPROP_IGNORE_ERROR_ESTIMATED_INTERACTION_PARAMETERS
 * REFPROP_USE_GERG = constants_header.REFPROP_USE_GERG             # <<<<<<<<<<<<<<
 * REFPROP_ERROR_THRESHOLD = constants_header.REFPROP_ERROR_THRESHOLD
 * REFPROP_USE_PENGROBINSON = constants_header.REFPROP_USE_PENGROBINSON
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(REFPROP_USE_GERG); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_REFPROP_USE_GERG, __pyx_t_1) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":147
 * REFPROP_IGNORE_ERROR_ESTIMATED_INTERACTION_PARAMETERS = constants_header.REFPROP_IGNORE_ERROR_ESTIMATED_INTERACTION_PARAMETERS
 * REFPROP_USE_GERG = constants_header.REFPROP_USE_GERG
 * REFPROP_ERROR_THRESHOLD = constants_header.REFPROP_ERROR_THRESHOLD             # <<<<<<<<<<<<<<
 * REFPROP_USE_PENGROBINSON = constants_header.REFPROP_USE_PENGROBINSON
 * MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB = constants_header.MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(REFPROP_ERROR_THRESHOLD); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_REFPROP_ERROR_THRESHOLD, __pyx_t_1) < 0) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":148
 * REFPROP_USE_GERG = constants_header.REFPROP_USE_GERG
 * REFPROP_ERROR_THRESHOLD = constants_header.REFPROP_ERROR_THRESHOLD
 * REFPROP_USE_PENGROBINSON = constants_header.REFPROP_USE_PENGROBINSON             # <<<<<<<<<<<<<<
 * MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB = constants_header.MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB
 * DONT_CHECK_PROPERTY_LIMITS = constants_header.DONT_CHECK_PROPERTY_LIMITS
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(REFPROP_USE_PENGROBINSON); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_REFPROP_USE_PENGROBINSON, __pyx_t_1) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":149
 * REFPROP_ERROR_THRESHOLD = constants_header.REFPROP_ERROR_THRESHOLD
 * REFPROP_USE_PENGROBINSON = constants_header.REFPROP_USE_PENGROBINSON
 * MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB = constants_header.MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB             # <<<<<<<<<<<<<<
 * DONT_CHECK_PROPERTY_LIMITS = constants_header.DONT_CHECK_PROPERTY_LIMITS
 * HENRYS_LAW_TO_GENERATE_VLE_GUESSES = constants_header.HENRYS_LAW_TO_GENERATE_VLE_GUESSES
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MAXIMUM_TABLE_DIRECTORY_SIZE_IN, __pyx_t_1) < 0) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":150
 * REFPROP_USE_PENGROBINSON = constants_header.REFPROP_USE_PENGROBINSON
 * MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB = constants_header.MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB
 * DONT_CHECK_PROPERTY_LIMITS = constants_header.DONT_CHECK_PROPERTY_LIMITS             # <<<<<<<<<<<<<<
 * HENRYS_LAW_TO_GENERATE_VLE_GUESSES = constants_header.HENRYS_LAW_TO_GENERATE_VLE_GUESSES
 * PHASE_ENVELOPE_STARTING_PRESSURE_PA = constants_header.PHASE_ENVELOPE_STARTING_PRESSURE_PA
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(DONT_CHECK_PROPERTY_LIMITS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DONT_CHECK_PROPERTY_LIMITS, __pyx_t_1) < 0) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":151
 * MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB = constants_header.MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB
 * DONT_CHECK_PROPERTY_LIMITS = constants_header.DONT_CHECK_PROPERTY_LIMITS
 * HENRYS_LAW_TO_GENERATE_VLE_GUESSES = constants_header.HENRYS_LAW_TO_GENERATE_VLE_GUESSES             # <<<<<<<<<<<<<<
 * PHASE_ENVELOPE_STARTING_PRESSURE_PA = constants_header.PHASE_ENVELOPE_STARTING_PRESSURE_PA
 * R_U_CODATA = constants_header.R_U_CODATA
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(HENRYS_LAW_TO_GENERATE_VLE_GUESSES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HENRYS_LAW_TO_GENERATE_VLE_GUESS, __pyx_t_1) < 0) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":152
 * DONT_CHECK_PROPERTY_LIMITS = constants_header.DONT_CHECK_PROPERTY_LIMITS
 * HENRYS_LAW_TO_GENERATE_VLE_GUESSES = constants_header.HENRYS_LAW_TO_GENERATE_VLE_GUESSES
 * PHASE_ENVELOPE_STARTING_PRESSURE_PA = constants_header.PHASE_ENVELOPE_STARTING_PRESSURE_PA             # <<<<<<<<<<<<<<
 * R_U_CODATA = constants_header.R_U_CODATA
 * VTPR_UNIFAC_PATH = constants_header.VTPR_UNIFAC_PATH
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(PHASE_ENVELOPE_STARTING_PRESSURE_PA); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PHASE_ENVELOPE_STARTING_PRESSURE, __pyx_t_1) < 0) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":153
 * HENRYS_LAW_TO_GENERATE_VLE_GUESSES = constants_header.HENRYS_LAW_TO_GENERATE_VLE_GUESSES
 * PHASE_ENVELOPE_STARTING_PRESSURE_PA = constants_header.PHASE_ENVELOPE_STARTING_PRESSURE_PA
 * R_U_CODATA = constants_header.R_U_CODATA             # <<<<<<<<<<<<<<
 * VTPR_UNIFAC_PATH = constants_header.VTPR_UNIFAC_PATH
 * SPINODAL_MINIMUM_DELTA = constants_header.SPINODAL_MINIMUM_DELTA
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(R_U_CODATA); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_R_U_CODATA, __pyx_t_1) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":154
 * PHASE_ENVELOPE_STARTING_PRESSURE_PA = constants_header.PHASE_ENVELOPE_STARTING_PRESSURE_PA
 * R_U_CODATA = constants_header.R_U_CODATA
 * VTPR_UNIFAC_PATH = constants_header.VTPR_UNIFAC_PATH             # <<<<<<<<<<<<<<
 * SPINODAL_MINIMUM_DELTA = constants_header.SPINODAL_MINIMUM_DELTA
 * OVERWRITE_FLUIDS = constants_header.OVERWRITE_FLUIDS
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(VTPR_UNIFAC_PATH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VTPR_UNIFAC_PATH, __pyx_t_1) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":155
 * R_U_CODATA = constants_header.R_U_CODATA
 * VTPR_UNIFAC_PATH = constants_header.VTPR_UNIFAC_PATH
 * SPINODAL_MINIMUM_DELTA = constants_header.SPINODAL_MINIMUM_DELTA             # <<<<<<<<<<<<<<
 * OVERWRITE_FLUIDS = constants_header.OVERWRITE_FLUIDS
 * OVERWRITE_DEPARTURE_FUNCTION = constants_header.OVERWRITE_DEPARTURE_FUNCTION
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(SPINODAL_MINIMUM_DELTA); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SPINODAL_MINIMUM_DELTA, __pyx_t_1) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":156
 * VTPR_UNIFAC_PATH = constants_header.VTPR_UNIFAC_PATH
 * SPINODAL_MINIMUM_DELTA = constants_header.SPINODAL_MINIMUM_DELTA
 * OVERWRITE_FLUIDS = constants_header.OVERWRITE_FLUIDS             # <<<<<<<<<<<<<<
 * OVERWRITE_DEPARTURE_FUNCTION = constants_header.OVERWRITE_DEPARTURE_FUNCTION
 * OVERWRITE_BINARY_INTERACTION = constants_header.OVERWRITE_BINARY_INTERACTION
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(OVERWRITE_FLUIDS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OVERWRITE_FLUIDS, __pyx_t_1) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":157
 * SPINODAL_MINIMUM_DELTA = constants_header.SPINODAL_MINIMUM_DELTA
 * OVERWRITE_FLUIDS = constants_header.OVERWRITE_FLUIDS
 * OVERWRITE_DEPARTURE_FUNCTION = constants_header.OVERWRITE_DEPARTURE_FUNCTION             # <<<<<<<<<<<<<<
 * OVERWRITE_BINARY_INTERACTION = constants_header.OVERWRITE_BINARY_INTERACTION
 * USE_GUESSES_IN_PROPSSI = constants_header.USE_GUESSES_IN_PROPSSI
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(OVERWRITE_DEPARTURE_FUNCTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OVERWRITE_DEPARTURE_FUNCTION, __pyx_t_1) < 0) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":158
 * OVERWRITE_FLUIDS = constants_header.OVERWRITE_FLUIDS
 * OVERWRITE_DEPARTURE_FUNCTION = constants_header.OVERWRITE_DEPARTURE_FUNCTION
 * OVERWRITE_BINARY_INTERACTION = constants_header.OVERWRITE_BINARY_INTERACTION             # <<<<<<<<<<<<<<
 * USE_GUESSES_IN_PROPSSI = constants_header.USE_GUESSES_IN_PROPSSI
 * ASSUME_CRITICAL_POINT_STABLE = constants_header.ASSUME_CRITICAL_POINT_STABLE
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(OVERWRITE_BINARY_INTERACTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OVERWRITE_BINARY_INTERACTION, __pyx_t_1) < 0) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":159
 * OVERWRITE_DEPARTURE_FUNCTION = constants_header.OVERWRITE_DEPARTURE_FUNCTION
 * OVERWRITE_BINARY_INTERACTION = constants_header.OVERWRITE_BINARY_INTERACTION
 * USE_GUESSES_IN_PROPSSI = constants_header.USE_GUESSES_IN_PROPSSI             # <<<<<<<<<<<<<<
 * ASSUME_CRITICAL_POINT_STABLE = constants_header.ASSUME_CRITICAL_POINT_STABLE
 * VTPR_ALWAYS_RELOAD_LIBRARY = constants_header.VTPR_ALWAYS_RELOAD_LIBRARY
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(USE_GUESSES_IN_PROPSSI); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_USE_GUESSES_IN_PROPSSI, __pyx_t_1) < 0) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":160
 * OVERWRITE_BINARY_INTERACTION = constants_header.OVERWRITE_BINARY_INTERACTION
 * USE_GUESSES_IN_PROPSSI = constants_header.USE_GUESSES_IN_PROPSSI
 * ASSUME_CRITICAL_POINT_STABLE = constants_header.ASSUME_CRITICAL_POINT_STABLE             # <<<<<<<<<<<<<<
 * VTPR_ALWAYS_RELOAD_LIBRARY = constants_header.VTPR_ALWAYS_RELOAD_LIBRARY
 * FLOAT_PUNCTUATION = constants_header.FLOAT_PUNCTUATION
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(ASSUME_CRITICAL_POINT_STABLE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ASSUME_CRITICAL_POINT_STABLE, __pyx_t_1) < 0) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":161
 * USE_GUESSES_IN_PROPSSI = constants_header.USE_GUESSES_IN_PROPSSI
 * ASSUME_CRITICAL_POINT_STABLE = constants_header.ASSUME_CRITICAL_POINT_STABLE
 * VTPR_ALWAYS_RELOAD_LIBRARY = constants_header.VTPR_ALWAYS_RELOAD_LIBRARY             # <<<<<<<<<<<<<<
 * FLOAT_PUNCTUATION = constants_header.FLOAT_PUNCTUATION
 * LIST_STRING_DELIMITER = constants_header.LIST_STRING_DELIMITER
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(VTPR_ALWAYS_RELOAD_LIBRARY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VTPR_ALWAYS_RELOAD_LIBRARY, __pyx_t_1) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":162
 * ASSUME_CRITICAL_POINT_STABLE = constants_header.ASSUME_CRITICAL_POINT_STABLE
 * VTPR_ALWAYS_RELOAD_LIBRARY = constants_header.VTPR_ALWAYS_RELOAD_LIBRARY
 * FLOAT_PUNCTUATION = constants_header.FLOAT_PUNCTUATION             # <<<<<<<<<<<<<<
 * LIST_STRING_DELIMITER = constants_header.LIST_STRING_DELIMITER
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(FLOAT_PUNCTUATION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FLOAT_PUNCTUATION, __pyx_t_1) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":163
 * VTPR_ALWAYS_RELOAD_LIBRARY = constants_header.VTPR_ALWAYS_RELOAD_LIBRARY
 * FLOAT_PUNCTUATION = constants_header.FLOAT_PUNCTUATION
 * LIST_STRING_DELIMITER = constants_header.LIST_STRING_DELIMITER             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyInt_From_configuration_keys(LIST_STRING_DELIMITER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIST_STRING_DELIMITER, __pyx_t_1) < 0) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CoolProp/_constants.pyx":1
 * # This file is automatically generated by the generate_constants_module.py script in wrappers/Python.             # <<<<<<<<<<<<<<
 * # DO NOT MODIFY THE CONTENTS OF THIS FILE!
 * from . cimport constants_header
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init CoolProp._constants", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init CoolProp._constants");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
      __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return tstate->use_tracing && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::parameters value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const CoolProp::parameters neg_one = (CoolProp::parameters) -1, const_zero = (CoolProp::parameters) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(CoolProp::parameters) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(CoolProp::parameters) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(CoolProp::parameters) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(CoolProp::parameters) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(CoolProp::parameters) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(CoolProp::parameters),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CoolProp_3a__3a_input_pairs(CoolProp::input_pairs value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const CoolProp::input_pairs neg_one = (CoolProp::input_pairs) -1, const_zero = (CoolProp::input_pairs) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(CoolProp::input_pairs) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(CoolProp::input_pairs) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(CoolProp::input_pairs) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(CoolProp::input_pairs) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(CoolProp::input_pairs) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(CoolProp::input_pairs),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CoolProp_3a__3a_fluid_types(CoolProp::fluid_types value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const CoolProp::fluid_types neg_one = (CoolProp::fluid_types) -1, const_zero = (CoolProp::fluid_types) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(CoolProp::fluid_types) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(CoolProp::fluid_types) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(CoolProp::fluid_types) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(CoolProp::fluid_types) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(CoolProp::fluid_types) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(CoolProp::fluid_types),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CoolProp_3a__3a_phases(CoolProp::phases value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const CoolProp::phases neg_one = (CoolProp::phases) -1, const_zero = (CoolProp::phases) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(CoolProp::phases) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(CoolProp::phases) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(CoolProp::phases) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(CoolProp::phases) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(CoolProp::phases) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(CoolProp::phases),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_configuration_keys(configuration_keys value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const configuration_keys neg_one = (configuration_keys) -1, const_zero = (configuration_keys) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(configuration_keys) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(configuration_keys) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(configuration_keys) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(configuration_keys) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(configuration_keys) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(configuration_keys),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
