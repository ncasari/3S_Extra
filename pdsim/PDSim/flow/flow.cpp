/* Generated by Cython 0.29.22 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "SWIG",
                null
            ]
        ],
        "depends": [],
        "language": "c++",
        "name": "PDSim.flow.flow",
        "sources": [
            "PDSim/flow/flow.pyx",
            "PDSim/flow/flow.pxd"
        ]
    },
    "module_name": "PDSim.flow.flow"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_22"
#define CYTHON_HEX_VERSION 0x001D16F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__PDSim__flow__flow
#define __PYX_HAVE_API__PDSim__flow__flow
/* Early includes */
#include <string.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string>
#include <vector>
#include "DataStructures.h"
#include "Configuration.h"
#include "PhaseEnvelope.h"
#include "AbstractState.h"
#include <utility>

    #if __cplusplus > 199711L
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include "pythread.h"
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "PDSim/flow/flow.pyx",
  "stringsource",
  "PDSim/flow/flow.pxd",
  "__init__.pxd",
  "PDSim/misc/datatypes.pxd",
  "AbstractState.pxd",
  "CoolProp.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
  "PDSim/flow/flow_models.pxd",
};

/* "typedefs.pxd":1
 * ctypedef double CoolPropDbl             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_8CoolProp_8typedefs_CoolPropDbl;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":689
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":690
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":696
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":697
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":703
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":704
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":713
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":714
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":717
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":718
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":719
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":724
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":725
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":726
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_8CoolProp_8CoolProp_PyPhaseEnvelopeData;
struct __pyx_obj_8CoolProp_8CoolProp_PyGuessesStructure;
struct __pyx_obj_8CoolProp_8CoolProp_PyCriticalState;
struct __pyx_obj_8CoolProp_8CoolProp_PySpinodalData;
struct __pyx_obj_8CoolProp_8CoolProp_AbstractState;
struct __pyx_obj_8CoolProp_8CoolProp_State;
struct __pyx_obj_5PDSim_4misc_9datatypes_AnnotatedValue;
struct __pyx_obj_5PDSim_4misc_9datatypes_Collector;
struct __pyx_obj_5PDSim_4misc_9datatypes_listm;
struct __pyx_obj_5PDSim_4misc_9datatypes_arraym;
struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction;
struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper;
struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper;
struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel;
struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection;
struct __pyx_obj_5PDSim_4flow_4flow_FlowPath;
struct __pyx_opt_args_8CoolProp_8CoolProp_13AbstractState_tangent_plane_distance;
struct __pyx_opt_args_8CoolProp_8CoolProp_5State_get_Tsat;

/* "../../../../usr/local/lib/python3.6/dist-packages/CoolProp-6.4.2.dev0-py3.6-linux-x86_64.egg/CoolProp/AbstractState.pxd":97
 * 
 *     ## Tangent plane distance
 *     cpdef double tangent_plane_distance(self, double T, double p, vector[double] w, double rhomolar_guess=*) except *             # <<<<<<<<<<<<<<
 * 
 *     ## ----------------------------------------
 */
struct __pyx_opt_args_8CoolProp_8CoolProp_13AbstractState_tangent_plane_distance {
  int __pyx_n;
  double rhomolar_guess;
};

/* "CoolProp.pxd":40
 *     cpdef double get_dpdT(self) except *
 *     cpdef double get_speed_sound(self) except *
 *     cpdef get_Tsat(self, double Q = *)             # <<<<<<<<<<<<<<
 *     cpdef get_subcooling(self)
 *     cpdef get_superheat(self)
 */
struct __pyx_opt_args_8CoolProp_8CoolProp_5State_get_Tsat {
  int __pyx_n;
  double Q;
};

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":728
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":729
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":730
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":732
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_5PDSim_4misc_9datatypes_9Collector_v;
struct __pyx_opt_args_5PDSim_4misc_9datatypes_6arraym_slice;

/* "PDSim/misc/datatypes.pxd":15
 *     """ The list that contains the values """
 * 
 *     cpdef v(self, int ndmin = *)             # <<<<<<<<<<<<<<
 * 
 * cdef class listm(list):
 */
struct __pyx_opt_args_5PDSim_4misc_9datatypes_9Collector_v {
  int __pyx_n;
  int ndmin;
};

/* "PDSim/misc/datatypes.pxd":32
 *     cpdef dealloc(self)
 *     cpdef arraym copy(self)
 *     cdef arraym slice(self, int i, int j, int step = *)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, arraym array2)
 *     cpdef double get_index(self, int i) except *
 */
struct __pyx_opt_args_5PDSim_4misc_9datatypes_6arraym_slice {
  int __pyx_n;
  int step;
};
struct __pyx_opt_args_5PDSim_4flow_11flow_models_IsentropicNozzle;
struct __pyx_opt_args_5PDSim_4flow_11flow_models_FrictionCorrectedIsentropicNozzle;

/* "PDSim/flow/flow_models.pxd":19
 * from libc.math cimport exp, log, M_PI as pi, M_E as e, sqrt
 * 
 * cpdef double IsentropicNozzle(double A, State State_up, State State_down, int other_output=*)             # <<<<<<<<<<<<<<
 * 
 * cdef class FlowFunction(object):
 */
struct __pyx_opt_args_5PDSim_4flow_11flow_models_IsentropicNozzle {
  int __pyx_n;
  int other_output;
};

/* "PDSim/flow/flow_models.pxd":37
 *     cpdef double call(self, FlowPath FP) except *
 * 
 * cpdef double FrictionCorrectedIsentropicNozzle(double A, State State_up, State State_down, double delta, int Type, double t = *, double ro = *)             # <<<<<<<<<<<<<<
 * 
 * cdef class ValveModel(object):
 */
struct __pyx_opt_args_5PDSim_4flow_11flow_models_FrictionCorrectedIsentropicNozzle {
  int __pyx_n;
  double t;
  double ro;
};
struct __pyx_opt_args_5PDSim_4flow_4flow_8FlowPath___cdict__;

/* "PDSim/flow/flow.pxd":84
 *     """ The downstream state """
 * 
 *     cpdef dict __cdict__(self, AddStates = *)             # <<<<<<<<<<<<<<
 *     cpdef FlowPath get_deepcopy(self)
 *     cpdef calculate(self)
 */
struct __pyx_opt_args_5PDSim_4flow_4flow_8FlowPath___cdict__ {
  int __pyx_n;
  PyObject *AddStates;
};

/* "../../../../usr/local/lib/python3.6/dist-packages/CoolProp-6.4.2.dev0-py3.6-linux-x86_64.egg/CoolProp/AbstractState.pxd":29
 *     long
 * 
 * cdef class PyPhaseEnvelopeData:             # <<<<<<<<<<<<<<
 *     cpdef public bool TypeI
 *     cpdef public size_t iTsat_max, ipsat_max, icrit
 */
struct __pyx_obj_8CoolProp_8CoolProp_PyPhaseEnvelopeData {
  PyObject_HEAD
  bool TypeI;
  size_t iTsat_max;
  size_t ipsat_max;
  size_t icrit;
  PyObject *T;
  PyObject *p;
  PyObject *lnT;
  PyObject *lnp;
  PyObject *rhomolar_liq;
  PyObject *rhomolar_vap;
  PyObject *lnrhomolar_liq;
  PyObject *lnrhomolar_vap;
  PyObject *hmolar_liq;
  PyObject *hmolar_vap;
  PyObject *smolar_liq;
  PyObject *smolar_vap;
  PyObject *Q;
  PyObject *x;
  PyObject *y;
  PyObject *K;
};


/* "../../../../usr/local/lib/python3.6/dist-packages/CoolProp-6.4.2.dev0-py3.6-linux-x86_64.egg/CoolProp/AbstractState.pxd":35
 *     cpdef public list x, y, K
 * 
 * cdef class PyGuessesStructure:             # <<<<<<<<<<<<<<
 *     cpdef public double T, p, rhomolar, hmolar, smolar
 *     cpdef public double rhomolar_liq, rhomolar_vap
 */
struct __pyx_obj_8CoolProp_8CoolProp_PyGuessesStructure {
  PyObject_HEAD
  double T;
  double p;
  double rhomolar;
  double hmolar;
  double smolar;
  double rhomolar_liq;
  double rhomolar_vap;
  PyObject *x;
  PyObject *y;
};


/* "../../../../usr/local/lib/python3.6/dist-packages/CoolProp-6.4.2.dev0-py3.6-linux-x86_64.egg/CoolProp/AbstractState.pxd":40
 *     cpdef public list x, y
 * 
 * cdef class PyCriticalState:             # <<<<<<<<<<<<<<
 *     cpdef public double T, p, rhomolar, hmolar, smolar
 *     cpdef public bool stable
 */
struct __pyx_obj_8CoolProp_8CoolProp_PyCriticalState {
  PyObject_HEAD
  double T;
  double p;
  double rhomolar;
  double hmolar;
  double smolar;
  bool stable;
};


/* "../../../../usr/local/lib/python3.6/dist-packages/CoolProp-6.4.2.dev0-py3.6-linux-x86_64.egg/CoolProp/AbstractState.pxd":44
 *     cpdef public bool stable
 * 
 * cdef class PySpinodalData:             # <<<<<<<<<<<<<<
 *     cpdef public vector[double] tau, delta, M1
 * 
 */
struct __pyx_obj_8CoolProp_8CoolProp_PySpinodalData {
  PyObject_HEAD
  std::vector<double>  tau;
  std::vector<double>  delta;
  std::vector<double>  M1;
};


/* "../../../../usr/local/lib/python3.6/dist-packages/CoolProp-6.4.2.dev0-py3.6-linux-x86_64.egg/CoolProp/AbstractState.pxd":47
 *     cpdef public vector[double] tau, delta, M1
 * 
 * cdef class AbstractState:             # <<<<<<<<<<<<<<
 *     cdef cAbstractState.AbstractState *thisptr     # hold a C++ instance which we're wrapping
 *     cpdef update(self, constants_header.input_pairs iInput1, double Value1, double Value2)
 */
struct __pyx_obj_8CoolProp_8CoolProp_AbstractState {
  PyObject_HEAD
  struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *__pyx_vtab;
  CoolProp::AbstractState *thisptr;
};


/* "CoolProp.pxd":11
 * include "AbstractState.pxd"
 * 
 * cdef class State:             # <<<<<<<<<<<<<<
 *     cdef AbstractState pAS
 *     cdef readonly bytes Fluid, phase
 */
struct __pyx_obj_8CoolProp_8CoolProp_State {
  PyObject_HEAD
  struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *__pyx_vtab;
  struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *pAS;
  PyObject *Fluid;
  PyObject *phase;
  int iFluid;
  int iParam1;
  int iParam2;
  int iOutput;
  double T_;
  double rho_;
  double p_;
};


/* "PDSim/misc/datatypes.pxd":6
 * from cpython cimport bool
 * 
 * cdef class AnnotatedValue(object):             # <<<<<<<<<<<<<<
 *     cdef public object value
 *     cdef public str annotation, units, key
 */
struct __pyx_obj_5PDSim_4misc_9datatypes_AnnotatedValue {
  PyObject_HEAD
  PyObject *value;
  PyObject *annotation;
  PyObject *units;
  PyObject *key;
};


/* "PDSim/misc/datatypes.pxd":11
 * 
 * 
 * cdef class Collector(object):             # <<<<<<<<<<<<<<
 *     cdef public list vec
 *     """ The list that contains the values """
 */
struct __pyx_obj_5PDSim_4misc_9datatypes_Collector {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_Collector *__pyx_vtab;
  PyObject *vec;
};


/* "PDSim/misc/datatypes.pxd":17
 *     cpdef v(self, int ndmin = *)
 * 
 * cdef class listm(list):             # <<<<<<<<<<<<<<
 *     """
 *     See http://docs.cython.org/src/userguide/special_methods.html
 */
struct __pyx_obj_5PDSim_4misc_9datatypes_listm {
  PyListObject __pyx_base;
};


/* "PDSim/misc/datatypes.pxd":22
 *     """
 * 
 * cdef class arraym(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef double* data
 */
struct __pyx_obj_5PDSim_4misc_9datatypes_arraym {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *__pyx_vtab;
  double *data;
  int N;
};


/* "PDSim/flow/flow_models.pxd":21
 * cpdef double IsentropicNozzle(double A, State State_up, State State_down, int other_output=*)
 * 
 * cdef class FlowFunction(object):             # <<<<<<<<<<<<<<
 *     cpdef double call(self, FlowPath FP) except *
 *     cpdef resize(self, int Nvalues)
 */
struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction *__pyx_vtab;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *flows;
  int Nflows;
  PyObject *__name__;
  PyObject *__strf__;
};


/* "PDSim/flow/flow_models.pxd":28
 *     cpdef public __name__, __strf__
 * 
 * cdef class PyFlowFunctionWrapper(FlowFunction):             # <<<<<<<<<<<<<<
 *     cdef public dict kwargs
 *     cdef public object Function
 */
struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper {
  struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction __pyx_base;
  PyObject *kwargs;
  PyObject *Function;
};


/* "PDSim/flow/flow_models.pxd":34
 *     cpdef double call(self, FlowPath FP) except *
 * 
 * cdef class IsentropicNozzleWrapper(FlowFunction):             # <<<<<<<<<<<<<<
 *     cpdef double call(self, FlowPath FP) except *
 * 
 */
struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper {
  struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction __pyx_base;
};


/* "PDSim/flow/flow_models.pxd":39
 * cpdef double FrictionCorrectedIsentropicNozzle(double A, State State_up, State State_down, double delta, int Type, double t = *, double ro = *)
 * 
 * cdef class ValveModel(object):             # <<<<<<<<<<<<<<
 *     cdef public double A_port,A_valve,d_valve,rho_valve,d_port,m_eff,C_D,k_valve,x_stopper
 *     cdef public object key_up, key_down
 */
struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel *__pyx_vtab;
  double A_port;
  double A_valve;
  double d_valve;
  double rho_valve;
  double d_port;
  double m_eff;
  double C_D;
  double k_valve;
  double x_stopper;
  PyObject *key_up;
  PyObject *key_down;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State_up;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State_down;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *xv;
  double x_tr;
};


/* "PDSim/flow/flow.pxd":17
 * from PDSim.misc.datatypes cimport arraym
 * 
 * cdef class FlowPathCollection(list):             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection {
  PyListObject __pyx_base;
  struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPathCollection *__pyx_vtab;
  int N;
  int Nexists;
  double omega;
  PyObject *flow_paths;
};


/* "PDSim/flow/flow.pxd":34
 * 
 * #Make a stripped down class with the necessary terms included
 * cdef class FlowPath(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef bytes m_key_up,m_key_down,m_key1,m_key2
 */
struct __pyx_obj_5PDSim_4flow_4flow_FlowPath {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPath *__pyx_vtab;
  PyObject *m_key_up;
  PyObject *m_key_down;
  PyObject *m_key1;
  PyObject *m_key2;
  int exists;
  int key1_exists;
  int key2_exists;
  int key_up_exists;
  int key_down_exists;
  long key1Index;
  long key2Index;
  long key_up_Index;
  long key_down_Index;
  int ikey1;
  int ikey2;
  int ikey_up;
  int ikey_down;
  double mdot;
  double h_up;
  double h_down;
  double T_up;
  double p_up;
  double p_down;
  double A;
  double edot;
  struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *MdotFcn;
  PyObject *MdotFcn_str;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State1;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State2;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State_up;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State_down;
};



/* "../../../../usr/local/lib/python3.6/dist-packages/CoolProp-6.4.2.dev0-py3.6-linux-x86_64.egg/CoolProp/AbstractState.pxd":47
 *     cpdef public vector[double] tau, delta, M1
 * 
 * cdef class AbstractState:             # <<<<<<<<<<<<<<
 *     cdef cAbstractState.AbstractState *thisptr     # hold a C++ instance which we're wrapping
 *     cpdef update(self, constants_header.input_pairs iInput1, double Value1, double Value2)
 */

struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState {
  PyObject *(*update)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::input_pairs, double, double, int __pyx_skip_dispatch);
  PyObject *(*update_with_guesses)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::input_pairs, double, double, struct __pyx_obj_8CoolProp_8CoolProp_PyGuessesStructure *, int __pyx_skip_dispatch);
  PyObject *(*set_mole_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::vector<double> , int __pyx_skip_dispatch);
  PyObject *(*set_mass_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::vector<double> , int __pyx_skip_dispatch);
  PyObject *(*set_volu_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::vector<double> , int __pyx_skip_dispatch);
  std::string (*get_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*apply_simple_mixing_rule)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, size_t, std::string, int __pyx_skip_dispatch);
  PyObject *(*name)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*backend_name)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*fluid_names)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*fluid_param_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, int __pyx_skip_dispatch);
  PyObject *(*set_fluid_parameter_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, std::string, double, int __pyx_skip_dispatch);
  double (*get_fluid_parameter_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, std::string, int __pyx_skip_dispatch);
  PyObject *(*change_EOS)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, std::string, int __pyx_skip_dispatch);
  CoolProp::phases (*phase)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*specify_phase)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::phases, int __pyx_skip_dispatch);
  PyObject *(*unspecify_phase)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Tmin)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Tmax)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*pmax)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Ttriple)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*T_critical)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomass_critical)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomolar_critical)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*p_critical)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*all_critical_points)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*criticality_contour_values)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*build_spinodal)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  struct __pyx_obj_8CoolProp_8CoolProp_PySpinodalData *(*get_spinodal_data)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*T_reducing)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomolar_reducing)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomass_reducing)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*tangent_plane_distance)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, double, double, std::vector<double> , int __pyx_skip_dispatch, struct __pyx_opt_args_8CoolProp_8CoolProp_13AbstractState_tangent_plane_distance *__pyx_optional_args);
  double (*T)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*p)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Q)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*compressibility_factor)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*hmolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*smolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*umolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cpmolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cp0molar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cvmolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*hmass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*smass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*umass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cpmass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cp0mass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cvmass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*gibbsmass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*gibbsmolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*helmholtzmass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*helmholtzmolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*speed_sound)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*gas_constant)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*tau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*delta)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*viscosity)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*conductivity)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*conformal_state)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, __pyx_t_8CoolProp_8typedefs_CoolPropDbl, __pyx_t_8CoolProp_8typedefs_CoolPropDbl, int __pyx_skip_dispatch);
  PyObject *(*conductivity_contributions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*viscosity_contributions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*surface_tension)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Prandtl)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Bvirial)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Cvirial)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*PIP)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*fundamental_derivative_of_gas_dynamics)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*isothermal_compressibility)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*isobaric_expansion_coefficient)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*fugacity)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, int __pyx_skip_dispatch);
  double (*fugacity_coefficient)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, int __pyx_skip_dispatch);
  double (*chemical_potential)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, int __pyx_skip_dispatch);
  double (*gibbsmolar_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*gibbsmass_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*hmolar_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*hmass_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*smolar_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*smass_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*umolar_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*umass_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*volumemolar_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*volumemass_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*helmholtzmolar_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*helmholtzmass_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*gibbsmolar_residual)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*hmolar_residual)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*smolar_residual)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*molar_mass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*acentric_factor)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*true_critical_point)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*get_fluid_constant)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*keyed_output)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*trivial_keyed_output)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*saturated_liquid_keyed_output)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*saturated_vapor_keyed_output)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int __pyx_skip_dispatch);
  PyObject *(*ideal_curve)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*first_partial_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*second_partial_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*first_saturation_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*second_saturation_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*first_two_phase_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*second_two_phase_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*first_two_phase_deriv_splined)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, double, int __pyx_skip_dispatch);
  double (*melting_line)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int, int, double, int __pyx_skip_dispatch);
  bool (*has_melting_line)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*saturation_ancillary)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int, CoolProp::parameters, double, int __pyx_skip_dispatch);
  PyObject *(*build_phase_envelope)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, int __pyx_skip_dispatch);
  struct __pyx_obj_8CoolProp_8CoolProp_PyPhaseEnvelopeData *(*get_phase_envelope_data)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*mole_fractions_liquid)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*mole_fractions_vapor)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*get_mass_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*get_mole_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*alpha0)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*dalpha0_dDelta)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*dalpha0_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alpha0_dDelta2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alpha0_dDelta_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alpha0_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alpha0_dTau3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alpha0_dDelta_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alpha0_dDelta2_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alpha0_dDelta3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*alphar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*dalphar_dDelta)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*dalphar_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alphar_dDelta2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alphar_dDelta_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alphar_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alphar_dDelta3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alphar_dDelta2_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alphar_dDelta_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alphar_dTau3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d4alphar_dDelta4)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d4alphar_dDelta3_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d4alphar_dDelta2_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d4alphar_dDelta_dTau3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d4alphar_dTau4)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_0set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, char *, char *, std::string, double, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_1set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, PyObject *, PyObject *, std::string, double, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_2set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, PyObject *, PyObject *, std::string, double, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_3set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, std::string, std::string, double, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_4set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, short, short, std::string, double, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_5set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int, int, std::string, double, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_6set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, long, long, std::string, double, int __pyx_skip_dispatch);
  double (*__pyx_fuse_0get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, char *, char *, std::string, int __pyx_skip_dispatch);
  double (*__pyx_fuse_1get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, PyObject *, PyObject *, std::string, int __pyx_skip_dispatch);
  double (*__pyx_fuse_2get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, PyObject *, PyObject *, std::string, int __pyx_skip_dispatch);
  double (*__pyx_fuse_3get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, std::string, std::string, int __pyx_skip_dispatch);
  double (*__pyx_fuse_4get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, short, short, std::string, int __pyx_skip_dispatch);
  double (*__pyx_fuse_5get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int, int, std::string, int __pyx_skip_dispatch);
  double (*__pyx_fuse_6get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, long, long, std::string, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_0set_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, char *, char *, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_1set_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, PyObject *, PyObject *, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_2set_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, PyObject *, PyObject *, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_3set_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, std::string, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_4set_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, short, short, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_5set_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int, int, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_6set_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, long, long, std::string, std::string, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *__pyx_vtabptr_8CoolProp_8CoolProp_AbstractState;


/* "CoolProp.pxd":11
 * include "AbstractState.pxd"
 * 
 * cdef class State:             # <<<<<<<<<<<<<<
 *     cdef AbstractState pAS
 *     cdef readonly bytes Fluid, phase
 */

struct __pyx_vtabstruct_8CoolProp_8CoolProp_State {
  PyObject *(*set_Fluid)(struct __pyx_obj_8CoolProp_8CoolProp_State *, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*speed_test)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int, int __pyx_skip_dispatch);
  PyObject *(*update)(struct __pyx_obj_8CoolProp_8CoolProp_State *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*update_ph)(struct __pyx_obj_8CoolProp_8CoolProp_State *, double, double, int __pyx_skip_dispatch);
  PyObject *(*update_Trho)(struct __pyx_obj_8CoolProp_8CoolProp_State *, double, double, int __pyx_skip_dispatch);
  struct __pyx_obj_8CoolProp_8CoolProp_State *(*copy)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*Props)(struct __pyx_obj_8CoolProp_8CoolProp_State *, CoolProp::parameters, int __pyx_skip_dispatch);
  long (*Phase)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_Q)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_T)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_p)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_h)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_rho)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_s)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_u)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_visc)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_cond)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_cp)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_cp0)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_cv)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_MM)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_dpdT)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_speed_sound)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  PyObject *(*get_Tsat)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch, struct __pyx_opt_args_8CoolProp_8CoolProp_5State_get_Tsat *__pyx_optional_args);
  PyObject *(*get_subcooling)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  PyObject *(*get_superheat)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *__pyx_vtabptr_8CoolProp_8CoolProp_State;


/* "PDSim/misc/datatypes.pxd":11
 * 
 * 
 * cdef class Collector(object):             # <<<<<<<<<<<<<<
 *     cdef public list vec
 *     """ The list that contains the values """
 */

struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_Collector {
  PyObject *(*v)(struct __pyx_obj_5PDSim_4misc_9datatypes_Collector *, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4misc_9datatypes_9Collector_v *__pyx_optional_args);
};
static struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_Collector *__pyx_vtabptr_5PDSim_4misc_9datatypes_Collector;


/* "PDSim/misc/datatypes.pxd":22
 *     """
 * 
 * cdef class arraym(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef double* data
 */

struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym {
  void (*set_data)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, double *, int);
  PyObject *(*set_size)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int, int __pyx_skip_dispatch);
  PyObject *(*dealloc)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*copy)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*slice)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int, int, struct __pyx_opt_args_5PDSim_4misc_9datatypes_6arraym_slice *__pyx_optional_args);
  PyObject *(*extend)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  double (*get_index)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int, int __pyx_skip_dispatch);
  PyObject *(*set_index)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int, double, int __pyx_skip_dispatch);
  PyObject *(*fill)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, double, int __pyx_skip_dispatch);
  PyBoolObject *(*all_finite)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *__pyx_vtabptr_5PDSim_4misc_9datatypes_arraym;


/* "PDSim/flow/flow_models.pxd":21
 * cpdef double IsentropicNozzle(double A, State State_up, State State_down, int other_output=*)
 * 
 * cdef class FlowFunction(object):             # <<<<<<<<<<<<<<
 *     cpdef double call(self, FlowPath FP) except *
 *     cpdef resize(self, int Nvalues)
 */

struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction {
  double (*call)(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *, struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch);
  PyObject *(*resize)(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction *__pyx_vtabptr_5PDSim_4flow_11flow_models_FlowFunction;


/* "PDSim/flow/flow_models.pxd":28
 *     cpdef public __name__, __strf__
 * 
 * cdef class PyFlowFunctionWrapper(FlowFunction):             # <<<<<<<<<<<<<<
 *     cdef public dict kwargs
 *     cdef public object Function
 */

struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper {
  struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction __pyx_base;
};
static struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_vtabptr_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper;


/* "PDSim/flow/flow_models.pxd":34
 *     cpdef double call(self, FlowPath FP) except *
 * 
 * cdef class IsentropicNozzleWrapper(FlowFunction):             # <<<<<<<<<<<<<<
 *     cpdef double call(self, FlowPath FP) except *
 * 
 */

struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper {
  struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction __pyx_base;
};
static struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *__pyx_vtabptr_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper;


/* "PDSim/flow/flow_models.pxd":39
 * cpdef double FrictionCorrectedIsentropicNozzle(double A, State State_up, State State_down, double delta, int Type, double t = *, double ro = *)
 * 
 * cdef class ValveModel(object):             # <<<<<<<<<<<<<<
 *     cdef public double A_port,A_valve,d_valve,rho_valve,d_port,m_eff,C_D,k_valve,x_stopper
 *     cdef public object key_up, key_down
 */

struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel {
  PyObject *(*set_xv)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*get_xv)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, int __pyx_skip_dispatch);
  double (*A)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, int __pyx_skip_dispatch);
  PyObject *(*get_States)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_pressure_dominant)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, double, double, double, double, double);
  PyObject *(*_flux_dominant)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, double, double, double, double);
  double (*flow_velocity)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, struct __pyx_obj_8CoolProp_8CoolProp_State *, struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*derivs)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*__pyx___cdict__)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel *__pyx_vtabptr_5PDSim_4flow_11flow_models_ValveModel;


/* "PDSim/flow/flow.pyx":57
 * 
 * @cython.final
 * cdef class FlowPathCollection(list):             # <<<<<<<<<<<<<<
 * 
 *     cpdef update_existence(self, Core):
 */

struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPathCollection {
  PyObject *(*update_existence)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*calculate)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, int __pyx_skip_dispatch);
  PyObject *(*get_deepcopy)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, int __pyx_skip_dispatch);
  PyObject *(*sumterms)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPathCollection *__pyx_vtabptr_5PDSim_4flow_4flow_FlowPathCollection;
static PyObject *__pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_update_existence(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, PyObject *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_calculate(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_get_deepcopy(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_sumterms(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);


/* "PDSim/flow/flow.pyx":194
 *         return [Flow.get_deepcopy() for Flow in self]
 * 
 * cdef class FlowPath(object):             # <<<<<<<<<<<<<<
 *     """
 * 
 */

struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPath {
  PyObject *(*__pyx___cdict__)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4flow_4flow_8FlowPath___cdict__ *__pyx_optional_args);
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *(*get_deepcopy)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch);
  PyObject *(*calculate)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPath *__pyx_vtabptr_5PDSim_4flow_4flow_FlowPath;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
  static PyCodeObject *__pyx_frame_code = NULL;\
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
  int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
                  (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          tstate->tracing++;\
          tstate->use_tracing = 0;\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          tstate->use_tracing = 1;\
          tstate->tracing--;\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      tstate->tracing++;
      tstate->use_tracing = 0;
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      tstate->use_tracing = 1;
      tstate->tracing--;
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (tstate->use_tracing) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (tstate->use_tracing) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      tstate->tracing++;
      tstate->use_tracing = 0;
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      tstate->use_tracing = 1;
      tstate->tracing--;
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_bytes(
         PyObject* string, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        PyBytes_AS_STRING(string), PyBytes_GET_SIZE(string),
        start, stop, encoding, errors, decode_func);
}

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* None.proto */
#include <new>

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_update_existence(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self, PyObject *__pyx_v_Core, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_calculate(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_sumterms(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_summerdT, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_summerdm, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_get_deepcopy(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4flow_4flow_8FlowPath___cdict__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4flow_4flow_8FlowPath___cdict__ *__pyx_optional_args); /* proto*/
static struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_f_5PDSim_4flow_4flow_8FlowPath_get_deepcopy(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4flow_4flow_8FlowPath_calculate(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'cython' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'CoolProp.typedefs' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'CoolProp' */

/* Module declarations from 'CoolProp.constants_header' */

/* Module declarations from 'CoolProp.cAbstractState' */

/* Module declarations from 'CoolProp.CoolProp' */
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_PyPhaseEnvelopeData = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_PyGuessesStructure = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_PyCriticalState = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_PySpinodalData = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_AbstractState = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_State = 0;

/* Module declarations from 'CoolProp.State' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'PDSim.misc.datatypes' */
static PyTypeObject *__pyx_ptype_5PDSim_4misc_9datatypes_AnnotatedValue = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4misc_9datatypes_Collector = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4misc_9datatypes_listm = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4misc_9datatypes_arraym = 0;
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*__pyx_f_5PDSim_4misc_9datatypes_empty_arraym)(int, int __pyx_skip_dispatch); /*proto*/

/* Module declarations from 'libc.math' */

/* Module declarations from 'PDSim.flow.flow_models' */
static PyTypeObject *__pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4flow_11flow_models_ValveModel = 0;

/* Module declarations from 'PDSim.flow.flow' */
static PyTypeObject *__pyx_ptype_5PDSim_4flow_4flow_FlowPathCollection = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4flow_4flow_FlowPath = 0;
static PyObject *__pyx_f_5PDSim_4flow_4flow_to_bytes(PyObject *); /*proto*/
static PyObject *__pyx_f_5PDSim_4flow_4flow_sumterms_given_CV(PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5PDSim_4flow_4flow___pyx_unpickle_FlowPathCollection__set_state(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "PDSim.flow.flow"
extern int __pyx_module_is_main_PDSim__flow__flow;
int __pyx_module_is_main_PDSim__flow__flow = 0;

/* Implementation of 'PDSim.flow.flow' */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_ValueError;
static const char __pyx_k_d[] = "d";
static const char __pyx_k_FP[] = "FP";
static const char __pyx_k__2[] = "";
static const char __pyx_k_i1[] = "i1";
static const char __pyx_k_i2[] = "i2";
static const char __pyx_k_CVs[] = "CVs";
static const char __pyx_k_Gas[] = "Gas";
static const char __pyx_k_and[] = " and ";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_T_up[] = "T_up";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_h_up[] = "h_up";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_item[] = "item";
static const char __pyx_k_key1[] = "key1";
static const char __pyx_k_key2[] = "key2";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mdot[] = "mdot";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_p_up[] = "p_up";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_utf8[] = "utf8";
static const char __pyx_k_Flows[] = "Flows";
static const char __pyx_k_State[] = "State";
static const char __pyx_k_Tubes[] = "Tubes";
static const char __pyx_k_ascii[] = "ascii";
static const char __pyx_k_cdict[] = "__cdict__";
static const char __pyx_k_dumps[] = "dumps";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_loads[] = "loads";
static const char __pyx_k_omega[] = "omega";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_Nflows[] = "Nflows";
static const char __pyx_k_State1[] = "State1";
static const char __pyx_k_State2[] = "State2";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_exists[] = "exists";
static const char __pyx_k_h_down[] = "h_down";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_key_up[] = "key_up";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_p_down[] = "p_down";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_MdotFcn[] = "MdotFcn";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_FlowPath[] = "FlowPath";
static const char __pyx_k_State_up[] = "State_up";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_key_down[] = "key_down";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_summerdT[] = "summerdT";
static const char __pyx_k_summerdm[] = "summerdm";
static const char __pyx_k_AddStates[] = "AddStates";
static const char __pyx_k_calculate[] = "calculate";
static const char __pyx_k_get_Nodes[] = "get_Nodes";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_StateClass[] = "StateClass";
static const char __pyx_k_State_down[] = "State_down";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_exists_keys[] = "exists_keys";
static const char __pyx_k_flow_models[] = "flow_models";
static const char __pyx_k_get_deepcopy[] = "get_deepcopy";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_struct___init[] = "struct.__init__";
static const char __pyx_k_CoolProp_State[] = "CoolProp.State";
static const char __pyx_k_MdotFcn_kwargs[] = "MdotFcn_kwargs";
static const char __pyx_k_PDSim_flow_flow[] = "PDSim.flow.flow";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_rebuildFlowPath[] = "rebuildFlowPath";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_FlowPathCollection[] = "FlowPathCollection";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_PDSim_flow_flow_pyx[] = "PDSim/flow/flow.pyx";
static const char __pyx_k_PyFlowFunctionWrapper[] = "PyFlowFunctionWrapper";
static const char __pyx_k_pyx_unpickle_FlowPathCollectio[] = "__pyx_unpickle_FlowPathCollection";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_Cannot_apply_unary_operator_to_a[] = "Cannot apply unary operator to arraym instances with lengths of ";
static const char __pyx_k_Incompatible_checksums_s_vs_0x4c[] = "Incompatible checksums (%s vs 0x4cceff6 = (N, Nexists, flow_paths, omega))";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static PyObject *__pyx_n_s_AddStates;
static PyObject *__pyx_n_s_CVs;
static PyObject *__pyx_kp_s_Cannot_apply_unary_operator_to_a;
static PyObject *__pyx_n_s_CoolProp_State;
static PyObject *__pyx_n_s_FP;
static PyObject *__pyx_n_s_FlowPath;
static PyObject *__pyx_n_s_FlowPathCollection;
static PyObject *__pyx_n_s_Flows;
static PyObject *__pyx_n_s_Gas;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x4c;
static PyObject *__pyx_n_s_MdotFcn;
static PyObject *__pyx_n_s_MdotFcn_kwargs;
static PyObject *__pyx_n_s_Nflows;
static PyObject *__pyx_n_s_PDSim_flow_flow;
static PyObject *__pyx_kp_s_PDSim_flow_flow_pyx;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_PyFlowFunctionWrapper;
static PyObject *__pyx_n_s_State;
static PyObject *__pyx_n_s_State1;
static PyObject *__pyx_n_s_State2;
static PyObject *__pyx_n_s_StateClass;
static PyObject *__pyx_n_s_State_down;
static PyObject *__pyx_n_s_State_up;
static PyObject *__pyx_n_s_T_up;
static PyObject *__pyx_n_s_Tubes;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_b__2;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_kp_s_and;
static PyObject *__pyx_n_s_ascii;
static PyObject *__pyx_n_s_calculate;
static PyObject *__pyx_n_s_cdict;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dumps;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_exists;
static PyObject *__pyx_n_s_exists_keys;
static PyObject *__pyx_n_s_flow_models;
static PyObject *__pyx_n_s_get_Nodes;
static PyObject *__pyx_n_s_get_deepcopy;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_h_down;
static PyObject *__pyx_n_s_h_up;
static PyObject *__pyx_n_s_i1;
static PyObject *__pyx_n_s_i2;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_item;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_key1;
static PyObject *__pyx_n_s_key2;
static PyObject *__pyx_n_s_key_down;
static PyObject *__pyx_n_s_key_up;
static PyObject *__pyx_n_s_loads;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mdot;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_omega;
static PyObject *__pyx_n_s_p_down;
static PyObject *__pyx_n_s_p_up;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_FlowPathCollectio;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rebuildFlowPath;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_struct___init;
static PyObject *__pyx_n_s_summerdT;
static PyObject *__pyx_n_s_summerdm;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_utf8;
static PyObject *__pyx_pf_5PDSim_4flow_4flow_sumterms_given_CV(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_key, PyObject *__pyx_v_Flows); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_6struct___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_update_existence(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self, PyObject *__pyx_v_Core); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_2calculate(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_4sumterms(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_summerdT, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_summerdm); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_6get_deepcopy(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_8__reduce_cython__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_10__setstate_cython__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath___init__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_key1, PyObject *__pyx_v_key2, PyObject *__pyx_v_MdotFcn, PyObject *__pyx_v_MdotFcn_kwargs, PyObject *__pyx_v_Nflows); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_2__cdict__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_AddStates); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_4get_deepcopy(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_6calculate(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4key1___set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_4key1_2__get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4key2___set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_4key2_2__get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6key_up___set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_6key_up_2__get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_8key_down___set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_8key_down_2__get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_8__reduce__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_10__getstate__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_12__deepcopy__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memo); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_6exists___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6exists_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_11key1_exists___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_11key1_exists_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_11key2_exists___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_11key2_exists_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_13key_up_exists___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_13key_up_exists_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_15key_down_exists___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_15key_down_exists_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_9key1Index___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_9key1Index_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_9key2Index___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_9key2Index_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_12key_up_Index___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_12key_up_Index_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_14key_down_Index___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_14key_down_Index_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_5ikey1___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_5ikey1_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_5ikey2___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_5ikey2_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_7ikey_up___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_7ikey_up_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_9ikey_down___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_9ikey_down_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_4mdot___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4mdot_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_4h_up___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4h_up_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_6h_down___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6h_down_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_4T_up___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4T_up_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_4p_up___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4p_up_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_6p_down___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6p_down_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_1A___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_1A_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_4edot___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4edot_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_7MdotFcn___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_7MdotFcn_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_7MdotFcn_4__del__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str_4__del__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State1___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State1_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State1_4__del__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State2___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State2_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State2_4__del__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_8State_up___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_8State_up_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_8State_up_4__del__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_10State_down___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_10State_down_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_10State_down_4__del__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_2rebuildFlowPath(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_5PDSim_4flow_4flow_4__pyx_unpickle_FlowPathCollection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_5PDSim_4flow_4flow_FlowPathCollection(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5PDSim_4flow_4flow_FlowPath(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_update = {0, &__pyx_n_s_update, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyList_Type_index = {0, &__pyx_n_s_index, 0, 0, 0};
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_80539638;
static PyObject *__pyx_k__3;
static PyObject *__pyx_codeobj_;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__5;
/* Late includes */

/* "PDSim/flow/flow.pyx":11
 * import cython
 * 
 * cdef bytes to_bytes(object val):             # <<<<<<<<<<<<<<
 *     if isinstance(val, bytes):
 *         return <bytes>val
 */

static PyObject *__pyx_f_5PDSim_4flow_4flow_to_bytes(PyObject *__pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_bytes", 0);
  __Pyx_TraceCall("to_bytes", __pyx_f[0], 11, 0, __PYX_ERR(0, 11, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":12
 * 
 * cdef bytes to_bytes(object val):
 *     if isinstance(val, bytes):             # <<<<<<<<<<<<<<
 *         return <bytes>val
 *     else:
 */
  __pyx_t_1 = PyBytes_Check(__pyx_v_val); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PDSim/flow/flow.pyx":13
 * cdef bytes to_bytes(object val):
 *     if isinstance(val, bytes):
 *         return <bytes>val             # <<<<<<<<<<<<<<
 *     else:
 *         return val.encode('utf8')
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_val));
    __pyx_r = ((PyObject*)__pyx_v_val);
    goto __pyx_L0;

    /* "PDSim/flow/flow.pyx":12
 * 
 * cdef bytes to_bytes(object val):
 *     if isinstance(val, bytes):             # <<<<<<<<<<<<<<
 *         return <bytes>val
 *     else:
 */
  }

  /* "PDSim/flow/flow.pyx":15
 *         return <bytes>val
 *     else:
 *         return val.encode('utf8')             # <<<<<<<<<<<<<<
 * 
 * cpdef tuple sumterms_given_CV(key, list Flows):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_val, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_n_s_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_s_utf8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 15, __pyx_L1_error)
    __pyx_r = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "PDSim/flow/flow.pyx":11
 * import cython
 * 
 * cdef bytes to_bytes(object val):             # <<<<<<<<<<<<<<
 *     if isinstance(val, bytes):
 *         return <bytes>val
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.flow.flow.to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":17
 *         return val.encode('utf8')
 * 
 * cpdef tuple sumterms_given_CV(key, list Flows):             # <<<<<<<<<<<<<<
 *     """
 *     A function to sum all the mdot terms for a given control volume
 */

static PyObject *__pyx_pw_5PDSim_4flow_4flow_1sumterms_given_CV(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5PDSim_4flow_4flow_sumterms_given_CV(PyObject *__pyx_v_key, PyObject *__pyx_v_Flows, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_i;
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_Flow = 0;
  double __pyx_v_summer_mdot;
  double __pyx_v_summer_mdoth;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sumterms_given_CV", 0);
  __Pyx_TraceCall("sumterms_given_CV", __pyx_f[0], 17, 0, __PYX_ERR(0, 17, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":31
 *     cdef int i
 *     cdef FlowPath Flow
 *     cdef double summer_mdot = 0.0, summer_mdoth = 0.0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(len(Flows)):
 */
  __pyx_v_summer_mdot = 0.0;
  __pyx_v_summer_mdoth = 0.0;

  /* "PDSim/flow/flow.pyx":33
 *     cdef double summer_mdot = 0.0, summer_mdoth = 0.0
 * 
 *     for i in range(len(Flows)):             # <<<<<<<<<<<<<<
 *         Flow = <FlowPath>Flows[i]
 * 
 */
  if (unlikely(__pyx_v_Flows == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 33, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_Flows); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 33, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "PDSim/flow/flow.pyx":34
 * 
 *     for i in range(len(Flows)):
 *         Flow = <FlowPath>Flows[i]             # <<<<<<<<<<<<<<
 * 
 *         if not Flow.exists or abs(Flow.mdot)<1e-12:
 */
    if (unlikely(__pyx_v_Flows == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 34, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_Flows, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_t_4;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_Flow, ((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "PDSim/flow/flow.pyx":36
 *         Flow = <FlowPath>Flows[i]
 * 
 *         if not Flow.exists or abs(Flow.mdot)<1e-12:             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
    __pyx_t_7 = ((!(__pyx_v_Flow->exists != 0)) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = ((fabs(__pyx_v_Flow->mdot) < 1e-12) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "PDSim/flow/flow.pyx":37
 * 
 *         if not Flow.exists or abs(Flow.mdot)<1e-12:
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         if Flow.key_down == key:
 */
      goto __pyx_L3_continue;

      /* "PDSim/flow/flow.pyx":36
 *         Flow = <FlowPath>Flows[i]
 * 
 *         if not Flow.exists or abs(Flow.mdot)<1e-12:             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
    }

    /* "PDSim/flow/flow.pyx":39
 *             continue
 * 
 *         if Flow.key_down == key:             # <<<<<<<<<<<<<<
 *             summer_mdot+=Flow.mdot
 *             summer_mdoth+=Flow.mdot*Flow.h_up
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Flow), __pyx_n_s_key_down); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_v_key, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_6) {

      /* "PDSim/flow/flow.pyx":40
 * 
 *         if Flow.key_down == key:
 *             summer_mdot+=Flow.mdot             # <<<<<<<<<<<<<<
 *             summer_mdoth+=Flow.mdot*Flow.h_up
 * 
 */
      __pyx_v_summer_mdot = (__pyx_v_summer_mdot + __pyx_v_Flow->mdot);

      /* "PDSim/flow/flow.pyx":41
 *         if Flow.key_down == key:
 *             summer_mdot+=Flow.mdot
 *             summer_mdoth+=Flow.mdot*Flow.h_up             # <<<<<<<<<<<<<<
 * 
 *         elif Flow.key_up == key:
 */
      __pyx_v_summer_mdoth = (__pyx_v_summer_mdoth + (__pyx_v_Flow->mdot * __pyx_v_Flow->h_up));

      /* "PDSim/flow/flow.pyx":39
 *             continue
 * 
 *         if Flow.key_down == key:             # <<<<<<<<<<<<<<
 *             summer_mdot+=Flow.mdot
 *             summer_mdoth+=Flow.mdot*Flow.h_up
 */
      goto __pyx_L8;
    }

    /* "PDSim/flow/flow.pyx":43
 *             summer_mdoth+=Flow.mdot*Flow.h_up
 * 
 *         elif Flow.key_up == key:             # <<<<<<<<<<<<<<
 *             summer_mdot-=Flow.mdot
 *             summer_mdoth-=Flow.mdot*Flow.h_up
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Flow), __pyx_n_s_key_up); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_v_key, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "PDSim/flow/flow.pyx":44
 * 
 *         elif Flow.key_up == key:
 *             summer_mdot-=Flow.mdot             # <<<<<<<<<<<<<<
 *             summer_mdoth-=Flow.mdot*Flow.h_up
 * 
 */
      __pyx_v_summer_mdot = (__pyx_v_summer_mdot - __pyx_v_Flow->mdot);

      /* "PDSim/flow/flow.pyx":45
 *         elif Flow.key_up == key:
 *             summer_mdot-=Flow.mdot
 *             summer_mdoth-=Flow.mdot*Flow.h_up             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      __pyx_v_summer_mdoth = (__pyx_v_summer_mdoth - (__pyx_v_Flow->mdot * __pyx_v_Flow->h_up));

      /* "PDSim/flow/flow.pyx":43
 *             summer_mdoth+=Flow.mdot*Flow.h_up
 * 
 *         elif Flow.key_up == key:             # <<<<<<<<<<<<<<
 *             summer_mdot-=Flow.mdot
 *             summer_mdoth-=Flow.mdot*Flow.h_up
 */
      goto __pyx_L8;
    }

    /* "PDSim/flow/flow.pyx":48
 * 
 *         else:
 *             continue             # <<<<<<<<<<<<<<
 * 
 *     return summer_mdot, summer_mdoth
 */
    /*else*/ {
      goto __pyx_L3_continue;
    }
    __pyx_L8:;
    __pyx_L3_continue:;
  }

  /* "PDSim/flow/flow.pyx":50
 *             continue
 * 
 *     return summer_mdot, summer_mdoth             # <<<<<<<<<<<<<<
 * 
 * class struct(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_summer_mdot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_summer_mdoth); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_4);
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "PDSim/flow/flow.pyx":17
 *         return val.encode('utf8')
 * 
 * cpdef tuple sumterms_given_CV(key, list Flows):             # <<<<<<<<<<<<<<
 *     """
 *     A function to sum all the mdot terms for a given control volume
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("PDSim.flow.flow.sumterms_given_CV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_Flow);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_1sumterms_given_CV(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4flow_4flow_sumterms_given_CV[] = "sumterms_given_CV(key, list Flows) -> tuple\n\n    A function to sum all the mdot terms for a given control volume\n    \n    Searches the list of flows and for each element in the flows, checks whether\n    the key matches one of upstream or downstream key\n    \n    Parameters\n    ----------\n    key: string\n    Flows: :class:`FlowPathCollection <PDSim.flow.flow.FlowPathCollection>` instance \n    ";
static PyObject *__pyx_pw_5PDSim_4flow_4flow_1sumterms_given_CV(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_Flows = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sumterms_given_CV (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_Flows,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Flows)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sumterms_given_CV", 1, 2, 2, 1); __PYX_ERR(0, 17, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sumterms_given_CV") < 0)) __PYX_ERR(0, 17, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = values[0];
    __pyx_v_Flows = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sumterms_given_CV", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 17, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.sumterms_given_CV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Flows), (&PyList_Type), 1, "Flows", 1))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_sumterms_given_CV(__pyx_self, __pyx_v_key, __pyx_v_Flows);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_sumterms_given_CV(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_key, PyObject *__pyx_v_Flows) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sumterms_given_CV", 0);
  __Pyx_TraceCall("sumterms_given_CV (wrapper)", __pyx_f[0], 17, 0, __PYX_ERR(0, 17, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4flow_4flow_sumterms_given_CV(__pyx_v_key, __pyx_v_Flows, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.sumterms_given_CV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":53
 * 
 * class struct(object):
 *     def __init__(self,d):             # <<<<<<<<<<<<<<
 *         self.__dict__.update(d)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_6struct_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4flow_4flow_6struct___init__[] = "struct.__init__(self, d)";
static PyMethodDef __pyx_mdef_5PDSim_4flow_4flow_6struct_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5PDSim_4flow_4flow_6struct_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4flow_4flow_6struct___init__};
static PyObject *__pyx_pw_5PDSim_4flow_4flow_6struct_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_d = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_d,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 53, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 53, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_d = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 53, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.struct.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_6struct___init__(__pyx_self, __pyx_v_self, __pyx_v_d);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_6struct___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj_)
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 53, 0, __PYX_ERR(0, 53, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":54
 * class struct(object):
 *     def __init__(self,d):
 *         self.__dict__.update(d)             # <<<<<<<<<<<<<<
 * 
 * @cython.final
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_update); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_d) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_d);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":53
 * 
 * class struct(object):
 *     def __init__(self,d):             # <<<<<<<<<<<<<<
 *         self.__dict__.update(d)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PDSim.flow.flow.struct.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":59
 * cdef class FlowPathCollection(list):
 * 
 *     cpdef update_existence(self, Core):             # <<<<<<<<<<<<<<
 *         """
 *         A function to update the pointers for the flow path as well as check existence
 */

static PyObject *__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_1update_existence(PyObject *__pyx_v_self, PyObject *__pyx_v_Core); /*proto*/
static PyObject *__pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_update_existence(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self, PyObject *__pyx_v_Core, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_FP = 0;
  PyObject *__pyx_v_Tube_Nodes = 0;
  PyObject *__pyx_v_exists_keys = 0;
  PyObject *__pyx_v_flow_paths = 0;
  PyObject *__pyx_v_CV = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_existence", 0);
  __Pyx_TraceCall("update_existence", __pyx_f[0], 59, 0, __PYX_ERR(0, 59, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":73
 *         """
 *         cdef FlowPath FP
 *         cdef dict Tube_Nodes = Core.Tubes.get_Nodes()             # <<<<<<<<<<<<<<
 *         cdef list exists_keys = Core.CVs.exists_keys
 *         cdef list flow_paths = self
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_Core, __pyx_n_s_Tubes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_Nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_v_Tube_Nodes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":74
 *         cdef FlowPath FP
 *         cdef dict Tube_Nodes = Core.Tubes.get_Nodes()
 *         cdef list exists_keys = Core.CVs.exists_keys             # <<<<<<<<<<<<<<
 *         cdef list flow_paths = self
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_Core, __pyx_n_s_CVs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exists_keys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_v_exists_keys = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "PDSim/flow/flow.pyx":75
 *         cdef dict Tube_Nodes = Core.Tubes.get_Nodes()
 *         cdef list exists_keys = Core.CVs.exists_keys
 *         cdef list flow_paths = self             # <<<<<<<<<<<<<<
 * 
 *         # Set some things in the class that are invariant to save time
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_v_flow_paths = ((PyObject*)__pyx_v_self);

  /* "PDSim/flow/flow.pyx":78
 * 
 *         # Set some things in the class that are invariant to save time
 *         self.Nexists = len(exists_keys)             # <<<<<<<<<<<<<<
 *         self.N = len(self)
 *         self.omega = Core.omega
 */
  if (unlikely(__pyx_v_exists_keys == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 78, __pyx_L1_error)
  }
  __pyx_t_4 = PyList_GET_SIZE(__pyx_v_exists_keys); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 78, __pyx_L1_error)
  __pyx_v_self->Nexists = __pyx_t_4;

  /* "PDSim/flow/flow.pyx":79
 *         # Set some things in the class that are invariant to save time
 *         self.Nexists = len(exists_keys)
 *         self.N = len(self)             # <<<<<<<<<<<<<<
 *         self.omega = Core.omega
 * 
 */
  __pyx_t_4 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 79, __pyx_L1_error)
  __pyx_v_self->N = __pyx_t_4;

  /* "PDSim/flow/flow.pyx":80
 *         self.Nexists = len(exists_keys)
 *         self.N = len(self)
 *         self.omega = Core.omega             # <<<<<<<<<<<<<<
 * 
 *         for FP in flow_paths:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_Core, __pyx_n_s_omega); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->omega = __pyx_t_5;

  /* "PDSim/flow/flow.pyx":82
 *         self.omega = Core.omega
 * 
 *         for FP in flow_paths:             # <<<<<<<<<<<<<<
 *             ## Update the pointers to the states for the ends of the flow path
 *             if FP.key1 in exists_keys:
 */
  if (unlikely(__pyx_v_flow_paths == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 82, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_v_flow_paths; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 82, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4flow_4flow_FlowPath))))) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_FP, ((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "PDSim/flow/flow.pyx":84
 *         for FP in flow_paths:
 *             ## Update the pointers to the states for the ends of the flow path
 *             if FP.key1 in exists_keys:             # <<<<<<<<<<<<<<
 *                 CV = Core.CVs[FP.key1]
 *                 FP.State1=CV.State
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_v_exists_keys, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {

      /* "PDSim/flow/flow.pyx":85
 *             ## Update the pointers to the states for the ends of the flow path
 *             if FP.key1 in exists_keys:
 *                 CV = Core.CVs[FP.key1]             # <<<<<<<<<<<<<<
 *                 FP.State1=CV.State
 *                 FP.key1_exists = True
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_Core, __pyx_n_s_CVs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 85, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 85, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_CV, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "PDSim/flow/flow.pyx":86
 *             if FP.key1 in exists_keys:
 *                 CV = Core.CVs[FP.key1]
 *                 FP.State1=CV.State             # <<<<<<<<<<<<<<
 *                 FP.key1_exists = True
 *                 FP.ikey1 = exists_keys.index(FP.key1)
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_CV, __pyx_n_s_State); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 86, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(0, 86, __pyx_L1_error)
      __Pyx_GIVEREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_v_FP->State1);
      __Pyx_DECREF(((PyObject *)__pyx_v_FP->State1));
      __pyx_v_FP->State1 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_8);
      __pyx_t_8 = 0;

      /* "PDSim/flow/flow.pyx":87
 *                 CV = Core.CVs[FP.key1]
 *                 FP.State1=CV.State
 *                 FP.key1_exists = True             # <<<<<<<<<<<<<<
 *                 FP.ikey1 = exists_keys.index(FP.key1)
 *             elif FP.key1 in Tube_Nodes:
 */
      __pyx_v_FP->key1_exists = 1;

      /* "PDSim/flow/flow.pyx":88
 *                 FP.State1=CV.State
 *                 FP.key1_exists = True
 *                 FP.ikey1 = exists_keys.index(FP.key1)             # <<<<<<<<<<<<<<
 *             elif FP.key1 in Tube_Nodes:
 *                 FP.State1 = Tube_Nodes[FP.key1]
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyList_Type_index, __pyx_v_exists_keys, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_FP->ikey1 = __pyx_t_9;

      /* "PDSim/flow/flow.pyx":84
 *         for FP in flow_paths:
 *             ## Update the pointers to the states for the ends of the flow path
 *             if FP.key1 in exists_keys:             # <<<<<<<<<<<<<<
 *                 CV = Core.CVs[FP.key1]
 *                 FP.State1=CV.State
 */
      goto __pyx_L5;
    }

    /* "PDSim/flow/flow.pyx":89
 *                 FP.key1_exists = True
 *                 FP.ikey1 = exists_keys.index(FP.key1)
 *             elif FP.key1 in Tube_Nodes:             # <<<<<<<<<<<<<<
 *                 FP.State1 = Tube_Nodes[FP.key1]
 *                 FP.key1_exists = False
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_v_Tube_Nodes == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 89, __pyx_L1_error)
    }
    __pyx_t_7 = (__Pyx_PyDict_ContainsTF(__pyx_t_2, __pyx_v_Tube_Nodes, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = (__pyx_t_7 != 0);
    if (__pyx_t_6) {

      /* "PDSim/flow/flow.pyx":90
 *                 FP.ikey1 = exists_keys.index(FP.key1)
 *             elif FP.key1 in Tube_Nodes:
 *                 FP.State1 = Tube_Nodes[FP.key1]             # <<<<<<<<<<<<<<
 *                 FP.key1_exists = False
 *                 if Core.Tubes[FP.key1].key1 == FP.key1:
 */
      if (unlikely(__pyx_v_Tube_Nodes == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 90, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyDict_GetItem(__pyx_v_Tube_Nodes, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GIVEREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_v_FP->State1);
      __Pyx_DECREF(((PyObject *)__pyx_v_FP->State1));
      __pyx_v_FP->State1 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_8);
      __pyx_t_8 = 0;

      /* "PDSim/flow/flow.pyx":91
 *             elif FP.key1 in Tube_Nodes:
 *                 FP.State1 = Tube_Nodes[FP.key1]
 *                 FP.key1_exists = False             # <<<<<<<<<<<<<<
 *                 if Core.Tubes[FP.key1].key1 == FP.key1:
 *                     FP.ikey1 = Core.Tubes[FP.key1].i1
 */
      __pyx_v_FP->key1_exists = 0;

      /* "PDSim/flow/flow.pyx":92
 *                 FP.State1 = Tube_Nodes[FP.key1]
 *                 FP.key1_exists = False
 *                 if Core.Tubes[FP.key1].key1 == FP.key1:             # <<<<<<<<<<<<<<
 *                     FP.ikey1 = Core.Tubes[FP.key1].i1
 *                 else:
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_Core, __pyx_n_s_Tubes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 92, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_key1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 92, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 92, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_6) {

        /* "PDSim/flow/flow.pyx":93
 *                 FP.key1_exists = False
 *                 if Core.Tubes[FP.key1].key1 == FP.key1:
 *                     FP.ikey1 = Core.Tubes[FP.key1].i1             # <<<<<<<<<<<<<<
 *                 else:
 *                     FP.ikey1 = Core.Tubes[FP.key1].i2
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_Core, __pyx_n_s_Tubes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 93, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_i1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 93, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_FP->ikey1 = __pyx_t_9;

        /* "PDSim/flow/flow.pyx":92
 *                 FP.State1 = Tube_Nodes[FP.key1]
 *                 FP.key1_exists = False
 *                 if Core.Tubes[FP.key1].key1 == FP.key1:             # <<<<<<<<<<<<<<
 *                     FP.ikey1 = Core.Tubes[FP.key1].i1
 *                 else:
 */
        goto __pyx_L6;
      }

      /* "PDSim/flow/flow.pyx":95
 *                     FP.ikey1 = Core.Tubes[FP.key1].i1
 *                 else:
 *                     FP.ikey1 = Core.Tubes[FP.key1].i2             # <<<<<<<<<<<<<<
 *             else:
 *                 FP.exists=False
 */
      /*else*/ {
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_Core, __pyx_n_s_Tubes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 95, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_i2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_v_FP->ikey1 = __pyx_t_9;
      }
      __pyx_L6:;

      /* "PDSim/flow/flow.pyx":89
 *                 FP.key1_exists = True
 *                 FP.ikey1 = exists_keys.index(FP.key1)
 *             elif FP.key1 in Tube_Nodes:             # <<<<<<<<<<<<<<
 *                 FP.State1 = Tube_Nodes[FP.key1]
 *                 FP.key1_exists = False
 */
      goto __pyx_L5;
    }

    /* "PDSim/flow/flow.pyx":97
 *                     FP.ikey1 = Core.Tubes[FP.key1].i2
 *             else:
 *                 FP.exists=False             # <<<<<<<<<<<<<<
 *                 FP.key1_exists = False
 *                 FP.mdot = 0.0
 */
    /*else*/ {
      __pyx_v_FP->exists = 0;

      /* "PDSim/flow/flow.pyx":98
 *             else:
 *                 FP.exists=False
 *                 FP.key1_exists = False             # <<<<<<<<<<<<<<
 *                 FP.mdot = 0.0
 *                 #Doesn't exist, go to next flow
 */
      __pyx_v_FP->key1_exists = 0;

      /* "PDSim/flow/flow.pyx":99
 *                 FP.exists=False
 *                 FP.key1_exists = False
 *                 FP.mdot = 0.0             # <<<<<<<<<<<<<<
 *                 #Doesn't exist, go to next flow
 *                 continue
 */
      __pyx_v_FP->mdot = 0.0;

      /* "PDSim/flow/flow.pyx":101
 *                 FP.mdot = 0.0
 *                 #Doesn't exist, go to next flow
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             if FP.key2 in exists_keys:
 */
      goto __pyx_L3_continue;
    }
    __pyx_L5:;

    /* "PDSim/flow/flow.pyx":103
 *                 continue
 * 
 *             if FP.key2 in exists_keys:             # <<<<<<<<<<<<<<
 *                 CV = Core.CVs[FP.key2]
 *                 FP.State2=CV.State
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_v_exists_keys, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {

      /* "PDSim/flow/flow.pyx":104
 * 
 *             if FP.key2 in exists_keys:
 *                 CV = Core.CVs[FP.key2]             # <<<<<<<<<<<<<<
 *                 FP.State2=CV.State
 *                 FP.key2_exists = True
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_Core, __pyx_n_s_CVs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 104, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_CV, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "PDSim/flow/flow.pyx":105
 *             if FP.key2 in exists_keys:
 *                 CV = Core.CVs[FP.key2]
 *                 FP.State2=CV.State             # <<<<<<<<<<<<<<
 *                 FP.key2_exists = True
 *                 FP.ikey2 = exists_keys.index(FP.key2)
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_CV, __pyx_n_s_State); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(0, 105, __pyx_L1_error)
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_v_FP->State2);
      __Pyx_DECREF(((PyObject *)__pyx_v_FP->State2));
      __pyx_v_FP->State2 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "PDSim/flow/flow.pyx":106
 *                 CV = Core.CVs[FP.key2]
 *                 FP.State2=CV.State
 *                 FP.key2_exists = True             # <<<<<<<<<<<<<<
 *                 FP.ikey2 = exists_keys.index(FP.key2)
 *             elif FP.key2 in Tube_Nodes:
 */
      __pyx_v_FP->key2_exists = 1;

      /* "PDSim/flow/flow.pyx":107
 *                 FP.State2=CV.State
 *                 FP.key2_exists = True
 *                 FP.ikey2 = exists_keys.index(FP.key2)             # <<<<<<<<<<<<<<
 *             elif FP.key2 in Tube_Nodes:
 *                 FP.State2=Tube_Nodes[FP.key2]
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyList_Type_index, __pyx_v_exists_keys, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 107, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 107, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_FP->ikey2 = __pyx_t_9;

      /* "PDSim/flow/flow.pyx":103
 *                 continue
 * 
 *             if FP.key2 in exists_keys:             # <<<<<<<<<<<<<<
 *                 CV = Core.CVs[FP.key2]
 *                 FP.State2=CV.State
 */
      goto __pyx_L7;
    }

    /* "PDSim/flow/flow.pyx":108
 *                 FP.key2_exists = True
 *                 FP.ikey2 = exists_keys.index(FP.key2)
 *             elif FP.key2 in Tube_Nodes:             # <<<<<<<<<<<<<<
 *                 FP.State2=Tube_Nodes[FP.key2]
 *                 FP.key2_exists = False
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (unlikely(__pyx_v_Tube_Nodes == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 108, __pyx_L1_error)
    }
    __pyx_t_7 = (__Pyx_PyDict_ContainsTF(__pyx_t_8, __pyx_v_Tube_Nodes, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_6 = (__pyx_t_7 != 0);
    if (__pyx_t_6) {

      /* "PDSim/flow/flow.pyx":109
 *                 FP.ikey2 = exists_keys.index(FP.key2)
 *             elif FP.key2 in Tube_Nodes:
 *                 FP.State2=Tube_Nodes[FP.key2]             # <<<<<<<<<<<<<<
 *                 FP.key2_exists = False
 *                 if Core.Tubes[FP.key2].key1 == FP.key2:
 */
      if (unlikely(__pyx_v_Tube_Nodes == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 109, __pyx_L1_error)
      }
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_Tube_Nodes, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(0, 109, __pyx_L1_error)
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_v_FP->State2);
      __Pyx_DECREF(((PyObject *)__pyx_v_FP->State2));
      __pyx_v_FP->State2 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "PDSim/flow/flow.pyx":110
 *             elif FP.key2 in Tube_Nodes:
 *                 FP.State2=Tube_Nodes[FP.key2]
 *                 FP.key2_exists = False             # <<<<<<<<<<<<<<
 *                 if Core.Tubes[FP.key2].key1 == FP.key2:
 *                     FP.ikey2 = Core.Tubes[FP.key2].i1
 */
      __pyx_v_FP->key2_exists = 0;

      /* "PDSim/flow/flow.pyx":111
 *                 FP.State2=Tube_Nodes[FP.key2]
 *                 FP.key2_exists = False
 *                 if Core.Tubes[FP.key2].key1 == FP.key2:             # <<<<<<<<<<<<<<
 *                     FP.ikey2 = Core.Tubes[FP.key2].i1
 *                 else:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_Core, __pyx_n_s_Tubes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_key1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_8, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 111, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_6) {

        /* "PDSim/flow/flow.pyx":112
 *                 FP.key2_exists = False
 *                 if Core.Tubes[FP.key2].key1 == FP.key2:
 *                     FP.ikey2 = Core.Tubes[FP.key2].i1             # <<<<<<<<<<<<<<
 *                 else:
 *                     FP.ikey2 = Core.Tubes[FP.key2].i2
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_Core, __pyx_n_s_Tubes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_i1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 112, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_v_FP->ikey2 = __pyx_t_9;

        /* "PDSim/flow/flow.pyx":111
 *                 FP.State2=Tube_Nodes[FP.key2]
 *                 FP.key2_exists = False
 *                 if Core.Tubes[FP.key2].key1 == FP.key2:             # <<<<<<<<<<<<<<
 *                     FP.ikey2 = Core.Tubes[FP.key2].i1
 *                 else:
 */
        goto __pyx_L8;
      }

      /* "PDSim/flow/flow.pyx":114
 *                     FP.ikey2 = Core.Tubes[FP.key2].i1
 *                 else:
 *                     FP.ikey2 = Core.Tubes[FP.key2].i2             # <<<<<<<<<<<<<<
 *             else:
 *                 FP.exists=False
 */
      /*else*/ {
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_Core, __pyx_n_s_Tubes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_i2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 114, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_v_FP->ikey2 = __pyx_t_9;
      }
      __pyx_L8:;

      /* "PDSim/flow/flow.pyx":108
 *                 FP.key2_exists = True
 *                 FP.ikey2 = exists_keys.index(FP.key2)
 *             elif FP.key2 in Tube_Nodes:             # <<<<<<<<<<<<<<
 *                 FP.State2=Tube_Nodes[FP.key2]
 *                 FP.key2_exists = False
 */
      goto __pyx_L7;
    }

    /* "PDSim/flow/flow.pyx":116
 *                     FP.ikey2 = Core.Tubes[FP.key2].i2
 *             else:
 *                 FP.exists=False             # <<<<<<<<<<<<<<
 *                 FP.key2_exists = False
 *                 FP.mdot = 0.0
 */
    /*else*/ {
      __pyx_v_FP->exists = 0;

      /* "PDSim/flow/flow.pyx":117
 *             else:
 *                 FP.exists=False
 *                 FP.key2_exists = False             # <<<<<<<<<<<<<<
 *                 FP.mdot = 0.0
 *                 #Doesn't exist, go to next flow
 */
      __pyx_v_FP->key2_exists = 0;

      /* "PDSim/flow/flow.pyx":118
 *                 FP.exists=False
 *                 FP.key2_exists = False
 *                 FP.mdot = 0.0             # <<<<<<<<<<<<<<
 *                 #Doesn't exist, go to next flow
 *                 continue
 */
      __pyx_v_FP->mdot = 0.0;

      /* "PDSim/flow/flow.pyx":120
 *                 FP.mdot = 0.0
 *                 #Doesn't exist, go to next flow
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             #Made it this far, so both states exist
 */
      goto __pyx_L3_continue;
    }
    __pyx_L7:;

    /* "PDSim/flow/flow.pyx":123
 * 
 *             #Made it this far, so both states exist
 *             FP.exists = True             # <<<<<<<<<<<<<<
 * 
 *     cpdef calculate(self):
 */
    __pyx_v_FP->exists = 1;

    /* "PDSim/flow/flow.pyx":82
 *         self.omega = Core.omega
 * 
 *         for FP in flow_paths:             # <<<<<<<<<<<<<<
 *             ## Update the pointers to the states for the ends of the flow path
 *             if FP.key1 in exists_keys:
 */
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "PDSim/flow/flow.pyx":59
 * cdef class FlowPathCollection(list):
 * 
 *     cpdef update_existence(self, Core):             # <<<<<<<<<<<<<<
 *         """
 *         A function to update the pointers for the flow path as well as check existence
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPathCollection.update_existence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_FP);
  __Pyx_XDECREF(__pyx_v_Tube_Nodes);
  __Pyx_XDECREF(__pyx_v_exists_keys);
  __Pyx_XDECREF(__pyx_v_flow_paths);
  __Pyx_XDECREF(__pyx_v_CV);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_1update_existence(PyObject *__pyx_v_self, PyObject *__pyx_v_Core); /*proto*/
static char __pyx_doc_5PDSim_4flow_4flow_18FlowPathCollection_update_existence[] = "FlowPathCollection.update_existence(self, Core)\n\n        A function to update the pointers for the flow path as well as check existence\n        of the states on either end of the path\n        \n        This is required whenever the existence of any of the CV or tubes \n        changes.  Calling this function will update the pointers to the states\n        \n        Parameters\n        ----------\n        Core : :class:`PDSimCore <PDSim.core.core.PDSimCore>` instance or derived class thereof\n        \n        ";
static PyObject *__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_1update_existence(PyObject *__pyx_v_self, PyObject *__pyx_v_Core) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_existence (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_update_existence(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *)__pyx_v_self), ((PyObject *)__pyx_v_Core));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_update_existence(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self, PyObject *__pyx_v_Core) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_existence", 0);
  __Pyx_TraceCall("update_existence (wrapper)", __pyx_f[0], 59, 0, __PYX_ERR(0, 59, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_update_existence(__pyx_v_self, __pyx_v_Core, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPathCollection.update_existence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":125
 *             FP.exists = True
 * 
 *     cpdef calculate(self):             # <<<<<<<<<<<<<<
 *         """
 *         Run the code for each flow path to calculate the flow rates
 */

static PyObject *__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_3calculate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_calculate(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_FP = 0;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate", 0);
  __Pyx_TraceCall("calculate", __pyx_f[0], 125, 0, __PYX_ERR(0, 125, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":132
 *         cdef int i
 * 
 *         for i in range(self.N):             # <<<<<<<<<<<<<<
 *             FP = (<FlowPath>self[i])
 *             if FP.exists:
 */
  __pyx_t_1 = __pyx_v_self->N;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "PDSim/flow/flow.pyx":133
 * 
 *         for i in range(self.N):
 *             FP = (<FlowPath>self[i])             # <<<<<<<<<<<<<<
 *             if FP.exists:
 *                 FP.calculate()
 */
    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self), __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_t_4;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_FP, ((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "PDSim/flow/flow.pyx":134
 *         for i in range(self.N):
 *             FP = (<FlowPath>self[i])
 *             if FP.exists:             # <<<<<<<<<<<<<<
 *                 FP.calculate()
 *             else:
 */
    __pyx_t_6 = (__pyx_v_FP->exists != 0);
    if (__pyx_t_6) {

      /* "PDSim/flow/flow.pyx":135
 *             FP = (<FlowPath>self[i])
 *             if FP.exists:
 *                 FP.calculate()             # <<<<<<<<<<<<<<
 *             else:
 *                 FP.edot = 0.0
 */
      __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPath *)__pyx_v_FP->__pyx_vtab)->calculate(__pyx_v_FP, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "PDSim/flow/flow.pyx":134
 *         for i in range(self.N):
 *             FP = (<FlowPath>self[i])
 *             if FP.exists:             # <<<<<<<<<<<<<<
 *                 FP.calculate()
 *             else:
 */
      goto __pyx_L5;
    }

    /* "PDSim/flow/flow.pyx":137
 *                 FP.calculate()
 *             else:
 *                 FP.edot = 0.0             # <<<<<<<<<<<<<<
 * 
 *     @cython.cdivision(True)
 */
    /*else*/ {
      __pyx_v_FP->edot = 0.0;
    }
    __pyx_L5:;
  }

  /* "PDSim/flow/flow.pyx":125
 *             FP.exists = True
 * 
 *     cpdef calculate(self):             # <<<<<<<<<<<<<<
 *         """
 *         Run the code for each flow path to calculate the flow rates
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPathCollection.calculate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_FP);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_3calculate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4flow_4flow_18FlowPathCollection_2calculate[] = "FlowPathCollection.calculate(self)\n\n        Run the code for each flow path to calculate the flow rates\n        ";
static PyObject *__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_3calculate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_2calculate(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_2calculate(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate", 0);
  __Pyx_TraceCall("calculate (wrapper)", __pyx_f[0], 125, 0, __PYX_ERR(0, 125, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_calculate(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPathCollection.calculate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":140
 * 
 *     @cython.cdivision(True)
 *     cpdef sumterms(self, arraym summerdT, arraym summerdm):             # <<<<<<<<<<<<<<
 *         """
 *         Sum all the mass flow and mdot*h for each CV in existence at a given
 */

static PyObject *__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_5sumterms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_sumterms(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_summerdT, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_summerdm, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_mdot;
  double __pyx_v_h_up;
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_Flow = 0;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sumterms", 0);
  __Pyx_TraceCall("sumterms", __pyx_f[0], 140, 0, __PYX_ERR(0, 140, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":158
 *         cdef int i
 * 
 *         summerdm.fill(0.0)             # <<<<<<<<<<<<<<
 *         summerdT.fill(0.0)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_summerdm->__pyx_vtab)->fill(__pyx_v_summerdm, 0.0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":159
 * 
 *         summerdm.fill(0.0)
 *         summerdT.fill(0.0)             # <<<<<<<<<<<<<<
 * 
 *         #Loop over the flowpaths
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_summerdT->__pyx_vtab)->fill(__pyx_v_summerdT, 0.0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":162
 * 
 *         #Loop over the flowpaths
 *         for i in range(self.N):             # <<<<<<<<<<<<<<
 * 
 *             Flow = (<FlowPath>self[i])
 */
  __pyx_t_2 = __pyx_v_self->N;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PDSim/flow/flow.pyx":164
 *         for i in range(self.N):
 * 
 *             Flow = (<FlowPath>self[i])             # <<<<<<<<<<<<<<
 * 
 *             #One of the chambers doesn't exist if it doesn't have a mass flow term
 */
    __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self), __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __pyx_t_1;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_Flow, ((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "PDSim/flow/flow.pyx":167
 * 
 *             #One of the chambers doesn't exist if it doesn't have a mass flow term
 *             if not Flow.exists:             # <<<<<<<<<<<<<<
 *                 continue
 *             else:
 */
    __pyx_t_6 = ((!(__pyx_v_Flow->exists != 0)) != 0);
    if (__pyx_t_6) {

      /* "PDSim/flow/flow.pyx":168
 *             #One of the chambers doesn't exist if it doesn't have a mass flow term
 *             if not Flow.exists:
 *                 continue             # <<<<<<<<<<<<<<
 *             else:
 *                 #Do these once for each flow path to cut down on lookups
 */
      goto __pyx_L3_continue;

      /* "PDSim/flow/flow.pyx":167
 * 
 *             #One of the chambers doesn't exist if it doesn't have a mass flow term
 *             if not Flow.exists:             # <<<<<<<<<<<<<<
 *                 continue
 *             else:
 */
    }

    /* "PDSim/flow/flow.pyx":171
 *             else:
 *                 #Do these once for each flow path to cut down on lookups
 *                 mdot = Flow.mdot             # <<<<<<<<<<<<<<
 *                 h_up = Flow.h_up
 * 
 */
    /*else*/ {
      __pyx_t_7 = __pyx_v_Flow->mdot;
      __pyx_v_mdot = __pyx_t_7;

      /* "PDSim/flow/flow.pyx":172
 *                 #Do these once for each flow path to cut down on lookups
 *                 mdot = Flow.mdot
 *                 h_up = Flow.h_up             # <<<<<<<<<<<<<<
 * 
 *             #Flow must exist then
 */
      __pyx_t_7 = __pyx_v_Flow->h_up;
      __pyx_v_h_up = __pyx_t_7;
    }

    /* "PDSim/flow/flow.pyx":177
 * 
 *             #If the upstream node is a control volume
 *             if Flow.key_up_exists:             # <<<<<<<<<<<<<<
 *                 #Flow is leaving the upstream control volume
 *                 summerdm.data[Flow.ikey_up] -= mdot/self.omega
 */
    __pyx_t_6 = (__pyx_v_Flow->key_up_exists != 0);
    if (__pyx_t_6) {

      /* "PDSim/flow/flow.pyx":179
 *             if Flow.key_up_exists:
 *                 #Flow is leaving the upstream control volume
 *                 summerdm.data[Flow.ikey_up] -= mdot/self.omega             # <<<<<<<<<<<<<<
 *                 summerdT.data[Flow.ikey_up] -= mdot/self.omega*h_up
 * 
 */
      __pyx_t_8 = __pyx_v_Flow->ikey_up;
      (__pyx_v_summerdm->data[__pyx_t_8]) = ((__pyx_v_summerdm->data[__pyx_t_8]) - (__pyx_v_mdot / __pyx_v_self->omega));

      /* "PDSim/flow/flow.pyx":180
 *                 #Flow is leaving the upstream control volume
 *                 summerdm.data[Flow.ikey_up] -= mdot/self.omega
 *                 summerdT.data[Flow.ikey_up] -= mdot/self.omega*h_up             # <<<<<<<<<<<<<<
 * 
 *             #If the downstream node is a control volume
 */
      __pyx_t_8 = __pyx_v_Flow->ikey_up;
      (__pyx_v_summerdT->data[__pyx_t_8]) = ((__pyx_v_summerdT->data[__pyx_t_8]) - ((__pyx_v_mdot / __pyx_v_self->omega) * __pyx_v_h_up));

      /* "PDSim/flow/flow.pyx":177
 * 
 *             #If the upstream node is a control volume
 *             if Flow.key_up_exists:             # <<<<<<<<<<<<<<
 *                 #Flow is leaving the upstream control volume
 *                 summerdm.data[Flow.ikey_up] -= mdot/self.omega
 */
    }

    /* "PDSim/flow/flow.pyx":183
 * 
 *             #If the downstream node is a control volume
 *             if Flow.key_down_exists:             # <<<<<<<<<<<<<<
 *                 #Flow is entering the downstream control volume
 *                 summerdm.data[Flow.ikey_down] += mdot/self.omega
 */
    __pyx_t_6 = (__pyx_v_Flow->key_down_exists != 0);
    if (__pyx_t_6) {

      /* "PDSim/flow/flow.pyx":185
 *             if Flow.key_down_exists:
 *                 #Flow is entering the downstream control volume
 *                 summerdm.data[Flow.ikey_down] += mdot/self.omega             # <<<<<<<<<<<<<<
 *                 summerdT.data[Flow.ikey_down] += mdot/self.omega*h_up
 * 
 */
      __pyx_t_8 = __pyx_v_Flow->ikey_down;
      (__pyx_v_summerdm->data[__pyx_t_8]) = ((__pyx_v_summerdm->data[__pyx_t_8]) + (__pyx_v_mdot / __pyx_v_self->omega));

      /* "PDSim/flow/flow.pyx":186
 *                 #Flow is entering the downstream control volume
 *                 summerdm.data[Flow.ikey_down] += mdot/self.omega
 *                 summerdT.data[Flow.ikey_down] += mdot/self.omega*h_up             # <<<<<<<<<<<<<<
 * 
 *     cpdef get_deepcopy(self):
 */
      __pyx_t_8 = __pyx_v_Flow->ikey_down;
      (__pyx_v_summerdT->data[__pyx_t_8]) = ((__pyx_v_summerdT->data[__pyx_t_8]) + ((__pyx_v_mdot / __pyx_v_self->omega) * __pyx_v_h_up));

      /* "PDSim/flow/flow.pyx":183
 * 
 *             #If the downstream node is a control volume
 *             if Flow.key_down_exists:             # <<<<<<<<<<<<<<
 *                 #Flow is entering the downstream control volume
 *                 summerdm.data[Flow.ikey_down] += mdot/self.omega
 */
    }
    __pyx_L3_continue:;
  }

  /* "PDSim/flow/flow.pyx":140
 * 
 *     @cython.cdivision(True)
 *     cpdef sumterms(self, arraym summerdT, arraym summerdm):             # <<<<<<<<<<<<<<
 *         """
 *         Sum all the mass flow and mdot*h for each CV in existence at a given
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPathCollection.sumterms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_Flow);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_5sumterms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4flow_4flow_18FlowPathCollection_4sumterms[] = "FlowPathCollection.sumterms(self, arraym summerdT, arraym summerdm)\n\n        Sum all the mass flow and mdot*h for each CV in existence at a given \n        step for the derivatives in the ODE solver\n        \n        Meant to be called by PDSimCore.derivs()\n        \n        Parameters\n        ----------\n        summerdT : :class:`arraym <PDSim.misc.datatypes.arraym>` instance\n        summerdm : :class:`arraym <PDSim.misc.datatypes.arraym>` instance\n            \n        ";
static PyObject *__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_5sumterms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_summerdT = 0;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_summerdm = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sumterms (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_summerdT,&__pyx_n_s_summerdm,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_summerdT)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_summerdm)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sumterms", 1, 2, 2, 1); __PYX_ERR(0, 140, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sumterms") < 0)) __PYX_ERR(0, 140, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_summerdT = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)values[0]);
    __pyx_v_summerdm = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sumterms", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 140, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPathCollection.sumterms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_summerdT), __pyx_ptype_5PDSim_4misc_9datatypes_arraym, 1, "summerdT", 0))) __PYX_ERR(0, 140, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_summerdm), __pyx_ptype_5PDSim_4misc_9datatypes_arraym, 1, "summerdm", 0))) __PYX_ERR(0, 140, __pyx_L1_error)
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_4sumterms(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *)__pyx_v_self), __pyx_v_summerdT, __pyx_v_summerdm);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_4sumterms(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_summerdT, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_summerdm) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sumterms", 0);
  __Pyx_TraceCall("sumterms (wrapper)", __pyx_f[0], 140, 0, __PYX_ERR(0, 140, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_sumterms(__pyx_v_self, __pyx_v_summerdT, __pyx_v_summerdm, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPathCollection.sumterms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":188
 *                 summerdT.data[Flow.ikey_down] += mdot/self.omega*h_up
 * 
 *     cpdef get_deepcopy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Using this method, the link to the mass flow function is broken
 */

static PyObject *__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_7get_deepcopy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_get_deepcopy(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_Flow = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_deepcopy", 0);
  __Pyx_TraceCall("get_deepcopy", __pyx_f[0], 188, 0, __PYX_ERR(0, 188, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":192
 *         Using this method, the link to the mass flow function is broken
 *         """
 *         return [Flow.get_deepcopy() for Flow in self]             # <<<<<<<<<<<<<<
 * 
 * cdef class FlowPath(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self))) {
    __pyx_t_2 = ((PyObject *)__pyx_v_self); __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 192, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 192, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 192, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_Flow, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_Flow, __pyx_n_s_get_deepcopy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/flow/flow.pyx":188
 *                 summerdT.data[Flow.ikey_down] += mdot/self.omega*h_up
 * 
 *     cpdef get_deepcopy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Using this method, the link to the mass flow function is broken
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPathCollection.get_deepcopy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Flow);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_7get_deepcopy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4flow_4flow_18FlowPathCollection_6get_deepcopy[] = "FlowPathCollection.get_deepcopy(self)\n\n        Using this method, the link to the mass flow function is broken\n        ";
static PyObject *__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_7get_deepcopy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_deepcopy (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_6get_deepcopy(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_6get_deepcopy(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_deepcopy", 0);
  __Pyx_TraceCall("get_deepcopy (wrapper)", __pyx_f[0], 188, 0, __PYX_ERR(0, 188, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_get_deepcopy(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPathCollection.get_deepcopy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4flow_4flow_18FlowPathCollection_8__reduce_cython__[] = "FlowPathCollection.__reduce_cython__(self)";
static PyObject *__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_8__reduce_cython__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_8__reduce_cython__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.N, self.Nexists, self.flow_paths, self.omega)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->Nexists); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->omega); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->flow_paths);
  __Pyx_GIVEREF(__pyx_v_self->flow_paths);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_self->flow_paths);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.N, self.Nexists, self.flow_paths, self.omega)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self.N, self.Nexists, self.flow_paths, self.omega)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.flow_paths is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.N, self.Nexists, self.flow_paths, self.omega)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.flow_paths is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_FlowPathCollection, (type(self), 0x4cceff6, None), state
 */
  /*else*/ {
    __pyx_t_6 = (__pyx_v_self->flow_paths != ((PyObject*)Py_None));
    __pyx_v_use_setstate = __pyx_t_6;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.flow_paths is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_FlowPathCollection, (type(self), 0x4cceff6, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = self.flow_paths is not None
 *     if use_setstate:
 *         return __pyx_unpickle_FlowPathCollection, (type(self), 0x4cceff6, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_FlowPathCollection, (type(self), 0x4cceff6, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_FlowPathCollectio); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_80539638);
    __Pyx_GIVEREF(__pyx_int_80539638);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_80539638);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.flow_paths is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_FlowPathCollection, (type(self), 0x4cceff6, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_FlowPathCollection, (type(self), 0x4cceff6, None), state
 *     else:
 *         return __pyx_unpickle_FlowPathCollection, (type(self), 0x4cceff6, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_FlowPathCollection__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_FlowPathCollectio); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_80539638);
    __Pyx_GIVEREF(__pyx_int_80539638);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_80539638);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPathCollection.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_FlowPathCollection, (type(self), 0x4cceff6, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_FlowPathCollection__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5PDSim_4flow_4flow_18FlowPathCollection_10__setstate_cython__[] = "FlowPathCollection.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_10__setstate_cython__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_18FlowPathCollection_10__setstate_cython__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 16, 0, __PYX_ERR(1, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_FlowPathCollection, (type(self), 0x4cceff6, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_FlowPathCollection__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_5PDSim_4flow_4flow___pyx_unpickle_FlowPathCollection__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_FlowPathCollection, (type(self), 0x4cceff6, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_FlowPathCollection__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPathCollection.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":222
 *     """
 * 
 *     def __init__(self, key1='', key2='', MdotFcn=None, MdotFcn_kwargs={}, Nflows = 1):             # <<<<<<<<<<<<<<
 * 
 *         self.key1 = key1.encode('ascii')
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key1 = 0;
  PyObject *__pyx_v_key2 = 0;
  PyObject *__pyx_v_MdotFcn = 0;
  PyObject *__pyx_v_MdotFcn_kwargs = 0;
  PyObject *__pyx_v_Nflows = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key1,&__pyx_n_s_key2,&__pyx_n_s_MdotFcn,&__pyx_n_s_MdotFcn_kwargs,&__pyx_n_s_Nflows,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[0] = ((PyObject *)__pyx_kp_s__2);
    values[1] = ((PyObject *)__pyx_kp_s__2);
    values[2] = ((PyObject *)Py_None);
    values[3] = __pyx_k__3;
    values[4] = ((PyObject *)__pyx_int_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key1);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key2);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_MdotFcn);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_MdotFcn_kwargs);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Nflows);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 222, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key1 = values[0];
    __pyx_v_key2 = values[1];
    __pyx_v_MdotFcn = values[2];
    __pyx_v_MdotFcn_kwargs = values[3];
    __pyx_v_Nflows = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 222, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath___init__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), __pyx_v_key1, __pyx_v_key2, __pyx_v_MdotFcn, __pyx_v_MdotFcn_kwargs, __pyx_v_Nflows);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath___init__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_key1, PyObject *__pyx_v_key2, PyObject *__pyx_v_MdotFcn, PyObject *__pyx_v_MdotFcn_kwargs, PyObject *__pyx_v_Nflows) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 222, 0, __PYX_ERR(0, 222, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":224
 *     def __init__(self, key1='', key2='', MdotFcn=None, MdotFcn_kwargs={}, Nflows = 1):
 * 
 *         self.key1 = key1.encode('ascii')             # <<<<<<<<<<<<<<
 *         self.key2 = key2.encode('ascii')
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key1, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_s_ascii);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_key1, __pyx_t_1) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":225
 * 
 *         self.key1 = key1.encode('ascii')
 *         self.key2 = key2.encode('ascii')             # <<<<<<<<<<<<<<
 * 
 *         # You are passing in a pre-wrapped function - will be nice and fast since
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key2, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_s_ascii);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_key2, __pyx_t_1) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":229
 *         # You are passing in a pre-wrapped function - will be nice and fast since
 *         # all the calls will stay at the C++ layer
 *         if isinstance(MdotFcn, FlowFunction):             # <<<<<<<<<<<<<<
 *             self.MdotFcn = MdotFcn
 *         else:
 */
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_MdotFcn, __pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "PDSim/flow/flow.pyx":230
 *         # all the calls will stay at the C++ layer
 *         if isinstance(MdotFcn, FlowFunction):
 *             self.MdotFcn = MdotFcn             # <<<<<<<<<<<<<<
 *         else:
 *             # Add the bound method in a wrapper - this will keep the calls at
 */
    if (!(likely(((__pyx_v_MdotFcn) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_MdotFcn, __pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction))))) __PYX_ERR(0, 230, __pyx_L1_error)
    __pyx_t_1 = __pyx_v_MdotFcn;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->MdotFcn);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->MdotFcn));
    __pyx_v_self->MdotFcn = ((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "PDSim/flow/flow.pyx":229
 *         # You are passing in a pre-wrapped function - will be nice and fast since
 *         # all the calls will stay at the C++ layer
 *         if isinstance(MdotFcn, FlowFunction):             # <<<<<<<<<<<<<<
 *             self.MdotFcn = MdotFcn
 *         else:
 */
    goto __pyx_L3;
  }

  /* "PDSim/flow/flow.pyx":234
 *             # Add the bound method in a wrapper - this will keep the calls at
 *             # the Python level which will make them nice to deal with but slow
 *             self.MdotFcn = PyFlowFunctionWrapper(MdotFcn, MdotFcn_kwargs, Nflows = Nflows)             # <<<<<<<<<<<<<<
 * 
 *         self.MdotFcn_str = str(MdotFcn).encode('ascii')
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PyFlowFunctionWrapper); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_MdotFcn);
    __Pyx_GIVEREF(__pyx_v_MdotFcn);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_MdotFcn);
    __Pyx_INCREF(__pyx_v_MdotFcn_kwargs);
    __Pyx_GIVEREF(__pyx_v_MdotFcn_kwargs);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_MdotFcn_kwargs);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_Nflows, __pyx_v_Nflows) < 0) __PYX_ERR(0, 234, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction))))) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->MdotFcn);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->MdotFcn));
    __pyx_v_self->MdotFcn = ((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_t_6);
    __pyx_t_6 = 0;
  }
  __pyx_L3:;

  /* "PDSim/flow/flow.pyx":236
 *             self.MdotFcn = PyFlowFunctionWrapper(MdotFcn, MdotFcn_kwargs, Nflows = Nflows)
 * 
 *         self.MdotFcn_str = str(MdotFcn).encode('ascii')             # <<<<<<<<<<<<<<
 *         self.m_key_up = b''
 *         self.m_key_down = b''
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_MdotFcn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_6 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_s_ascii);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->MdotFcn_str);
  __Pyx_DECREF(__pyx_v_self->MdotFcn_str);
  __pyx_v_self->MdotFcn_str = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "PDSim/flow/flow.pyx":237
 * 
 *         self.MdotFcn_str = str(MdotFcn).encode('ascii')
 *         self.m_key_up = b''             # <<<<<<<<<<<<<<
 *         self.m_key_down = b''
 * 
 */
  __Pyx_INCREF(__pyx_kp_b__2);
  __Pyx_GIVEREF(__pyx_kp_b__2);
  __Pyx_GOTREF(__pyx_v_self->m_key_up);
  __Pyx_DECREF(__pyx_v_self->m_key_up);
  __pyx_v_self->m_key_up = __pyx_kp_b__2;

  /* "PDSim/flow/flow.pyx":238
 *         self.MdotFcn_str = str(MdotFcn).encode('ascii')
 *         self.m_key_up = b''
 *         self.m_key_down = b''             # <<<<<<<<<<<<<<
 * 
 *     cpdef dict __cdict__(self, AddStates=False):
 */
  __Pyx_INCREF(__pyx_kp_b__2);
  __Pyx_GIVEREF(__pyx_kp_b__2);
  __Pyx_GOTREF(__pyx_v_self->m_key_down);
  __Pyx_DECREF(__pyx_v_self->m_key_down);
  __pyx_v_self->m_key_down = __pyx_kp_b__2;

  /* "PDSim/flow/flow.pyx":222
 *     """
 * 
 *     def __init__(self, key1='', key2='', MdotFcn=None, MdotFcn_kwargs={}, Nflows = 1):             # <<<<<<<<<<<<<<
 * 
 *         self.key1 = key1.encode('ascii')
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":240
 *         self.m_key_down = b''
 * 
 *     cpdef dict __cdict__(self, AddStates=False):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a dictionary with all the terms that are defined at the Cython level
 */

static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_3__cdict__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5PDSim_4flow_4flow_8FlowPath___cdict__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4flow_4flow_8FlowPath___cdict__ *__pyx_optional_args) {
  PyObject *__pyx_v_AddStates = ((PyObject *)Py_False);
  PyObject *__pyx_v_items = 0;
  PyObject *__pyx_v_States = 0;
  PyObject *__pyx_v_d = 0;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_State = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cdict__", 0);
  __Pyx_TraceCall("__cdict__", __pyx_f[0], 240, 0, __PYX_ERR(0, 240, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_AddStates = __pyx_optional_args->AddStates;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cdict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4flow_4flow_8FlowPath_3__cdict__)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_AddStates) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_AddStates);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 240, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/flow/flow.pyx":247
 *         cdef list items
 *         cdef list States
 *         cdef dict d={}             # <<<<<<<<<<<<<<
 *         cdef bytes item
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":250
 *         cdef bytes item
 * 
 *         items=['mdot','h_up','h_down','T_up','p_up','p_down','key_up','key_down','key1','key2','Gas','exists']             # <<<<<<<<<<<<<<
 *         for item in items:
 *             d[item]=getattr(self,item)
 */
  __pyx_t_1 = PyList_New(12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_mdot);
  __Pyx_GIVEREF(__pyx_n_s_mdot);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_mdot);
  __Pyx_INCREF(__pyx_n_s_h_up);
  __Pyx_GIVEREF(__pyx_n_s_h_up);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_h_up);
  __Pyx_INCREF(__pyx_n_s_h_down);
  __Pyx_GIVEREF(__pyx_n_s_h_down);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_h_down);
  __Pyx_INCREF(__pyx_n_s_T_up);
  __Pyx_GIVEREF(__pyx_n_s_T_up);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_T_up);
  __Pyx_INCREF(__pyx_n_s_p_up);
  __Pyx_GIVEREF(__pyx_n_s_p_up);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_p_up);
  __Pyx_INCREF(__pyx_n_s_p_down);
  __Pyx_GIVEREF(__pyx_n_s_p_down);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_p_down);
  __Pyx_INCREF(__pyx_n_s_key_up);
  __Pyx_GIVEREF(__pyx_n_s_key_up);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_key_up);
  __Pyx_INCREF(__pyx_n_s_key_down);
  __Pyx_GIVEREF(__pyx_n_s_key_down);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_key_down);
  __Pyx_INCREF(__pyx_n_s_key1);
  __Pyx_GIVEREF(__pyx_n_s_key1);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_key1);
  __Pyx_INCREF(__pyx_n_s_key2);
  __Pyx_GIVEREF(__pyx_n_s_key2);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_s_key2);
  __Pyx_INCREF(__pyx_n_s_Gas);
  __Pyx_GIVEREF(__pyx_n_s_Gas);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_s_Gas);
  __Pyx_INCREF(__pyx_n_s_exists);
  __Pyx_GIVEREF(__pyx_n_s_exists);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_s_exists);
  __pyx_v_items = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":251
 * 
 *         items=['mdot','h_up','h_down','T_up','p_up','p_down','key_up','key_down','key1','key2','Gas','exists']
 *         for item in items:             # <<<<<<<<<<<<<<
 *             d[item]=getattr(self,item)
 * 
 */
  __pyx_t_1 = __pyx_v_items; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 251, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "PDSim/flow/flow.pyx":252
 *         items=['mdot','h_up','h_down','T_up','p_up','p_down','key_up','key_down','key1','key2','Gas','exists']
 *         for item in items:
 *             d[item]=getattr(self,item)             # <<<<<<<<<<<<<<
 * 
 *         if AddStates:
 */
    __pyx_t_2 = __Pyx_GetAttr(((PyObject *)__pyx_v_self), __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_v_item, __pyx_t_2) < 0)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "PDSim/flow/flow.pyx":251
 * 
 *         items=['mdot','h_up','h_down','T_up','p_up','p_down','key_up','key_down','key1','key2','Gas','exists']
 *         for item in items:             # <<<<<<<<<<<<<<
 *             d[item]=getattr(self,item)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":254
 *             d[item]=getattr(self,item)
 * 
 *         if AddStates:             # <<<<<<<<<<<<<<
 *             States=[('State1',self.State1),('State2',self.State2),('State_up',self.State_up),('State_down',self.State_down)]
 *             for k,State in States:
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_AddStates); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 254, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "PDSim/flow/flow.pyx":255
 * 
 *         if AddStates:
 *             States=[('State1',self.State1),('State2',self.State2),('State_up',self.State_up),('State_down',self.State_down)]             # <<<<<<<<<<<<<<
 *             for k,State in States:
 *                 if State is not None:
 */
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_State1);
    __Pyx_GIVEREF(__pyx_n_s_State1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_State1);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->State1));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->State1));
    PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->State1));
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_State2);
    __Pyx_GIVEREF(__pyx_n_s_State2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_State2);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->State2));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->State2));
    PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self->State2));
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_State_up);
    __Pyx_GIVEREF(__pyx_n_s_State_up);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_State_up);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->State_up));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->State_up));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_self->State_up));
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_n_s_State_down);
    __Pyx_GIVEREF(__pyx_n_s_State_down);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_State_down);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->State_down));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->State_down));
    PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_self->State_down));
    __pyx_t_7 = PyList_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_7, 3, __pyx_t_4);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_v_States = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "PDSim/flow/flow.pyx":256
 *         if AddStates:
 *             States=[('State1',self.State1),('State2',self.State2),('State_up',self.State_up),('State_down',self.State_down)]
 *             for k,State in States:             # <<<<<<<<<<<<<<
 *                 if State is not None:
 *                     d[k]=State.copy()
 */
    __pyx_t_7 = __pyx_v_States; __Pyx_INCREF(__pyx_t_7); __pyx_t_5 = 0;
    for (;;) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_7)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 256, __pyx_L1_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 256, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 256, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        #else
        __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 256, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 256, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext;
        index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_1); if (unlikely(!__pyx_t_3)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        index = 1; __pyx_t_2 = __pyx_t_8(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_1), 2) < 0) __PYX_ERR(0, 256, __pyx_L1_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 256, __pyx_L1_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_State, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "PDSim/flow/flow.pyx":257
 *             States=[('State1',self.State1),('State2',self.State2),('State_up',self.State_up),('State_down',self.State_down)]
 *             for k,State in States:
 *                 if State is not None:             # <<<<<<<<<<<<<<
 *                     d[k]=State.copy()
 *         return d
 */
      __pyx_t_6 = (__pyx_v_State != Py_None);
      __pyx_t_9 = (__pyx_t_6 != 0);
      if (__pyx_t_9) {

        /* "PDSim/flow/flow.pyx":258
 *             for k,State in States:
 *                 if State is not None:
 *                     d[k]=State.copy()             # <<<<<<<<<<<<<<
 *         return d
 * 
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_State, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 258, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_v_k, __pyx_t_4) < 0)) __PYX_ERR(0, 258, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "PDSim/flow/flow.pyx":257
 *             States=[('State1',self.State1),('State2',self.State2),('State_up',self.State_up),('State_down',self.State_down)]
 *             for k,State in States:
 *                 if State is not None:             # <<<<<<<<<<<<<<
 *                     d[k]=State.copy()
 *         return d
 */
      }

      /* "PDSim/flow/flow.pyx":256
 *         if AddStates:
 *             States=[('State1',self.State1),('State2',self.State2),('State_up',self.State_up),('State_down',self.State_down)]
 *             for k,State in States:             # <<<<<<<<<<<<<<
 *                 if State is not None:
 *                     d[k]=State.copy()
 */
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "PDSim/flow/flow.pyx":254
 *             d[item]=getattr(self,item)
 * 
 *         if AddStates:             # <<<<<<<<<<<<<<
 *             States=[('State1',self.State1),('State2',self.State2),('State_up',self.State_up),('State_down',self.State_down)]
 *             for k,State in States:
 */
  }

  /* "PDSim/flow/flow.pyx":259
 *                 if State is not None:
 *                     d[k]=State.copy()
 *         return d             # <<<<<<<<<<<<<<
 * 
 *     cpdef FlowPath get_deepcopy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_d);
  __pyx_r = __pyx_v_d;
  goto __pyx_L0;

  /* "PDSim/flow/flow.pyx":240
 *         self.m_key_down = b''
 * 
 *     cpdef dict __cdict__(self, AddStates=False):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a dictionary with all the terms that are defined at the Cython level
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.__cdict__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_items);
  __Pyx_XDECREF(__pyx_v_States);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_State);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_3__cdict__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4flow_4flow_8FlowPath_2__cdict__[] = "FlowPath.__cdict__(self, AddStates=False) -> dict\n\n        Returns a dictionary with all the terms that are defined at the Cython level\n        ";
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_3__cdict__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_AddStates = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cdict__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_AddStates,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_AddStates);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cdict__") < 0)) __PYX_ERR(0, 240, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_AddStates = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cdict__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 240, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.__cdict__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_2__cdict__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), __pyx_v_AddStates);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_2__cdict__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_AddStates) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5PDSim_4flow_4flow_8FlowPath___cdict__ __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cdict__", 0);
  __Pyx_TraceCall("__cdict__ (wrapper)", __pyx_f[0], 240, 0, __PYX_ERR(0, 240, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.AddStates = __pyx_v_AddStates;
  __pyx_t_1 = __pyx_vtabptr_5PDSim_4flow_4flow_FlowPath->__pyx___cdict__(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.__cdict__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":261
 *         return d
 * 
 *     cpdef FlowPath get_deepcopy(self):             # <<<<<<<<<<<<<<
 *         cdef FlowPath FP = FlowPath.__new__(FlowPath)
 *         FP.exists = self.exists
 */

static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_5get_deepcopy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_f_5PDSim_4flow_4flow_8FlowPath_get_deepcopy(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_FP = 0;
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_deepcopy", 0);
  __Pyx_TraceCall("get_deepcopy", __pyx_f[0], 261, 0, __PYX_ERR(0, 261, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_deepcopy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4flow_4flow_8FlowPath_5get_deepcopy)) {
        __Pyx_XDECREF(((PyObject *)__pyx_r));
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5PDSim_4flow_4flow_FlowPath))))) __PYX_ERR(0, 261, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/flow/flow.pyx":262
 * 
 *     cpdef FlowPath get_deepcopy(self):
 *         cdef FlowPath FP = FlowPath.__new__(FlowPath)             # <<<<<<<<<<<<<<
 *         FP.exists = self.exists
 *         FP.mdot = self.mdot
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_5PDSim_4flow_4flow_FlowPath(((PyTypeObject *)__pyx_ptype_5PDSim_4flow_4flow_FlowPath), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_FP = ((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":263
 *     cpdef FlowPath get_deepcopy(self):
 *         cdef FlowPath FP = FlowPath.__new__(FlowPath)
 *         FP.exists = self.exists             # <<<<<<<<<<<<<<
 *         FP.mdot = self.mdot
 *         FP.edot = self.edot
 */
  __pyx_t_5 = __pyx_v_self->exists;
  __pyx_v_FP->exists = __pyx_t_5;

  /* "PDSim/flow/flow.pyx":264
 *         cdef FlowPath FP = FlowPath.__new__(FlowPath)
 *         FP.exists = self.exists
 *         FP.mdot = self.mdot             # <<<<<<<<<<<<<<
 *         FP.edot = self.edot
 *         FP.h_up = self.h_up
 */
  __pyx_t_6 = __pyx_v_self->mdot;
  __pyx_v_FP->mdot = __pyx_t_6;

  /* "PDSim/flow/flow.pyx":265
 *         FP.exists = self.exists
 *         FP.mdot = self.mdot
 *         FP.edot = self.edot             # <<<<<<<<<<<<<<
 *         FP.h_up = self.h_up
 *         FP.T_up = self.T_up
 */
  __pyx_t_6 = __pyx_v_self->edot;
  __pyx_v_FP->edot = __pyx_t_6;

  /* "PDSim/flow/flow.pyx":266
 *         FP.mdot = self.mdot
 *         FP.edot = self.edot
 *         FP.h_up = self.h_up             # <<<<<<<<<<<<<<
 *         FP.T_up = self.T_up
 *         FP.p_up = self.p_up
 */
  __pyx_t_6 = __pyx_v_self->h_up;
  __pyx_v_FP->h_up = __pyx_t_6;

  /* "PDSim/flow/flow.pyx":267
 *         FP.edot = self.edot
 *         FP.h_up = self.h_up
 *         FP.T_up = self.T_up             # <<<<<<<<<<<<<<
 *         FP.p_up = self.p_up
 *         FP.p_down = self.p_down
 */
  __pyx_t_6 = __pyx_v_self->T_up;
  __pyx_v_FP->T_up = __pyx_t_6;

  /* "PDSim/flow/flow.pyx":268
 *         FP.h_up = self.h_up
 *         FP.T_up = self.T_up
 *         FP.p_up = self.p_up             # <<<<<<<<<<<<<<
 *         FP.p_down = self.p_down
 *         FP.key_up = self.key_up
 */
  __pyx_t_6 = __pyx_v_self->p_up;
  __pyx_v_FP->p_up = __pyx_t_6;

  /* "PDSim/flow/flow.pyx":269
 *         FP.T_up = self.T_up
 *         FP.p_up = self.p_up
 *         FP.p_down = self.p_down             # <<<<<<<<<<<<<<
 *         FP.key_up = self.key_up
 *         FP.key_down = self.key_down
 */
  __pyx_t_6 = __pyx_v_self->p_down;
  __pyx_v_FP->p_down = __pyx_t_6;

  /* "PDSim/flow/flow.pyx":270
 *         FP.p_up = self.p_up
 *         FP.p_down = self.p_down
 *         FP.key_up = self.key_up             # <<<<<<<<<<<<<<
 *         FP.key_down = self.key_down
 *         FP.key_up_exists = self.key_up_exists
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_key_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key_up, __pyx_t_1) < 0) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":271
 *         FP.p_down = self.p_down
 *         FP.key_up = self.key_up
 *         FP.key_down = self.key_down             # <<<<<<<<<<<<<<
 *         FP.key_up_exists = self.key_up_exists
 *         FP.key_down_exists = self.key_down_exists
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_key_down); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_FP), __pyx_n_s_key_down, __pyx_t_1) < 0) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":272
 *         FP.key_up = self.key_up
 *         FP.key_down = self.key_down
 *         FP.key_up_exists = self.key_up_exists             # <<<<<<<<<<<<<<
 *         FP.key_down_exists = self.key_down_exists
 *         FP.A = self.A
 */
  __pyx_t_5 = __pyx_v_self->key_up_exists;
  __pyx_v_FP->key_up_exists = __pyx_t_5;

  /* "PDSim/flow/flow.pyx":273
 *         FP.key_down = self.key_down
 *         FP.key_up_exists = self.key_up_exists
 *         FP.key_down_exists = self.key_down_exists             # <<<<<<<<<<<<<<
 *         FP.A = self.A
 *         FP.key1_exists = self.key1_exists
 */
  __pyx_t_5 = __pyx_v_self->key_down_exists;
  __pyx_v_FP->key_down_exists = __pyx_t_5;

  /* "PDSim/flow/flow.pyx":274
 *         FP.key_up_exists = self.key_up_exists
 *         FP.key_down_exists = self.key_down_exists
 *         FP.A = self.A             # <<<<<<<<<<<<<<
 *         FP.key1_exists = self.key1_exists
 *         FP.key2_exists = self.key2_exists
 */
  __pyx_t_6 = __pyx_v_self->A;
  __pyx_v_FP->A = __pyx_t_6;

  /* "PDSim/flow/flow.pyx":275
 *         FP.key_down_exists = self.key_down_exists
 *         FP.A = self.A
 *         FP.key1_exists = self.key1_exists             # <<<<<<<<<<<<<<
 *         FP.key2_exists = self.key2_exists
 * #         if self.exists:
 */
  __pyx_t_5 = __pyx_v_self->key1_exists;
  __pyx_v_FP->key1_exists = __pyx_t_5;

  /* "PDSim/flow/flow.pyx":276
 *         FP.A = self.A
 *         FP.key1_exists = self.key1_exists
 *         FP.key2_exists = self.key2_exists             # <<<<<<<<<<<<<<
 * #         if self.exists:
 * #             FP.State_up = self.State_up.copy()
 */
  __pyx_t_5 = __pyx_v_self->key2_exists;
  __pyx_v_FP->key2_exists = __pyx_t_5;

  /* "PDSim/flow/flow.pyx":280
 * #             FP.State_up = self.State_up.copy()
 * #             FP.State_down = self.State_down.copy()
 *         return FP             # <<<<<<<<<<<<<<
 * 
 *     cpdef calculate(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_FP));
  __pyx_r = __pyx_v_FP;
  goto __pyx_L0;

  /* "PDSim/flow/flow.pyx":261
 *         return d
 * 
 *     cpdef FlowPath get_deepcopy(self):             # <<<<<<<<<<<<<<
 *         cdef FlowPath FP = FlowPath.__new__(FlowPath)
 *         FP.exists = self.exists
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.get_deepcopy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_FP);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_5get_deepcopy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4flow_4flow_8FlowPath_4get_deepcopy[] = "FlowPath.get_deepcopy(self) -> FlowPath";
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_5get_deepcopy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_deepcopy (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4get_deepcopy(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_4get_deepcopy(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_deepcopy", 0);
  __Pyx_TraceCall("get_deepcopy (wrapper)", __pyx_f[0], 261, 0, __PYX_ERR(0, 261, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_4flow_4flow_8FlowPath_get_deepcopy(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.get_deepcopy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":282
 *         return FP
 * 
 *     cpdef calculate(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the flow path
 */

static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_7calculate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5PDSim_4flow_4flow_8FlowPath_calculate(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_p1;
  double __pyx_v_p2;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  long __pyx_t_7;
  int __pyx_t_8;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate", 0);
  __Pyx_TraceCall("calculate", __pyx_f[0], 282, 0, __PYX_ERR(0, 282, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_calculate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4flow_4flow_8FlowPath_7calculate)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 282, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/flow/flow.pyx":286
 *         Calculate the flow path
 *         """
 *         cdef double p1 = self.State1.get_p(), p2 = self.State2.get_p()             # <<<<<<<<<<<<<<
 *         if p1 > p2:
 *             # The pressure in chamber 1 is higher than chamber 2
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_self->State1->__pyx_vtab)->get_p(__pyx_v_self->State1, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 286, __pyx_L1_error)
  __pyx_v_p1 = __pyx_t_5;
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_self->State2->__pyx_vtab)->get_p(__pyx_v_self->State2, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 286, __pyx_L1_error)
  __pyx_v_p2 = __pyx_t_5;

  /* "PDSim/flow/flow.pyx":287
 *         """
 *         cdef double p1 = self.State1.get_p(), p2 = self.State2.get_p()
 *         if p1 > p2:             # <<<<<<<<<<<<<<
 *             # The pressure in chamber 1 is higher than chamber 2
 *             # and thus the flow is from chamber 1 to 2
 */
  __pyx_t_6 = ((__pyx_v_p1 > __pyx_v_p2) != 0);
  if (__pyx_t_6) {

    /* "PDSim/flow/flow.pyx":290
 *             # The pressure in chamber 1 is higher than chamber 2
 *             # and thus the flow is from chamber 1 to 2
 *             self.m_key_up = self.m_key1             # <<<<<<<<<<<<<<
 *             self.m_key_down = self.m_key2
 *             self.State_up = self.State1
 */
    __pyx_t_1 = __pyx_v_self->m_key1;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->m_key_up);
    __Pyx_DECREF(__pyx_v_self->m_key_up);
    __pyx_v_self->m_key_up = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "PDSim/flow/flow.pyx":291
 *             # and thus the flow is from chamber 1 to 2
 *             self.m_key_up = self.m_key1
 *             self.m_key_down = self.m_key2             # <<<<<<<<<<<<<<
 *             self.State_up = self.State1
 *             self.State_down = self.State2
 */
    __pyx_t_1 = __pyx_v_self->m_key2;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->m_key_down);
    __Pyx_DECREF(__pyx_v_self->m_key_down);
    __pyx_v_self->m_key_down = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "PDSim/flow/flow.pyx":292
 *             self.m_key_up = self.m_key1
 *             self.m_key_down = self.m_key2
 *             self.State_up = self.State1             # <<<<<<<<<<<<<<
 *             self.State_down = self.State2
 *             self.key_up_exists = self.key1_exists
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->State1);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->State_up);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->State_up));
    __pyx_v_self->State_up = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "PDSim/flow/flow.pyx":293
 *             self.m_key_down = self.m_key2
 *             self.State_up = self.State1
 *             self.State_down = self.State2             # <<<<<<<<<<<<<<
 *             self.key_up_exists = self.key1_exists
 *             self.key_down_exists = self.key2_exists
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->State2);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->State_down);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->State_down));
    __pyx_v_self->State_down = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "PDSim/flow/flow.pyx":294
 *             self.State_up = self.State1
 *             self.State_down = self.State2
 *             self.key_up_exists = self.key1_exists             # <<<<<<<<<<<<<<
 *             self.key_down_exists = self.key2_exists
 *             self.key_up_Index = self.key1Index
 */
    __pyx_t_6 = __pyx_v_self->key1_exists;
    __pyx_v_self->key_up_exists = __pyx_t_6;

    /* "PDSim/flow/flow.pyx":295
 *             self.State_down = self.State2
 *             self.key_up_exists = self.key1_exists
 *             self.key_down_exists = self.key2_exists             # <<<<<<<<<<<<<<
 *             self.key_up_Index = self.key1Index
 *             self.key_down_Index = self.key2Index
 */
    __pyx_t_6 = __pyx_v_self->key2_exists;
    __pyx_v_self->key_down_exists = __pyx_t_6;

    /* "PDSim/flow/flow.pyx":296
 *             self.key_up_exists = self.key1_exists
 *             self.key_down_exists = self.key2_exists
 *             self.key_up_Index = self.key1Index             # <<<<<<<<<<<<<<
 *             self.key_down_Index = self.key2Index
 *             self.ikey_up = self.ikey1
 */
    __pyx_t_7 = __pyx_v_self->key1Index;
    __pyx_v_self->key_up_Index = __pyx_t_7;

    /* "PDSim/flow/flow.pyx":297
 *             self.key_down_exists = self.key2_exists
 *             self.key_up_Index = self.key1Index
 *             self.key_down_Index = self.key2Index             # <<<<<<<<<<<<<<
 *             self.ikey_up = self.ikey1
 *             self.ikey_down = self.ikey2
 */
    __pyx_t_7 = __pyx_v_self->key2Index;
    __pyx_v_self->key_down_Index = __pyx_t_7;

    /* "PDSim/flow/flow.pyx":298
 *             self.key_up_Index = self.key1Index
 *             self.key_down_Index = self.key2Index
 *             self.ikey_up = self.ikey1             # <<<<<<<<<<<<<<
 *             self.ikey_down = self.ikey2
 *             self.p_up = p1
 */
    __pyx_t_8 = __pyx_v_self->ikey1;
    __pyx_v_self->ikey_up = __pyx_t_8;

    /* "PDSim/flow/flow.pyx":299
 *             self.key_down_Index = self.key2Index
 *             self.ikey_up = self.ikey1
 *             self.ikey_down = self.ikey2             # <<<<<<<<<<<<<<
 *             self.p_up = p1
 *             self.p_down = p2
 */
    __pyx_t_8 = __pyx_v_self->ikey2;
    __pyx_v_self->ikey_down = __pyx_t_8;

    /* "PDSim/flow/flow.pyx":300
 *             self.ikey_up = self.ikey1
 *             self.ikey_down = self.ikey2
 *             self.p_up = p1             # <<<<<<<<<<<<<<
 *             self.p_down = p2
 *         else:
 */
    __pyx_v_self->p_up = __pyx_v_p1;

    /* "PDSim/flow/flow.pyx":301
 *             self.ikey_down = self.ikey2
 *             self.p_up = p1
 *             self.p_down = p2             # <<<<<<<<<<<<<<
 *         else:
 *             self.m_key_up = self.m_key2
 */
    __pyx_v_self->p_down = __pyx_v_p2;

    /* "PDSim/flow/flow.pyx":287
 *         """
 *         cdef double p1 = self.State1.get_p(), p2 = self.State2.get_p()
 *         if p1 > p2:             # <<<<<<<<<<<<<<
 *             # The pressure in chamber 1 is higher than chamber 2
 *             # and thus the flow is from chamber 1 to 2
 */
    goto __pyx_L3;
  }

  /* "PDSim/flow/flow.pyx":303
 *             self.p_down = p2
 *         else:
 *             self.m_key_up = self.m_key2             # <<<<<<<<<<<<<<
 *             self.m_key_down = self.m_key1
 *             self.State_up = self.State2
 */
  /*else*/ {
    __pyx_t_1 = __pyx_v_self->m_key2;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->m_key_up);
    __Pyx_DECREF(__pyx_v_self->m_key_up);
    __pyx_v_self->m_key_up = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "PDSim/flow/flow.pyx":304
 *         else:
 *             self.m_key_up = self.m_key2
 *             self.m_key_down = self.m_key1             # <<<<<<<<<<<<<<
 *             self.State_up = self.State2
 *             self.State_down = self.State1
 */
    __pyx_t_1 = __pyx_v_self->m_key1;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->m_key_down);
    __Pyx_DECREF(__pyx_v_self->m_key_down);
    __pyx_v_self->m_key_down = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "PDSim/flow/flow.pyx":305
 *             self.m_key_up = self.m_key2
 *             self.m_key_down = self.m_key1
 *             self.State_up = self.State2             # <<<<<<<<<<<<<<
 *             self.State_down = self.State1
 *             self.key_up_exists = self.key2_exists
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->State2);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->State_up);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->State_up));
    __pyx_v_self->State_up = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "PDSim/flow/flow.pyx":306
 *             self.m_key_down = self.m_key1
 *             self.State_up = self.State2
 *             self.State_down = self.State1             # <<<<<<<<<<<<<<
 *             self.key_up_exists = self.key2_exists
 *             self.key_down_exists = self.key1_exists
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->State1);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->State_down);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->State_down));
    __pyx_v_self->State_down = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "PDSim/flow/flow.pyx":307
 *             self.State_up = self.State2
 *             self.State_down = self.State1
 *             self.key_up_exists = self.key2_exists             # <<<<<<<<<<<<<<
 *             self.key_down_exists = self.key1_exists
 *             self.key_up_Index = self.key2Index
 */
    __pyx_t_6 = __pyx_v_self->key2_exists;
    __pyx_v_self->key_up_exists = __pyx_t_6;

    /* "PDSim/flow/flow.pyx":308
 *             self.State_down = self.State1
 *             self.key_up_exists = self.key2_exists
 *             self.key_down_exists = self.key1_exists             # <<<<<<<<<<<<<<
 *             self.key_up_Index = self.key2Index
 *             self.key_down_Index = self.key1Index
 */
    __pyx_t_6 = __pyx_v_self->key1_exists;
    __pyx_v_self->key_down_exists = __pyx_t_6;

    /* "PDSim/flow/flow.pyx":309
 *             self.key_up_exists = self.key2_exists
 *             self.key_down_exists = self.key1_exists
 *             self.key_up_Index = self.key2Index             # <<<<<<<<<<<<<<
 *             self.key_down_Index = self.key1Index
 *             self.ikey_up = self.ikey2
 */
    __pyx_t_7 = __pyx_v_self->key2Index;
    __pyx_v_self->key_up_Index = __pyx_t_7;

    /* "PDSim/flow/flow.pyx":310
 *             self.key_down_exists = self.key1_exists
 *             self.key_up_Index = self.key2Index
 *             self.key_down_Index = self.key1Index             # <<<<<<<<<<<<<<
 *             self.ikey_up = self.ikey2
 *             self.ikey_down = self.ikey1
 */
    __pyx_t_7 = __pyx_v_self->key1Index;
    __pyx_v_self->key_down_Index = __pyx_t_7;

    /* "PDSim/flow/flow.pyx":311
 *             self.key_up_Index = self.key2Index
 *             self.key_down_Index = self.key1Index
 *             self.ikey_up = self.ikey2             # <<<<<<<<<<<<<<
 *             self.ikey_down = self.ikey1
 *             self.p_up = p2
 */
    __pyx_t_8 = __pyx_v_self->ikey2;
    __pyx_v_self->ikey_up = __pyx_t_8;

    /* "PDSim/flow/flow.pyx":312
 *             self.key_down_Index = self.key1Index
 *             self.ikey_up = self.ikey2
 *             self.ikey_down = self.ikey1             # <<<<<<<<<<<<<<
 *             self.p_up = p2
 *             self.p_down = p1
 */
    __pyx_t_8 = __pyx_v_self->ikey1;
    __pyx_v_self->ikey_down = __pyx_t_8;

    /* "PDSim/flow/flow.pyx":313
 *             self.ikey_up = self.ikey2
 *             self.ikey_down = self.ikey1
 *             self.p_up = p2             # <<<<<<<<<<<<<<
 *             self.p_down = p1
 * 
 */
    __pyx_v_self->p_up = __pyx_v_p2;

    /* "PDSim/flow/flow.pyx":314
 *             self.ikey_down = self.ikey1
 *             self.p_up = p2
 *             self.p_down = p1             # <<<<<<<<<<<<<<
 * 
 *         self.T_up = self.State_up.get_T()
 */
    __pyx_v_self->p_down = __pyx_v_p1;
  }
  __pyx_L3:;

  /* "PDSim/flow/flow.pyx":316
 *             self.p_down = p1
 * 
 *         self.T_up = self.State_up.get_T()             # <<<<<<<<<<<<<<
 *         self.h_up = self.State_up.get_h()
 *         self.h_down = self.State_down.get_h()
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_self->State_up->__pyx_vtab)->get_T(__pyx_v_self->State_up, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 316, __pyx_L1_error)
  __pyx_v_self->T_up = __pyx_t_5;

  /* "PDSim/flow/flow.pyx":317
 * 
 *         self.T_up = self.State_up.get_T()
 *         self.h_up = self.State_up.get_h()             # <<<<<<<<<<<<<<
 *         self.h_down = self.State_down.get_h()
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_self->State_up->__pyx_vtab)->get_h(__pyx_v_self->State_up, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 317, __pyx_L1_error)
  __pyx_v_self->h_up = __pyx_t_5;

  /* "PDSim/flow/flow.pyx":318
 *         self.T_up = self.State_up.get_T()
 *         self.h_up = self.State_up.get_h()
 *         self.h_down = self.State_down.get_h()             # <<<<<<<<<<<<<<
 * 
 *         self.mdot = (<FlowFunction>self.MdotFcn).call(self)
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_self->State_down->__pyx_vtab)->get_h(__pyx_v_self->State_down, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L1_error)
  __pyx_v_self->h_down = __pyx_t_5;

  /* "PDSim/flow/flow.pyx":320
 *         self.h_down = self.State_down.get_h()
 * 
 *         self.mdot = (<FlowFunction>self.MdotFcn).call(self)             # <<<<<<<<<<<<<<
 * 
 *         self.edot = abs(self.mdot*((self.h_up - self.h_down)-298.15*(self.State_up.get_s()-self.State_down.get_s())  ))
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction *)((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_v_self->MdotFcn)->__pyx_vtab)->call(((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_v_self->MdotFcn), __pyx_v_self, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L1_error)
  __pyx_v_self->mdot = __pyx_t_5;

  /* "PDSim/flow/flow.pyx":322
 *         self.mdot = (<FlowFunction>self.MdotFcn).call(self)
 * 
 *         self.edot = abs(self.mdot*((self.h_up - self.h_down)-298.15*(self.State_up.get_s()-self.State_down.get_s())  ))             # <<<<<<<<<<<<<<
 * 
 *     property key1:
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_self->State_up->__pyx_vtab)->get_s(__pyx_v_self->State_up, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 322, __pyx_L1_error)
  __pyx_t_9 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_self->State_down->__pyx_vtab)->get_s(__pyx_v_self->State_down, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 322, __pyx_L1_error)
  __pyx_v_self->edot = fabs((__pyx_v_self->mdot * ((__pyx_v_self->h_up - __pyx_v_self->h_down) - (298.15 * (__pyx_t_5 - __pyx_t_9)))));

  /* "PDSim/flow/flow.pyx":282
 *         return FP
 * 
 *     cpdef calculate(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the flow path
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.calculate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_7calculate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4flow_4flow_8FlowPath_6calculate[] = "FlowPath.calculate(self)\n\n        Calculate the flow path\n        ";
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_7calculate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6calculate(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_6calculate(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate", 0);
  __Pyx_TraceCall("calculate (wrapper)", __pyx_f[0], 282, 0, __PYX_ERR(0, 282, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4flow_4flow_8FlowPath_calculate(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.calculate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":326
 *     property key1:
 *         """ The string key corresponding to the first node """
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.m_key1 = to_bytes(val)
 *         def __get__(self):
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4key1_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4key1_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4key1___set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4key1___set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 326, 0, __PYX_ERR(0, 326, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":327
 *         """ The string key corresponding to the first node """
 *         def __set__(self, val):
 *             self.m_key1 = to_bytes(val)             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             return self.m_key1.decode('utf8')
 */
  __pyx_t_1 = __pyx_f_5PDSim_4flow_4flow_to_bytes(__pyx_v_val); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->m_key1);
  __Pyx_DECREF(__pyx_v_self->m_key1);
  __pyx_v_self->m_key1 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":326
 *     property key1:
 *         """ The string key corresponding to the first node """
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.m_key1 = to_bytes(val)
 *         def __get__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":328
 *         def __set__(self, val):
 *             self.m_key1 = to_bytes(val)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.m_key1.decode('utf8')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_4key1_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_4key1_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4key1_2__get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_4key1_2__get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 328, 0, __PYX_ERR(0, 328, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":329
 *             self.m_key1 = to_bytes(val)
 *         def __get__(self):
 *             return self.m_key1.decode('utf8')             # <<<<<<<<<<<<<<
 * 
 *     property key2:
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->m_key1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 329, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_decode_bytes(__pyx_v_self->m_key1, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/flow/flow.pyx":328
 *         def __set__(self, val):
 *             self.m_key1 = to_bytes(val)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.m_key1.decode('utf8')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":333
 *     property key2:
 *         """ The string key corresponding to the second node """
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.m_key2 = to_bytes(val)
 *         def __get__(self):
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4key2_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4key2_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4key2___set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4key2___set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 333, 0, __PYX_ERR(0, 333, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":334
 *         """ The string key corresponding to the second node """
 *         def __set__(self, val):
 *             self.m_key2 = to_bytes(val)             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             return self.m_key2.decode('utf8')
 */
  __pyx_t_1 = __pyx_f_5PDSim_4flow_4flow_to_bytes(__pyx_v_val); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->m_key2);
  __Pyx_DECREF(__pyx_v_self->m_key2);
  __pyx_v_self->m_key2 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":333
 *     property key2:
 *         """ The string key corresponding to the second node """
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.m_key2 = to_bytes(val)
 *         def __get__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":335
 *         def __set__(self, val):
 *             self.m_key2 = to_bytes(val)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.m_key2.decode('utf8')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_4key2_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_4key2_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4key2_2__get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_4key2_2__get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 335, 0, __PYX_ERR(0, 335, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":336
 *             self.m_key2 = to_bytes(val)
 *         def __get__(self):
 *             return self.m_key2.decode('utf8')             # <<<<<<<<<<<<<<
 * 
 *     property key_up:
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->m_key2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 336, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_decode_bytes(__pyx_v_self->m_key2, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/flow/flow.pyx":335
 *         def __set__(self, val):
 *             self.m_key2 = to_bytes(val)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.m_key2.decode('utf8')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":340
 *     property key_up:
 *         """The string key corresponding to the upstream node"""
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.m_key_up = to_bytes(val)
 *         def __get__(self):
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6key_up_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6key_up_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6key_up___set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6key_up___set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 340, 0, __PYX_ERR(0, 340, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":341
 *         """The string key corresponding to the upstream node"""
 *         def __set__(self, val):
 *             self.m_key_up = to_bytes(val)             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             return self.m_key_up.decode('utf8')
 */
  __pyx_t_1 = __pyx_f_5PDSim_4flow_4flow_to_bytes(__pyx_v_val); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->m_key_up);
  __Pyx_DECREF(__pyx_v_self->m_key_up);
  __pyx_v_self->m_key_up = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":340
 *     property key_up:
 *         """The string key corresponding to the upstream node"""
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.m_key_up = to_bytes(val)
 *         def __get__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key_up.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":342
 *         def __set__(self, val):
 *             self.m_key_up = to_bytes(val)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.m_key_up.decode('utf8')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_6key_up_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_6key_up_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6key_up_2__get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_6key_up_2__get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 342, 0, __PYX_ERR(0, 342, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":343
 *             self.m_key_up = to_bytes(val)
 *         def __get__(self):
 *             return self.m_key_up.decode('utf8')             # <<<<<<<<<<<<<<
 * 
 *     property key_down:
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->m_key_up == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 343, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_decode_bytes(__pyx_v_self->m_key_up, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/flow/flow.pyx":342
 *         def __set__(self, val):
 *             self.m_key_up = to_bytes(val)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.m_key_up.decode('utf8')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key_up.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":347
 *     property key_down:
 *         """ The string key corresponding to the downstream node """
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.m_key_down = to_bytes(val)
 *         def __get__(self):
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_8key_down_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_8key_down_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_8key_down___set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_8key_down___set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 347, 0, __PYX_ERR(0, 347, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":348
 *         """ The string key corresponding to the downstream node """
 *         def __set__(self, val):
 *             self.m_key_down = to_bytes(val)             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             return self.m_key_down.decode('utf8')
 */
  __pyx_t_1 = __pyx_f_5PDSim_4flow_4flow_to_bytes(__pyx_v_val); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->m_key_down);
  __Pyx_DECREF(__pyx_v_self->m_key_down);
  __pyx_v_self->m_key_down = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":347
 *     property key_down:
 *         """ The string key corresponding to the downstream node """
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.m_key_down = to_bytes(val)
 *         def __get__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key_down.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":349
 *         def __set__(self, val):
 *             self.m_key_down = to_bytes(val)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.m_key_down.decode('utf8')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_8key_down_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_8key_down_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_8key_down_2__get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_8key_down_2__get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 349, 0, __PYX_ERR(0, 349, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":350
 *             self.m_key_down = to_bytes(val)
 *         def __get__(self):
 *             return self.m_key_down.decode('utf8')             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->m_key_down == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 350, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_decode_bytes(__pyx_v_self->m_key_down, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/flow/flow.pyx":349
 *         def __set__(self, val):
 *             self.m_key_down = to_bytes(val)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.m_key_down.decode('utf8')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key_down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":352
 *             return self.m_key_down.decode('utf8')
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return rebuildFlowPath,(self.__getstate__(),)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_9__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4flow_4flow_8FlowPath_8__reduce__[] = "FlowPath.__reduce__(self)";
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_9__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_8__reduce__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_8__reduce__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);
  __Pyx_TraceCall("__reduce__", __pyx_f[0], 352, 0, __PYX_ERR(0, 352, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":353
 * 
 *     def __reduce__(self):
 *         return rebuildFlowPath,(self.__getstate__(),)             # <<<<<<<<<<<<<<
 * 
 *     def __getstate__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_rebuildFlowPath); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getstate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim/flow/flow.pyx":352
 *             return self.m_key_down.decode('utf8')
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return rebuildFlowPath,(self.__getstate__(),)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":355
 *         return rebuildFlowPath,(self.__getstate__(),)
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         d={}
 *         d['MdotFcn']=pickle.dumps(self.MdotFcn)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_11__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4flow_4flow_8FlowPath_10__getstate__[] = "FlowPath.__getstate__(self)";
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_11__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_10__getstate__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_10__getstate__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getstate__", 0);
  __Pyx_TraceCall("__getstate__", __pyx_f[0], 355, 0, __PYX_ERR(0, 355, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":356
 * 
 *     def __getstate__(self):
 *         d={}             # <<<<<<<<<<<<<<
 *         d['MdotFcn']=pickle.dumps(self.MdotFcn)
 *         d.update(self.__cdict__().copy())
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":357
 *     def __getstate__(self):
 *         d={}
 *         d['MdotFcn']=pickle.dumps(self.MdotFcn)             # <<<<<<<<<<<<<<
 *         d.update(self.__cdict__().copy())
 *         return d
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pickle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dumps); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, ((PyObject *)__pyx_v_self->MdotFcn)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self->MdotFcn));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_n_s_MdotFcn, __pyx_t_1) < 0)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":358
 *         d={}
 *         d['MdotFcn']=pickle.dumps(self.MdotFcn)
 *         d.update(self.__cdict__().copy())             # <<<<<<<<<<<<<<
 *         return d
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self->__pyx_vtab)->__pyx___cdict__(__pyx_v_self, 0, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "copy");
    __PYX_ERR(0, 358, __pyx_L1_error)
  }
  __pyx_t_3 = PyDict_Copy(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_v_d, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":359
 *         d['MdotFcn']=pickle.dumps(self.MdotFcn)
 *         d.update(self.__cdict__().copy())
 *         return d             # <<<<<<<<<<<<<<
 * 
 *     def __deepcopy__(self,memo):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_d);
  __pyx_r = __pyx_v_d;
  goto __pyx_L0;

  /* "PDSim/flow/flow.pyx":355
 *         return rebuildFlowPath,(self.__getstate__(),)
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         d={}
 *         d['MdotFcn']=pickle.dumps(self.MdotFcn)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":361
 *         return d
 * 
 *     def __deepcopy__(self,memo):             # <<<<<<<<<<<<<<
 *         newFM=FlowPath()
 *         newdict = copy.copy(self.__dict__)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_13__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_v_memo); /*proto*/
static char __pyx_doc_5PDSim_4flow_4flow_8FlowPath_12__deepcopy__[] = "FlowPath.__deepcopy__(self, memo)";
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_13__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_v_memo) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deepcopy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_12__deepcopy__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_memo));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_12__deepcopy__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memo) {
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_newFM = NULL;
  PyObject *__pyx_v_newdict = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__deepcopy__", 0);
  __Pyx_TraceCall("__deepcopy__", __pyx_f[0], 361, 0, __PYX_ERR(0, 361, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":362
 * 
 *     def __deepcopy__(self,memo):
 *         newFM=FlowPath()             # <<<<<<<<<<<<<<
 *         newdict = copy.copy(self.__dict__)
 *         newFM.__dict__.update(newdict)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5PDSim_4flow_4flow_FlowPath)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_newFM = ((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":363
 *     def __deepcopy__(self,memo):
 *         newFM=FlowPath()
 *         newdict = copy.copy(self.__dict__)             # <<<<<<<<<<<<<<
 *         newFM.__dict__.update(newdict)
 *         newFM.mdot=copy.copy(self.mdot)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_newdict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":364
 *         newFM=FlowPath()
 *         newdict = copy.copy(self.__dict__)
 *         newFM.__dict__.update(newdict)             # <<<<<<<<<<<<<<
 *         newFM.mdot=copy.copy(self.mdot)
 *         newFM.key_up=copy.copy(self.key_up)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_newFM), __pyx_n_s_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_update); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_newdict) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_newdict);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":365
 *         newdict = copy.copy(self.__dict__)
 *         newFM.__dict__.update(newdict)
 *         newFM.mdot=copy.copy(self.mdot)             # <<<<<<<<<<<<<<
 *         newFM.key_up=copy.copy(self.key_up)
 *         newFM.key_down=copy.copy(self.key_down)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->mdot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_newFM->mdot = __pyx_t_5;

  /* "PDSim/flow/flow.pyx":366
 *         newFM.__dict__.update(newdict)
 *         newFM.mdot=copy.copy(self.mdot)
 *         newFM.key_up=copy.copy(self.key_up)             # <<<<<<<<<<<<<<
 *         newFM.key_down=copy.copy(self.key_down)
 *         newFM.key1=copy.copy(self.key1)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_key_up); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_newFM), __pyx_n_s_key_up, __pyx_t_1) < 0) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":367
 *         newFM.mdot=copy.copy(self.mdot)
 *         newFM.key_up=copy.copy(self.key_up)
 *         newFM.key_down=copy.copy(self.key_down)             # <<<<<<<<<<<<<<
 *         newFM.key1=copy.copy(self.key1)
 *         newFM.key2=copy.copy(self.key2)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_key_down); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_newFM), __pyx_n_s_key_down, __pyx_t_1) < 0) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":368
 *         newFM.key_up=copy.copy(self.key_up)
 *         newFM.key_down=copy.copy(self.key_down)
 *         newFM.key1=copy.copy(self.key1)             # <<<<<<<<<<<<<<
 *         newFM.key2=copy.copy(self.key2)
 *         newFM.h_up=copy.copy(self.h_up)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_key1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_newFM), __pyx_n_s_key1, __pyx_t_1) < 0) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":369
 *         newFM.key_down=copy.copy(self.key_down)
 *         newFM.key1=copy.copy(self.key1)
 *         newFM.key2=copy.copy(self.key2)             # <<<<<<<<<<<<<<
 *         newFM.h_up=copy.copy(self.h_up)
 *         return newFM
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_key2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_newFM), __pyx_n_s_key2, __pyx_t_1) < 0) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":370
 *         newFM.key1=copy.copy(self.key1)
 *         newFM.key2=copy.copy(self.key2)
 *         newFM.h_up=copy.copy(self.h_up)             # <<<<<<<<<<<<<<
 *         return newFM
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->h_up); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_newFM->h_up = __pyx_t_5;

  /* "PDSim/flow/flow.pyx":371
 *         newFM.key2=copy.copy(self.key2)
 *         newFM.h_up=copy.copy(self.h_up)
 *         return newFM             # <<<<<<<<<<<<<<
 * 
 * def rebuildFlowPath(d):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_newFM));
  __pyx_r = ((PyObject *)__pyx_v_newFM);
  goto __pyx_L0;

  /* "PDSim/flow/flow.pyx":361
 *         return d
 * 
 *     def __deepcopy__(self,memo):             # <<<<<<<<<<<<<<
 *         newFM=FlowPath()
 *         newdict = copy.copy(self.__dict__)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.__deepcopy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_newFM);
  __Pyx_XDECREF(__pyx_v_newdict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":38
 *     cdef bytes m_key_up,m_key_down,m_key1,m_key2
 * 
 *     cdef public bint exists, key1_exists, key2_exists, key_up_exists, key_down_exists             # <<<<<<<<<<<<<<
 * 
 *     cdef public long key1Index, key2Index, key_up_Index, key_down_Index
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_6exists_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_6exists_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6exists___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_6exists___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 38, 0, __PYX_ERR(2, 38, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->exists); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.exists.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6exists_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6exists_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 38, 0, __PYX_ERR(2, 38, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 38, __pyx_L1_error)
  __pyx_v_self->exists = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.exists.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_11key1_exists_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_11key1_exists_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_11key1_exists___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_11key1_exists___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 38, 0, __PYX_ERR(2, 38, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->key1_exists); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key1_exists.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_11key1_exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_11key1_exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_11key1_exists_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_11key1_exists_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 38, 0, __PYX_ERR(2, 38, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 38, __pyx_L1_error)
  __pyx_v_self->key1_exists = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key1_exists.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_11key2_exists_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_11key2_exists_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_11key2_exists___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_11key2_exists___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 38, 0, __PYX_ERR(2, 38, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->key2_exists); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key2_exists.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_11key2_exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_11key2_exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_11key2_exists_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_11key2_exists_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 38, 0, __PYX_ERR(2, 38, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 38, __pyx_L1_error)
  __pyx_v_self->key2_exists = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key2_exists.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_13key_up_exists_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_13key_up_exists_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_13key_up_exists___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_13key_up_exists___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 38, 0, __PYX_ERR(2, 38, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->key_up_exists); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key_up_exists.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_13key_up_exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_13key_up_exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_13key_up_exists_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_13key_up_exists_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 38, 0, __PYX_ERR(2, 38, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 38, __pyx_L1_error)
  __pyx_v_self->key_up_exists = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key_up_exists.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_15key_down_exists_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_15key_down_exists_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_15key_down_exists___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_15key_down_exists___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 38, 0, __PYX_ERR(2, 38, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->key_down_exists); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key_down_exists.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_15key_down_exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_15key_down_exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_15key_down_exists_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_15key_down_exists_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 38, 0, __PYX_ERR(2, 38, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 38, __pyx_L1_error)
  __pyx_v_self->key_down_exists = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key_down_exists.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":40
 *     cdef public bint exists, key1_exists, key2_exists, key_up_exists, key_down_exists
 * 
 *     cdef public long key1Index, key2Index, key_up_Index, key_down_Index             # <<<<<<<<<<<<<<
 *     cdef public int ikey1, ikey2, ikey_up, ikey_down
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_9key1Index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_9key1Index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_9key1Index___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_9key1Index___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 40, 0, __PYX_ERR(2, 40, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->key1Index); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key1Index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_9key1Index_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_9key1Index_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_9key1Index_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_9key1Index_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 40, 0, __PYX_ERR(2, 40, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 40, __pyx_L1_error)
  __pyx_v_self->key1Index = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key1Index.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_9key2Index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_9key2Index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_9key2Index___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_9key2Index___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 40, 0, __PYX_ERR(2, 40, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->key2Index); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key2Index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_9key2Index_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_9key2Index_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_9key2Index_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_9key2Index_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 40, 0, __PYX_ERR(2, 40, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 40, __pyx_L1_error)
  __pyx_v_self->key2Index = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key2Index.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_12key_up_Index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_12key_up_Index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_12key_up_Index___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_12key_up_Index___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 40, 0, __PYX_ERR(2, 40, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->key_up_Index); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key_up_Index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_12key_up_Index_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_12key_up_Index_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_12key_up_Index_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_12key_up_Index_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 40, 0, __PYX_ERR(2, 40, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 40, __pyx_L1_error)
  __pyx_v_self->key_up_Index = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key_up_Index.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_14key_down_Index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_14key_down_Index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_14key_down_Index___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_14key_down_Index___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 40, 0, __PYX_ERR(2, 40, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->key_down_Index); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key_down_Index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_14key_down_Index_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_14key_down_Index_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_14key_down_Index_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_14key_down_Index_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 40, 0, __PYX_ERR(2, 40, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 40, __pyx_L1_error)
  __pyx_v_self->key_down_Index = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.key_down_Index.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":41
 * 
 *     cdef public long key1Index, key2Index, key_up_Index, key_down_Index
 *     cdef public int ikey1, ikey2, ikey_up, ikey_down             # <<<<<<<<<<<<<<
 * 
 *     cdef public double mdot
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_5ikey1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_5ikey1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_5ikey1___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_5ikey1___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 41, 0, __PYX_ERR(2, 41, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->ikey1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.ikey1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_5ikey1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_5ikey1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_5ikey1_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_5ikey1_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 41, 0, __PYX_ERR(2, 41, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 41, __pyx_L1_error)
  __pyx_v_self->ikey1 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.ikey1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_5ikey2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_5ikey2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_5ikey2___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_5ikey2___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 41, 0, __PYX_ERR(2, 41, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->ikey2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.ikey2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_5ikey2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_5ikey2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_5ikey2_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_5ikey2_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 41, 0, __PYX_ERR(2, 41, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 41, __pyx_L1_error)
  __pyx_v_self->ikey2 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.ikey2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_7ikey_up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_7ikey_up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_7ikey_up___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_7ikey_up___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 41, 0, __PYX_ERR(2, 41, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->ikey_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.ikey_up.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_7ikey_up_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_7ikey_up_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_7ikey_up_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_7ikey_up_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 41, 0, __PYX_ERR(2, 41, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 41, __pyx_L1_error)
  __pyx_v_self->ikey_up = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.ikey_up.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_9ikey_down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_9ikey_down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_9ikey_down___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_9ikey_down___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 41, 0, __PYX_ERR(2, 41, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->ikey_down); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.ikey_down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_9ikey_down_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_9ikey_down_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_9ikey_down_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_9ikey_down_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 41, 0, __PYX_ERR(2, 41, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 41, __pyx_L1_error)
  __pyx_v_self->ikey_down = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.ikey_down.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":43
 *     cdef public int ikey1, ikey2, ikey_up, ikey_down
 * 
 *     cdef public double mdot             # <<<<<<<<<<<<<<
 *     """ The mass flow rate [kg/s]"""
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_4mdot_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_4mdot_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4mdot___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_4mdot___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 43, 0, __PYX_ERR(2, 43, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mdot); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.mdot.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4mdot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4mdot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4mdot_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4mdot_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 43, 0, __PYX_ERR(2, 43, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 43, __pyx_L1_error)
  __pyx_v_self->mdot = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.mdot.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":46
 *     """ The mass flow rate [kg/s]"""
 * 
 *     cdef public double h_up             # <<<<<<<<<<<<<<
 *     """ The upstream enthalpy [kJ/kg] """
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_4h_up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_4h_up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4h_up___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_4h_up___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 46, 0, __PYX_ERR(2, 46, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->h_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.h_up.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4h_up_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4h_up_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4h_up_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4h_up_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 46, 0, __PYX_ERR(2, 46, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 46, __pyx_L1_error)
  __pyx_v_self->h_up = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.h_up.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":49
 *     """ The upstream enthalpy [kJ/kg] """
 * 
 *     cdef public double h_down             # <<<<<<<<<<<<<<
 *     """ The downstream enthalpy [kJ/kg] """
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_6h_down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_6h_down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6h_down___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_6h_down___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 49, 0, __PYX_ERR(2, 49, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->h_down); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.h_down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6h_down_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6h_down_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6h_down_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6h_down_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 49, 0, __PYX_ERR(2, 49, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 49, __pyx_L1_error)
  __pyx_v_self->h_down = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.h_down.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":52
 *     """ The downstream enthalpy [kJ/kg] """
 * 
 *     cdef public double T_up             # <<<<<<<<<<<<<<
 *     """ The upstream temperature [K] """
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_4T_up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_4T_up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4T_up___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_4T_up___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->T_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.T_up.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4T_up_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4T_up_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4T_up_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4T_up_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 52, __pyx_L1_error)
  __pyx_v_self->T_up = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.T_up.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":55
 *     """ The upstream temperature [K] """
 * 
 *     cdef public double p_up             # <<<<<<<<<<<<<<
 *     """ The upstream pressure [kPa] """
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_4p_up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_4p_up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4p_up___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_4p_up___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->p_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.p_up.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4p_up_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4p_up_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4p_up_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4p_up_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 55, __pyx_L1_error)
  __pyx_v_self->p_up = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.p_up.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":58
 *     """ The upstream pressure [kPa] """
 * 
 *     cdef public double p_down             # <<<<<<<<<<<<<<
 *     """ The downstream pressure [kPa] """
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_6p_down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_6p_down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6p_down___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_6p_down___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 58, 0, __PYX_ERR(2, 58, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->p_down); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.p_down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6p_down_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6p_down_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6p_down_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6p_down_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 58, 0, __PYX_ERR(2, 58, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 58, __pyx_L1_error)
  __pyx_v_self->p_down = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.p_down.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":61
 *     """ The downstream pressure [kPa] """
 * 
 *     cdef public double A             # <<<<<<<<<<<<<<
 *     """ The flow area [m^2] """
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_1A_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_1A_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_1A___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_1A___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 61, 0, __PYX_ERR(2, 61, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->A); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.A.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_1A_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_1A_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_1A_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_1A_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 61, 0, __PYX_ERR(2, 61, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 61, __pyx_L1_error)
  __pyx_v_self->A = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.A.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":64
 *     """ The flow area [m^2] """
 * 
 *     cdef public double edot             # <<<<<<<<<<<<<<
 *     """ The rate of irreversibility generation in this flow path [kW]"""
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_4edot_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_4edot_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4edot___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_4edot___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 64, 0, __PYX_ERR(2, 64, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->edot); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.edot.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4edot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4edot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4edot_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_4edot_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 64, 0, __PYX_ERR(2, 64, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 64, __pyx_L1_error)
  __pyx_v_self->edot = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.edot.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":67
 *     """ The rate of irreversibility generation in this flow path [kW]"""
 * 
 *     cdef public FlowFunction MdotFcn             # <<<<<<<<<<<<<<
 *     """ The function that will return the mass flow rate """
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_7MdotFcn_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_7MdotFcn_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_7MdotFcn___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_7MdotFcn___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 67, 0, __PYX_ERR(2, 67, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->MdotFcn));
  __pyx_r = ((PyObject *)__pyx_v_self->MdotFcn);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.MdotFcn.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_7MdotFcn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_7MdotFcn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_7MdotFcn_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_7MdotFcn_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 67, 0, __PYX_ERR(2, 67, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction))))) __PYX_ERR(2, 67, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->MdotFcn);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->MdotFcn));
  __pyx_v_self->MdotFcn = ((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.MdotFcn.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_7MdotFcn_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_7MdotFcn_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_7MdotFcn_4__del__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_7MdotFcn_4__del__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 67, 0, __PYX_ERR(2, 67, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->MdotFcn);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->MdotFcn));
  __pyx_v_self->MdotFcn = ((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.MdotFcn.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":70
 *     """ The function that will return the mass flow rate """
 * 
 *     cdef public bytes MdotFcn_str             # <<<<<<<<<<<<<<
 * 
 *     cdef public State State1
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 70, 0, __PYX_ERR(2, 70, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->MdotFcn_str);
  __pyx_r = __pyx_v_self->MdotFcn_str;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.MdotFcn_str.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 70, 0, __PYX_ERR(2, 70, __pyx_L1_error));
  if (!(likely(PyBytes_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(2, 70, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->MdotFcn_str);
  __Pyx_DECREF(__pyx_v_self->MdotFcn_str);
  __pyx_v_self->MdotFcn_str = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.MdotFcn_str.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str_4__del__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str_4__del__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 70, 0, __PYX_ERR(2, 70, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->MdotFcn_str);
  __Pyx_DECREF(__pyx_v_self->MdotFcn_str);
  __pyx_v_self->MdotFcn_str = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.MdotFcn_str.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":72
 *     cdef public bytes MdotFcn_str
 * 
 *     cdef public State State1             # <<<<<<<<<<<<<<
 *     """ The first state """
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State1___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State1___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 72, 0, __PYX_ERR(2, 72, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->State1));
  __pyx_r = ((PyObject *)__pyx_v_self->State1);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.State1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State1_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State1_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 72, 0, __PYX_ERR(2, 72, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(2, 72, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->State1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State1));
  __pyx_v_self->State1 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.State1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State1_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State1_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State1_4__del__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State1_4__del__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 72, 0, __PYX_ERR(2, 72, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->State1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State1));
  __pyx_v_self->State1 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.State1.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":75
 *     """ The first state """
 * 
 *     cdef public State State2             # <<<<<<<<<<<<<<
 *     """ The second state """
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State2___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State2___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 75, 0, __PYX_ERR(2, 75, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->State2));
  __pyx_r = ((PyObject *)__pyx_v_self->State2);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.State2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State2_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State2_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 75, 0, __PYX_ERR(2, 75, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(2, 75, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->State2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State2));
  __pyx_v_self->State2 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.State2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State2_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State2_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State2_4__del__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_6State2_4__del__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 75, 0, __PYX_ERR(2, 75, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->State2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State2));
  __pyx_v_self->State2 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.State2.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":78
 *     """ The second state """
 * 
 *     cdef public State State_up             # <<<<<<<<<<<<<<
 *     """ The upstream state """
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_8State_up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_8State_up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_8State_up___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_8State_up___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 78, 0, __PYX_ERR(2, 78, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->State_up));
  __pyx_r = ((PyObject *)__pyx_v_self->State_up);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.State_up.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_8State_up_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_8State_up_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_8State_up_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_8State_up_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 78, 0, __PYX_ERR(2, 78, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(2, 78, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->State_up);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State_up));
  __pyx_v_self->State_up = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.State_up.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_8State_up_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_8State_up_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_8State_up_4__del__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_8State_up_4__del__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 78, 0, __PYX_ERR(2, 78, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->State_up);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State_up));
  __pyx_v_self->State_up = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.State_up.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pxd":81
 *     """ The upstream state """
 * 
 *     cdef public State State_down             # <<<<<<<<<<<<<<
 *     """ The downstream state """
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_10State_down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4flow_4flow_8FlowPath_10State_down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_10State_down___get__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_8FlowPath_10State_down___get__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 81, 0, __PYX_ERR(2, 81, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->State_down));
  __pyx_r = ((PyObject *)__pyx_v_self->State_down);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.State_down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_10State_down_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_10State_down_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_10State_down_2__set__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_10State_down_2__set__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 81, 0, __PYX_ERR(2, 81, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(2, 81, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->State_down);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State_down));
  __pyx_v_self->State_down = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.State_down.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_10State_down_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4flow_4flow_8FlowPath_10State_down_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_8FlowPath_10State_down_4__del__(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4flow_4flow_8FlowPath_10State_down_4__del__(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 81, 0, __PYX_ERR(2, 81, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->State_down);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State_down));
  __pyx_v_self->State_down = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.FlowPath.State_down.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/flow/flow.pyx":373
 *         return newFM
 * 
 * def rebuildFlowPath(d):             # <<<<<<<<<<<<<<
 *     FP = FlowPath()
 *     FP.MdotFcn = pickle.loads(d.pop('MdotFcn'))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_3rebuildFlowPath(PyObject *__pyx_self, PyObject *__pyx_v_d); /*proto*/
static char __pyx_doc_5PDSim_4flow_4flow_2rebuildFlowPath[] = "rebuildFlowPath(d)";
static PyMethodDef __pyx_mdef_5PDSim_4flow_4flow_3rebuildFlowPath = {"rebuildFlowPath", (PyCFunction)__pyx_pw_5PDSim_4flow_4flow_3rebuildFlowPath, METH_O, __pyx_doc_5PDSim_4flow_4flow_2rebuildFlowPath};
static PyObject *__pyx_pw_5PDSim_4flow_4flow_3rebuildFlowPath(PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rebuildFlowPath (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_2rebuildFlowPath(__pyx_self, ((PyObject *)__pyx_v_d));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_2rebuildFlowPath(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d) {
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *__pyx_v_FP = NULL;
  PyObject *__pyx_v_item = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__4)
  __Pyx_RefNannySetupContext("rebuildFlowPath", 0);
  __Pyx_TraceCall("rebuildFlowPath", __pyx_f[0], 373, 0, __PYX_ERR(0, 373, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":374
 * 
 * def rebuildFlowPath(d):
 *     FP = FlowPath()             # <<<<<<<<<<<<<<
 *     FP.MdotFcn = pickle.loads(d.pop('MdotFcn'))
 *     for item in d:
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5PDSim_4flow_4flow_FlowPath)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_FP = ((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":375
 * def rebuildFlowPath(d):
 *     FP = FlowPath()
 *     FP.MdotFcn = pickle.loads(d.pop('MdotFcn'))             # <<<<<<<<<<<<<<
 *     for item in d:
 *         setattr(FP,item,d[item])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pickle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_loads); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_pop); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_n_s_MdotFcn) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_s_MdotFcn);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction))))) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_FP->MdotFcn);
  __Pyx_DECREF(((PyObject *)__pyx_v_FP->MdotFcn));
  __pyx_v_FP->MdotFcn = ((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":376
 *     FP = FlowPath()
 *     FP.MdotFcn = pickle.loads(d.pop('MdotFcn'))
 *     for item in d:             # <<<<<<<<<<<<<<
 *         setattr(FP,item,d[item])
 *     return FP
 */
  if (likely(PyList_CheckExact(__pyx_v_d)) || PyTuple_CheckExact(__pyx_v_d)) {
    __pyx_t_1 = __pyx_v_d; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_d); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 376, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 376, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 376, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 376, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 376, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_7(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 376, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "PDSim/flow/flow.pyx":377
 *     FP.MdotFcn = pickle.loads(d.pop('MdotFcn'))
 *     for item in d:
 *         setattr(FP,item,d[item])             # <<<<<<<<<<<<<<
 *     return FP
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_d, __pyx_v_item); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = PyObject_SetAttr(((PyObject *)__pyx_v_FP), __pyx_v_item, __pyx_t_3); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "PDSim/flow/flow.pyx":376
 *     FP = FlowPath()
 *     FP.MdotFcn = pickle.loads(d.pop('MdotFcn'))
 *     for item in d:             # <<<<<<<<<<<<<<
 *         setattr(FP,item,d[item])
 *     return FP
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":378
 *     for item in d:
 *         setattr(FP,item,d[item])
 *     return FP             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_FP));
  __pyx_r = ((PyObject *)__pyx_v_FP);
  goto __pyx_L0;

  /* "PDSim/flow/flow.pyx":373
 *         return newFM
 * 
 * def rebuildFlowPath(d):             # <<<<<<<<<<<<<<
 *     FP = FlowPath()
 *     FP.MdotFcn = pickle.loads(d.pop('MdotFcn'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.flow.flow.rebuildFlowPath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_FP);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_FlowPathCollection(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4flow_4flow_5__pyx_unpickle_FlowPathCollection(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4flow_4flow_4__pyx_unpickle_FlowPathCollection[] = "__pyx_unpickle_FlowPathCollection(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_5PDSim_4flow_4flow_5__pyx_unpickle_FlowPathCollection = {"__pyx_unpickle_FlowPathCollection", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5PDSim_4flow_4flow_5__pyx_unpickle_FlowPathCollection, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4flow_4flow_4__pyx_unpickle_FlowPathCollection};
static PyObject *__pyx_pw_5PDSim_4flow_4flow_5__pyx_unpickle_FlowPathCollection(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_FlowPathCollection (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_FlowPathCollection", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_FlowPathCollection", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_FlowPathCollection") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_FlowPathCollection", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.flow.flow.__pyx_unpickle_FlowPathCollection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4flow_4flow_4__pyx_unpickle_FlowPathCollection(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4flow_4flow_4__pyx_unpickle_FlowPathCollection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__5)
  __Pyx_RefNannySetupContext("__pyx_unpickle_FlowPathCollection", 0);
  __Pyx_TraceCall("__pyx_unpickle_FlowPathCollection", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x4cceff6:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x4cceff6 = (N, Nexists, flow_paths, omega))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x4cceff6) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x4cceff6:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x4cceff6 = (N, Nexists, flow_paths, omega))" % __pyx_checksum)
 *     __pyx_result = FlowPathCollection.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x4cceff6:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x4cceff6 = (N, Nexists, flow_paths, omega))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = FlowPathCollection.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x4c, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x4cceff6:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x4cceff6 = (N, Nexists, flow_paths, omega))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x4cceff6 = (N, Nexists, flow_paths, omega))" % __pyx_checksum)
 *     __pyx_result = FlowPathCollection.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_FlowPathCollection__set_state(<FlowPathCollection> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5PDSim_4flow_4flow_FlowPathCollection), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x4cceff6 = (N, Nexists, flow_paths, omega))" % __pyx_checksum)
 *     __pyx_result = FlowPathCollection.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_FlowPathCollection__set_state(<FlowPathCollection> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = FlowPathCollection.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_FlowPathCollection__set_state(<FlowPathCollection> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_FlowPathCollection__set_state(FlowPathCollection __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_5PDSim_4flow_4flow___pyx_unpickle_FlowPathCollection__set_state(((struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x4cceff6 = (N, Nexists, flow_paths, omega))" % __pyx_checksum)
 *     __pyx_result = FlowPathCollection.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_FlowPathCollection__set_state(<FlowPathCollection> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_FlowPathCollection__set_state(<FlowPathCollection> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_FlowPathCollection__set_state(FlowPathCollection __pyx_result, tuple __pyx_state):
 *     __pyx_result.N = __pyx_state[0]; __pyx_result.Nexists = __pyx_state[1]; __pyx_result.flow_paths = __pyx_state[2]; __pyx_result.omega = __pyx_state[3]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_FlowPathCollection(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.flow.flow.__pyx_unpickle_FlowPathCollection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_FlowPathCollection__set_state(<FlowPathCollection> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_FlowPathCollection__set_state(FlowPathCollection __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.N = __pyx_state[0]; __pyx_result.Nexists = __pyx_state[1]; __pyx_result.flow_paths = __pyx_state[2]; __pyx_result.omega = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_5PDSim_4flow_4flow___pyx_unpickle_FlowPathCollection__set_state(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_FlowPathCollection__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_FlowPathCollection__set_state", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_FlowPathCollection__set_state(FlowPathCollection __pyx_result, tuple __pyx_state):
 *     __pyx_result.N = __pyx_state[0]; __pyx_result.Nexists = __pyx_state[1]; __pyx_result.flow_paths = __pyx_state[2]; __pyx_result.omega = __pyx_state[3]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->N = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->Nexists = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->flow_paths);
  __Pyx_DECREF(__pyx_v___pyx_result->flow_paths);
  __pyx_v___pyx_result->flow_paths = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->omega = __pyx_t_3;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_FlowPathCollection__set_state(FlowPathCollection __pyx_result, tuple __pyx_state):
 *     __pyx_result.N = __pyx_state[0]; __pyx_result.Nexists = __pyx_state[1]; __pyx_result.flow_paths = __pyx_state[2]; __pyx_result.omega = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_5 > 4) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6 != 0);
  __pyx_t_4 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "(tree fragment)":14
 *     __pyx_result.N = __pyx_state[0]; __pyx_result.Nexists = __pyx_state[1]; __pyx_result.flow_paths = __pyx_state[2]; __pyx_result.omega = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_1 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_FlowPathCollection__set_state(FlowPathCollection __pyx_result, tuple __pyx_state):
 *     __pyx_result.N = __pyx_state[0]; __pyx_result.Nexists = __pyx_state[1]; __pyx_result.flow_paths = __pyx_state[2]; __pyx_result.omega = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_FlowPathCollection__set_state(<FlowPathCollection> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_FlowPathCollection__set_state(FlowPathCollection __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.N = __pyx_state[0]; __pyx_result.Nexists = __pyx_state[1]; __pyx_result.flow_paths = __pyx_state[2]; __pyx_result.omega = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("PDSim.flow.flow.__pyx_unpickle_FlowPathCollection__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew1", __pyx_f[3], 734, 0, __PYX_ERR(3, 734, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew2", __pyx_f[3], 737, 0, __PYX_ERR(3, 737, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew3", __pyx_f[3], 740, 0, __PYX_ERR(3, 740, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew4", __pyx_f[3], 743, 0, __PYX_ERR(3, 743, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew5", __pyx_f[3], 746, 0, __PYX_ERR(3, 746, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);
  __Pyx_TraceCall("PyDataType_SHAPE", __pyx_f[3], 749, 0, __PYX_ERR(3, 749, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":751
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":753
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.PyDataType_SHAPE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_array_base", 0);
  __Pyx_TraceCall("set_array_base", __pyx_f[3], 868, 0, __PYX_ERR(3, 868, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":869
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":870
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_array_base", 0);
  __Pyx_TraceCall("get_array_base", __pyx_f[3], 872, 0, __PYX_ERR(3, 872, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":873
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":875
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":876
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.get_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);
  __Pyx_TraceCall("import_array", __pyx_f[3], 880, 0, __PYX_ERR(3, 880, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":882
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 882, __pyx_L3_error)

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":883
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 883, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 884, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 884, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);
  __Pyx_TraceCall("import_umath", __pyx_f[3], 886, 0, __PYX_ERR(3, 886, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":888
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 888, __pyx_L3_error)

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":889
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 889, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 890, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 890, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);
  __Pyx_TraceCall("import_ufunc", __pyx_f[3], 892, 0, __PYX_ERR(3, 892, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":894
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 894, __pyx_L3_error)

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":895
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 895, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":896
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 896, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 896, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/misc/datatypes.pxd":41
 * cpdef arraym empty_arraym(int N)
 * 
 * cdef inline check_dims(arraym x, arraym y):             # <<<<<<<<<<<<<<
 *     if x.N != y.N:
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */

static CYTHON_INLINE PyObject *__pyx_f_5PDSim_4misc_9datatypes_check_dims(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_x, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_dims", 0);
  __Pyx_TraceCall("check_dims", __pyx_f[4], 41, 0, __PYX_ERR(4, 41, __pyx_L1_error));

  /* "PDSim/misc/datatypes.pxd":42
 * 
 * cdef inline check_dims(arraym x, arraym y):
 *     if x.N != y.N:             # <<<<<<<<<<<<<<
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */
  __pyx_t_1 = ((__pyx_v_x->N != __pyx_v_y->N) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "PDSim/misc/datatypes.pxd":43
 * cdef inline check_dims(arraym x, arraym y):
 *     if x.N != y.N:
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))             # <<<<<<<<<<<<<<
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_x->N); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Cannot_apply_unary_operator_to_a, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_and); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_y->N); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(4, 43, __pyx_L1_error)

    /* "PDSim/misc/datatypes.pxd":42
 * 
 * cdef inline check_dims(arraym x, arraym y):
 *     if x.N != y.N:             # <<<<<<<<<<<<<<
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */
  }

  /* "PDSim/misc/datatypes.pxd":41
 * cpdef arraym empty_arraym(int N)
 * 
 * cdef inline check_dims(arraym x, arraym y):             # <<<<<<<<<<<<<<
 *     if x.N != y.N:
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.misc.datatypes.check_dims", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPathCollection __pyx_vtable_5PDSim_4flow_4flow_FlowPathCollection;

static PyObject *__pyx_tp_new_5PDSim_4flow_4flow_FlowPathCollection(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *p;
  PyObject *o = (&PyList_Type)->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *)o);
  p->__pyx_vtab = __pyx_vtabptr_5PDSim_4flow_4flow_FlowPathCollection;
  p->flow_paths = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4flow_4flow_FlowPathCollection(PyObject *o) {
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *p = (struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->flow_paths);
  PyObject_GC_Track(o);
  (&PyList_Type)->tp_dealloc(o);
}

static int __pyx_tp_traverse_5PDSim_4flow_4flow_FlowPathCollection(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *p = (struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *)o;
  if (!(&PyList_Type)->tp_traverse); else { e = (&PyList_Type)->tp_traverse(o,v,a); if (e) return e; }
  if (p->flow_paths) {
    e = (*v)(p->flow_paths, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4flow_4flow_FlowPathCollection(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *p = (struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *)o;
  if (!(&PyList_Type)->tp_clear); else (&PyList_Type)->tp_clear(o);
  tmp = ((PyObject*)p->flow_paths);
  p->flow_paths = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_5PDSim_4flow_4flow_FlowPathCollection[] = {
  {"update_existence", (PyCFunction)__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_1update_existence, METH_O, __pyx_doc_5PDSim_4flow_4flow_18FlowPathCollection_update_existence},
  {"calculate", (PyCFunction)__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_3calculate, METH_NOARGS, __pyx_doc_5PDSim_4flow_4flow_18FlowPathCollection_2calculate},
  {"sumterms", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_5sumterms, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4flow_4flow_18FlowPathCollection_4sumterms},
  {"get_deepcopy", (PyCFunction)__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_7get_deepcopy, METH_NOARGS, __pyx_doc_5PDSim_4flow_4flow_18FlowPathCollection_6get_deepcopy},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_9__reduce_cython__, METH_NOARGS, __pyx_doc_5PDSim_4flow_4flow_18FlowPathCollection_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5PDSim_4flow_4flow_18FlowPathCollection_11__setstate_cython__, METH_O, __pyx_doc_5PDSim_4flow_4flow_18FlowPathCollection_10__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4flow_4flow_FlowPathCollection = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.flow.flow.FlowPathCollection", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4flow_4flow_FlowPathCollection, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4flow_4flow_FlowPathCollection, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4flow_4flow_FlowPathCollection, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4flow_4flow_FlowPathCollection, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4flow_4flow_FlowPathCollection, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPath __pyx_vtable_5PDSim_4flow_4flow_FlowPath;

static PyObject *__pyx_tp_new_5PDSim_4flow_4flow_FlowPath(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)o);
  p->__pyx_vtab = __pyx_vtabptr_5PDSim_4flow_4flow_FlowPath;
  p->m_key_up = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->m_key_down = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->m_key1 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->m_key2 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->MdotFcn = ((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)Py_None); Py_INCREF(Py_None);
  p->MdotFcn_str = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->State1 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  p->State2 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  p->State_up = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  p->State_down = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4flow_4flow_FlowPath(PyObject *o) {
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *p = (struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->m_key_up);
  Py_CLEAR(p->m_key_down);
  Py_CLEAR(p->m_key1);
  Py_CLEAR(p->m_key2);
  Py_CLEAR(p->MdotFcn);
  Py_CLEAR(p->MdotFcn_str);
  Py_CLEAR(p->State1);
  Py_CLEAR(p->State2);
  Py_CLEAR(p->State_up);
  Py_CLEAR(p->State_down);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5PDSim_4flow_4flow_FlowPath(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *p = (struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)o;
  if (p->MdotFcn) {
    e = (*v)(((PyObject *)p->MdotFcn), a); if (e) return e;
  }
  if (p->State1) {
    e = (*v)(((PyObject *)p->State1), a); if (e) return e;
  }
  if (p->State2) {
    e = (*v)(((PyObject *)p->State2), a); if (e) return e;
  }
  if (p->State_up) {
    e = (*v)(((PyObject *)p->State_up), a); if (e) return e;
  }
  if (p->State_down) {
    e = (*v)(((PyObject *)p->State_down), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4flow_4flow_FlowPath(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *p = (struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *)o;
  tmp = ((PyObject*)p->MdotFcn);
  p->MdotFcn = ((struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->State1);
  p->State1 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->State2);
  p->State2 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->State_up);
  p->State_up = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->State_down);
  p->State_down = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4key1_3__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4key1_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4key2_3__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4key2_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key_up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6key_up_3__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key_up(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6key_up_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key_down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_8key_down_3__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key_down(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_8key_down_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_exists(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6exists_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_exists(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6exists_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key1_exists(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_11key1_exists_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key1_exists(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_11key1_exists_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key2_exists(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_11key2_exists_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key2_exists(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_11key2_exists_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key_up_exists(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_13key_up_exists_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key_up_exists(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_13key_up_exists_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key_down_exists(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_15key_down_exists_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key_down_exists(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_15key_down_exists_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key1Index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_9key1Index_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key1Index(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_9key1Index_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key2Index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_9key2Index_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key2Index(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_9key2Index_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key_up_Index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_12key_up_Index_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key_up_Index(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_12key_up_Index_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key_down_Index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_14key_down_Index_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key_down_Index(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_14key_down_Index_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_ikey1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_5ikey1_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_ikey1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_5ikey1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_ikey2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_5ikey2_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_ikey2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_5ikey2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_ikey_up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_7ikey_up_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_ikey_up(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_7ikey_up_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_ikey_down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_9ikey_down_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_ikey_down(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_9ikey_down_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_mdot(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4mdot_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_mdot(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4mdot_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_h_up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4h_up_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_h_up(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4h_up_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_h_down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6h_down_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_h_down(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6h_down_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_T_up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4T_up_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_T_up(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4T_up_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_p_up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4p_up_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_p_up(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4p_up_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_p_down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6p_down_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_p_down(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6p_down_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_A(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_1A_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_A(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_1A_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_edot(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4edot_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_edot(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_4edot_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_MdotFcn(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_7MdotFcn_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_MdotFcn(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_7MdotFcn_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_7MdotFcn_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_MdotFcn_str(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_MdotFcn_str(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_11MdotFcn_str_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_State1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State1_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_State1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State1_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State1_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_State2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State2_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_State2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State2_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_6State2_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_State_up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_8State_up_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_State_up(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_8State_up_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_8State_up_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4flow_4flow_8FlowPath_State_down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_10State_down_1__get__(o);
}

static int __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_State_down(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_10State_down_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4flow_4flow_8FlowPath_10State_down_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5PDSim_4flow_4flow_FlowPath[] = {
  {"__cdict__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5PDSim_4flow_4flow_8FlowPath_3__cdict__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4flow_4flow_8FlowPath_2__cdict__},
  {"get_deepcopy", (PyCFunction)__pyx_pw_5PDSim_4flow_4flow_8FlowPath_5get_deepcopy, METH_NOARGS, __pyx_doc_5PDSim_4flow_4flow_8FlowPath_4get_deepcopy},
  {"calculate", (PyCFunction)__pyx_pw_5PDSim_4flow_4flow_8FlowPath_7calculate, METH_NOARGS, __pyx_doc_5PDSim_4flow_4flow_8FlowPath_6calculate},
  {"__reduce__", (PyCFunction)__pyx_pw_5PDSim_4flow_4flow_8FlowPath_9__reduce__, METH_NOARGS, __pyx_doc_5PDSim_4flow_4flow_8FlowPath_8__reduce__},
  {"__getstate__", (PyCFunction)__pyx_pw_5PDSim_4flow_4flow_8FlowPath_11__getstate__, METH_NOARGS, __pyx_doc_5PDSim_4flow_4flow_8FlowPath_10__getstate__},
  {"__deepcopy__", (PyCFunction)__pyx_pw_5PDSim_4flow_4flow_8FlowPath_13__deepcopy__, METH_O, __pyx_doc_5PDSim_4flow_4flow_8FlowPath_12__deepcopy__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5PDSim_4flow_4flow_FlowPath[] = {
  {(char *)"key1", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key1, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key1, (char *)" The string key corresponding to the first node ", 0},
  {(char *)"key2", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key2, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key2, (char *)" The string key corresponding to the second node ", 0},
  {(char *)"key_up", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key_up, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key_up, (char *)"The string key corresponding to the upstream node", 0},
  {(char *)"key_down", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key_down, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key_down, (char *)" The string key corresponding to the downstream node ", 0},
  {(char *)"exists", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_exists, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_exists, (char *)"exists: 'bool'", 0},
  {(char *)"key1_exists", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key1_exists, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key1_exists, (char *)"key1_exists: 'bool'", 0},
  {(char *)"key2_exists", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key2_exists, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key2_exists, (char *)"key2_exists: 'bool'", 0},
  {(char *)"key_up_exists", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key_up_exists, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key_up_exists, (char *)"key_up_exists: 'bool'", 0},
  {(char *)"key_down_exists", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key_down_exists, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key_down_exists, (char *)"key_down_exists: 'bool'", 0},
  {(char *)"key1Index", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key1Index, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key1Index, (char *)"key1Index: 'long'", 0},
  {(char *)"key2Index", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key2Index, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key2Index, (char *)"key2Index: 'long'", 0},
  {(char *)"key_up_Index", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key_up_Index, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key_up_Index, (char *)"key_up_Index: 'long'", 0},
  {(char *)"key_down_Index", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_key_down_Index, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_key_down_Index, (char *)"key_down_Index: 'long'", 0},
  {(char *)"ikey1", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_ikey1, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_ikey1, (char *)"ikey1: 'int'", 0},
  {(char *)"ikey2", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_ikey2, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_ikey2, (char *)"ikey2: 'int'", 0},
  {(char *)"ikey_up", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_ikey_up, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_ikey_up, (char *)"ikey_up: 'int'", 0},
  {(char *)"ikey_down", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_ikey_down, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_ikey_down, (char *)"ikey_down: 'int'", 0},
  {(char *)"mdot", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_mdot, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_mdot, (char *)"mdot: 'double'\n The mass flow rate [kg/s]", 0},
  {(char *)"h_up", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_h_up, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_h_up, (char *)"h_up: 'double'\n The upstream enthalpy [kJ/kg] ", 0},
  {(char *)"h_down", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_h_down, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_h_down, (char *)"h_down: 'double'\n The downstream enthalpy [kJ/kg] ", 0},
  {(char *)"T_up", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_T_up, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_T_up, (char *)"T_up: 'double'\n The upstream temperature [K] ", 0},
  {(char *)"p_up", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_p_up, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_p_up, (char *)"p_up: 'double'\n The upstream pressure [kPa] ", 0},
  {(char *)"p_down", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_p_down, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_p_down, (char *)"p_down: 'double'\n The downstream pressure [kPa] ", 0},
  {(char *)"A", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_A, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_A, (char *)"A: 'double'\n The flow area [m^2] ", 0},
  {(char *)"edot", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_edot, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_edot, (char *)"edot: 'double'\n The rate of irreversibility generation in this flow path [kW]", 0},
  {(char *)"MdotFcn", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_MdotFcn, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_MdotFcn, (char *)"MdotFcn: PDSim.flow.flow_models.FlowFunction\n The function that will return the mass flow rate ", 0},
  {(char *)"MdotFcn_str", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_MdotFcn_str, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_MdotFcn_str, (char *)"MdotFcn_str: bytes", 0},
  {(char *)"State1", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_State1, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_State1, (char *)"State1: CoolProp.CoolProp.State\n The first state ", 0},
  {(char *)"State2", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_State2, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_State2, (char *)"State2: CoolProp.CoolProp.State\n The second state ", 0},
  {(char *)"State_up", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_State_up, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_State_up, (char *)"State_up: CoolProp.CoolProp.State\n The upstream state ", 0},
  {(char *)"State_down", __pyx_getprop_5PDSim_4flow_4flow_8FlowPath_State_down, __pyx_setprop_5PDSim_4flow_4flow_8FlowPath_State_down, (char *)"State_down: CoolProp.CoolProp.State\n The downstream state ", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4flow_4flow_FlowPath = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.flow.flow.FlowPath", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4flow_4flow_FlowPath, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "FlowPath(key1='', key2='', MdotFcn=None, MdotFcn_kwargs={}, Nflows=1)\n\n        \n    Parameters\n    ----------\n    key1 : string\n        The key for the first flow node connected to this path\n    key2 : string\n        The key for the second flow node connected to this path\n    MdotFcn : function\n        Two options, either an instance of :class:`FlowFunction <PDSim.flow.FlowFunction>`, or a \n        function with a prototype like ``f(double A,FlowPath FP, **kwargs)``.  \n        See also :class:`FlowFunction <PDSim.flow.FlowFunction>`.  \n        \n        Any function\n        passed in for ``MdotFcn`` will be wrapped into an instance of \n        :class:`FlowFunction <PDSim.flow.FlowFunction>`.  Using an instance of\n        :class:`FlowFunction <PDSim.flow.FlowFunction>` is more computationally \n        efficient because the Cython code doesn't need to pass back through \n        the python level and can all stay at the C/C++ level.\n    MdotFcn_kwargs : dictionary\n        A dictionary of terms that will be passed along to the call to \n        ``MdotFcn`` when it is called\n    Nflows : int\n        The number of flows that are to be calculated for the flow path (by default 1)\n    \n    ", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4flow_4flow_FlowPath, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4flow_4flow_FlowPath, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4flow_4flow_FlowPath, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5PDSim_4flow_4flow_FlowPath, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5PDSim_4flow_4flow_8FlowPath_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4flow_4flow_FlowPath, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"sumterms_given_CV", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5PDSim_4flow_4flow_1sumterms_given_CV, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4flow_4flow_sumterms_given_CV},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_flow(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_flow},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "flow",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AddStates, __pyx_k_AddStates, sizeof(__pyx_k_AddStates), 0, 0, 1, 1},
  {&__pyx_n_s_CVs, __pyx_k_CVs, sizeof(__pyx_k_CVs), 0, 0, 1, 1},
  {&__pyx_kp_s_Cannot_apply_unary_operator_to_a, __pyx_k_Cannot_apply_unary_operator_to_a, sizeof(__pyx_k_Cannot_apply_unary_operator_to_a), 0, 0, 1, 0},
  {&__pyx_n_s_CoolProp_State, __pyx_k_CoolProp_State, sizeof(__pyx_k_CoolProp_State), 0, 0, 1, 1},
  {&__pyx_n_s_FP, __pyx_k_FP, sizeof(__pyx_k_FP), 0, 0, 1, 1},
  {&__pyx_n_s_FlowPath, __pyx_k_FlowPath, sizeof(__pyx_k_FlowPath), 0, 0, 1, 1},
  {&__pyx_n_s_FlowPathCollection, __pyx_k_FlowPathCollection, sizeof(__pyx_k_FlowPathCollection), 0, 0, 1, 1},
  {&__pyx_n_s_Flows, __pyx_k_Flows, sizeof(__pyx_k_Flows), 0, 0, 1, 1},
  {&__pyx_n_s_Gas, __pyx_k_Gas, sizeof(__pyx_k_Gas), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x4c, __pyx_k_Incompatible_checksums_s_vs_0x4c, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x4c), 0, 0, 1, 0},
  {&__pyx_n_s_MdotFcn, __pyx_k_MdotFcn, sizeof(__pyx_k_MdotFcn), 0, 0, 1, 1},
  {&__pyx_n_s_MdotFcn_kwargs, __pyx_k_MdotFcn_kwargs, sizeof(__pyx_k_MdotFcn_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_Nflows, __pyx_k_Nflows, sizeof(__pyx_k_Nflows), 0, 0, 1, 1},
  {&__pyx_n_s_PDSim_flow_flow, __pyx_k_PDSim_flow_flow, sizeof(__pyx_k_PDSim_flow_flow), 0, 0, 1, 1},
  {&__pyx_kp_s_PDSim_flow_flow_pyx, __pyx_k_PDSim_flow_flow_pyx, sizeof(__pyx_k_PDSim_flow_flow_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_PyFlowFunctionWrapper, __pyx_k_PyFlowFunctionWrapper, sizeof(__pyx_k_PyFlowFunctionWrapper), 0, 0, 1, 1},
  {&__pyx_n_s_State, __pyx_k_State, sizeof(__pyx_k_State), 0, 0, 1, 1},
  {&__pyx_n_s_State1, __pyx_k_State1, sizeof(__pyx_k_State1), 0, 0, 1, 1},
  {&__pyx_n_s_State2, __pyx_k_State2, sizeof(__pyx_k_State2), 0, 0, 1, 1},
  {&__pyx_n_s_StateClass, __pyx_k_StateClass, sizeof(__pyx_k_StateClass), 0, 0, 1, 1},
  {&__pyx_n_s_State_down, __pyx_k_State_down, sizeof(__pyx_k_State_down), 0, 0, 1, 1},
  {&__pyx_n_s_State_up, __pyx_k_State_up, sizeof(__pyx_k_State_up), 0, 0, 1, 1},
  {&__pyx_n_s_T_up, __pyx_k_T_up, sizeof(__pyx_k_T_up), 0, 0, 1, 1},
  {&__pyx_n_s_Tubes, __pyx_k_Tubes, sizeof(__pyx_k_Tubes), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_b__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 0, 0},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_kp_s_and, __pyx_k_and, sizeof(__pyx_k_and), 0, 0, 1, 0},
  {&__pyx_n_s_ascii, __pyx_k_ascii, sizeof(__pyx_k_ascii), 0, 0, 1, 1},
  {&__pyx_n_s_calculate, __pyx_k_calculate, sizeof(__pyx_k_calculate), 0, 0, 1, 1},
  {&__pyx_n_s_cdict, __pyx_k_cdict, sizeof(__pyx_k_cdict), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dumps, __pyx_k_dumps, sizeof(__pyx_k_dumps), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_exists, __pyx_k_exists, sizeof(__pyx_k_exists), 0, 0, 1, 1},
  {&__pyx_n_s_exists_keys, __pyx_k_exists_keys, sizeof(__pyx_k_exists_keys), 0, 0, 1, 1},
  {&__pyx_n_s_flow_models, __pyx_k_flow_models, sizeof(__pyx_k_flow_models), 0, 0, 1, 1},
  {&__pyx_n_s_get_Nodes, __pyx_k_get_Nodes, sizeof(__pyx_k_get_Nodes), 0, 0, 1, 1},
  {&__pyx_n_s_get_deepcopy, __pyx_k_get_deepcopy, sizeof(__pyx_k_get_deepcopy), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_h_down, __pyx_k_h_down, sizeof(__pyx_k_h_down), 0, 0, 1, 1},
  {&__pyx_n_s_h_up, __pyx_k_h_up, sizeof(__pyx_k_h_up), 0, 0, 1, 1},
  {&__pyx_n_s_i1, __pyx_k_i1, sizeof(__pyx_k_i1), 0, 0, 1, 1},
  {&__pyx_n_s_i2, __pyx_k_i2, sizeof(__pyx_k_i2), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_item, __pyx_k_item, sizeof(__pyx_k_item), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_key1, __pyx_k_key1, sizeof(__pyx_k_key1), 0, 0, 1, 1},
  {&__pyx_n_s_key2, __pyx_k_key2, sizeof(__pyx_k_key2), 0, 0, 1, 1},
  {&__pyx_n_s_key_down, __pyx_k_key_down, sizeof(__pyx_k_key_down), 0, 0, 1, 1},
  {&__pyx_n_s_key_up, __pyx_k_key_up, sizeof(__pyx_k_key_up), 0, 0, 1, 1},
  {&__pyx_n_s_loads, __pyx_k_loads, sizeof(__pyx_k_loads), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mdot, __pyx_k_mdot, sizeof(__pyx_k_mdot), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_omega, __pyx_k_omega, sizeof(__pyx_k_omega), 0, 0, 1, 1},
  {&__pyx_n_s_p_down, __pyx_k_p_down, sizeof(__pyx_k_p_down), 0, 0, 1, 1},
  {&__pyx_n_s_p_up, __pyx_k_p_up, sizeof(__pyx_k_p_up), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_FlowPathCollectio, __pyx_k_pyx_unpickle_FlowPathCollectio, sizeof(__pyx_k_pyx_unpickle_FlowPathCollectio), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rebuildFlowPath, __pyx_k_rebuildFlowPath, sizeof(__pyx_k_rebuildFlowPath), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_struct___init, __pyx_k_struct___init, sizeof(__pyx_k_struct___init), 0, 0, 1, 1},
  {&__pyx_n_s_summerdT, __pyx_k_summerdT, sizeof(__pyx_k_summerdT), 0, 0, 1, 1},
  {&__pyx_n_s_summerdm, __pyx_k_summerdm, sizeof(__pyx_k_summerdm), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_utf8, __pyx_k_utf8, sizeof(__pyx_k_utf8), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 52, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 33, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 884, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(4, 43, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(3, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(3, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "PDSim/flow/flow.pyx":52
 *     return summer_mdot, summer_mdoth
 * 
 * class struct(object):             # <<<<<<<<<<<<<<
 *     def __init__(self,d):
 *         self.__dict__.update(d)
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "PDSim/flow/flow.pyx":53
 * 
 * class struct(object):
 *     def __init__(self,d):             # <<<<<<<<<<<<<<
 *         self.__dict__.update(d)
 * 
 */
  __pyx_tuple__9 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_d); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_codeobj_ = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PDSim_flow_flow_pyx, __pyx_n_s_init, 53, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj_)) __PYX_ERR(0, 53, __pyx_L1_error)

  /* "PDSim/flow/flow.pyx":373
 *         return newFM
 * 
 * def rebuildFlowPath(d):             # <<<<<<<<<<<<<<
 *     FP = FlowPath()
 *     FP.MdotFcn = pickle.loads(d.pop('MdotFcn'))
 */
  __pyx_tuple__10 = PyTuple_Pack(3, __pyx_n_s_d, __pyx_n_s_FP, __pyx_n_s_item); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PDSim_flow_flow_pyx, __pyx_n_s_rebuildFlowPath, 373, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 373, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_FlowPathCollection(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__11 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_FlowPathCollectio, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_update.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyList_Type_index.type = (PyObject*)&PyList_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_80539638 = PyInt_FromLong(80539638L); if (unlikely(!__pyx_int_80539638)) __PYX_ERR(0, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_5PDSim_4flow_4flow_FlowPathCollection = &__pyx_vtable_5PDSim_4flow_4flow_FlowPathCollection;
  __pyx_vtable_5PDSim_4flow_4flow_FlowPathCollection.update_existence = (PyObject *(*)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, PyObject *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_update_existence;
  __pyx_vtable_5PDSim_4flow_4flow_FlowPathCollection.calculate = (PyObject *(*)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_calculate;
  __pyx_vtable_5PDSim_4flow_4flow_FlowPathCollection.get_deepcopy = (PyObject *(*)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_get_deepcopy;
  __pyx_vtable_5PDSim_4flow_4flow_FlowPathCollection.sumterms = (PyObject *(*)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4flow_4flow_18FlowPathCollection_sumterms;
  __pyx_type_5PDSim_4flow_4flow_FlowPathCollection.tp_base = (&PyList_Type);
  if (PyType_Ready(&__pyx_type_5PDSim_4flow_4flow_FlowPathCollection) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5PDSim_4flow_4flow_FlowPathCollection.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5PDSim_4flow_4flow_FlowPathCollection.tp_dictoffset && __pyx_type_5PDSim_4flow_4flow_FlowPathCollection.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5PDSim_4flow_4flow_FlowPathCollection.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4flow_4flow_FlowPathCollection.tp_dict, __pyx_vtabptr_5PDSim_4flow_4flow_FlowPathCollection) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FlowPathCollection, (PyObject *)&__pyx_type_5PDSim_4flow_4flow_FlowPathCollection) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5PDSim_4flow_4flow_FlowPathCollection) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __pyx_ptype_5PDSim_4flow_4flow_FlowPathCollection = &__pyx_type_5PDSim_4flow_4flow_FlowPathCollection;
  __pyx_vtabptr_5PDSim_4flow_4flow_FlowPath = &__pyx_vtable_5PDSim_4flow_4flow_FlowPath;
  __pyx_vtable_5PDSim_4flow_4flow_FlowPath.__pyx___cdict__ = (PyObject *(*)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4flow_4flow_8FlowPath___cdict__ *__pyx_optional_args))__pyx_f_5PDSim_4flow_4flow_8FlowPath___cdict__;
  __pyx_vtable_5PDSim_4flow_4flow_FlowPath.get_deepcopy = (struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *(*)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4flow_4flow_8FlowPath_get_deepcopy;
  __pyx_vtable_5PDSim_4flow_4flow_FlowPath.calculate = (PyObject *(*)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4flow_4flow_8FlowPath_calculate;
  if (PyType_Ready(&__pyx_type_5PDSim_4flow_4flow_FlowPath) < 0) __PYX_ERR(0, 194, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5PDSim_4flow_4flow_FlowPath.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5PDSim_4flow_4flow_FlowPath.tp_dictoffset && __pyx_type_5PDSim_4flow_4flow_FlowPath.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5PDSim_4flow_4flow_FlowPath.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4flow_4flow_FlowPath.tp_dict, __pyx_vtabptr_5PDSim_4flow_4flow_FlowPath) < 0) __PYX_ERR(0, 194, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FlowPath, (PyObject *)&__pyx_type_5PDSim_4flow_4flow_FlowPath) < 0) __PYX_ERR(0, 194, __pyx_L1_error)
  __pyx_ptype_5PDSim_4flow_4flow_FlowPath = &__pyx_type_5PDSim_4flow_4flow_FlowPath;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("CoolProp.CoolProp"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_8CoolProp_8CoolProp_PyPhaseEnvelopeData = __Pyx_ImportType(__pyx_t_1, "CoolProp.CoolProp", "PyPhaseEnvelopeData", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_PyPhaseEnvelopeData), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8CoolProp_8CoolProp_PyPhaseEnvelopeData) __PYX_ERR(5, 29, __pyx_L1_error)
  __pyx_ptype_8CoolProp_8CoolProp_PyGuessesStructure = __Pyx_ImportType(__pyx_t_1, "CoolProp.CoolProp", "PyGuessesStructure", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_PyGuessesStructure), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8CoolProp_8CoolProp_PyGuessesStructure) __PYX_ERR(5, 35, __pyx_L1_error)
  __pyx_ptype_8CoolProp_8CoolProp_PyCriticalState = __Pyx_ImportType(__pyx_t_1, "CoolProp.CoolProp", "PyCriticalState", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_PyCriticalState), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8CoolProp_8CoolProp_PyCriticalState) __PYX_ERR(5, 40, __pyx_L1_error)
  __pyx_ptype_8CoolProp_8CoolProp_PySpinodalData = __Pyx_ImportType(__pyx_t_1, "CoolProp.CoolProp", "PySpinodalData", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_PySpinodalData), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8CoolProp_8CoolProp_PySpinodalData) __PYX_ERR(5, 44, __pyx_L1_error)
  __pyx_ptype_8CoolProp_8CoolProp_AbstractState = __Pyx_ImportType(__pyx_t_1, "CoolProp.CoolProp", "AbstractState", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8CoolProp_8CoolProp_AbstractState) __PYX_ERR(5, 47, __pyx_L1_error)
  __pyx_vtabptr_8CoolProp_8CoolProp_AbstractState = (struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState*)__Pyx_GetVtable(__pyx_ptype_8CoolProp_8CoolProp_AbstractState->tp_dict); if (unlikely(!__pyx_vtabptr_8CoolProp_8CoolProp_AbstractState)) __PYX_ERR(5, 47, __pyx_L1_error)
  __pyx_ptype_8CoolProp_8CoolProp_State = __Pyx_ImportType(__pyx_t_1, "CoolProp.CoolProp", "State", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_State), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8CoolProp_8CoolProp_State) __PYX_ERR(6, 11, __pyx_L1_error)
  __pyx_vtabptr_8CoolProp_8CoolProp_State = (struct __pyx_vtabstruct_8CoolProp_8CoolProp_State*)__Pyx_GetVtable(__pyx_ptype_8CoolProp_8CoolProp_State->tp_dict); if (unlikely(!__pyx_vtabptr_8CoolProp_8CoolProp_State)) __PYX_ERR(6, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(7, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(8, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(9, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(3, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(3, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(3, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(3, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(3, 764, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("PDSim.misc.datatypes"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5PDSim_4misc_9datatypes_AnnotatedValue = __Pyx_ImportType(__pyx_t_1, "PDSim.misc.datatypes", "AnnotatedValue", sizeof(struct __pyx_obj_5PDSim_4misc_9datatypes_AnnotatedValue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4misc_9datatypes_AnnotatedValue) __PYX_ERR(4, 6, __pyx_L1_error)
  __pyx_ptype_5PDSim_4misc_9datatypes_Collector = __Pyx_ImportType(__pyx_t_1, "PDSim.misc.datatypes", "Collector", sizeof(struct __pyx_obj_5PDSim_4misc_9datatypes_Collector), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4misc_9datatypes_Collector) __PYX_ERR(4, 11, __pyx_L1_error)
  __pyx_vtabptr_5PDSim_4misc_9datatypes_Collector = (struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_Collector*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4misc_9datatypes_Collector->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4misc_9datatypes_Collector)) __PYX_ERR(4, 11, __pyx_L1_error)
  __pyx_ptype_5PDSim_4misc_9datatypes_listm = __Pyx_ImportType(__pyx_t_1, "PDSim.misc.datatypes", "listm", sizeof(struct __pyx_obj_5PDSim_4misc_9datatypes_listm), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4misc_9datatypes_listm) __PYX_ERR(4, 17, __pyx_L1_error)
  __pyx_ptype_5PDSim_4misc_9datatypes_arraym = __Pyx_ImportType(__pyx_t_1, "PDSim.misc.datatypes", "arraym", sizeof(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4misc_9datatypes_arraym) __PYX_ERR(4, 22, __pyx_L1_error)
  __pyx_vtabptr_5PDSim_4misc_9datatypes_arraym = (struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4misc_9datatypes_arraym->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4misc_9datatypes_arraym)) __PYX_ERR(4, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("PDSim.flow.flow_models"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction = __Pyx_ImportType(__pyx_t_1, "PDSim.flow.flow_models", "FlowFunction", sizeof(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction) __PYX_ERR(10, 21, __pyx_L1_error)
  __pyx_vtabptr_5PDSim_4flow_11flow_models_FlowFunction = (struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4flow_11flow_models_FlowFunction)) __PYX_ERR(10, 21, __pyx_L1_error)
  __pyx_ptype_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper = __Pyx_ImportType(__pyx_t_1, "PDSim.flow.flow_models", "PyFlowFunctionWrapper", sizeof(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper) __PYX_ERR(10, 28, __pyx_L1_error)
  __pyx_vtabptr_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper = (struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper)) __PYX_ERR(10, 28, __pyx_L1_error)
  __pyx_ptype_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper = __Pyx_ImportType(__pyx_t_1, "PDSim.flow.flow_models", "IsentropicNozzleWrapper", sizeof(struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper) __PYX_ERR(10, 34, __pyx_L1_error)
  __pyx_vtabptr_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper = (struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper)) __PYX_ERR(10, 34, __pyx_L1_error)
  __pyx_ptype_5PDSim_4flow_11flow_models_ValveModel = __Pyx_ImportType(__pyx_t_1, "PDSim.flow.flow_models", "ValveModel", sizeof(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4flow_11flow_models_ValveModel) __PYX_ERR(10, 39, __pyx_L1_error)
  __pyx_vtabptr_5PDSim_4flow_11flow_models_ValveModel = (struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4flow_11flow_models_ValveModel->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4flow_11flow_models_ValveModel)) __PYX_ERR(10, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("PDSim.misc.datatypes"); if (!__pyx_t_1) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "empty_arraym", (void (**)(void))&__pyx_f_5PDSim_4misc_9datatypes_empty_arraym, "struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initflow(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initflow(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_flow(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_flow(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_flow(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'flow' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_flow(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 2, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("flow", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_PDSim__flow__flow) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 2, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "PDSim.flow.flow")) {
      if (unlikely(PyDict_SetItemString(modules, "PDSim.flow.flow", __pyx_m) < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_flow(void)", __pyx_f[0], 2, 0, __PYX_ERR(0, 2, __pyx_L1_error));

  /* "PDSim/flow/flow.pyx":2
 * 
 * import copy             # <<<<<<<<<<<<<<
 * import pickle
 * from .flow_models import PyFlowFunctionWrapper
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_copy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copy, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":3
 * 
 * import copy
 * import pickle             # <<<<<<<<<<<<<<
 * from .flow_models import PyFlowFunctionWrapper
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pickle, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pickle, __pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":4
 * import copy
 * import pickle
 * from .flow_models import PyFlowFunctionWrapper             # <<<<<<<<<<<<<<
 * 
 * from CoolProp.State import State as StateClass
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_PyFlowFunctionWrapper);
  __Pyx_GIVEREF(__pyx_n_s_PyFlowFunctionWrapper);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PyFlowFunctionWrapper);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_flow_models, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_PyFlowFunctionWrapper); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyFlowFunctionWrapper, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim/flow/flow.pyx":6
 * from .flow_models import PyFlowFunctionWrapper
 * 
 * from CoolProp.State import State as StateClass             # <<<<<<<<<<<<<<
 * from CoolProp.State cimport State as StateClass
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_State);
  __Pyx_GIVEREF(__pyx_n_s_State);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_State);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_CoolProp_State, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_State); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_StateClass, __pyx_t_2) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":52
 *     return summer_mdot, summer_mdoth
 * 
 * class struct(object):             # <<<<<<<<<<<<<<
 *     def __init__(self,d):
 *         self.__dict__.update(d)
 */
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_tuple__8, __pyx_n_s_struct, __pyx_n_s_struct, (PyObject *) NULL, __pyx_n_s_PDSim_flow_flow, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "PDSim/flow/flow.pyx":53
 * 
 * class struct(object):
 *     def __init__(self,d):             # <<<<<<<<<<<<<<
 *         self.__dict__.update(d)
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5PDSim_4flow_4flow_6struct_1__init__, 0, __pyx_n_s_struct___init, NULL, __pyx_n_s_PDSim_flow_flow, __pyx_d, ((PyObject *)__pyx_codeobj_)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_3) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "PDSim/flow/flow.pyx":52
 *     return summer_mdot, summer_mdoth
 * 
 * class struct(object):             # <<<<<<<<<<<<<<
 *     def __init__(self,d):
 *         self.__dict__.update(d)
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_struct, __pyx_tuple__8, __pyx_t_2, NULL, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_struct, __pyx_t_3) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":222
 *     """
 * 
 *     def __init__(self, key1='', key2='', MdotFcn=None, MdotFcn_kwargs={}, Nflows = 1):             # <<<<<<<<<<<<<<
 * 
 *         self.key1 = key1.encode('ascii')
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__3 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":373
 *         return newFM
 * 
 * def rebuildFlowPath(d):             # <<<<<<<<<<<<<<
 *     FP = FlowPath()
 *     FP.MdotFcn = pickle.loads(d.pop('MdotFcn'))
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5PDSim_4flow_4flow_3rebuildFlowPath, NULL, __pyx_n_s_PDSim_flow_flow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rebuildFlowPath, __pyx_t_1) < 0) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_FlowPathCollection(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5PDSim_4flow_4flow_5__pyx_unpickle_FlowPathCollection, NULL, __pyx_n_s_PDSim_flow_flow); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_FlowPathCollectio, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/flow/flow.pyx":2
 * 
 * import copy             # <<<<<<<<<<<<<<
 * import pickle
 * from .flow_models import PyFlowFunctionWrapper
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/misc/datatypes.pxd":41
 * cpdef arraym empty_arraym(int N)
 * 
 * cdef inline check_dims(arraym x, arraym y):             # <<<<<<<<<<<<<<
 *     if x.N != y.N:
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init PDSim.flow.flow", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init PDSim.flow.flow");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
      __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return tstate->use_tracing && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
