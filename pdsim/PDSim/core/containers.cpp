/* Generated by Cython 0.29.22 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "SWIG",
                null
            ]
        ],
        "depends": [],
        "language": "c++",
        "name": "PDSim.core.containers",
        "sources": [
            "PDSim/core/containers.pyx",
            "PDSim/core/containers.pxd"
        ]
    },
    "module_name": "PDSim.core.containers"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_22"
#define CYTHON_HEX_VERSION 0x001D16F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__PDSim__core__containers
#define __PYX_HAVE_API__PDSim__core__containers
/* Early includes */
#include <string.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string>
#include <vector>
#include "DataStructures.h"
#include "Configuration.h"
#include "PhaseEnvelope.h"
#include "AbstractState.h"
#include <utility>

    #if __cplusplus > 199711L
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include "pythread.h"
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "PDSim/core/containers.pyx",
  "stringsource",
  "PDSim/core/containers.pxd",
  "__init__.pxd",
  "PDSim/misc/datatypes.pxd",
  "AbstractState.pxd",
  "CoolProp.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
  "PDSim/flow/flow_models.pxd",
  "PDSim/flow/flow.pxd",
};

/* "typedefs.pxd":1
 * ctypedef double CoolPropDbl             # <<<<<<<<<<<<<<
 */
typedef double __pyx_t_8CoolProp_8typedefs_CoolPropDbl;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":689
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":690
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":696
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":697
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":703
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":704
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":713
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":714
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":717
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":718
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":719
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":724
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":725
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":726
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_8CoolProp_8CoolProp_PyPhaseEnvelopeData;
struct __pyx_obj_8CoolProp_8CoolProp_PyGuessesStructure;
struct __pyx_obj_8CoolProp_8CoolProp_PyCriticalState;
struct __pyx_obj_8CoolProp_8CoolProp_PySpinodalData;
struct __pyx_obj_8CoolProp_8CoolProp_AbstractState;
struct __pyx_obj_8CoolProp_8CoolProp_State;
struct __pyx_obj_5PDSim_4misc_9datatypes_AnnotatedValue;
struct __pyx_obj_5PDSim_4misc_9datatypes_Collector;
struct __pyx_obj_5PDSim_4misc_9datatypes_listm;
struct __pyx_obj_5PDSim_4misc_9datatypes_arraym;
struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction;
struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper;
struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper;
struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel;
struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection;
struct __pyx_obj_5PDSim_4flow_4flow_FlowPath;
struct __pyx_obj_5PDSim_4core_10containers_TubeCollection;
struct __pyx_obj_5PDSim_4core_10containers_Tube;
struct __pyx_obj_5PDSim_4core_10containers_ControlVolume;
struct __pyx_obj_5PDSim_4core_10containers_CVScore;
struct __pyx_obj_5PDSim_4core_10containers_CVArrays;
struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection;
struct __pyx_opt_args_8CoolProp_8CoolProp_13AbstractState_tangent_plane_distance;
struct __pyx_opt_args_8CoolProp_8CoolProp_5State_get_Tsat;

/* "../../../../usr/local/lib/python3.6/dist-packages/CoolProp-6.4.2.dev0-py3.6-linux-x86_64.egg/CoolProp/AbstractState.pxd":97
 * 
 *     ## Tangent plane distance
 *     cpdef double tangent_plane_distance(self, double T, double p, vector[double] w, double rhomolar_guess=*) except *             # <<<<<<<<<<<<<<
 * 
 *     ## ----------------------------------------
 */
struct __pyx_opt_args_8CoolProp_8CoolProp_13AbstractState_tangent_plane_distance {
  int __pyx_n;
  double rhomolar_guess;
};

/* "CoolProp.pxd":40
 *     cpdef double get_dpdT(self) except *
 *     cpdef double get_speed_sound(self) except *
 *     cpdef get_Tsat(self, double Q = *)             # <<<<<<<<<<<<<<
 *     cpdef get_subcooling(self)
 *     cpdef get_superheat(self)
 */
struct __pyx_opt_args_8CoolProp_8CoolProp_5State_get_Tsat {
  int __pyx_n;
  double Q;
};

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":728
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":729
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":730
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":732
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_5PDSim_4misc_9datatypes_9Collector_v;
struct __pyx_opt_args_5PDSim_4misc_9datatypes_6arraym_slice;

/* "PDSim/misc/datatypes.pxd":15
 *     """ The list that contains the values """
 * 
 *     cpdef v(self, int ndmin = *)             # <<<<<<<<<<<<<<
 * 
 * cdef class listm(list):
 */
struct __pyx_opt_args_5PDSim_4misc_9datatypes_9Collector_v {
  int __pyx_n;
  int ndmin;
};

/* "PDSim/misc/datatypes.pxd":32
 *     cpdef dealloc(self)
 *     cpdef arraym copy(self)
 *     cdef arraym slice(self, int i, int j, int step = *)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, arraym array2)
 *     cpdef double get_index(self, int i) except *
 */
struct __pyx_opt_args_5PDSim_4misc_9datatypes_6arraym_slice {
  int __pyx_n;
  int step;
};
struct __pyx_opt_args_5PDSim_4flow_11flow_models_IsentropicNozzle;
struct __pyx_opt_args_5PDSim_4flow_11flow_models_FrictionCorrectedIsentropicNozzle;

/* "PDSim/flow/flow_models.pxd":19
 * from libc.math cimport exp, log, M_PI as pi, M_E as e, sqrt
 * 
 * cpdef double IsentropicNozzle(double A, State State_up, State State_down, int other_output=*)             # <<<<<<<<<<<<<<
 * 
 * cdef class FlowFunction(object):
 */
struct __pyx_opt_args_5PDSim_4flow_11flow_models_IsentropicNozzle {
  int __pyx_n;
  int other_output;
};

/* "PDSim/flow/flow_models.pxd":37
 *     cpdef double call(self, FlowPath FP) except *
 * 
 * cpdef double FrictionCorrectedIsentropicNozzle(double A, State State_up, State State_down, double delta, int Type, double t = *, double ro = *)             # <<<<<<<<<<<<<<
 * 
 * cdef class ValveModel(object):
 */
struct __pyx_opt_args_5PDSim_4flow_11flow_models_FrictionCorrectedIsentropicNozzle {
  int __pyx_n;
  double t;
  double ro;
};
struct __pyx_opt_args_5PDSim_4flow_4flow_8FlowPath___cdict__;

/* "PDSim/flow/flow.pxd":84
 *     """ The downstream state """
 * 
 *     cpdef dict __cdict__(self, AddStates = *)             # <<<<<<<<<<<<<<
 *     cpdef FlowPath get_deepcopy(self)
 *     cpdef calculate(self)
 */
struct __pyx_opt_args_5PDSim_4flow_4flow_8FlowPath___cdict__ {
  int __pyx_n;
  PyObject *AddStates;
};
struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_volumes;
struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_get;

/* "PDSim/core/containers.pxd":77
 *     cpdef rebuild_exists(self)
 *     cpdef updateStates(self, str name1, arraym array1, str name2, arraym array2)
 *     cpdef volumes(self, double theta, bint as_dict = *)             # <<<<<<<<<<<<<<
 *     cpdef at(self, int i)
 *     cpdef get(self, parameters key, double factor=*)
 */
struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_volumes {
  int __pyx_n;
  int as_dict;
};

/* "PDSim/core/containers.pxd":79
 *     cpdef volumes(self, double theta, bint as_dict = *)
 *     cpdef at(self, int i)
 *     cpdef get(self, parameters key, double factor=*)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_get {
  int __pyx_n;
  double factor;
};

/* "PDSim/core/containers.pyx":5
 * cimport cython
 * 
 * cdef public enum STATE_VARS:             # <<<<<<<<<<<<<<
 *     STATE_VARS_TD
 *     STATE_VARS_TM
 */
enum STATE_VARS {
  STATE_VARS_TD,
  STATE_VARS_TM
};

/* "../../../../usr/local/lib/python3.6/dist-packages/CoolProp-6.4.2.dev0-py3.6-linux-x86_64.egg/CoolProp/AbstractState.pxd":29
 *     long
 * 
 * cdef class PyPhaseEnvelopeData:             # <<<<<<<<<<<<<<
 *     cpdef public bool TypeI
 *     cpdef public size_t iTsat_max, ipsat_max, icrit
 */
struct __pyx_obj_8CoolProp_8CoolProp_PyPhaseEnvelopeData {
  PyObject_HEAD
  bool TypeI;
  size_t iTsat_max;
  size_t ipsat_max;
  size_t icrit;
  PyObject *T;
  PyObject *p;
  PyObject *lnT;
  PyObject *lnp;
  PyObject *rhomolar_liq;
  PyObject *rhomolar_vap;
  PyObject *lnrhomolar_liq;
  PyObject *lnrhomolar_vap;
  PyObject *hmolar_liq;
  PyObject *hmolar_vap;
  PyObject *smolar_liq;
  PyObject *smolar_vap;
  PyObject *Q;
  PyObject *x;
  PyObject *y;
  PyObject *K;
};


/* "../../../../usr/local/lib/python3.6/dist-packages/CoolProp-6.4.2.dev0-py3.6-linux-x86_64.egg/CoolProp/AbstractState.pxd":35
 *     cpdef public list x, y, K
 * 
 * cdef class PyGuessesStructure:             # <<<<<<<<<<<<<<
 *     cpdef public double T, p, rhomolar, hmolar, smolar
 *     cpdef public double rhomolar_liq, rhomolar_vap
 */
struct __pyx_obj_8CoolProp_8CoolProp_PyGuessesStructure {
  PyObject_HEAD
  double T;
  double p;
  double rhomolar;
  double hmolar;
  double smolar;
  double rhomolar_liq;
  double rhomolar_vap;
  PyObject *x;
  PyObject *y;
};


/* "../../../../usr/local/lib/python3.6/dist-packages/CoolProp-6.4.2.dev0-py3.6-linux-x86_64.egg/CoolProp/AbstractState.pxd":40
 *     cpdef public list x, y
 * 
 * cdef class PyCriticalState:             # <<<<<<<<<<<<<<
 *     cpdef public double T, p, rhomolar, hmolar, smolar
 *     cpdef public bool stable
 */
struct __pyx_obj_8CoolProp_8CoolProp_PyCriticalState {
  PyObject_HEAD
  double T;
  double p;
  double rhomolar;
  double hmolar;
  double smolar;
  bool stable;
};


/* "../../../../usr/local/lib/python3.6/dist-packages/CoolProp-6.4.2.dev0-py3.6-linux-x86_64.egg/CoolProp/AbstractState.pxd":44
 *     cpdef public bool stable
 * 
 * cdef class PySpinodalData:             # <<<<<<<<<<<<<<
 *     cpdef public vector[double] tau, delta, M1
 * 
 */
struct __pyx_obj_8CoolProp_8CoolProp_PySpinodalData {
  PyObject_HEAD
  std::vector<double>  tau;
  std::vector<double>  delta;
  std::vector<double>  M1;
};


/* "../../../../usr/local/lib/python3.6/dist-packages/CoolProp-6.4.2.dev0-py3.6-linux-x86_64.egg/CoolProp/AbstractState.pxd":47
 *     cpdef public vector[double] tau, delta, M1
 * 
 * cdef class AbstractState:             # <<<<<<<<<<<<<<
 *     cdef cAbstractState.AbstractState *thisptr     # hold a C++ instance which we're wrapping
 *     cpdef update(self, constants_header.input_pairs iInput1, double Value1, double Value2)
 */
struct __pyx_obj_8CoolProp_8CoolProp_AbstractState {
  PyObject_HEAD
  struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *__pyx_vtab;
  CoolProp::AbstractState *thisptr;
};


/* "CoolProp.pxd":11
 * include "AbstractState.pxd"
 * 
 * cdef class State:             # <<<<<<<<<<<<<<
 *     cdef AbstractState pAS
 *     cdef readonly bytes Fluid, phase
 */
struct __pyx_obj_8CoolProp_8CoolProp_State {
  PyObject_HEAD
  struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *__pyx_vtab;
  struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *pAS;
  PyObject *Fluid;
  PyObject *phase;
  int iFluid;
  int iParam1;
  int iParam2;
  int iOutput;
  double T_;
  double rho_;
  double p_;
};


/* "PDSim/misc/datatypes.pxd":6
 * from cpython cimport bool
 * 
 * cdef class AnnotatedValue(object):             # <<<<<<<<<<<<<<
 *     cdef public object value
 *     cdef public str annotation, units, key
 */
struct __pyx_obj_5PDSim_4misc_9datatypes_AnnotatedValue {
  PyObject_HEAD
  PyObject *value;
  PyObject *annotation;
  PyObject *units;
  PyObject *key;
};


/* "PDSim/misc/datatypes.pxd":11
 * 
 * 
 * cdef class Collector(object):             # <<<<<<<<<<<<<<
 *     cdef public list vec
 *     """ The list that contains the values """
 */
struct __pyx_obj_5PDSim_4misc_9datatypes_Collector {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_Collector *__pyx_vtab;
  PyObject *vec;
};


/* "PDSim/misc/datatypes.pxd":17
 *     cpdef v(self, int ndmin = *)
 * 
 * cdef class listm(list):             # <<<<<<<<<<<<<<
 *     """
 *     See http://docs.cython.org/src/userguide/special_methods.html
 */
struct __pyx_obj_5PDSim_4misc_9datatypes_listm {
  PyListObject __pyx_base;
};


/* "PDSim/misc/datatypes.pxd":22
 *     """
 * 
 * cdef class arraym(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef double* data
 */
struct __pyx_obj_5PDSim_4misc_9datatypes_arraym {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *__pyx_vtab;
  double *data;
  int N;
};


/* "PDSim/flow/flow_models.pxd":21
 * cpdef double IsentropicNozzle(double A, State State_up, State State_down, int other_output=*)
 * 
 * cdef class FlowFunction(object):             # <<<<<<<<<<<<<<
 *     cpdef double call(self, FlowPath FP) except *
 *     cpdef resize(self, int Nvalues)
 */
struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction *__pyx_vtab;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *flows;
  int Nflows;
  PyObject *__name__;
  PyObject *__strf__;
};


/* "PDSim/flow/flow_models.pxd":28
 *     cpdef public __name__, __strf__
 * 
 * cdef class PyFlowFunctionWrapper(FlowFunction):             # <<<<<<<<<<<<<<
 *     cdef public dict kwargs
 *     cdef public object Function
 */
struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper {
  struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction __pyx_base;
  PyObject *kwargs;
  PyObject *Function;
};


/* "PDSim/flow/flow_models.pxd":34
 *     cpdef double call(self, FlowPath FP) except *
 * 
 * cdef class IsentropicNozzleWrapper(FlowFunction):             # <<<<<<<<<<<<<<
 *     cpdef double call(self, FlowPath FP) except *
 * 
 */
struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper {
  struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction __pyx_base;
};


/* "PDSim/flow/flow_models.pxd":39
 * cpdef double FrictionCorrectedIsentropicNozzle(double A, State State_up, State State_down, double delta, int Type, double t = *, double ro = *)
 * 
 * cdef class ValveModel(object):             # <<<<<<<<<<<<<<
 *     cdef public double A_port,A_valve,d_valve,rho_valve,d_port,m_eff,C_D,k_valve,x_stopper
 *     cdef public object key_up, key_down
 */
struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel *__pyx_vtab;
  double A_port;
  double A_valve;
  double d_valve;
  double rho_valve;
  double d_port;
  double m_eff;
  double C_D;
  double k_valve;
  double x_stopper;
  PyObject *key_up;
  PyObject *key_down;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State_up;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State_down;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *xv;
  double x_tr;
};


/* "PDSim/flow/flow.pxd":17
 * from PDSim.misc.datatypes cimport arraym
 * 
 * cdef class FlowPathCollection(list):             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection {
  PyListObject __pyx_base;
  struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPathCollection *__pyx_vtab;
  int N;
  int Nexists;
  double omega;
  PyObject *flow_paths;
};


/* "PDSim/flow/flow.pxd":34
 * 
 * #Make a stripped down class with the necessary terms included
 * cdef class FlowPath(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef bytes m_key_up,m_key_down,m_key1,m_key2
 */
struct __pyx_obj_5PDSim_4flow_4flow_FlowPath {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPath *__pyx_vtab;
  PyObject *m_key_up;
  PyObject *m_key_down;
  PyObject *m_key1;
  PyObject *m_key2;
  int exists;
  int key1_exists;
  int key2_exists;
  int key_up_exists;
  int key_down_exists;
  long key1Index;
  long key2Index;
  long key_up_Index;
  long key_down_Index;
  int ikey1;
  int ikey2;
  int ikey_up;
  int ikey_down;
  double mdot;
  double h_up;
  double h_down;
  double T_up;
  double p_up;
  double p_down;
  double A;
  double edot;
  struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *MdotFcn;
  PyObject *MdotFcn_str;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State1;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State2;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State_up;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State_down;
};


/* "PDSim/core/containers.pxd":14
 * from PDSim.misc.datatypes import arraym
 * 
 * cdef class TubeCollection(list):             # <<<<<<<<<<<<<<
 *     cdef dict _Nodes
 *     cdef arraym harray, parray, Tarray
 */
struct __pyx_obj_5PDSim_4core_10containers_TubeCollection {
  PyListObject __pyx_base;
  struct __pyx_vtabstruct_5PDSim_4core_10containers_TubeCollection *__pyx_vtab;
  PyObject *_Nodes;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *harray;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *parray;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *Tarray;
};


/* "PDSim/core/containers.pxd":25
 *     cpdef update(self)
 * 
 * cdef class Tube(object):             # <<<<<<<<<<<<<<
 *     cdef bytes m_key1,m_key2
 *     cdef public int fixed
 */
struct __pyx_obj_5PDSim_4core_10containers_Tube {
  PyObject_HEAD
  PyObject *m_key1;
  PyObject *m_key2;
  int fixed;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State1;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State2;
  PyObject *TubeFcn;
  double Q_add;
  double alpha;
  double L;
  double ID;
  double OD;
  double mdot;
  double Q;
  bool exists;
  int i1;
  int i2;
};


/* "PDSim/core/containers.pxd":34
 *     cdef public int i1,i2
 * 
 * cdef class ControlVolume(object):             # <<<<<<<<<<<<<<
 *     cdef public long keyIndex
 *     cdef bytes m_key, m_discharge_becomes
 */
struct __pyx_obj_5PDSim_4core_10containers_ControlVolume {
  PyObject_HEAD
  long keyIndex;
  PyObject *m_key;
  PyObject *m_discharge_becomes;
  PyObject *becomes;
  PyObject *V_dV;
  PyObject *V_dV_kwargs;
  PyObject *ForceFcn;
  int exists;
  struct __pyx_obj_8CoolProp_8CoolProp_State *State;
};


/* "PDSim/core/containers.pxd":44
 *     cdef public StateClass State
 * 
 * cdef class CVScore(object):             # <<<<<<<<<<<<<<
 *     cdef list array_list
 * 
 */
struct __pyx_obj_5PDSim_4core_10containers_CVScore {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4core_10containers_CVScore *__pyx_vtab;
  PyObject *array_list;
  int state_vars;
  int N;
  double omega;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *T;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *p;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *h;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *rho;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *V;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *dV;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *cp;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *cv;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *m;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *v;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *dpdT_constV;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *Q;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *summerdm;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *summerdT;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *drhodtheta;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *dTdtheta;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *dmdtheta;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *property_derivs;
};


/* "PDSim/core/containers.pxd":64
 *     cpdef just_volumes(self, list CVs, double theta)
 * 
 * cdef class CVArrays(CVScore):             # <<<<<<<<<<<<<<
 *     cpdef properties_and_volumes(self, list CVs, double theta, int state_vars, arraym x)
 *     cpdef calculate_derivs(self, double omega, bint has_liquid)
 */
struct __pyx_obj_5PDSim_4core_10containers_CVArrays {
  struct __pyx_obj_5PDSim_4core_10containers_CVScore __pyx_base;
};


/* "PDSim/core/containers.pxd":68
 *     cpdef calculate_derivs(self, double omega, bint has_liquid)
 * 
 * cdef class ControlVolumeCollection(object):             # <<<<<<<<<<<<<<
 *     cdef readonly list keys, CVs, indices, exists_keys, exists_indices, exists_CV
 *     cdef readonly dict Nodes
 */
struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_vtab;
  PyObject *keys;
  PyObject *CVs;
  PyObject *indices;
  PyObject *exists_keys;
  PyObject *exists_indices;
  PyObject *exists_CV;
  PyObject *Nodes;
  int N;
  int Nexist;
  struct __pyx_obj_5PDSim_4core_10containers_CVArrays *arrays;
};



/* "../../../../usr/local/lib/python3.6/dist-packages/CoolProp-6.4.2.dev0-py3.6-linux-x86_64.egg/CoolProp/AbstractState.pxd":47
 *     cpdef public vector[double] tau, delta, M1
 * 
 * cdef class AbstractState:             # <<<<<<<<<<<<<<
 *     cdef cAbstractState.AbstractState *thisptr     # hold a C++ instance which we're wrapping
 *     cpdef update(self, constants_header.input_pairs iInput1, double Value1, double Value2)
 */

struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState {
  PyObject *(*update)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::input_pairs, double, double, int __pyx_skip_dispatch);
  PyObject *(*update_with_guesses)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::input_pairs, double, double, struct __pyx_obj_8CoolProp_8CoolProp_PyGuessesStructure *, int __pyx_skip_dispatch);
  PyObject *(*set_mole_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::vector<double> , int __pyx_skip_dispatch);
  PyObject *(*set_mass_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::vector<double> , int __pyx_skip_dispatch);
  PyObject *(*set_volu_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::vector<double> , int __pyx_skip_dispatch);
  std::string (*get_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*apply_simple_mixing_rule)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, size_t, std::string, int __pyx_skip_dispatch);
  PyObject *(*name)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*backend_name)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*fluid_names)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*fluid_param_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, int __pyx_skip_dispatch);
  PyObject *(*set_fluid_parameter_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, std::string, double, int __pyx_skip_dispatch);
  double (*get_fluid_parameter_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, std::string, int __pyx_skip_dispatch);
  PyObject *(*change_EOS)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, std::string, int __pyx_skip_dispatch);
  CoolProp::phases (*phase)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*specify_phase)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::phases, int __pyx_skip_dispatch);
  PyObject *(*unspecify_phase)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Tmin)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Tmax)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*pmax)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Ttriple)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*T_critical)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomass_critical)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomolar_critical)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*p_critical)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*all_critical_points)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*criticality_contour_values)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*build_spinodal)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  struct __pyx_obj_8CoolProp_8CoolProp_PySpinodalData *(*get_spinodal_data)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*T_reducing)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomolar_reducing)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomass_reducing)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*tangent_plane_distance)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, double, double, std::vector<double> , int __pyx_skip_dispatch, struct __pyx_opt_args_8CoolProp_8CoolProp_13AbstractState_tangent_plane_distance *__pyx_optional_args);
  double (*T)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*p)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Q)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*compressibility_factor)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*hmolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*smolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*umolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cpmolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cp0molar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cvmolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*rhomass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*hmass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*smass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*umass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cpmass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cp0mass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*cvmass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*gibbsmass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*gibbsmolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*helmholtzmass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*helmholtzmolar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*speed_sound)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*gas_constant)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*tau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*delta)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*viscosity)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*conductivity)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*conformal_state)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, __pyx_t_8CoolProp_8typedefs_CoolPropDbl, __pyx_t_8CoolProp_8typedefs_CoolPropDbl, int __pyx_skip_dispatch);
  PyObject *(*conductivity_contributions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*viscosity_contributions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*surface_tension)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Prandtl)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Bvirial)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*Cvirial)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*PIP)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*fundamental_derivative_of_gas_dynamics)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*isothermal_compressibility)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*isobaric_expansion_coefficient)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*fugacity)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, int __pyx_skip_dispatch);
  double (*fugacity_coefficient)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, int __pyx_skip_dispatch);
  double (*chemical_potential)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, int __pyx_skip_dispatch);
  double (*gibbsmolar_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*gibbsmass_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*hmolar_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*hmass_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*smolar_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*smass_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*umolar_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*umass_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*volumemolar_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*volumemass_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*helmholtzmolar_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*helmholtzmass_excess)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*gibbsmolar_residual)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*hmolar_residual)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*smolar_residual)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*molar_mass)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*acentric_factor)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*true_critical_point)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*get_fluid_constant)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, size_t, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*keyed_output)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*trivial_keyed_output)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*saturated_liquid_keyed_output)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*saturated_vapor_keyed_output)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int __pyx_skip_dispatch);
  PyObject *(*ideal_curve)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*first_partial_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*second_partial_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*first_saturation_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*second_saturation_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*first_two_phase_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*second_two_phase_deriv)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, int __pyx_skip_dispatch);
  double (*first_two_phase_deriv_splined)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, CoolProp::parameters, CoolProp::parameters, double, int __pyx_skip_dispatch);
  double (*melting_line)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int, int, double, int __pyx_skip_dispatch);
  bool (*has_melting_line)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  double (*saturation_ancillary)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, CoolProp::parameters, int, CoolProp::parameters, double, int __pyx_skip_dispatch);
  PyObject *(*build_phase_envelope)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, int __pyx_skip_dispatch);
  struct __pyx_obj_8CoolProp_8CoolProp_PyPhaseEnvelopeData *(*get_phase_envelope_data)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*mole_fractions_liquid)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*mole_fractions_vapor)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*get_mass_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*get_mole_fractions)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*alpha0)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*dalpha0_dDelta)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*dalpha0_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alpha0_dDelta2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alpha0_dDelta_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alpha0_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alpha0_dTau3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alpha0_dDelta_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alpha0_dDelta2_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alpha0_dDelta3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*alphar)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*dalphar_dDelta)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*dalphar_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alphar_dDelta2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alphar_dDelta_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d2alphar_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alphar_dDelta3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alphar_dDelta2_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alphar_dDelta_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d3alphar_dTau3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d4alphar_dDelta4)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d4alphar_dDelta3_dTau)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d4alphar_dDelta2_dTau2)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d4alphar_dDelta_dTau3)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  __pyx_t_8CoolProp_8typedefs_CoolPropDbl (*d4alphar_dTau4)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_0set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, char *, char *, std::string, double, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_1set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, PyObject *, PyObject *, std::string, double, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_2set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, PyObject *, PyObject *, std::string, double, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_3set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, std::string, std::string, double, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_4set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, short, short, std::string, double, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_5set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int, int, std::string, double, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_6set_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, long, long, std::string, double, int __pyx_skip_dispatch);
  double (*__pyx_fuse_0get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, char *, char *, std::string, int __pyx_skip_dispatch);
  double (*__pyx_fuse_1get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, PyObject *, PyObject *, std::string, int __pyx_skip_dispatch);
  double (*__pyx_fuse_2get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, PyObject *, PyObject *, std::string, int __pyx_skip_dispatch);
  double (*__pyx_fuse_3get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, std::string, std::string, int __pyx_skip_dispatch);
  double (*__pyx_fuse_4get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, short, short, std::string, int __pyx_skip_dispatch);
  double (*__pyx_fuse_5get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int, int, std::string, int __pyx_skip_dispatch);
  double (*__pyx_fuse_6get_binary_interaction_double)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, long, long, std::string, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_0set_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, char *, char *, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_1set_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, PyObject *, PyObject *, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_2set_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, PyObject *, PyObject *, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_3set_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, std::string, std::string, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_4set_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, short, short, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_5set_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, int, int, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*__pyx_fuse_6set_binary_interaction_string)(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState *, long, long, std::string, std::string, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState *__pyx_vtabptr_8CoolProp_8CoolProp_AbstractState;


/* "CoolProp.pxd":11
 * include "AbstractState.pxd"
 * 
 * cdef class State:             # <<<<<<<<<<<<<<
 *     cdef AbstractState pAS
 *     cdef readonly bytes Fluid, phase
 */

struct __pyx_vtabstruct_8CoolProp_8CoolProp_State {
  PyObject *(*set_Fluid)(struct __pyx_obj_8CoolProp_8CoolProp_State *, std::string, std::string, int __pyx_skip_dispatch);
  PyObject *(*speed_test)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int, int __pyx_skip_dispatch);
  PyObject *(*update)(struct __pyx_obj_8CoolProp_8CoolProp_State *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*update_ph)(struct __pyx_obj_8CoolProp_8CoolProp_State *, double, double, int __pyx_skip_dispatch);
  PyObject *(*update_Trho)(struct __pyx_obj_8CoolProp_8CoolProp_State *, double, double, int __pyx_skip_dispatch);
  struct __pyx_obj_8CoolProp_8CoolProp_State *(*copy)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*Props)(struct __pyx_obj_8CoolProp_8CoolProp_State *, CoolProp::parameters, int __pyx_skip_dispatch);
  long (*Phase)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_Q)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_T)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_p)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_h)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_rho)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_s)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_u)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_visc)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_cond)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_cp)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_cp0)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_cv)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_MM)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_dpdT)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  double (*get_speed_sound)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  PyObject *(*get_Tsat)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch, struct __pyx_opt_args_8CoolProp_8CoolProp_5State_get_Tsat *__pyx_optional_args);
  PyObject *(*get_subcooling)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  PyObject *(*get_superheat)(struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *__pyx_vtabptr_8CoolProp_8CoolProp_State;


/* "PDSim/misc/datatypes.pxd":11
 * 
 * 
 * cdef class Collector(object):             # <<<<<<<<<<<<<<
 *     cdef public list vec
 *     """ The list that contains the values """
 */

struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_Collector {
  PyObject *(*v)(struct __pyx_obj_5PDSim_4misc_9datatypes_Collector *, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4misc_9datatypes_9Collector_v *__pyx_optional_args);
};
static struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_Collector *__pyx_vtabptr_5PDSim_4misc_9datatypes_Collector;


/* "PDSim/misc/datatypes.pxd":22
 *     """
 * 
 * cdef class arraym(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef double* data
 */

struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym {
  void (*set_data)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, double *, int);
  PyObject *(*set_size)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int, int __pyx_skip_dispatch);
  PyObject *(*dealloc)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*copy)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*slice)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int, int, struct __pyx_opt_args_5PDSim_4misc_9datatypes_6arraym_slice *__pyx_optional_args);
  PyObject *(*extend)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  double (*get_index)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int, int __pyx_skip_dispatch);
  PyObject *(*set_index)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int, double, int __pyx_skip_dispatch);
  PyObject *(*fill)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, double, int __pyx_skip_dispatch);
  PyBoolObject *(*all_finite)(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *__pyx_vtabptr_5PDSim_4misc_9datatypes_arraym;


/* "PDSim/flow/flow_models.pxd":21
 * cpdef double IsentropicNozzle(double A, State State_up, State State_down, int other_output=*)
 * 
 * cdef class FlowFunction(object):             # <<<<<<<<<<<<<<
 *     cpdef double call(self, FlowPath FP) except *
 *     cpdef resize(self, int Nvalues)
 */

struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction {
  double (*call)(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *, struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch);
  PyObject *(*resize)(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction *, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction *__pyx_vtabptr_5PDSim_4flow_11flow_models_FlowFunction;


/* "PDSim/flow/flow_models.pxd":28
 *     cpdef public __name__, __strf__
 * 
 * cdef class PyFlowFunctionWrapper(FlowFunction):             # <<<<<<<<<<<<<<
 *     cdef public dict kwargs
 *     cdef public object Function
 */

struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper {
  struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction __pyx_base;
};
static struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper *__pyx_vtabptr_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper;


/* "PDSim/flow/flow_models.pxd":34
 *     cpdef double call(self, FlowPath FP) except *
 * 
 * cdef class IsentropicNozzleWrapper(FlowFunction):             # <<<<<<<<<<<<<<
 *     cpdef double call(self, FlowPath FP) except *
 * 
 */

struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper {
  struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction __pyx_base;
};
static struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper *__pyx_vtabptr_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper;


/* "PDSim/flow/flow_models.pxd":39
 * cpdef double FrictionCorrectedIsentropicNozzle(double A, State State_up, State State_down, double delta, int Type, double t = *, double ro = *)
 * 
 * cdef class ValveModel(object):             # <<<<<<<<<<<<<<
 *     cdef public double A_port,A_valve,d_valve,rho_valve,d_port,m_eff,C_D,k_valve,x_stopper
 *     cdef public object key_up, key_down
 */

struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel {
  PyObject *(*set_xv)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*get_xv)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, int __pyx_skip_dispatch);
  double (*A)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, int __pyx_skip_dispatch);
  PyObject *(*get_States)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_pressure_dominant)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, double, double, double, double, double);
  PyObject *(*_flux_dominant)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, double, double, double, double);
  double (*flow_velocity)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, struct __pyx_obj_8CoolProp_8CoolProp_State *, struct __pyx_obj_8CoolProp_8CoolProp_State *, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*derivs)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*__pyx___cdict__)(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel *__pyx_vtabptr_5PDSim_4flow_11flow_models_ValveModel;


/* "PDSim/flow/flow.pxd":17
 * from PDSim.misc.datatypes cimport arraym
 * 
 * cdef class FlowPathCollection(list):             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPathCollection {
  PyObject *(*update_existence)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*calculate)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, int __pyx_skip_dispatch);
  PyObject *(*get_deepcopy)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, int __pyx_skip_dispatch);
  PyObject *(*sumterms)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPathCollection *__pyx_vtabptr_5PDSim_4flow_4flow_FlowPathCollection;


/* "PDSim/flow/flow.pxd":34
 * 
 * #Make a stripped down class with the necessary terms included
 * cdef class FlowPath(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef bytes m_key_up,m_key_down,m_key1,m_key2
 */

struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPath {
  PyObject *(*__pyx___cdict__)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4flow_4flow_8FlowPath___cdict__ *__pyx_optional_args);
  struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *(*get_deepcopy)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch);
  PyObject *(*calculate)(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPath *__pyx_vtabptr_5PDSim_4flow_4flow_FlowPath;


/* "PDSim/core/containers.pyx":111
 *             return self.m_key2.decode('utf8')
 * 
 * cdef class TubeCollection(list):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

struct __pyx_vtabstruct_5PDSim_4core_10containers_TubeCollection {
  PyObject *(*update_existence)(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *, int, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*get_h)(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*get_p)(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *, int __pyx_skip_dispatch);
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*get_T)(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *, int __pyx_skip_dispatch);
  PyObject *(*get_Nodes)(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *, int __pyx_skip_dispatch);
  PyObject *(*update)(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4core_10containers_TubeCollection *__pyx_vtabptr_5PDSim_4core_10containers_TubeCollection;


/* "PDSim/core/containers.pyx":185
 *         raise KeyError(key)
 * 
 * cdef class CVScore(object):             # <<<<<<<<<<<<<<
 *     """
 *     The base class for all control volumes
 */

struct __pyx_vtabstruct_5PDSim_4core_10containers_CVScore {
  PyObject *(*update_size)(struct __pyx_obj_5PDSim_4core_10containers_CVScore *, int, int __pyx_skip_dispatch);
  PyObject *(*build_all)(struct __pyx_obj_5PDSim_4core_10containers_CVScore *, int);
  PyObject *(*free_all)(struct __pyx_obj_5PDSim_4core_10containers_CVScore *);
  PyObject *(*copy)(struct __pyx_obj_5PDSim_4core_10containers_CVScore *, int __pyx_skip_dispatch);
  PyObject *(*calculate_flows)(struct __pyx_obj_5PDSim_4core_10containers_CVScore *, struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, int __pyx_skip_dispatch);
  PyObject *(*just_volumes)(struct __pyx_obj_5PDSim_4core_10containers_CVScore *, PyObject *, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4core_10containers_CVScore *__pyx_vtabptr_5PDSim_4core_10containers_CVScore;


/* "PDSim/core/containers.pyx":282
 *             self.V.data[iCV], self.dV.data[iCV] = CV.V_dV(theta, **CV.V_dV_kwargs)
 * 
 * cdef class CVArrays(CVScore):             # <<<<<<<<<<<<<<
 *     """
 *     A stub class that contains the arraym arrays of the state variables for
 */

struct __pyx_vtabstruct_5PDSim_4core_10containers_CVArrays {
  struct __pyx_vtabstruct_5PDSim_4core_10containers_CVScore __pyx_base;
  PyObject *(*properties_and_volumes)(struct __pyx_obj_5PDSim_4core_10containers_CVArrays *, PyObject *, double, int, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  PyObject *(*calculate_derivs)(struct __pyx_obj_5PDSim_4core_10containers_CVArrays *, double, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_4core_10containers_CVArrays *__pyx_vtabptr_5PDSim_4core_10containers_CVArrays;


/* "PDSim/core/containers.pyx":453
 *             return self.m_discharge_becomes.decode('utf8')
 * 
 * cdef class ControlVolumeCollection(object):             # <<<<<<<<<<<<<<
 *     """
 *     ControlVolumeCollection is class to hold all the control volumes
 */

struct __pyx_vtabstruct_5PDSim_4core_10containers_ControlVolumeCollection {
  PyObject *(*add)(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *, struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *, int __pyx_skip_dispatch);
  PyObject *(*rebuild_exists)(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *, int __pyx_skip_dispatch);
  PyObject *(*updateStates)(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *, PyObject *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, PyObject *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch);
  PyObject *(*volumes)(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *, double, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_volumes *__pyx_optional_args);
  PyObject *(*at)(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *, int, int __pyx_skip_dispatch);
  PyObject *(*get)(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *, CoolProp::parameters, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_get *__pyx_optional_args);
};
static struct __pyx_vtabstruct_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_vtabptr_5PDSim_4core_10containers_ControlVolumeCollection;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
  static PyCodeObject *__pyx_frame_code = NULL;\
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
  int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
                  (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          tstate->tracing++;\
          tstate->use_tracing = 0;\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          tstate->use_tracing = 1;\
          tstate->tracing--;\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      tstate->tracing++;
      tstate->use_tracing = 0;
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      tstate->use_tracing = 1;
      tstate->tracing--;
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (tstate->use_tracing) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (tstate->use_tracing) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      tstate->tracing++;
      tstate->use_tracing = 0;
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      tstate->use_tracing = 1;
      tstate->tracing--;
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_bytes(
         PyObject* string, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        PyBytes_AS_STRING(string), PyBytes_GET_SIZE(string),
        start, stop, encoding, errors, decode_func);
}

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* tp_new.proto */
#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* None.proto */
#include <new>

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE CoolProp::parameters __Pyx_PyInt_As_CoolProp_3a__3a_parameters(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::parameters value);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_5PDSim_4core_10containers_14TubeCollection_get_Nodes(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_f_5PDSim_4core_10containers_14TubeCollection_get_h(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_f_5PDSim_4core_10containers_14TubeCollection_get_p(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_f_5PDSim_4core_10containers_14TubeCollection_get_T(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_14TubeCollection_update_existence(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, int __pyx_v_NCV, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_14TubeCollection_update(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_7CVScore_build_all(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, int __pyx_v_N); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_7CVScore_free_all(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_7CVScore_update_size(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, int __pyx_v_N, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_7CVScore_copy(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_7CVScore_calculate_flows(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_Flows, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_7CVScore_just_volumes(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_CVs, double __pyx_v_theta, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_8CVArrays_properties_and_volumes(struct __pyx_obj_5PDSim_4core_10containers_CVArrays *__pyx_v_self, PyObject *__pyx_v_CVs, double __pyx_v_theta, int __pyx_v_state_vars, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_x, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_8CVArrays_calculate_derivs(struct __pyx_obj_5PDSim_4core_10containers_CVArrays *__pyx_v_self, double __pyx_v_omega, CYTHON_UNUSED int __pyx_v_has_liquid, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_at(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, int __pyx_v_i, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_add(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_CV, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_rebuild_exists(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_get(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, CoolProp::parameters __pyx_v_key, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_get *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_updateStates(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, PyObject *__pyx_v_name1, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_array1, PyObject *__pyx_v_name2, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_array2, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_volumes(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, double __pyx_v_theta, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_volumes *__pyx_optional_args); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'cython' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'CoolProp.typedefs' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'CoolProp.constants_header' */

/* Module declarations from 'CoolProp' */

/* Module declarations from 'CoolProp.cAbstractState' */

/* Module declarations from 'CoolProp.CoolProp' */
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_PyPhaseEnvelopeData = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_PyGuessesStructure = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_PyCriticalState = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_PySpinodalData = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_AbstractState = 0;
static PyTypeObject *__pyx_ptype_8CoolProp_8CoolProp_State = 0;

/* Module declarations from 'CoolProp.State' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'PDSim.misc.datatypes' */
static PyTypeObject *__pyx_ptype_5PDSim_4misc_9datatypes_AnnotatedValue = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4misc_9datatypes_Collector = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4misc_9datatypes_listm = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4misc_9datatypes_arraym = 0;
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*__pyx_f_5PDSim_4misc_9datatypes_empty_arraym)(int, int __pyx_skip_dispatch); /*proto*/

/* Module declarations from 'libc.math' */

/* Module declarations from 'PDSim.flow.flow_models' */
static PyTypeObject *__pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4flow_11flow_models_ValveModel = 0;

/* Module declarations from 'PDSim.flow.flow' */
static PyTypeObject *__pyx_ptype_5PDSim_4flow_4flow_FlowPathCollection = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4flow_4flow_FlowPath = 0;

/* Module declarations from 'PDSim.core.containers' */
static PyTypeObject *__pyx_ptype_5PDSim_4core_10containers_TubeCollection = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4core_10containers_Tube = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4core_10containers_ControlVolume = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4core_10containers_CVScore = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4core_10containers_CVArrays = 0;
static PyTypeObject *__pyx_ptype_5PDSim_4core_10containers_ControlVolumeCollection = 0;
static PyObject *__pyx_f_5PDSim_4core_10containers_to_bytes(PyObject *); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_to_pystring(PyObject *); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_collect_State_h(PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers___pyx_unpickle_Tube__set_state(struct __pyx_obj_5PDSim_4core_10containers_Tube *, PyObject *); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers___pyx_unpickle_TubeCollection__set_state(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *, PyObject *); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers___pyx_unpickle_CVScore__set_state(struct __pyx_obj_5PDSim_4core_10containers_CVScore *, PyObject *); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers___pyx_unpickle_ControlVolume__set_state(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "PDSim.core.containers"
extern int __pyx_module_is_main_PDSim__core__containers;
int __pyx_module_is_main_PDSim__core__containers = 0;

/* Implementation of 'PDSim.core.containers' */
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_L[] = "L";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_Q[] = "Q";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_V[] = "V";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_CV[] = "CV";
static const char __pyx_k_ID[] = "ID";
static const char __pyx_k_OD[] = "OD";
static const char __pyx_k_at[] = "at";
static const char __pyx_k_cp[] = "cp";
static const char __pyx_k_cv[] = "cv";
static const char __pyx_k_dV[] = "dV";
static const char __pyx_k_i1[] = "i1";
static const char __pyx_k_i2[] = "i2";
static const char __pyx_k_CVC[] = "CVC";
static const char __pyx_k_CVs[] = "CVs";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_and[] = " and ";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_rho[] = "rho";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_Tube[] = "Tube";
static const char __pyx_k_V_dV[] = "V_dV";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_key1[] = "key1";
static const char __pyx_k_key2[] = "key2";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mdot[] = "mdot";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_type[] = "_type";
static const char __pyx_k_utf8[] = "utf8";
static const char __pyx_k_State[] = "State";
static const char __pyx_k_ascii[] = "ascii";
static const char __pyx_k_fixed[] = "fixed";
static const char __pyx_k_get_T[] = "get_T";
static const char __pyx_k_get_h[] = "get_h";
static const char __pyx_k_get_p[] = "get_p";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_name1[] = "name1";
static const char __pyx_k_name2[] = "name2";
static const char __pyx_k_omega[] = "omega";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_theta[] = "theta";
static const char __pyx_k_State1[] = "State1";
static const char __pyx_k_State2[] = "State2";
static const char __pyx_k_VdVFcn[] = "VdVFcn";
static const char __pyx_k_array1[] = "array1";
static const char __pyx_k_array2[] = "array2";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_exists[] = "exists";
static const char __pyx_k_factor[] = "factor";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_CVScore[] = "CVScore";
static const char __pyx_k_TubeFcn[] = "TubeFcn";
static const char __pyx_k_as_dict[] = "as_dict";
static const char __pyx_k_becomes[] = "becomes";
static const char __pyx_k_volumes[] = "volumes";
static const char __pyx_k_CVArrays[] = "CVArrays";
static const char __pyx_k_CoolProp[] = "CoolProp";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_dTdtheta[] = "dTdtheta";
static const char __pyx_k_dmdtheta[] = "dmdtheta";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_summerdT[] = "summerdT";
static const char __pyx_k_summerdm[] = "summerdm";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_constants[] = "constants";
static const char __pyx_k_get_Nodes[] = "get_Nodes";
static const char __pyx_k_kg_s_used[] = " kg/s used";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_drhodtheta[] = "drhodtheta";
static const char __pyx_k_has_liquid[] = "has_liquid";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_state_vars[] = "state_vars";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_V_dV_kwargs[] = "V_dV_kwargs";
static const char __pyx_k_dpdT_constV[] = "dpdT_constV";
static const char __pyx_k_update_size[] = "update_size";
static const char __pyx_k_initialState[] = "initialState";
static const char __pyx_k_just_volumes[] = "just_volumes";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_updateStates[] = "updateStates";
static const char __pyx_k_ControlVolume[] = "ControlVolume";
static const char __pyx_k_VdVFcn_kwargs[] = "VdVFcn_kwargs";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_AttributeError[] = "AttributeError";
static const char __pyx_k_TubeCollection[] = "TubeCollection";
static const char __pyx_k_rebuild_exists[] = "rebuild_exists";
static const char __pyx_k_calculate_flows[] = "calculate_flows";
static const char __pyx_k_property_derivs[] = "property_derivs";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_calculate_derivs[] = "calculate_derivs";
static const char __pyx_k_update_existence[] = "update_existence";
static const char __pyx_k_discharge_becomes[] = "discharge_becomes";
static const char __pyx_k_pyx_unpickle_Tube[] = "__pyx_unpickle_Tube";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_rebuildCVCollection[] = "rebuildCVCollection";
static const char __pyx_k_pyx_unpickle_CVScore[] = "__pyx_unpickle_CVScore";
static const char __pyx_k_PDSim_core_containers[] = "PDSim.core.containers";
static const char __pyx_k_properties_and_volumes[] = "properties_and_volumes";
static const char __pyx_k_ControlVolumeCollection[] = "ControlVolumeCollection";
static const char __pyx_k_PDSim_core_containers_pyx[] = "PDSim/core/containers.pyx";
static const char __pyx_k_pyx_unpickle_ControlVolume[] = "__pyx_unpickle_ControlVolume";
static const char __pyx_k_pyx_unpickle_TubeCollection[] = "__pyx_unpickle_TubeCollection";
static const char __pyx_k_Your_CV_key_key_s_is_already_in[] = "Your CV key [{key:s}] is already in use";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_Cannot_apply_unary_operator_to_a[] = "Cannot apply unary operator to arraym instances with lengths of ";
static const char __pyx_k_Incompatibility_between_the_valu[] = "Incompatibility between the value for fixed and the states provided";
static const char __pyx_k_Incompatible_checksums_s_vs_0x1e[] = "Incompatible checksums (%s vs 0x1eb2107 = (ID, L, OD, Q, Q_add, State1, State2, TubeFcn, alpha, exists, fixed, i1, i2, m_key1, m_key2, mdot))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x28[] = "Incompatible checksums (%s vs 0x28d24fd = (ForceFcn, State, V_dV, V_dV_kwargs, becomes, exists, keyIndex, m_discharge_becomes, m_key))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x5c[] = "Incompatible checksums (%s vs 0x5c6cba0 = (Tarray, _Nodes, harray, parray))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xc1[] = "Incompatible checksums (%s vs 0xc130e55 = (N, Q, T, V, array_list, cp, cv, dTdtheta, dV, dmdtheta, dpdT_constV, drhodtheta, h, m, omega, p, property_derivs, rho, state_vars, summerdT, summerdm, v))";
static const char __pyx_k_Warning_mdot_not_provided_to_Tub[] = "Warning: mdot not provided to Tube class constructor, guess value of ";
static const char __pyx_k_You_must_provide_an_integer_valu[] = "You must provide an integer value for fixed, either 1 for Node 1 fixed, or 2 for Node 2 fixed.";
static const char __pyx_k_Your_key_key_of_type__type_is_in[] = "Your key [{key}] of type [{_type}] is invalid";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_n_s_CV;
static PyObject *__pyx_n_s_CVArrays;
static PyObject *__pyx_n_s_CVC;
static PyObject *__pyx_n_s_CVScore;
static PyObject *__pyx_n_s_CVs;
static PyObject *__pyx_kp_s_Cannot_apply_unary_operator_to_a;
static PyObject *__pyx_n_s_ControlVolume;
static PyObject *__pyx_n_s_ControlVolumeCollection;
static PyObject *__pyx_n_s_CoolProp;
static PyObject *__pyx_n_s_ID;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatibility_between_the_valu;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x1e;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x28;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x5c;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xc1;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_L;
static PyObject *__pyx_n_s_N;
static PyObject *__pyx_n_s_OD;
static PyObject *__pyx_n_s_PDSim_core_containers;
static PyObject *__pyx_kp_s_PDSim_core_containers_pyx;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_Q;
static PyObject *__pyx_n_s_State;
static PyObject *__pyx_n_s_State1;
static PyObject *__pyx_n_s_State2;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_n_s_Tube;
static PyObject *__pyx_n_s_TubeCollection;
static PyObject *__pyx_n_s_TubeFcn;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_V;
static PyObject *__pyx_n_s_V_dV;
static PyObject *__pyx_n_s_V_dV_kwargs;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_VdVFcn;
static PyObject *__pyx_n_s_VdVFcn_kwargs;
static PyObject *__pyx_kp_s_Warning_mdot_not_provided_to_Tub;
static PyObject *__pyx_kp_s_You_must_provide_an_integer_valu;
static PyObject *__pyx_kp_s_Your_CV_key_key_s_is_already_in;
static PyObject *__pyx_kp_s_Your_key_key_of_type__type_is_in;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_kp_s_and;
static PyObject *__pyx_n_s_array1;
static PyObject *__pyx_n_s_array2;
static PyObject *__pyx_n_s_as_dict;
static PyObject *__pyx_n_s_ascii;
static PyObject *__pyx_n_s_at;
static PyObject *__pyx_n_s_becomes;
static PyObject *__pyx_n_s_calculate_derivs;
static PyObject *__pyx_n_s_calculate_flows;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_constants;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_cp;
static PyObject *__pyx_n_s_cv;
static PyObject *__pyx_n_s_dTdtheta;
static PyObject *__pyx_n_s_dV;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_discharge_becomes;
static PyObject *__pyx_n_s_dmdtheta;
static PyObject *__pyx_n_s_dpdT_constV;
static PyObject *__pyx_n_s_drhodtheta;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_exists;
static PyObject *__pyx_n_s_factor;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_fixed;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_Nodes;
static PyObject *__pyx_n_s_get_T;
static PyObject *__pyx_n_s_get_h;
static PyObject *__pyx_n_s_get_p;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_n_s_has_liquid;
static PyObject *__pyx_n_s_i1;
static PyObject *__pyx_n_s_i2;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_initialState;
static PyObject *__pyx_n_s_just_volumes;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_key1;
static PyObject *__pyx_n_s_key2;
static PyObject *__pyx_kp_s_kg_s_used;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mdot;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name1;
static PyObject *__pyx_n_s_name2;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_omega;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_properties_and_volumes;
static PyObject *__pyx_n_s_property_derivs;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_CVScore;
static PyObject *__pyx_n_s_pyx_unpickle_ControlVolume;
static PyObject *__pyx_n_s_pyx_unpickle_Tube;
static PyObject *__pyx_n_s_pyx_unpickle_TubeCollection;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rebuildCVCollection;
static PyObject *__pyx_n_s_rebuild_exists;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_rho;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_state_vars;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_summerdT;
static PyObject *__pyx_n_s_summerdm;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_theta;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_updateStates;
static PyObject *__pyx_n_s_update_existence;
static PyObject *__pyx_n_s_update_size;
static PyObject *__pyx_n_s_utf8;
static PyObject *__pyx_n_s_volumes;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_zip;
static int __pyx_pf_5PDSim_4core_10containers_4Tube___init__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_key1, PyObject *__pyx_v_key2, PyObject *__pyx_v_L, PyObject *__pyx_v_ID, PyObject *__pyx_v_State1, PyObject *__pyx_v_State2, PyObject *__pyx_v_OD, PyObject *__pyx_v_fixed, PyObject *__pyx_v_TubeFcn, PyObject *__pyx_v_mdot, PyObject *__pyx_v_exists); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_4key1___set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_4key1_2__get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_4key2___set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_4key2_2__get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_5fixed___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_5fixed_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_6State1___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_6State1_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_6State1_4__del__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_6State2___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_6State2_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_6State2_4__del__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_7TubeFcn___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_7TubeFcn_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_7TubeFcn_4__del__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_5Q_add___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_5Q_add_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_5alpha___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_5alpha_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_1L___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_1L_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_2ID___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_2ID_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_2OD___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_2OD_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_4mdot___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_4mdot_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_1Q___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_1Q_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_6exists___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_6exists_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_2i1___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_2i1_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_2i2___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_4Tube_2i2_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_2__reduce_cython__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_4__setstate_cython__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_14TubeCollection___init__(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_2get_Nodes(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_4get_h(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_6get_p(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_8get_T(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_10update_existence(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, int __pyx_v_NCV); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_5Nodes___get__(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_12update(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_14__getitem__(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_16__reduce_cython__(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_18__setstate_cython__(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_update_size(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, int __pyx_v_N); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_2copy(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_4calculate_flows(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_Flows); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_6just_volumes(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_CVs, double __pyx_v_theta); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_1T___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1T_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1T_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_1p___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1p_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1p_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_1h___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1h_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1h_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_3rho___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_3rho_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_3rho_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_1V___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1V_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1V_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_2dV___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_2dV_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_2dV_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_2cp___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_2cp_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_2cp_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_2cv___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_2cv_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_2cv_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_1m___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1m_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1m_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_1v___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1v_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1v_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_11dpdT_constV___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_11dpdT_constV_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_11dpdT_constV_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_1Q___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1Q_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1Q_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdm___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdm_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdm_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdT___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdT_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdT_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_10drhodtheta___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_10drhodtheta_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_10drhodtheta_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_8dTdtheta___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_8dTdtheta_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_8dTdtheta_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_8dmdtheta___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_8dmdtheta_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_8dmdtheta_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_15property_derivs___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_15property_derivs_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_7CVScore_15property_derivs_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_8__reduce_cython__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_10__setstate_cython__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_8CVArrays___cinit__(struct __pyx_obj_5PDSim_4core_10containers_CVArrays *__pyx_v_self, CYTHON_UNUSED int __pyx_v_N); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_8CVArrays_2properties_and_volumes(struct __pyx_obj_5PDSim_4core_10containers_CVArrays *__pyx_v_self, PyObject *__pyx_v_CVs, double __pyx_v_theta, int __pyx_v_state_vars, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_8CVArrays_4calculate_derivs(struct __pyx_obj_5PDSim_4core_10containers_CVArrays *__pyx_v_self, double __pyx_v_omega, int __pyx_v_has_liquid); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_8CVArrays_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5PDSim_4core_10containers_CVArrays *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_8CVArrays_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5PDSim_4core_10containers_CVArrays *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume___init__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_VdVFcn, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_initialState, int __pyx_v_exists, PyObject *__pyx_v_VdVFcn_kwargs, PyObject *__pyx_v_discharge_becomes, PyObject *__pyx_v_becomes); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_3key___set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_3key_2__get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_17discharge_becomes___set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_17discharge_becomes_2__get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_8keyIndex___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_8keyIndex_2__set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_7becomes___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_7becomes_2__set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_7becomes_4__del__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_4V_dV___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_4V_dV_2__set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_4V_dV_4__del__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs_2__set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs_4__del__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_8ForceFcn___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_8ForceFcn_2__set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_8ForceFcn_4__del__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_6exists___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_6exists_2__set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_5State___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_5State_2__set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_5State_4__del__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_2__reduce_cython__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_4__setstate_cython__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection___cinit__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_2__reduce__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_4__getstate__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_6__setstate__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, PyObject *__pyx_v_CVs); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_8at(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_10__getitem__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static Py_ssize_t __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_12__len__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_14add(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_CV); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_16rebuild_exists(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_18index(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_20get(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, CoolProp::parameters __pyx_v_key, double __pyx_v_factor); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_1T___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_1p___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_3rho___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_1h___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_2cp___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_2cv___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_4dpdT___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_22updateStates(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, PyObject *__pyx_v_name1, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_array1, PyObject *__pyx_v_name2, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_array2); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_24volumes(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, double __pyx_v_theta, int __pyx_v_as_dict); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_4keys___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_3CVs___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_7indices___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_11exists_keys___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_14exists_indices___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_9exists_CV___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_5Nodes___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_1N___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_6Nexist___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays_2__set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays_4__del__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_rebuildCVCollection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_CVs); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_2collect_State_h(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_CVList); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_4__pyx_unpickle_Tube(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_6__pyx_unpickle_TubeCollection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_8__pyx_unpickle_CVScore(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5PDSim_4core_10containers_10__pyx_unpickle_ControlVolume(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_5PDSim_4core_10containers_TubeCollection(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5PDSim_4core_10containers_Tube(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5PDSim_4core_10containers_ControlVolume(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5PDSim_4core_10containers_CVScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5PDSim_4core_10containers_CVArrays(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5PDSim_4core_10containers_ControlVolumeCollection(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyString_Type_encode = {0, &__pyx_n_s_encode, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_32186631;
static PyObject *__pyx_int_42804477;
static PyObject *__pyx_int_96914336;
static PyObject *__pyx_int_202575445;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k__5;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__10;
/* Late includes */

/* "PDSim/core/containers.pyx":12
 * from CoolProp import constants
 * 
 * cdef bytes to_bytes(object val):             # <<<<<<<<<<<<<<
 *     if isinstance(val, bytes):
 *         return <bytes>val
 */

static PyObject *__pyx_f_5PDSim_4core_10containers_to_bytes(PyObject *__pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_bytes", 0);
  __Pyx_TraceCall("to_bytes", __pyx_f[0], 12, 0, __PYX_ERR(0, 12, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":13
 * 
 * cdef bytes to_bytes(object val):
 *     if isinstance(val, bytes):             # <<<<<<<<<<<<<<
 *         return <bytes>val
 *     else:
 */
  __pyx_t_1 = PyBytes_Check(__pyx_v_val); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PDSim/core/containers.pyx":14
 * cdef bytes to_bytes(object val):
 *     if isinstance(val, bytes):
 *         return <bytes>val             # <<<<<<<<<<<<<<
 *     else:
 *         return val.encode('utf8')
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_val));
    __pyx_r = ((PyObject*)__pyx_v_val);
    goto __pyx_L0;

    /* "PDSim/core/containers.pyx":13
 * 
 * cdef bytes to_bytes(object val):
 *     if isinstance(val, bytes):             # <<<<<<<<<<<<<<
 *         return <bytes>val
 *     else:
 */
  }

  /* "PDSim/core/containers.pyx":16
 *         return <bytes>val
 *     else:
 *         return val.encode('utf8')             # <<<<<<<<<<<<<<
 * 
 * cdef object to_pystring(object val):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_val, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 16, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_n_s_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_s_utf8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 16, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 16, __pyx_L1_error)
    __pyx_r = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "PDSim/core/containers.pyx":12
 * from CoolProp import constants
 * 
 * cdef bytes to_bytes(object val):             # <<<<<<<<<<<<<<
 *     if isinstance(val, bytes):
 *         return <bytes>val
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.core.containers.to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":18
 *         return val.encode('utf8')
 * 
 * cdef object to_pystring(object val):             # <<<<<<<<<<<<<<
 *     try:
 *         return val.decode('utf8')
 */

static PyObject *__pyx_f_5PDSim_4core_10containers_to_pystring(PyObject *__pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_pystring", 0);
  __Pyx_TraceCall("to_pystring", __pyx_f[0], 18, 0, __PYX_ERR(0, 18, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":19
 * 
 * cdef object to_pystring(object val):
 *     try:             # <<<<<<<<<<<<<<
 *         return val.decode('utf8')
 *     except AttributeError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "PDSim/core/containers.pyx":20
 * cdef object to_pystring(object val):
 *     try:
 *         return val.decode('utf8')             # <<<<<<<<<<<<<<
 *     except AttributeError:
 *         return val
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_val, __pyx_n_s_decode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 20, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_utf8);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 20, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L7_try_return;

      /* "PDSim/core/containers.pyx":19
 * 
 * cdef object to_pystring(object val):
 *     try:             # <<<<<<<<<<<<<<
 *         return val.decode('utf8')
 *     except AttributeError:
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "PDSim/core/containers.pyx":21
 *     try:
 *         return val.decode('utf8')
 *     except AttributeError:             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AttributeError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("PDSim.core.containers.to_pystring", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 21, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);

      /* "PDSim/core/containers.pyx":22
 *         return val.decode('utf8')
 *     except AttributeError:
 *         return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_val);
      __pyx_r = __pyx_v_val;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "PDSim/core/containers.pyx":19
 * 
 * cdef object to_pystring(object val):
 *     try:             # <<<<<<<<<<<<<<
 *         return val.decode('utf8')
 *     except AttributeError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "PDSim/core/containers.pyx":18
 *         return val.encode('utf8')
 * 
 * cdef object to_pystring(object val):             # <<<<<<<<<<<<<<
 *     try:
 *         return val.decode('utf8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PDSim.core.containers.to_pystring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":31
 *     With this class, the state of at least one of the points is fixed.  For instance, at the inlet of the compressor, the state well upstream is quasi-steady.
 *     """
 *     def __init__(self,key1,key2,L,ID,State1=None,State2=None,OD=-1,fixed=-1,TubeFcn=None,mdot=-1,exists=True):             # <<<<<<<<<<<<<<
 *         """
 * 
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_4Tube___init__[] = "\n        \n        Parameters\n        ----------\n        key1 : str\n            Key for the upstream flow node\n        key2 : str\n            Key for the downstream flow node\n        L : float\n            Length of the tube [m] \n        ID : float\n            Internal diameter of the tube [m]\n        State1 : :class:`State <CoolProp.State.State>` instance\n            Upstream state\n        State2 : :class:`State <CoolProp.State.State>` instance\n            Downstream state\n        OD : float\n            Outer diameter of the tube [m]\n        fixed : int\n            Which one of the node is fixed, one of ``1`` or ``2``\n        TubeFun : function\n            A function that will be called for the tube\n        mdot : float\n            The mass flow rate [kg/s]\n        exists : boolean\n            ``True`` if the tube exists\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_5PDSim_4core_10containers_4Tube___init__;
#endif
static int __pyx_pw_5PDSim_4core_10containers_4Tube_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key1 = 0;
  PyObject *__pyx_v_key2 = 0;
  PyObject *__pyx_v_L = 0;
  PyObject *__pyx_v_ID = 0;
  PyObject *__pyx_v_State1 = 0;
  PyObject *__pyx_v_State2 = 0;
  PyObject *__pyx_v_OD = 0;
  PyObject *__pyx_v_fixed = 0;
  PyObject *__pyx_v_TubeFcn = 0;
  PyObject *__pyx_v_mdot = 0;
  PyObject *__pyx_v_exists = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key1,&__pyx_n_s_key2,&__pyx_n_s_L,&__pyx_n_s_ID,&__pyx_n_s_State1,&__pyx_n_s_State2,&__pyx_n_s_OD,&__pyx_n_s_fixed,&__pyx_n_s_TubeFcn,&__pyx_n_s_mdot,&__pyx_n_s_exists,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)__pyx_int_neg_1);
    values[7] = ((PyObject *)__pyx_int_neg_1);
    values[8] = ((PyObject *)Py_None);
    values[9] = ((PyObject *)__pyx_int_neg_1);
    values[10] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 11, 1); __PYX_ERR(0, 31, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_L)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 11, 2); __PYX_ERR(0, 31, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 11, 3); __PYX_ERR(0, 31, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_State1);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_State2);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_OD);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fixed);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TubeFcn);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mdot);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exists);
          if (value) { values[10] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 31, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key1 = values[0];
    __pyx_v_key2 = values[1];
    __pyx_v_L = values[2];
    __pyx_v_ID = values[3];
    __pyx_v_State1 = values[4];
    __pyx_v_State2 = values[5];
    __pyx_v_OD = values[6];
    __pyx_v_fixed = values[7];
    __pyx_v_TubeFcn = values[8];
    __pyx_v_mdot = values[9];
    __pyx_v_exists = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 31, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube___init__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), __pyx_v_key1, __pyx_v_key2, __pyx_v_L, __pyx_v_ID, __pyx_v_State1, __pyx_v_State2, __pyx_v_OD, __pyx_v_fixed, __pyx_v_TubeFcn, __pyx_v_mdot, __pyx_v_exists);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube___init__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_key1, PyObject *__pyx_v_key2, PyObject *__pyx_v_L, PyObject *__pyx_v_ID, PyObject *__pyx_v_State1, PyObject *__pyx_v_State2, PyObject *__pyx_v_OD, PyObject *__pyx_v_fixed, PyObject *__pyx_v_TubeFcn, PyObject *__pyx_v_mdot, PyObject *__pyx_v_exists) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 31, 0, __PYX_ERR(0, 31, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":59
 *             ``True`` if the tube exists
 *         """
 *         self.key1 = key1.encode('ascii')             # <<<<<<<<<<<<<<
 *         self.key2 = key2.encode('ascii')
 *         self.fixed = fixed
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key1, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_s_ascii);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_key1, __pyx_t_1) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":60
 *         """
 *         self.key1 = key1.encode('ascii')
 *         self.key2 = key2.encode('ascii')             # <<<<<<<<<<<<<<
 *         self.fixed = fixed
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key2, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_s_ascii);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_key2, __pyx_t_1) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":61
 *         self.key1 = key1.encode('ascii')
 *         self.key2 = key2.encode('ascii')
 *         self.fixed = fixed             # <<<<<<<<<<<<<<
 * 
 *         #: Additional heat to be added to the tube
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_fixed); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 61, __pyx_L1_error)
  __pyx_v_self->fixed = __pyx_t_4;

  /* "PDSim/core/containers.pyx":64
 * 
 *         #: Additional heat to be added to the tube
 *         self.Q_add = 0.0             # <<<<<<<<<<<<<<
 * 
 *         #: Fixed heat transfer coefficient if desired (if less than zero will use correlation - default)
 */
  __pyx_v_self->Q_add = 0.0;

  /* "PDSim/core/containers.pyx":67
 * 
 *         #: Fixed heat transfer coefficient if desired (if less than zero will use correlation - default)
 *         self.alpha = -1.0             # <<<<<<<<<<<<<<
 * 
 *         self.exists = exists
 */
  __pyx_v_self->alpha = -1.0;

  /* "PDSim/core/containers.pyx":69
 *         self.alpha = -1.0
 * 
 *         self.exists = exists             # <<<<<<<<<<<<<<
 *         if fixed<0:
 *             raise AttributeError("You must provide an integer value for fixed, either 1 for Node 1 fixed, or 2 for Node 2 fixed.")
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_exists); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_v_self->exists = __pyx_t_5;

  /* "PDSim/core/containers.pyx":70
 * 
 *         self.exists = exists
 *         if fixed<0:             # <<<<<<<<<<<<<<
 *             raise AttributeError("You must provide an integer value for fixed, either 1 for Node 1 fixed, or 2 for Node 2 fixed.")
 *         if fixed==1 and isinstance(State1,StateClass) and State2==None:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_fixed, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "PDSim/core/containers.pyx":71
 *         self.exists = exists
 *         if fixed<0:
 *             raise AttributeError("You must provide an integer value for fixed, either 1 for Node 1 fixed, or 2 for Node 2 fixed.")             # <<<<<<<<<<<<<<
 *         if fixed==1 and isinstance(State1,StateClass) and State2==None:
 *             #Everything good
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_AttributeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 71, __pyx_L1_error)

    /* "PDSim/core/containers.pyx":70
 * 
 *         self.exists = exists
 *         if fixed<0:             # <<<<<<<<<<<<<<
 *             raise AttributeError("You must provide an integer value for fixed, either 1 for Node 1 fixed, or 2 for Node 2 fixed.")
 *         if fixed==1 and isinstance(State1,StateClass) and State2==None:
 */
  }

  /* "PDSim/core/containers.pyx":72
 *         if fixed<0:
 *             raise AttributeError("You must provide an integer value for fixed, either 1 for Node 1 fixed, or 2 for Node 2 fixed.")
 *         if fixed==1 and isinstance(State1,StateClass) and State2==None:             # <<<<<<<<<<<<<<
 *             #Everything good
 *             self.State1=State1
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_fixed, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_TypeCheck(__pyx_v_State1, __pyx_ptype_8CoolProp_8CoolProp_State); 
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_6 = __pyx_t_8;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_State2, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_t_8;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_6) {

    /* "PDSim/core/containers.pyx":74
 *         if fixed==1 and isinstance(State1,StateClass) and State2==None:
 *             #Everything good
 *             self.State1=State1             # <<<<<<<<<<<<<<
 *             self.State2=State1.copy()
 *         elif fixed==2 and isinstance(State2,StateClass) and State1==None:
 */
    if (!(likely(((__pyx_v_State1) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_State1, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(0, 74, __pyx_L1_error)
    __pyx_t_1 = __pyx_v_State1;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->State1);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->State1));
    __pyx_v_self->State1 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "PDSim/core/containers.pyx":75
 *             #Everything good
 *             self.State1=State1
 *             self.State2=State1.copy()             # <<<<<<<<<<<<<<
 *         elif fixed==2 and isinstance(State2,StateClass) and State1==None:
 *             #Everything good
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_State1, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->State2);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->State2));
    __pyx_v_self->State2 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "PDSim/core/containers.pyx":72
 *         if fixed<0:
 *             raise AttributeError("You must provide an integer value for fixed, either 1 for Node 1 fixed, or 2 for Node 2 fixed.")
 *         if fixed==1 and isinstance(State1,StateClass) and State2==None:             # <<<<<<<<<<<<<<
 *             #Everything good
 *             self.State1=State1
 */
    goto __pyx_L4;
  }

  /* "PDSim/core/containers.pyx":76
 *             self.State1=State1
 *             self.State2=State1.copy()
 *         elif fixed==2 and isinstance(State2,StateClass) and State1==None:             # <<<<<<<<<<<<<<
 *             #Everything good
 *             self.State2=State2
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_fixed, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_8) {
  } else {
    __pyx_t_6 = __pyx_t_8;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_8 = __Pyx_TypeCheck(__pyx_v_State2, __pyx_ptype_8CoolProp_8CoolProp_State); 
  __pyx_t_7 = (__pyx_t_8 != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_State1, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_t_7;
  __pyx_L8_bool_binop_done:;
  if (likely(__pyx_t_6)) {

    /* "PDSim/core/containers.pyx":78
 *         elif fixed==2 and isinstance(State2,StateClass) and State1==None:
 *             #Everything good
 *             self.State2=State2             # <<<<<<<<<<<<<<
 *             self.State1=State2.copy()
 *         else:
 */
    if (!(likely(((__pyx_v_State2) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_State2, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(0, 78, __pyx_L1_error)
    __pyx_t_1 = __pyx_v_State2;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->State2);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->State2));
    __pyx_v_self->State2 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "PDSim/core/containers.pyx":79
 *             #Everything good
 *             self.State2=State2
 *             self.State1=State2.copy()             # <<<<<<<<<<<<<<
 *         else:
 *             raise AttributeError('Incompatibility between the value for fixed and the states provided')
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_State2, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->State1);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->State1));
    __pyx_v_self->State1 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "PDSim/core/containers.pyx":76
 *             self.State1=State1
 *             self.State2=State1.copy()
 *         elif fixed==2 and isinstance(State2,StateClass) and State1==None:             # <<<<<<<<<<<<<<
 *             #Everything good
 *             self.State2=State2
 */
    goto __pyx_L4;
  }

  /* "PDSim/core/containers.pyx":81
 *             self.State1=State2.copy()
 *         else:
 *             raise AttributeError('Incompatibility between the value for fixed and the states provided')             # <<<<<<<<<<<<<<
 * 
 *         self.TubeFcn=TubeFcn
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_AttributeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 81, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "PDSim/core/containers.pyx":83
 *             raise AttributeError('Incompatibility between the value for fixed and the states provided')
 * 
 *         self.TubeFcn=TubeFcn             # <<<<<<<<<<<<<<
 *         if mdot<0:
 *             self.mdot=0.010
 */
  __Pyx_INCREF(__pyx_v_TubeFcn);
  __Pyx_GIVEREF(__pyx_v_TubeFcn);
  __Pyx_GOTREF(__pyx_v_self->TubeFcn);
  __Pyx_DECREF(__pyx_v_self->TubeFcn);
  __pyx_v_self->TubeFcn = __pyx_v_TubeFcn;

  /* "PDSim/core/containers.pyx":84
 * 
 *         self.TubeFcn=TubeFcn
 *         if mdot<0:             # <<<<<<<<<<<<<<
 *             self.mdot=0.010
 *             print('Warning: mdot not provided to Tube class constructor, guess value of '+str(self.mdot)+' kg/s used')
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_mdot, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "PDSim/core/containers.pyx":85
 *         self.TubeFcn=TubeFcn
 *         if mdot<0:
 *             self.mdot=0.010             # <<<<<<<<<<<<<<
 *             print('Warning: mdot not provided to Tube class constructor, guess value of '+str(self.mdot)+' kg/s used')
 *         else:
 */
    __pyx_v_self->mdot = 0.010;

    /* "PDSim/core/containers.pyx":86
 *         if mdot<0:
 *             self.mdot=0.010
 *             print('Warning: mdot not provided to Tube class constructor, guess value of '+str(self.mdot)+' kg/s used')             # <<<<<<<<<<<<<<
 *         else:
 *             self.mdot=mdot
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mdot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_kp_s_Warning_mdot_not_provided_to_Tub, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_kg_s_used); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "PDSim/core/containers.pyx":84
 * 
 *         self.TubeFcn=TubeFcn
 *         if mdot<0:             # <<<<<<<<<<<<<<
 *             self.mdot=0.010
 *             print('Warning: mdot not provided to Tube class constructor, guess value of '+str(self.mdot)+' kg/s used')
 */
    goto __pyx_L11;
  }

  /* "PDSim/core/containers.pyx":88
 *             print('Warning: mdot not provided to Tube class constructor, guess value of '+str(self.mdot)+' kg/s used')
 *         else:
 *             self.mdot=mdot             # <<<<<<<<<<<<<<
 *         self.L=L
 *         self.ID=ID
 */
  /*else*/ {
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_mdot); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L1_error)
    __pyx_v_self->mdot = __pyx_t_9;
  }
  __pyx_L11:;

  /* "PDSim/core/containers.pyx":89
 *         else:
 *             self.mdot=mdot
 *         self.L=L             # <<<<<<<<<<<<<<
 *         self.ID=ID
 *         self.OD=OD
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_L); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_v_self->L = __pyx_t_9;

  /* "PDSim/core/containers.pyx":90
 *             self.mdot=mdot
 *         self.L=L
 *         self.ID=ID             # <<<<<<<<<<<<<<
 *         self.OD=OD
 * 
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_ID); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 90, __pyx_L1_error)
  __pyx_v_self->ID = __pyx_t_9;

  /* "PDSim/core/containers.pyx":91
 *         self.L=L
 *         self.ID=ID
 *         self.OD=OD             # <<<<<<<<<<<<<<
 * 
 *     property key1:
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_OD); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 91, __pyx_L1_error)
  __pyx_v_self->OD = __pyx_t_9;

  /* "PDSim/core/containers.pyx":31
 *     With this class, the state of at least one of the points is fixed.  For instance, at the inlet of the compressor, the state well upstream is quasi-steady.
 *     """
 *     def __init__(self,key1,key2,L,ID,State1=None,State2=None,OD=-1,fixed=-1,TubeFcn=None,mdot=-1,exists=True):             # <<<<<<<<<<<<<<
 *         """
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":94
 * 
 *     property key1:
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             try:
 *                 self.m_key1 = val.encode('utf8')
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_4key1_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_4key1_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_4key1___set__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_4key1___set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 94, 0, __PYX_ERR(0, 94, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":95
 *     property key1:
 *         def __set__(self, val):
 *             try:             # <<<<<<<<<<<<<<
 *                 self.m_key1 = val.encode('utf8')
 *             except AttributeError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "PDSim/core/containers.pyx":96
 *         def __set__(self, val):
 *             try:
 *                 self.m_key1 = val.encode('utf8')             # <<<<<<<<<<<<<<
 *             except AttributeError:
 *                 self.m_key1 = val
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_val, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 96, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_utf8);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 96, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 96, __pyx_L3_error)
      __Pyx_GIVEREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_v_self->m_key1);
      __Pyx_DECREF(__pyx_v_self->m_key1);
      __pyx_v_self->m_key1 = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "PDSim/core/containers.pyx":95
 *     property key1:
 *         def __set__(self, val):
 *             try:             # <<<<<<<<<<<<<<
 *                 self.m_key1 = val.encode('utf8')
 *             except AttributeError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "PDSim/core/containers.pyx":97
 *             try:
 *                 self.m_key1 = val.encode('utf8')
 *             except AttributeError:             # <<<<<<<<<<<<<<
 *                 self.m_key1 = val
 *         def __get__(self):
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AttributeError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("PDSim.core.containers.Tube.key1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 97, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);

      /* "PDSim/core/containers.pyx":98
 *                 self.m_key1 = val.encode('utf8')
 *             except AttributeError:
 *                 self.m_key1 = val             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             return self.m_key1.decode('utf8')
 */
      if (!(likely(PyBytes_CheckExact(__pyx_v_val))||((__pyx_v_val) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_val)->tp_name), 0))) __PYX_ERR(0, 98, __pyx_L5_except_error)
      __pyx_t_8 = __pyx_v_val;
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_v_self->m_key1);
      __Pyx_DECREF(__pyx_v_self->m_key1);
      __pyx_v_self->m_key1 = ((PyObject*)__pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "PDSim/core/containers.pyx":95
 *     property key1:
 *         def __set__(self, val):
 *             try:             # <<<<<<<<<<<<<<
 *                 self.m_key1 = val.encode('utf8')
 *             except AttributeError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "PDSim/core/containers.pyx":94
 * 
 *     property key1:
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             try:
 *                 self.m_key1 = val.encode('utf8')
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.key1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":99
 *             except AttributeError:
 *                 self.m_key1 = val
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.m_key1.decode('utf8')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_4key1_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_4key1_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_4key1_2__get__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_4key1_2__get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 99, 0, __PYX_ERR(0, 99, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":100
 *                 self.m_key1 = val
 *         def __get__(self):
 *             return self.m_key1.decode('utf8')             # <<<<<<<<<<<<<<
 * 
 *     property key2:
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->m_key1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 100, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_decode_bytes(__pyx_v_self->m_key1, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":99
 *             except AttributeError:
 *                 self.m_key1 = val
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.m_key1.decode('utf8')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.key1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":103
 * 
 *     property key2:
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             try:
 *                 self.m_key2 = val.encode('utf8')
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_4key2_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_4key2_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_4key2___set__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_4key2___set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 103, 0, __PYX_ERR(0, 103, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":104
 *     property key2:
 *         def __set__(self, val):
 *             try:             # <<<<<<<<<<<<<<
 *                 self.m_key2 = val.encode('utf8')
 *             except AttributeError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "PDSim/core/containers.pyx":105
 *         def __set__(self, val):
 *             try:
 *                 self.m_key2 = val.encode('utf8')             # <<<<<<<<<<<<<<
 *             except AttributeError:
 *                 self.m_key2 = val
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_val, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 105, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_utf8);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 105, __pyx_L3_error)
      __Pyx_GIVEREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_v_self->m_key2);
      __Pyx_DECREF(__pyx_v_self->m_key2);
      __pyx_v_self->m_key2 = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "PDSim/core/containers.pyx":104
 *     property key2:
 *         def __set__(self, val):
 *             try:             # <<<<<<<<<<<<<<
 *                 self.m_key2 = val.encode('utf8')
 *             except AttributeError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "PDSim/core/containers.pyx":106
 *             try:
 *                 self.m_key2 = val.encode('utf8')
 *             except AttributeError:             # <<<<<<<<<<<<<<
 *                 self.m_key2 = val
 *         def __get__(self):
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AttributeError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("PDSim.core.containers.Tube.key2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 106, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);

      /* "PDSim/core/containers.pyx":107
 *                 self.m_key2 = val.encode('utf8')
 *             except AttributeError:
 *                 self.m_key2 = val             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             return self.m_key2.decode('utf8')
 */
      if (!(likely(PyBytes_CheckExact(__pyx_v_val))||((__pyx_v_val) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_val)->tp_name), 0))) __PYX_ERR(0, 107, __pyx_L5_except_error)
      __pyx_t_8 = __pyx_v_val;
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_v_self->m_key2);
      __Pyx_DECREF(__pyx_v_self->m_key2);
      __pyx_v_self->m_key2 = ((PyObject*)__pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "PDSim/core/containers.pyx":104
 *     property key2:
 *         def __set__(self, val):
 *             try:             # <<<<<<<<<<<<<<
 *                 self.m_key2 = val.encode('utf8')
 *             except AttributeError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "PDSim/core/containers.pyx":103
 * 
 *     property key2:
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             try:
 *                 self.m_key2 = val.encode('utf8')
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.key2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":108
 *             except AttributeError:
 *                 self.m_key2 = val
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.m_key2.decode('utf8')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_4key2_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_4key2_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_4key2_2__get__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_4key2_2__get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 108, 0, __PYX_ERR(0, 108, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":109
 *                 self.m_key2 = val
 *         def __get__(self):
 *             return self.m_key2.decode('utf8')             # <<<<<<<<<<<<<<
 * 
 * cdef class TubeCollection(list):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->m_key2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 109, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_decode_bytes(__pyx_v_self->m_key2, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":108
 *             except AttributeError:
 *                 self.m_key2 = val
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.m_key2.decode('utf8')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.key2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":27
 * cdef class Tube(object):
 *     cdef bytes m_key1,m_key2
 *     cdef public int fixed             # <<<<<<<<<<<<<<
 *     cdef public StateClass State1, State2
 *     cdef public object TubeFcn
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_5fixed_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_5fixed_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_5fixed___get__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_5fixed___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 27, 0, __PYX_ERR(2, 27, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->fixed); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.fixed.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_5fixed_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_5fixed_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_5fixed_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_5fixed_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 27, 0, __PYX_ERR(2, 27, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 27, __pyx_L1_error)
  __pyx_v_self->fixed = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.fixed.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":28
 *     cdef bytes m_key1,m_key2
 *     cdef public int fixed
 *     cdef public StateClass State1, State2             # <<<<<<<<<<<<<<
 *     cdef public object TubeFcn
 *     cdef public double Q_add,alpha,L,ID,OD,mdot,Q
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_6State1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_6State1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_6State1___get__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_6State1___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 28, 0, __PYX_ERR(2, 28, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->State1));
  __pyx_r = ((PyObject *)__pyx_v_self->State1);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.State1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_6State1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_6State1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_6State1_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_6State1_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 28, 0, __PYX_ERR(2, 28, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(2, 28, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->State1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State1));
  __pyx_v_self->State1 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.State1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_6State1_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_6State1_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_6State1_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_6State1_4__del__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 28, 0, __PYX_ERR(2, 28, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->State1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State1));
  __pyx_v_self->State1 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.State1.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_6State2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_6State2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_6State2___get__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_6State2___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 28, 0, __PYX_ERR(2, 28, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->State2));
  __pyx_r = ((PyObject *)__pyx_v_self->State2);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.State2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_6State2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_6State2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_6State2_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_6State2_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 28, 0, __PYX_ERR(2, 28, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(2, 28, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->State2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State2));
  __pyx_v_self->State2 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.State2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_6State2_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_6State2_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_6State2_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_6State2_4__del__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 28, 0, __PYX_ERR(2, 28, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->State2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State2));
  __pyx_v_self->State2 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.State2.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":29
 *     cdef public int fixed
 *     cdef public StateClass State1, State2
 *     cdef public object TubeFcn             # <<<<<<<<<<<<<<
 *     cdef public double Q_add,alpha,L,ID,OD,mdot,Q
 *     cdef public bool exists
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_7TubeFcn_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_7TubeFcn_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_7TubeFcn___get__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_7TubeFcn___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 29, 0, __PYX_ERR(2, 29, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->TubeFcn);
  __pyx_r = __pyx_v_self->TubeFcn;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.TubeFcn.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_7TubeFcn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_7TubeFcn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_7TubeFcn_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_7TubeFcn_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 29, 0, __PYX_ERR(2, 29, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->TubeFcn);
  __Pyx_DECREF(__pyx_v_self->TubeFcn);
  __pyx_v_self->TubeFcn = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.TubeFcn.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_7TubeFcn_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_7TubeFcn_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_7TubeFcn_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_7TubeFcn_4__del__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 29, 0, __PYX_ERR(2, 29, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->TubeFcn);
  __Pyx_DECREF(__pyx_v_self->TubeFcn);
  __pyx_v_self->TubeFcn = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.TubeFcn.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":30
 *     cdef public StateClass State1, State2
 *     cdef public object TubeFcn
 *     cdef public double Q_add,alpha,L,ID,OD,mdot,Q             # <<<<<<<<<<<<<<
 *     cdef public bool exists
 *     cdef public int i1,i2
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_5Q_add_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_5Q_add_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_5Q_add___get__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_5Q_add___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 30, 0, __PYX_ERR(2, 30, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Q_add); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.Q_add.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_5Q_add_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_5Q_add_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_5Q_add_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_5Q_add_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 30, 0, __PYX_ERR(2, 30, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 30, __pyx_L1_error)
  __pyx_v_self->Q_add = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.Q_add.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_5alpha_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_5alpha_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_5alpha___get__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_5alpha___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 30, 0, __PYX_ERR(2, 30, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->alpha); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.alpha.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_5alpha_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_5alpha_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_5alpha_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_5alpha_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 30, 0, __PYX_ERR(2, 30, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 30, __pyx_L1_error)
  __pyx_v_self->alpha = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.alpha.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_1L_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_1L_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_1L___get__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_1L___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 30, 0, __PYX_ERR(2, 30, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->L); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.L.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_1L_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_1L_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_1L_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_1L_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 30, 0, __PYX_ERR(2, 30, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 30, __pyx_L1_error)
  __pyx_v_self->L = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.L.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_2ID_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_2ID_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_2ID___get__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_2ID___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 30, 0, __PYX_ERR(2, 30, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ID); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.ID.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_2ID_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_2ID_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_2ID_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_2ID_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 30, 0, __PYX_ERR(2, 30, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 30, __pyx_L1_error)
  __pyx_v_self->ID = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.ID.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_2OD_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_2OD_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_2OD___get__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_2OD___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 30, 0, __PYX_ERR(2, 30, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->OD); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.OD.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_2OD_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_2OD_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_2OD_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_2OD_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 30, 0, __PYX_ERR(2, 30, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 30, __pyx_L1_error)
  __pyx_v_self->OD = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.OD.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_4mdot_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_4mdot_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_4mdot___get__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_4mdot___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 30, 0, __PYX_ERR(2, 30, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mdot); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.mdot.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_4mdot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_4mdot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_4mdot_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_4mdot_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 30, 0, __PYX_ERR(2, 30, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 30, __pyx_L1_error)
  __pyx_v_self->mdot = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.mdot.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_1Q_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_1Q_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_1Q___get__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_1Q___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 30, 0, __PYX_ERR(2, 30, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Q); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.Q.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_1Q_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_1Q_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_1Q_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_1Q_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 30, 0, __PYX_ERR(2, 30, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 30, __pyx_L1_error)
  __pyx_v_self->Q = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.Q.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":31
 *     cdef public object TubeFcn
 *     cdef public double Q_add,alpha,L,ID,OD,mdot,Q
 *     cdef public bool exists             # <<<<<<<<<<<<<<
 *     cdef public int i1,i2
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_6exists_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_6exists_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_6exists___get__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_6exists___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 31, 0, __PYX_ERR(2, 31, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->exists); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.exists.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_6exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_6exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_6exists_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_6exists_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 31, 0, __PYX_ERR(2, 31, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(2, 31, __pyx_L1_error)
  __pyx_v_self->exists = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.exists.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":32
 *     cdef public double Q_add,alpha,L,ID,OD,mdot,Q
 *     cdef public bool exists
 *     cdef public int i1,i2             # <<<<<<<<<<<<<<
 * 
 * cdef class ControlVolume(object):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_2i1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_2i1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_2i1___get__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_2i1___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 32, 0, __PYX_ERR(2, 32, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->i1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.i1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_2i1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_2i1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_2i1_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_2i1_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 32, 0, __PYX_ERR(2, 32, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 32, __pyx_L1_error)
  __pyx_v_self->i1 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.i1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_2i2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_2i2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_2i2___get__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_2i2___get__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 32, 0, __PYX_ERR(2, 32, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->i2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.i2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_4Tube_2i2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_4Tube_2i2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_2i2_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_4Tube_2i2_2__set__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 32, 0, __PYX_ERR(2, 32, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 32, __pyx_L1_error)
  __pyx_v_self->i2 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.Tube.i2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_4Tube_2__reduce_cython__[] = "Tube.__reduce_cython__(self)";
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_2__reduce_cython__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_2__reduce_cython__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.ID, self.L, self.OD, self.Q, self.Q_add, self.State1, self.State2, self.TubeFcn, self.alpha, self.exists, self.fixed, self.i1, self.i2, self.m_key1, self.m_key2, self.mdot)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ID); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->L); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->OD); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->Q); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->Q_add); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->alpha); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->exists); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->fixed); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_self->i1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->i2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyFloat_FromDouble(__pyx_v_self->mdot); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = PyTuple_New(16); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_12, 4, __pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->State1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->State1));
  PyTuple_SET_ITEM(__pyx_t_12, 5, ((PyObject *)__pyx_v_self->State1));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->State2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->State2));
  PyTuple_SET_ITEM(__pyx_t_12, 6, ((PyObject *)__pyx_v_self->State2));
  __Pyx_INCREF(__pyx_v_self->TubeFcn);
  __Pyx_GIVEREF(__pyx_v_self->TubeFcn);
  PyTuple_SET_ITEM(__pyx_t_12, 7, __pyx_v_self->TubeFcn);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_12, 8, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_12, 9, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_12, 10, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_12, 11, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_12, 12, __pyx_t_10);
  __Pyx_INCREF(__pyx_v_self->m_key1);
  __Pyx_GIVEREF(__pyx_v_self->m_key1);
  PyTuple_SET_ITEM(__pyx_t_12, 13, __pyx_v_self->m_key1);
  __Pyx_INCREF(__pyx_v_self->m_key2);
  __Pyx_GIVEREF(__pyx_v_self->m_key2);
  PyTuple_SET_ITEM(__pyx_t_12, 14, __pyx_v_self->m_key2);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_12, 15, __pyx_t_11);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_12);
  __pyx_t_12 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.ID, self.L, self.OD, self.Q, self.Q_add, self.State1, self.State2, self.TubeFcn, self.alpha, self.exists, self.fixed, self.i1, self.i2, self.m_key1, self.m_key2, self.mdot)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_12 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_v__dict = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "(tree fragment)":7
 *     state = (self.ID, self.L, self.OD, self.Q, self.Q_add, self.State1, self.State2, self.TubeFcn, self.alpha, self.exists, self.fixed, self.i1, self.i2, self.m_key1, self.m_key2, self.mdot)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_13 = (__pyx_v__dict != Py_None);
  __pyx_t_14 = (__pyx_t_13 != 0);
  if (__pyx_t_14) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v__dict);
    __pyx_t_11 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_11));
    __pyx_t_11 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.State1 is not None or self.State2 is not None or self.TubeFcn is not None or self.m_key1 is not None or self.m_key2 is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.ID, self.L, self.OD, self.Q, self.Q_add, self.State1, self.State2, self.TubeFcn, self.alpha, self.exists, self.fixed, self.i1, self.i2, self.m_key1, self.m_key2, self.mdot)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.State1 is not None or self.State2 is not None or self.TubeFcn is not None or self.m_key1 is not None or self.m_key2 is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Tube, (type(self), 0x1eb2107, None), state
 */
  /*else*/ {
    __pyx_t_13 = (((PyObject *)__pyx_v_self->State1) != Py_None);
    __pyx_t_15 = (__pyx_t_13 != 0);
    if (!__pyx_t_15) {
    } else {
      __pyx_t_14 = __pyx_t_15;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_15 = (((PyObject *)__pyx_v_self->State2) != Py_None);
    __pyx_t_13 = (__pyx_t_15 != 0);
    if (!__pyx_t_13) {
    } else {
      __pyx_t_14 = __pyx_t_13;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_13 = (__pyx_v_self->TubeFcn != Py_None);
    __pyx_t_15 = (__pyx_t_13 != 0);
    if (!__pyx_t_15) {
    } else {
      __pyx_t_14 = __pyx_t_15;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_15 = (__pyx_v_self->m_key1 != ((PyObject*)Py_None));
    __pyx_t_13 = (__pyx_t_15 != 0);
    if (!__pyx_t_13) {
    } else {
      __pyx_t_14 = __pyx_t_13;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_13 = (__pyx_v_self->m_key2 != ((PyObject*)Py_None));
    __pyx_t_15 = (__pyx_t_13 != 0);
    __pyx_t_14 = __pyx_t_15;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_14;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.State1 is not None or self.State2 is not None or self.TubeFcn is not None or self.m_key1 is not None or self.m_key2 is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Tube, (type(self), 0x1eb2107, None), state
 *     else:
 */
  __pyx_t_14 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_14) {

    /* "(tree fragment)":13
 *         use_setstate = self.State1 is not None or self.State2 is not None or self.TubeFcn is not None or self.m_key1 is not None or self.m_key2 is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Tube, (type(self), 0x1eb2107, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Tube, (type(self), 0x1eb2107, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_pyx_unpickle_Tube); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_12, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_32186631);
    __Pyx_GIVEREF(__pyx_int_32186631);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_int_32186631);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_12, 2, Py_None);
    __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_12);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_v_state);
    __pyx_t_11 = 0;
    __pyx_t_12 = 0;
    __pyx_r = __pyx_t_10;
    __pyx_t_10 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.State1 is not None or self.State2 is not None or self.TubeFcn is not None or self.m_key1 is not None or self.m_key2 is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Tube, (type(self), 0x1eb2107, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Tube, (type(self), 0x1eb2107, None), state
 *     else:
 *         return __pyx_unpickle_Tube, (type(self), 0x1eb2107, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Tube__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_pyx_unpickle_Tube); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_12, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_32186631);
    __Pyx_GIVEREF(__pyx_int_32186631);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_int_32186631);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_v_state);
    __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_12);
    __pyx_t_10 = 0;
    __pyx_t_12 = 0;
    __pyx_r = __pyx_t_11;
    __pyx_t_11 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Tube, (type(self), 0x1eb2107, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Tube__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_4Tube_4__setstate_cython__[] = "Tube.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5PDSim_4core_10containers_4Tube_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4Tube_4__setstate_cython__(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4Tube_4__setstate_cython__(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 16, 0, __PYX_ERR(1, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Tube, (type(self), 0x1eb2107, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Tube__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers___pyx_unpickle_Tube__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Tube, (type(self), 0x1eb2107, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Tube__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.Tube.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":113
 * cdef class TubeCollection(list):
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self._Nodes = {}
 * 
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_14TubeCollection_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_14TubeCollection_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_14TubeCollection___init__(((struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_14TubeCollection___init__(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 113, 0, __PYX_ERR(0, 113, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":114
 * 
 *     def __init__(self):
 *         self._Nodes = {}             # <<<<<<<<<<<<<<
 * 
 *     cpdef dict get_Nodes(self):
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_Nodes);
  __Pyx_DECREF(__pyx_v_self->_Nodes);
  __pyx_v_self->_Nodes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":113
 * cdef class TubeCollection(list):
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self._Nodes = {}
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":116
 *         self._Nodes = {}
 * 
 *     cpdef dict get_Nodes(self):             # <<<<<<<<<<<<<<
 *         self.update()
 *         return self._Nodes
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_3get_Nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_14TubeCollection_get_Nodes(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_Nodes", 0);
  __Pyx_TraceCall("get_Nodes", __pyx_f[0], 116, 0, __PYX_ERR(0, 116, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_Nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_14TubeCollection_3get_Nodes)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 116, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":117
 * 
 *     cpdef dict get_Nodes(self):
 *         self.update()             # <<<<<<<<<<<<<<
 *         return self._Nodes
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_10containers_TubeCollection *)__pyx_v_self->__pyx_vtab)->update(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":118
 *     cpdef dict get_Nodes(self):
 *         self.update()
 *         return self._Nodes             # <<<<<<<<<<<<<<
 * 
 *     cpdef arraym get_h(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_Nodes);
  __pyx_r = __pyx_v_self->_Nodes;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":116
 *         self._Nodes = {}
 * 
 *     cpdef dict get_Nodes(self):             # <<<<<<<<<<<<<<
 *         self.update()
 *         return self._Nodes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.get_Nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_3get_Nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_14TubeCollection_2get_Nodes[] = "TubeCollection.get_Nodes(self) -> dict";
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_3get_Nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_Nodes (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_14TubeCollection_2get_Nodes(((struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_2get_Nodes(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_Nodes", 0);
  __Pyx_TraceCall("get_Nodes (wrapper)", __pyx_f[0], 116, 0, __PYX_ERR(0, 116, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_14TubeCollection_get_Nodes(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.get_Nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":120
 *         return self._Nodes
 * 
 *     cpdef arraym get_h(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get an arraym instance with the enthalpies of each node in the Tubes
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_5get_h(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_f_5PDSim_4core_10containers_14TubeCollection_get_h(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_h", 0);
  __Pyx_TraceCall("get_h", __pyx_f[0], 120, 0, __PYX_ERR(0, 120, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_h); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_14TubeCollection_5get_h)) {
        __Pyx_XDECREF(((PyObject *)__pyx_r));
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(0, 120, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":126
 *         by the number of control volumes in existence
 *         """
 *         return self.harray             # <<<<<<<<<<<<<<
 * 
 *     cpdef arraym get_p(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->harray));
  __pyx_r = __pyx_v_self->harray;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":120
 *         return self._Nodes
 * 
 *     cpdef arraym get_h(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get an arraym instance with the enthalpies of each node in the Tubes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.get_h", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_5get_h(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_14TubeCollection_4get_h[] = "TubeCollection.get_h(self) -> arraym\n\n        Get an arraym instance with the enthalpies of each node in the Tubes\n        collection.  In the same order as the indices of the enthalpies, but offset \n        by the number of control volumes in existence\n        ";
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_5get_h(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_h (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_14TubeCollection_4get_h(((struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_4get_h(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_h", 0);
  __Pyx_TraceCall("get_h (wrapper)", __pyx_f[0], 120, 0, __PYX_ERR(0, 120, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_4core_10containers_14TubeCollection_get_h(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.get_h", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":128
 *         return self.harray
 * 
 *     cpdef arraym get_p(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get an arraym instance with the pressures of each node in the Tubes
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_7get_p(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_f_5PDSim_4core_10containers_14TubeCollection_get_p(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_p", 0);
  __Pyx_TraceCall("get_p", __pyx_f[0], 128, 0, __PYX_ERR(0, 128, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_p); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_14TubeCollection_7get_p)) {
        __Pyx_XDECREF(((PyObject *)__pyx_r));
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(0, 128, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":134
 *         by the number of control volumes in existence
 *         """
 *         return self.parray             # <<<<<<<<<<<<<<
 * 
 *     cpdef arraym get_T(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parray));
  __pyx_r = __pyx_v_self->parray;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":128
 *         return self.harray
 * 
 *     cpdef arraym get_p(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get an arraym instance with the pressures of each node in the Tubes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.get_p", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_7get_p(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_14TubeCollection_6get_p[] = "TubeCollection.get_p(self) -> arraym\n\n        Get an arraym instance with the pressures of each node in the Tubes\n        collection.  In the same order as the indices of the pressures, but offset \n        by the number of control volumes in existence\n        ";
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_7get_p(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_p (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_14TubeCollection_6get_p(((struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_6get_p(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_p", 0);
  __Pyx_TraceCall("get_p (wrapper)", __pyx_f[0], 128, 0, __PYX_ERR(0, 128, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_4core_10containers_14TubeCollection_get_p(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.get_p", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":136
 *         return self.parray
 * 
 *     cpdef arraym get_T(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get an arraym instance with the enthalpies of each node in the Tubes
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_9get_T(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_f_5PDSim_4core_10containers_14TubeCollection_get_T(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_T", 0);
  __Pyx_TraceCall("get_T", __pyx_f[0], 136, 0, __PYX_ERR(0, 136, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_14TubeCollection_9get_T)) {
        __Pyx_XDECREF(((PyObject *)__pyx_r));
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(0, 136, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":142
 *         by the number of control volumes in existence
 *         """
 *         return self.Tarray             # <<<<<<<<<<<<<<
 * 
 *     cpdef update_existence(self, int NCV):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Tarray));
  __pyx_r = __pyx_v_self->Tarray;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":136
 *         return self.parray
 * 
 *     cpdef arraym get_T(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get an arraym instance with the enthalpies of each node in the Tubes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.get_T", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_9get_T(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_14TubeCollection_8get_T[] = "TubeCollection.get_T(self) -> arraym\n\n        Get an arraym instance with the enthalpies of each node in the Tubes\n        collection.  In the same order as the indices of the enthalpies, but offset \n        by the number of control volumes in existence\n        ";
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_9get_T(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_T (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_14TubeCollection_8get_T(((struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_8get_T(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_T", 0);
  __Pyx_TraceCall("get_T (wrapper)", __pyx_f[0], 136, 0, __PYX_ERR(0, 136, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_4core_10containers_14TubeCollection_get_T(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.get_T", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":144
 *         return self.Tarray
 * 
 *     cpdef update_existence(self, int NCV):             # <<<<<<<<<<<<<<
 *         """
 *         Set the indices for each tube node in the array of enthalpies
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_11update_existence(PyObject *__pyx_v_self, PyObject *__pyx_arg_NCV); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_14TubeCollection_update_existence(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, int __pyx_v_NCV, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  PyObject *__pyx_v_h = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_T = NULL;
  PyObject *__pyx_v_Tube = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_existence", 0);
  __Pyx_TraceCall("update_existence", __pyx_f[0], 144, 0, __PYX_ERR(0, 144, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_existence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_14TubeCollection_11update_existence)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_NCV); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 144, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":150
 *         First index is equal to NCV since python (& c++) are 0-based indexing
 *         """
 *         cdef int i = NCV             # <<<<<<<<<<<<<<
 *         h,p,T = [],[],[]
 *         for Tube in self:
 */
  __pyx_v_i = __pyx_v_NCV;

  /* "PDSim/core/containers.pyx":151
 *         """
 *         cdef int i = NCV
 *         h,p,T = [],[],[]             # <<<<<<<<<<<<<<
 *         for Tube in self:
 *             h.append(Tube.State1.h)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_h = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_p = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_T = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "PDSim/core/containers.pyx":152
 *         cdef int i = NCV
 *         h,p,T = [],[],[]
 *         for Tube in self:             # <<<<<<<<<<<<<<
 *             h.append(Tube.State1.h)
 *             h.append(Tube.State2.h)
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self))) {
    __pyx_t_4 = ((PyObject *)__pyx_v_self); __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 152, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 152, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 152, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 152, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_Tube, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "PDSim/core/containers.pyx":153
 *         h,p,T = [],[],[]
 *         for Tube in self:
 *             h.append(Tube.State1.h)             # <<<<<<<<<<<<<<
 *             h.append(Tube.State2.h)
 *             p.append(Tube.State1.p)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_Tube, __pyx_n_s_State1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_h); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_h, __pyx_t_1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PDSim/core/containers.pyx":154
 *         for Tube in self:
 *             h.append(Tube.State1.h)
 *             h.append(Tube.State2.h)             # <<<<<<<<<<<<<<
 *             p.append(Tube.State1.p)
 *             p.append(Tube.State2.p)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_Tube, __pyx_n_s_State2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_h, __pyx_t_2); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "PDSim/core/containers.pyx":155
 *             h.append(Tube.State1.h)
 *             h.append(Tube.State2.h)
 *             p.append(Tube.State1.p)             # <<<<<<<<<<<<<<
 *             p.append(Tube.State2.p)
 *             T.append(Tube.State1.T)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_Tube, __pyx_n_s_State1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_p); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_p, __pyx_t_1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PDSim/core/containers.pyx":156
 *             h.append(Tube.State2.h)
 *             p.append(Tube.State1.p)
 *             p.append(Tube.State2.p)             # <<<<<<<<<<<<<<
 *             T.append(Tube.State1.T)
 *             T.append(Tube.State2.T)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_Tube, __pyx_n_s_State2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_p); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_p, __pyx_t_2); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "PDSim/core/containers.pyx":157
 *             p.append(Tube.State1.p)
 *             p.append(Tube.State2.p)
 *             T.append(Tube.State1.T)             # <<<<<<<<<<<<<<
 *             T.append(Tube.State2.T)
 *             Tube.i1 = i
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_Tube, __pyx_n_s_State1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_T, __pyx_t_1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PDSim/core/containers.pyx":158
 *             p.append(Tube.State2.p)
 *             T.append(Tube.State1.T)
 *             T.append(Tube.State2.T)             # <<<<<<<<<<<<<<
 *             Tube.i1 = i
 *             Tube.i2 = i+1
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_Tube, __pyx_n_s_State2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_T, __pyx_t_2); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "PDSim/core/containers.pyx":159
 *             T.append(Tube.State1.T)
 *             T.append(Tube.State2.T)
 *             Tube.i1 = i             # <<<<<<<<<<<<<<
 *             Tube.i2 = i+1
 *             i += 2
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_Tube, __pyx_n_s_i1, __pyx_t_2) < 0) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "PDSim/core/containers.pyx":160
 *             T.append(Tube.State2.T)
 *             Tube.i1 = i
 *             Tube.i2 = i+1             # <<<<<<<<<<<<<<
 *             i += 2
 *         self.harray = arraym(h)
 */
    __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_i + 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_Tube, __pyx_n_s_i2, __pyx_t_2) < 0) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "PDSim/core/containers.pyx":161
 *             Tube.i1 = i
 *             Tube.i2 = i+1
 *             i += 2             # <<<<<<<<<<<<<<
 *         self.harray = arraym(h)
 *         self.parray = arraym(p)
 */
    __pyx_v_i = (__pyx_v_i + 2);

    /* "PDSim/core/containers.pyx":152
 *         cdef int i = NCV
 *         h,p,T = [],[],[]
 *         for Tube in self:             # <<<<<<<<<<<<<<
 *             h.append(Tube.State1.h)
 *             h.append(Tube.State2.h)
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "PDSim/core/containers.pyx":162
 *             Tube.i2 = i+1
 *             i += 2
 *         self.harray = arraym(h)             # <<<<<<<<<<<<<<
 *         self.parray = arraym(p)
 *         self.Tarray = arraym(T)
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5PDSim_4misc_9datatypes_arraym), __pyx_v_h); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->harray);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->harray));
  __pyx_v_self->harray = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "PDSim/core/containers.pyx":163
 *             i += 2
 *         self.harray = arraym(h)
 *         self.parray = arraym(p)             # <<<<<<<<<<<<<<
 *         self.Tarray = arraym(T)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5PDSim_4misc_9datatypes_arraym), __pyx_v_p); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->parray);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parray));
  __pyx_v_self->parray = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "PDSim/core/containers.pyx":164
 *         self.harray = arraym(h)
 *         self.parray = arraym(p)
 *         self.Tarray = arraym(T)             # <<<<<<<<<<<<<<
 * 
 *     property Nodes:
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5PDSim_4misc_9datatypes_arraym), __pyx_v_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->Tarray);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Tarray));
  __pyx_v_self->Tarray = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "PDSim/core/containers.pyx":144
 *         return self.Tarray
 * 
 *     cpdef update_existence(self, int NCV):             # <<<<<<<<<<<<<<
 *         """
 *         Set the indices for each tube node in the array of enthalpies
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.update_existence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_T);
  __Pyx_XDECREF(__pyx_v_Tube);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_11update_existence(PyObject *__pyx_v_self, PyObject *__pyx_arg_NCV); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_14TubeCollection_10update_existence[] = "TubeCollection.update_existence(self, int NCV)\n\n        Set the indices for each tube node in the array of enthalpies\n        \n        First index is equal to NCV since python (& c++) are 0-based indexing\n        ";
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_11update_existence(PyObject *__pyx_v_self, PyObject *__pyx_arg_NCV) {
  int __pyx_v_NCV;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_existence (wrapper)", 0);
  assert(__pyx_arg_NCV); {
    __pyx_v_NCV = __Pyx_PyInt_As_int(__pyx_arg_NCV); if (unlikely((__pyx_v_NCV == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.update_existence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_14TubeCollection_10update_existence(((struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *)__pyx_v_self), ((int)__pyx_v_NCV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_10update_existence(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, int __pyx_v_NCV) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_existence", 0);
  __Pyx_TraceCall("update_existence (wrapper)", __pyx_f[0], 144, 0, __PYX_ERR(0, 144, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_14TubeCollection_update_existence(__pyx_v_self, __pyx_v_NCV, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.update_existence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":167
 * 
 *     property Nodes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.update()
 *             return self._Nodes
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_5Nodes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_5Nodes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_14TubeCollection_5Nodes___get__(((struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_5Nodes___get__(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 167, 0, __PYX_ERR(0, 167, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":168
 *     property Nodes:
 *         def __get__(self):
 *             self.update()             # <<<<<<<<<<<<<<
 *             return self._Nodes
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_10containers_TubeCollection *)__pyx_v_self->__pyx_vtab)->update(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":169
 *         def __get__(self):
 *             self.update()
 *             return self._Nodes             # <<<<<<<<<<<<<<
 * 
 *     cpdef update(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_Nodes);
  __pyx_r = __pyx_v_self->_Nodes;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":167
 * 
 *     property Nodes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.update()
 *             return self._Nodes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.Nodes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":171
 *             return self._Nodes
 * 
 *     cpdef update(self):             # <<<<<<<<<<<<<<
 *         """
 *         _Nodes is a dictionary of flow states for any tubes that exist
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_13update(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_14TubeCollection_update(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_list1 = NULL;
  PyObject *__pyx_v_list2 = NULL;
  PyObject *__pyx_v_Tube = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update", 0);
  __Pyx_TraceCall("update", __pyx_f[0], 171, 0, __PYX_ERR(0, 171, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_14TubeCollection_13update)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":175
 *         _Nodes is a dictionary of flow states for any tubes that exist
 *         """
 *         list1=[(Tube.key1,Tube.State1) for Tube in self if Tube.exists]             # <<<<<<<<<<<<<<
 *         list2=[(Tube.key2,Tube.State2) for Tube in self if Tube.exists]
 *         self._Nodes = dict(list1 + list2)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self))) {
    __pyx_t_2 = ((PyObject *)__pyx_v_self); __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 175, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 175, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 175, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 175, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_Tube, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_Tube, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_7) {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_Tube, __pyx_n_s_key1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_Tube, __pyx_n_s_State1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_4);
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_list1 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":176
 *         """
 *         list1=[(Tube.key1,Tube.State1) for Tube in self if Tube.exists]
 *         list2=[(Tube.key2,Tube.State2) for Tube in self if Tube.exists]             # <<<<<<<<<<<<<<
 *         self._Nodes = dict(list1 + list2)
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self))) {
    __pyx_t_2 = ((PyObject *)__pyx_v_self); __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 176, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_8); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 176, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_8); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 176, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 176, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_Tube, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_Tube, __pyx_n_s_exists); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_7) {
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_Tube, __pyx_n_s_key2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_Tube, __pyx_n_s_State2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
      __pyx_t_8 = 0;
      __pyx_t_4 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 176, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_list2 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":177
 *         list1=[(Tube.key1,Tube.State1) for Tube in self if Tube.exists]
 *         list2=[(Tube.key2,Tube.State2) for Tube in self if Tube.exists]
 *         self._Nodes = dict(list1 + list2)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key):
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_list1, __pyx_v_list2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_Nodes);
  __Pyx_DECREF(__pyx_v_self->_Nodes);
  __pyx_v_self->_Nodes = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "PDSim/core/containers.pyx":171
 *             return self._Nodes
 * 
 *     cpdef update(self):             # <<<<<<<<<<<<<<
 *         """
 *         _Nodes is a dictionary of flow states for any tubes that exist
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_list1);
  __Pyx_XDECREF(__pyx_v_list2);
  __Pyx_XDECREF(__pyx_v_Tube);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_13update(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_14TubeCollection_12update[] = "TubeCollection.update(self)\n\n        _Nodes is a dictionary of flow states for any tubes that exist\n        ";
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_13update(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_14TubeCollection_12update(((struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_12update(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update", 0);
  __Pyx_TraceCall("update (wrapper)", __pyx_f[0], 171, 0, __PYX_ERR(0, 171, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_14TubeCollection_update(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":179
 *         self._Nodes = dict(list1 + list2)
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         for Tube in self:
 *             if Tube.key1 == key or Tube.key2 == key:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_15__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_15__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_14TubeCollection_14__getitem__(((struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_14__getitem__(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_v_Tube = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_TraceCall("__getitem__", __pyx_f[0], 179, 0, __PYX_ERR(0, 179, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":180
 * 
 *     def __getitem__(self, key):
 *         for Tube in self:             # <<<<<<<<<<<<<<
 *             if Tube.key1 == key or Tube.key2 == key:
 *                 return Tube
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self))) {
    __pyx_t_1 = ((PyObject *)__pyx_v_self); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 180, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 180, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 180, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 180, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_Tube, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "PDSim/core/containers.pyx":181
 *     def __getitem__(self, key):
 *         for Tube in self:
 *             if Tube.key1 == key or Tube.key2 == key:             # <<<<<<<<<<<<<<
 *                 return Tube
 *         raise KeyError(key)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_Tube, __pyx_n_s_key1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_v_key, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_Tube, __pyx_n_s_key2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_6, __pyx_v_key, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_5) {

      /* "PDSim/core/containers.pyx":182
 *         for Tube in self:
 *             if Tube.key1 == key or Tube.key2 == key:
 *                 return Tube             # <<<<<<<<<<<<<<
 *         raise KeyError(key)
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_Tube);
      __pyx_r = __pyx_v_Tube;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "PDSim/core/containers.pyx":181
 *     def __getitem__(self, key):
 *         for Tube in self:
 *             if Tube.key1 == key or Tube.key2 == key:             # <<<<<<<<<<<<<<
 *                 return Tube
 *         raise KeyError(key)
 */
    }

    /* "PDSim/core/containers.pyx":180
 * 
 *     def __getitem__(self, key):
 *         for Tube in self:             # <<<<<<<<<<<<<<
 *             if Tube.key1 == key or Tube.key2 == key:
 *                 return Tube
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":183
 *             if Tube.key1 == key or Tube.key2 == key:
 *                 return Tube
 *         raise KeyError(key)             # <<<<<<<<<<<<<<
 * 
 * cdef class CVScore(object):
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 183, __pyx_L1_error)

  /* "PDSim/core/containers.pyx":179
 *         self._Nodes = dict(list1 + list2)
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         for Tube in self:
 *             if Tube.key1 == key or Tube.key2 == key:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Tube);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_14TubeCollection_16__reduce_cython__[] = "TubeCollection.__reduce_cython__(self)";
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_14TubeCollection_16__reduce_cython__(((struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_16__reduce_cython__(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.Tarray, self._Nodes, self.harray, self.parray)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Tarray));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->Tarray));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->Tarray));
  __Pyx_INCREF(__pyx_v_self->_Nodes);
  __Pyx_GIVEREF(__pyx_v_self->_Nodes);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self->_Nodes);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->harray));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->harray));
  PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_self->harray));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parray));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parray));
  PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_v_self->parray));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.Tarray, self._Nodes, self.harray, self.parray)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.Tarray, self._Nodes, self.harray, self.parray)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.Tarray is not None or self._Nodes is not None or self.harray is not None or self.parray is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.Tarray, self._Nodes, self.harray, self.parray)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.Tarray is not None or self._Nodes is not None or self.harray is not None or self.parray is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_TubeCollection, (type(self), 0x5c6cba0, None), state
 */
  /*else*/ {
    __pyx_t_2 = (((PyObject *)__pyx_v_self->Tarray) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (__pyx_v_self->_Nodes != ((PyObject*)Py_None));
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->harray) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->parray) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.Tarray is not None or self._Nodes is not None or self.harray is not None or self.parray is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_TubeCollection, (type(self), 0x5c6cba0, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.Tarray is not None or self._Nodes is not None or self.harray is not None or self.parray is not None
 *     if use_setstate:
 *         return __pyx_unpickle_TubeCollection, (type(self), 0x5c6cba0, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_TubeCollection, (type(self), 0x5c6cba0, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_TubeCollection); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_96914336);
    __Pyx_GIVEREF(__pyx_int_96914336);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_96914336);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.Tarray is not None or self._Nodes is not None or self.harray is not None or self.parray is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_TubeCollection, (type(self), 0x5c6cba0, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_TubeCollection, (type(self), 0x5c6cba0, None), state
 *     else:
 *         return __pyx_unpickle_TubeCollection, (type(self), 0x5c6cba0, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_TubeCollection__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_TubeCollection); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_96914336);
    __Pyx_GIVEREF(__pyx_int_96914336);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_96914336);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_6 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_TubeCollection, (type(self), 0x5c6cba0, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_TubeCollection__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_14TubeCollection_18__setstate_cython__[] = "TubeCollection.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5PDSim_4core_10containers_14TubeCollection_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_14TubeCollection_18__setstate_cython__(((struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_14TubeCollection_18__setstate_cython__(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 16, 0, __PYX_ERR(1, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_TubeCollection, (type(self), 0x5c6cba0, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_TubeCollection__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers___pyx_unpickle_TubeCollection__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_TubeCollection, (type(self), 0x5c6cba0, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_TubeCollection__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.TubeCollection.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":193
 *     """
 * 
 *     cdef build_all(self, int N):             # <<<<<<<<<<<<<<
 *         """
 *         Allocate the arrays, each the length of the number of CV in existence
 */

static PyObject *__pyx_f_5PDSim_4core_10containers_7CVScore_build_all(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, int __pyx_v_N) {
  PyObject *__pyx_v_array_name = NULL;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_arr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("build_all", 0);
  __Pyx_TraceCall("build_all", __pyx_f[0], 193, 0, __PYX_ERR(0, 193, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":197
 *         Allocate the arrays, each the length of the number of CV in existence
 *         """
 *         for array_name in self.array_list:             # <<<<<<<<<<<<<<
 *             arr = arraym()
 *             arr.set_size(N)
 */
  if (unlikely(__pyx_v_self->array_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 197, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->array_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 197, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_array_name, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "PDSim/core/containers.pyx":198
 *         """
 *         for array_name in self.array_list:
 *             arr = arraym()             # <<<<<<<<<<<<<<
 *             arr.set_size(N)
 *             setattr(self,array_name,arr)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5PDSim_4misc_9datatypes_arraym)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_arr, ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "PDSim/core/containers.pyx":199
 *         for array_name in self.array_list:
 *             arr = arraym()
 *             arr.set_size(N)             # <<<<<<<<<<<<<<
 *             setattr(self,array_name,arr)
 * 
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_arr->__pyx_vtab)->set_size(__pyx_v_arr, __pyx_v_N, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "PDSim/core/containers.pyx":200
 *             arr = arraym()
 *             arr.set_size(N)
 *             setattr(self,array_name,arr)             # <<<<<<<<<<<<<<
 * 
 *     cdef free_all(self):
 */
    __pyx_t_4 = PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_v_array_name, ((PyObject *)__pyx_v_arr)); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 200, __pyx_L1_error)

    /* "PDSim/core/containers.pyx":197
 *         Allocate the arrays, each the length of the number of CV in existence
 *         """
 *         for array_name in self.array_list:             # <<<<<<<<<<<<<<
 *             arr = arraym()
 *             arr.set_size(N)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":193
 *     """
 * 
 *     cdef build_all(self, int N):             # <<<<<<<<<<<<<<
 *         """
 *         Allocate the arrays, each the length of the number of CV in existence
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.build_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_array_name);
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":202
 *             setattr(self,array_name,arr)
 * 
 *     cdef free_all(self):             # <<<<<<<<<<<<<<
 *         """
 *         Free all the arrays allocated
 */

static PyObject *__pyx_f_5PDSim_4core_10containers_7CVScore_free_all(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_v_array_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("free_all", 0);
  __Pyx_TraceCall("free_all", __pyx_f[0], 202, 0, __PYX_ERR(0, 202, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":206
 *         Free all the arrays allocated
 *         """
 *         for array_name in self.array_list:             # <<<<<<<<<<<<<<
 *             if hasattr(self,array_name):
 *                 delattr(self,array_name)
 */
  if (unlikely(__pyx_v_self->array_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 206, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->array_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 206, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_array_name, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "PDSim/core/containers.pyx":207
 *         """
 *         for array_name in self.array_list:
 *             if hasattr(self,array_name):             # <<<<<<<<<<<<<<
 *                 delattr(self,array_name)
 * 
 */
    __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v_self), __pyx_v_array_name); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 207, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "PDSim/core/containers.pyx":208
 *         for array_name in self.array_list:
 *             if hasattr(self,array_name):
 *                 delattr(self,array_name)             # <<<<<<<<<<<<<<
 * 
 *     cpdef update_size(self, int N):
 */
      __pyx_t_6 = PyObject_DelAttr(((PyObject *)__pyx_v_self), __pyx_v_array_name); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 208, __pyx_L1_error)

      /* "PDSim/core/containers.pyx":207
 *         """
 *         for array_name in self.array_list:
 *             if hasattr(self,array_name):             # <<<<<<<<<<<<<<
 *                 delattr(self,array_name)
 * 
 */
    }

    /* "PDSim/core/containers.pyx":206
 *         Free all the arrays allocated
 *         """
 *         for array_name in self.array_list:             # <<<<<<<<<<<<<<
 *             if hasattr(self,array_name):
 *                 delattr(self,array_name)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":202
 *             setattr(self,array_name,arr)
 * 
 *     cdef free_all(self):             # <<<<<<<<<<<<<<
 *         """
 *         Free all the arrays allocated
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.free_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_array_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":210
 *                 delattr(self,array_name)
 * 
 *     cpdef update_size(self, int N):             # <<<<<<<<<<<<<<
 *         """
 *         Update the size of the arraym instances in this class
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1update_size(PyObject *__pyx_v_self, PyObject *__pyx_arg_N); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_7CVScore_update_size(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, int __pyx_v_N, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_size", 0);
  __Pyx_TraceCall("update_size", __pyx_f[0], 210, 0, __PYX_ERR(0, 210, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_7CVScore_1update_size)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_N); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 210, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 210, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":214
 *         Update the size of the arraym instances in this class
 *         """
 *         self.free_all()             # <<<<<<<<<<<<<<
 *         self.build_all(N)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_10containers_CVScore *)__pyx_v_self->__pyx_vtab)->free_all(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":215
 *         """
 *         self.free_all()
 *         self.build_all(N)             # <<<<<<<<<<<<<<
 * 
 *     cpdef copy(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_10containers_CVScore *)__pyx_v_self->__pyx_vtab)->build_all(__pyx_v_self, __pyx_v_N); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":210
 *                 delattr(self,array_name)
 * 
 *     cpdef update_size(self, int N):             # <<<<<<<<<<<<<<
 *         """
 *         Update the size of the arraym instances in this class
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.update_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1update_size(PyObject *__pyx_v_self, PyObject *__pyx_arg_N); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_7CVScore_update_size[] = "CVScore.update_size(self, int N)\n\n        Update the size of the arraym instances in this class\n        ";
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1update_size(PyObject *__pyx_v_self, PyObject *__pyx_arg_N) {
  int __pyx_v_N;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_size (wrapper)", 0);
  assert(__pyx_arg_N); {
    __pyx_v_N = __Pyx_PyInt_As_int(__pyx_arg_N); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 210, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.update_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_update_size(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((int)__pyx_v_N));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_update_size(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, int __pyx_v_N) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_size", 0);
  __Pyx_TraceCall("update_size (wrapper)", __pyx_f[0], 210, 0, __PYX_ERR(0, 210, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_7CVScore_update_size(__pyx_v_self, __pyx_v_N, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.update_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":217
 *         self.build_all(N)
 * 
 *     cpdef copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Make copies of all of the arraym instances in this class
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_3copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_7CVScore_copy(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_CVA = NULL;
  PyObject *__pyx_v_array_name = NULL;
  PyObject *__pyx_v_arr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);
  __Pyx_TraceCall("copy", __pyx_f[0], 217, 0, __PYX_ERR(0, 217, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_7CVScore_3copy)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":221
 *         Make copies of all of the arraym instances in this class
 *         """
 *         CVA = type(self)(self.T.N) #type(self) gets the derived class' type             # <<<<<<<<<<<<<<
 *         # Loop over the names of the arrays
 *         for array_name in self.array_list:
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->T->N); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
  __pyx_t_3 = ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))); __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_CVA = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":223
 *         CVA = type(self)(self.T.N) #type(self) gets the derived class' type
 *         # Loop over the names of the arrays
 *         for array_name in self.array_list:             # <<<<<<<<<<<<<<
 *             # Get the array from this class
 *             arr = getattr(self,array_name)
 */
  if (unlikely(__pyx_v_self->array_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 223, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->array_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 223, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_array_name, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "PDSim/core/containers.pyx":225
 *         for array_name in self.array_list:
 *             # Get the array from this class
 *             arr = getattr(self,array_name)             # <<<<<<<<<<<<<<
 *             # Put a copy of it into the new class
 *             setattr(CVA, array_name, <arraym>arr.copy())
 */
    __pyx_t_3 = __Pyx_GetAttr(((PyObject *)__pyx_v_self), __pyx_v_array_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_arr, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "PDSim/core/containers.pyx":227
 *             arr = getattr(self,array_name)
 *             # Put a copy of it into the new class
 *             setattr(CVA, array_name, <arraym>arr.copy())             # <<<<<<<<<<<<<<
 *         return CVA
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_arr, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = PyObject_SetAttr(__pyx_v_CVA, __pyx_v_array_name, __pyx_t_3); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "PDSim/core/containers.pyx":223
 *         CVA = type(self)(self.T.N) #type(self) gets the derived class' type
 *         # Loop over the names of the arrays
 *         for array_name in self.array_list:             # <<<<<<<<<<<<<<
 *             # Get the array from this class
 *             arr = getattr(self,array_name)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":228
 *             # Put a copy of it into the new class
 *             setattr(CVA, array_name, <arraym>arr.copy())
 *         return CVA             # <<<<<<<<<<<<<<
 * 
 *     cpdef calculate_flows(self, FlowPathCollection Flows):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_CVA);
  __pyx_r = __pyx_v_CVA;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":217
 *         self.build_all(N)
 * 
 *     cpdef copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Make copies of all of the arraym instances in this class
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_CVA);
  __Pyx_XDECREF(__pyx_v_array_name);
  __Pyx_XDECREF(__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_3copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_7CVScore_2copy[] = "CVScore.copy(self)\n\n        Make copies of all of the arraym instances in this class\n        ";
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_3copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_2copy(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_2copy(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);
  __Pyx_TraceCall("copy (wrapper)", __pyx_f[0], 217, 0, __PYX_ERR(0, 217, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_7CVScore_copy(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":230
 *         return CVA
 * 
 *     cpdef calculate_flows(self, FlowPathCollection Flows):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the flows between tubes and control volumes and sum up the
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_5calculate_flows(PyObject *__pyx_v_self, PyObject *__pyx_v_Flows); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_7CVScore_calculate_flows(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_Flows, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_flows", 0);
  __Pyx_TraceCall("calculate_flows", __pyx_f[0], 230, 0, __PYX_ERR(0, 230, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_calculate_flows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_7CVScore_5calculate_flows)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_Flows)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_Flows));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":257
 *         """
 * 
 *         Flows.calculate()             # <<<<<<<<<<<<<<
 *         Flows.sumterms(self.summerdT, self.summerdm)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPathCollection *)__pyx_v_Flows->__pyx_vtab)->calculate(__pyx_v_Flows, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":258
 * 
 *         Flows.calculate()
 *         Flows.sumterms(self.summerdT, self.summerdm)             # <<<<<<<<<<<<<<
 * 
 *     cpdef just_volumes(self, list CVs, double theta):
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->summerdT);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->summerdm);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPathCollection *)__pyx_v_Flows->__pyx_vtab)->sumterms(__pyx_v_Flows, ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1), ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_2), 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "PDSim/core/containers.pyx":230
 *         return CVA
 * 
 *     cpdef calculate_flows(self, FlowPathCollection Flows):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the flows between tubes and control volumes and sum up the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.calculate_flows", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_5calculate_flows(PyObject *__pyx_v_self, PyObject *__pyx_v_Flows); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_7CVScore_4calculate_flows[] = "CVScore.calculate_flows(self, FlowPathCollection Flows)\n\n        Calculate the flows between tubes and control volumes and sum up the\n        flow-related terms\n\n        Loads the arraym instances ``summerdT`` and ``summerdm`` of this class\n\n        These terms are defined by\n\n        .. math::\n\n            \\mathrm{summerdm} = \\sum  \\frac{\\dot m}{\\omega}\n\n        and\n\n        .. math::\n\n            \\mathrm{summerdT} = \\sum  \\frac{\\dot m h}{\\omega}\n\n        where the signs are dependent on whether the flow is into or out of the\n        given control volume\n\n        Parameters\n        ----------\n        Flows : :class:`FlowPathCollection <PDSim.flow.flow.FlowPathCollection>` instance\n        ";
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_5calculate_flows(PyObject *__pyx_v_self, PyObject *__pyx_v_Flows) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_flows (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Flows), __pyx_ptype_5PDSim_4flow_4flow_FlowPathCollection, 1, "Flows", 0))) __PYX_ERR(0, 230, __pyx_L1_error)
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_4calculate_flows(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *)__pyx_v_Flows));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_4calculate_flows(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *__pyx_v_Flows) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_flows", 0);
  __Pyx_TraceCall("calculate_flows (wrapper)", __pyx_f[0], 230, 0, __PYX_ERR(0, 230, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_7CVScore_calculate_flows(__pyx_v_self, __pyx_v_Flows, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.calculate_flows", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":260
 *         Flows.sumterms(self.summerdT, self.summerdm)
 * 
 *     cpdef just_volumes(self, list CVs, double theta):             # <<<<<<<<<<<<<<
 *         """
 *         Just calculate the volumes
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_7just_volumes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_7CVScore_just_volumes(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_CVs, double __pyx_v_theta, int __pyx_skip_dispatch) {
  int __pyx_v_N;
  int __pyx_v_iCV;
  struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_CV = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  double __pyx_t_12;
  double __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("just_volumes", 0);
  __Pyx_TraceCall("just_volumes", __pyx_f[0], 260, 0, __PYX_ERR(0, 260, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_just_volumes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_7CVScore_7just_volumes)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_theta); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 260, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_CVs, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_CVs, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 260, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (__pyx_t_5) {
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
          }
          __Pyx_INCREF(__pyx_v_CVs);
          __Pyx_GIVEREF(__pyx_v_CVs);
          PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_CVs);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":272
 *         """
 * 
 *         cdef int N = len(CVs), iCV             # <<<<<<<<<<<<<<
 * 
 *         for iCV in range(N):
 */
  if (unlikely(__pyx_v_CVs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 272, __pyx_L1_error)
  }
  __pyx_t_8 = PyList_GET_SIZE(__pyx_v_CVs); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 272, __pyx_L1_error)
  __pyx_v_N = __pyx_t_8;

  /* "PDSim/core/containers.pyx":274
 *         cdef int N = len(CVs), iCV
 * 
 *         for iCV in range(N):             # <<<<<<<<<<<<<<
 *             # Early-bind the control volume for speed
 *             CV = <ControlVolume>(CVs[iCV])
 */
  __pyx_t_6 = __pyx_v_N;
  __pyx_t_9 = __pyx_t_6;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_iCV = __pyx_t_10;

    /* "PDSim/core/containers.pyx":276
 *         for iCV in range(N):
 *             # Early-bind the control volume for speed
 *             CV = <ControlVolume>(CVs[iCV])             # <<<<<<<<<<<<<<
 * 
 *             # Calculate the volume and derivative of volume - does not depend on
 */
    if (unlikely(__pyx_v_CVs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 276, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_CVs, __pyx_v_iCV, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_CV, ((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "PDSim/core/containers.pyx":280
 *             # Calculate the volume and derivative of volume - does not depend on
 *             # any of the other state variables
 *             self.V.data[iCV], self.dV.data[iCV] = CV.V_dV(theta, **CV.V_dV_kwargs)             # <<<<<<<<<<<<<<
 * 
 * cdef class CVArrays(CVScore):
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_theta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    if (unlikely(__pyx_v_CV->V_dV_kwargs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
      __PYX_ERR(0, 280, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_v_CV->V_dV, __pyx_t_1, __pyx_v_CV->V_dV_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 280, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_11(__pyx_t_7); if (unlikely(!__pyx_t_1)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_4 = __pyx_t_11(__pyx_t_7); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_7), 2) < 0) __PYX_ERR(0, 280, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 280, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    (__pyx_v_self->V->data[__pyx_v_iCV]) = __pyx_t_12;
    (__pyx_v_self->dV->data[__pyx_v_iCV]) = __pyx_t_13;
  }

  /* "PDSim/core/containers.pyx":260
 *         Flows.sumterms(self.summerdT, self.summerdm)
 * 
 *     cpdef just_volumes(self, list CVs, double theta):             # <<<<<<<<<<<<<<
 *         """
 *         Just calculate the volumes
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.just_volumes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_CV);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_7just_volumes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_7CVScore_6just_volumes[] = "CVScore.just_volumes(self, list CVs, double theta)\n\n        Just calculate the volumes\n        for each control volume.\n        \n        Parameters\n        ----------\n        CVs : list of control volumes\n        theta : double\n            Crank angle [radians]\n        ";
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_7just_volumes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_CVs = 0;
  double __pyx_v_theta;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("just_volumes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_CVs,&__pyx_n_s_theta,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_CVs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("just_volumes", 1, 2, 2, 1); __PYX_ERR(0, 260, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "just_volumes") < 0)) __PYX_ERR(0, 260, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_CVs = ((PyObject*)values[0]);
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 260, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("just_volumes", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 260, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.just_volumes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_CVs), (&PyList_Type), 1, "CVs", 1))) __PYX_ERR(0, 260, __pyx_L1_error)
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_6just_volumes(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), __pyx_v_CVs, __pyx_v_theta);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_6just_volumes(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_CVs, double __pyx_v_theta) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("just_volumes", 0);
  __Pyx_TraceCall("just_volumes (wrapper)", __pyx_f[0], 260, 0, __PYX_ERR(0, 260, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_7CVScore_just_volumes(__pyx_v_self, __pyx_v_CVs, __pyx_v_theta, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.just_volumes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":52
 * 
 *     # Storage arrays that are always required
 *     cdef public arraym T,p,h,rho,V,dV,cp,cv,m,v,dpdT_constV,Q             # <<<<<<<<<<<<<<
 * 
 *     # Property derivative arrays
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1T___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_1T___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->T));
  __pyx_r = ((PyObject *)__pyx_v_self->T);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1T_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1T_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1T_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1T_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 52, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->T);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->T));
  __pyx_v_self->T = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.T.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1T_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1T_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1T_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1T_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->T);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->T));
  __pyx_v_self->T = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.T.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1p_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1p_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1p___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_1p___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->p));
  __pyx_r = ((PyObject *)__pyx_v_self->p);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.p.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1p_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1p_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1p_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1p_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 52, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->p);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->p));
  __pyx_v_self->p = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.p.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1p_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1p_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1p_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1p_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->p);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->p));
  __pyx_v_self->p = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.p.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1h_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1h_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1h___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_1h___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->h));
  __pyx_r = ((PyObject *)__pyx_v_self->h);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.h.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1h_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1h_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1h_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1h_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 52, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->h);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->h));
  __pyx_v_self->h = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.h.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1h_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1h_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1h_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1h_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->h);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->h));
  __pyx_v_self->h = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.h.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_3rho_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_3rho_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_3rho___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_3rho___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->rho));
  __pyx_r = ((PyObject *)__pyx_v_self->rho);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.rho.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_3rho_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_3rho_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_3rho_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_3rho_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 52, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rho);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rho));
  __pyx_v_self->rho = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.rho.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_3rho_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_3rho_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_3rho_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_3rho_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->rho);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rho));
  __pyx_v_self->rho = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.rho.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1V_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1V_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1V___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_1V___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->V));
  __pyx_r = ((PyObject *)__pyx_v_self->V);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.V.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1V_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1V_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1V_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1V_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 52, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->V);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->V));
  __pyx_v_self->V = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.V.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1V_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1V_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1V_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1V_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->V);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->V));
  __pyx_v_self->V = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.V.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_2dV_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_2dV_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_2dV___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_2dV___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->dV));
  __pyx_r = ((PyObject *)__pyx_v_self->dV);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.dV.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_2dV_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_2dV_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_2dV_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_2dV_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 52, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->dV);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->dV));
  __pyx_v_self->dV = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.dV.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_2dV_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_2dV_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_2dV_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_2dV_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->dV);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->dV));
  __pyx_v_self->dV = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.dV.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_2cp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_2cp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_2cp___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_2cp___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->cp));
  __pyx_r = ((PyObject *)__pyx_v_self->cp);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.cp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_2cp_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_2cp_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_2cp_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_2cp_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 52, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->cp);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->cp));
  __pyx_v_self->cp = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.cp.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_2cp_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_2cp_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_2cp_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_2cp_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->cp);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->cp));
  __pyx_v_self->cp = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.cp.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_2cv_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_2cv_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_2cv___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_2cv___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->cv));
  __pyx_r = ((PyObject *)__pyx_v_self->cv);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.cv.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_2cv_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_2cv_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_2cv_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_2cv_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 52, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->cv);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->cv));
  __pyx_v_self->cv = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.cv.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_2cv_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_2cv_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_2cv_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_2cv_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->cv);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->cv));
  __pyx_v_self->cv = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.cv.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1m_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1m_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1m___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_1m___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->m));
  __pyx_r = ((PyObject *)__pyx_v_self->m);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.m.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1m_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1m_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1m_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1m_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 52, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->m);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->m));
  __pyx_v_self->m = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.m.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1m_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1m_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1m_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1m_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->m);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->m));
  __pyx_v_self->m = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.m.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1v_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1v_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1v___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_1v___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->v));
  __pyx_r = ((PyObject *)__pyx_v_self->v);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.v.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1v_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1v_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1v_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1v_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 52, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->v);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->v));
  __pyx_v_self->v = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.v.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1v_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1v_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1v_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1v_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->v);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->v));
  __pyx_v_self->v = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.v.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_11dpdT_constV_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_11dpdT_constV_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_11dpdT_constV___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_11dpdT_constV___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->dpdT_constV));
  __pyx_r = ((PyObject *)__pyx_v_self->dpdT_constV);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.dpdT_constV.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_11dpdT_constV_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_11dpdT_constV_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_11dpdT_constV_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_11dpdT_constV_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 52, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->dpdT_constV);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->dpdT_constV));
  __pyx_v_self->dpdT_constV = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.dpdT_constV.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_11dpdT_constV_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_11dpdT_constV_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_11dpdT_constV_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_11dpdT_constV_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->dpdT_constV);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->dpdT_constV));
  __pyx_v_self->dpdT_constV = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.dpdT_constV.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1Q_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_1Q_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1Q___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_1Q___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Q));
  __pyx_r = ((PyObject *)__pyx_v_self->Q);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.Q.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1Q_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1Q_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1Q_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1Q_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 52, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->Q);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Q));
  __pyx_v_self->Q = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.Q.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1Q_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_1Q_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_1Q_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_1Q_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 52, 0, __PYX_ERR(2, 52, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->Q);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->Q));
  __pyx_v_self->Q = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.Q.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":55
 * 
 *     # Property derivative arrays
 *     cdef public arraym summerdm, summerdT, drhodtheta, dTdtheta, dmdtheta, property_derivs             # <<<<<<<<<<<<<<
 * 
 *     cpdef update_size(self, int N)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdm_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdm_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdm___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdm___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->summerdm));
  __pyx_r = ((PyObject *)__pyx_v_self->summerdm);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.summerdm.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdm_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdm_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdm_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdm_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 55, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->summerdm);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->summerdm));
  __pyx_v_self->summerdm = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.summerdm.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdm_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdm_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdm_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdm_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->summerdm);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->summerdm));
  __pyx_v_self->summerdm = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.summerdm.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdT___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdT___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->summerdT));
  __pyx_r = ((PyObject *)__pyx_v_self->summerdT);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.summerdT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdT_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdT_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdT_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdT_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 55, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->summerdT);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->summerdT));
  __pyx_v_self->summerdT = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.summerdT.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdT_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdT_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdT_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_8summerdT_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->summerdT);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->summerdT));
  __pyx_v_self->summerdT = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.summerdT.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_10drhodtheta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_10drhodtheta_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_10drhodtheta___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_10drhodtheta___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->drhodtheta));
  __pyx_r = ((PyObject *)__pyx_v_self->drhodtheta);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.drhodtheta.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_10drhodtheta_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_10drhodtheta_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_10drhodtheta_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_10drhodtheta_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 55, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->drhodtheta);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->drhodtheta));
  __pyx_v_self->drhodtheta = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.drhodtheta.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_10drhodtheta_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_10drhodtheta_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_10drhodtheta_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_10drhodtheta_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->drhodtheta);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->drhodtheta));
  __pyx_v_self->drhodtheta = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.drhodtheta.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_8dTdtheta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_8dTdtheta_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_8dTdtheta___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_8dTdtheta___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->dTdtheta));
  __pyx_r = ((PyObject *)__pyx_v_self->dTdtheta);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.dTdtheta.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_8dTdtheta_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_8dTdtheta_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_8dTdtheta_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_8dTdtheta_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 55, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->dTdtheta);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->dTdtheta));
  __pyx_v_self->dTdtheta = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.dTdtheta.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_8dTdtheta_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_8dTdtheta_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_8dTdtheta_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_8dTdtheta_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->dTdtheta);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->dTdtheta));
  __pyx_v_self->dTdtheta = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.dTdtheta.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_8dmdtheta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_8dmdtheta_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_8dmdtheta___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_8dmdtheta___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->dmdtheta));
  __pyx_r = ((PyObject *)__pyx_v_self->dmdtheta);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.dmdtheta.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_8dmdtheta_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_8dmdtheta_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_8dmdtheta_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_8dmdtheta_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 55, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->dmdtheta);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->dmdtheta));
  __pyx_v_self->dmdtheta = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.dmdtheta.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_8dmdtheta_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_8dmdtheta_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_8dmdtheta_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_8dmdtheta_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->dmdtheta);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->dmdtheta));
  __pyx_v_self->dmdtheta = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.dmdtheta.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_15property_derivs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_15property_derivs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_15property_derivs___get__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_15property_derivs___get__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->property_derivs));
  __pyx_r = ((PyObject *)__pyx_v_self->property_derivs);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.property_derivs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_15property_derivs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_15property_derivs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_15property_derivs_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_15property_derivs_2__set__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(2, 55, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->property_derivs);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->property_derivs));
  __pyx_v_self->property_derivs = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.property_derivs.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_15property_derivs_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_7CVScore_15property_derivs_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_15property_derivs_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_7CVScore_15property_derivs_4__del__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 55, 0, __PYX_ERR(2, 55, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->property_derivs);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->property_derivs));
  __pyx_v_self->property_derivs = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.property_derivs.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_7CVScore_8__reduce_cython__[] = "CVScore.__reduce_cython__(self)";
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_8__reduce_cython__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_8__reduce_cython__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.N, self.Q, self.T, self.V, self.array_list, self.cp, self.cv, self.dTdtheta, self.dV, self.dmdtheta, self.dpdT_constV, self.drhodtheta, self.h, self.m, self.omega, self.p, self.property_derivs, self.rho, self.state_vars, self.summerdT, self.summerdm, self.v)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->omega); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->state_vars); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(22); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->Q));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->Q));
  PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_self->Q));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->T));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->T));
  PyTuple_SET_ITEM(__pyx_t_4, 2, ((PyObject *)__pyx_v_self->T));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->V));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->V));
  PyTuple_SET_ITEM(__pyx_t_4, 3, ((PyObject *)__pyx_v_self->V));
  __Pyx_INCREF(__pyx_v_self->array_list);
  __Pyx_GIVEREF(__pyx_v_self->array_list);
  PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_v_self->array_list);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->cp));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->cp));
  PyTuple_SET_ITEM(__pyx_t_4, 5, ((PyObject *)__pyx_v_self->cp));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->cv));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->cv));
  PyTuple_SET_ITEM(__pyx_t_4, 6, ((PyObject *)__pyx_v_self->cv));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->dTdtheta));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->dTdtheta));
  PyTuple_SET_ITEM(__pyx_t_4, 7, ((PyObject *)__pyx_v_self->dTdtheta));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->dV));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->dV));
  PyTuple_SET_ITEM(__pyx_t_4, 8, ((PyObject *)__pyx_v_self->dV));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->dmdtheta));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->dmdtheta));
  PyTuple_SET_ITEM(__pyx_t_4, 9, ((PyObject *)__pyx_v_self->dmdtheta));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->dpdT_constV));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->dpdT_constV));
  PyTuple_SET_ITEM(__pyx_t_4, 10, ((PyObject *)__pyx_v_self->dpdT_constV));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->drhodtheta));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->drhodtheta));
  PyTuple_SET_ITEM(__pyx_t_4, 11, ((PyObject *)__pyx_v_self->drhodtheta));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->h));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->h));
  PyTuple_SET_ITEM(__pyx_t_4, 12, ((PyObject *)__pyx_v_self->h));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->m));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->m));
  PyTuple_SET_ITEM(__pyx_t_4, 13, ((PyObject *)__pyx_v_self->m));
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 14, __pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->p));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->p));
  PyTuple_SET_ITEM(__pyx_t_4, 15, ((PyObject *)__pyx_v_self->p));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->property_derivs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->property_derivs));
  PyTuple_SET_ITEM(__pyx_t_4, 16, ((PyObject *)__pyx_v_self->property_derivs));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->rho));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->rho));
  PyTuple_SET_ITEM(__pyx_t_4, 17, ((PyObject *)__pyx_v_self->rho));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 18, __pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->summerdT));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->summerdT));
  PyTuple_SET_ITEM(__pyx_t_4, 19, ((PyObject *)__pyx_v_self->summerdT));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->summerdm));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->summerdm));
  PyTuple_SET_ITEM(__pyx_t_4, 20, ((PyObject *)__pyx_v_self->summerdm));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->v));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->v));
  PyTuple_SET_ITEM(__pyx_t_4, 21, ((PyObject *)__pyx_v_self->v));
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.N, self.Q, self.T, self.V, self.array_list, self.cp, self.cv, self.dTdtheta, self.dV, self.dmdtheta, self.dpdT_constV, self.drhodtheta, self.h, self.m, self.omega, self.p, self.property_derivs, self.rho, self.state_vars, self.summerdT, self.summerdm, self.v)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self.N, self.Q, self.T, self.V, self.array_list, self.cp, self.cv, self.dTdtheta, self.dV, self.dmdtheta, self.dpdT_constV, self.drhodtheta, self.h, self.m, self.omega, self.p, self.property_derivs, self.rho, self.state_vars, self.summerdT, self.summerdm, self.v)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.Q is not None or self.T is not None or self.V is not None or self.array_list is not None or self.cp is not None or self.cv is not None or self.dTdtheta is not None or self.dV is not None or self.dmdtheta is not None or self.dpdT_constV is not None or self.drhodtheta is not None or self.h is not None or self.m is not None or self.p is not None or self.property_derivs is not None or self.rho is not None or self.summerdT is not None or self.summerdm is not None or self.v is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.N, self.Q, self.T, self.V, self.array_list, self.cp, self.cv, self.dTdtheta, self.dV, self.dmdtheta, self.dpdT_constV, self.drhodtheta, self.h, self.m, self.omega, self.p, self.property_derivs, self.rho, self.state_vars, self.summerdT, self.summerdm, self.v)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.Q is not None or self.T is not None or self.V is not None or self.array_list is not None or self.cp is not None or self.cv is not None or self.dTdtheta is not None or self.dV is not None or self.dmdtheta is not None or self.dpdT_constV is not None or self.drhodtheta is not None or self.h is not None or self.m is not None or self.p is not None or self.property_derivs is not None or self.rho is not None or self.summerdT is not None or self.summerdm is not None or self.v is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_CVScore, (type(self), 0xc130e55, None), state
 */
  /*else*/ {
    __pyx_t_5 = (((PyObject *)__pyx_v_self->Q) != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (((PyObject *)__pyx_v_self->T) != Py_None);
    __pyx_t_5 = (__pyx_t_7 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->V) != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (__pyx_v_self->array_list != ((PyObject*)Py_None));
    __pyx_t_5 = (__pyx_t_7 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->cp) != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (((PyObject *)__pyx_v_self->cv) != Py_None);
    __pyx_t_5 = (__pyx_t_7 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->dTdtheta) != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (((PyObject *)__pyx_v_self->dV) != Py_None);
    __pyx_t_5 = (__pyx_t_7 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->dmdtheta) != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (((PyObject *)__pyx_v_self->dpdT_constV) != Py_None);
    __pyx_t_5 = (__pyx_t_7 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->drhodtheta) != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (((PyObject *)__pyx_v_self->h) != Py_None);
    __pyx_t_5 = (__pyx_t_7 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->m) != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (((PyObject *)__pyx_v_self->p) != Py_None);
    __pyx_t_5 = (__pyx_t_7 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->property_derivs) != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (((PyObject *)__pyx_v_self->rho) != Py_None);
    __pyx_t_5 = (__pyx_t_7 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->summerdT) != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (((PyObject *)__pyx_v_self->summerdm) != Py_None);
    __pyx_t_5 = (__pyx_t_7 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->v) != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_6;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.Q is not None or self.T is not None or self.V is not None or self.array_list is not None or self.cp is not None or self.cv is not None or self.dTdtheta is not None or self.dV is not None or self.dmdtheta is not None or self.dpdT_constV is not None or self.drhodtheta is not None or self.h is not None or self.m is not None or self.p is not None or self.property_derivs is not None or self.rho is not None or self.summerdT is not None or self.summerdm is not None or self.v is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_CVScore, (type(self), 0xc130e55, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = self.Q is not None or self.T is not None or self.V is not None or self.array_list is not None or self.cp is not None or self.cv is not None or self.dTdtheta is not None or self.dV is not None or self.dmdtheta is not None or self.dpdT_constV is not None or self.drhodtheta is not None or self.h is not None or self.m is not None or self.p is not None or self.property_derivs is not None or self.rho is not None or self.summerdT is not None or self.summerdm is not None or self.v is not None
 *     if use_setstate:
 *         return __pyx_unpickle_CVScore, (type(self), 0xc130e55, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_CVScore, (type(self), 0xc130e55, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_CVScore); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_202575445);
    __Pyx_GIVEREF(__pyx_int_202575445);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_202575445);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.Q is not None or self.T is not None or self.V is not None or self.array_list is not None or self.cp is not None or self.cv is not None or self.dTdtheta is not None or self.dV is not None or self.dmdtheta is not None or self.dpdT_constV is not None or self.drhodtheta is not None or self.h is not None or self.m is not None or self.p is not None or self.property_derivs is not None or self.rho is not None or self.summerdT is not None or self.summerdm is not None or self.v is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_CVScore, (type(self), 0xc130e55, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_CVScore, (type(self), 0xc130e55, None), state
 *     else:
 *         return __pyx_unpickle_CVScore, (type(self), 0xc130e55, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_CVScore__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_CVScore); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_202575445);
    __Pyx_GIVEREF(__pyx_int_202575445);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_202575445);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_CVScore, (type(self), 0xc130e55, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_CVScore__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_7CVScore_10__setstate_cython__[] = "CVScore.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5PDSim_4core_10containers_7CVScore_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_7CVScore_10__setstate_cython__(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_7CVScore_10__setstate_cython__(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 16, 0, __PYX_ERR(1, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_CVScore, (type(self), 0xc130e55, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_CVScore__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers___pyx_unpickle_CVScore__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_CVScore, (type(self), 0xc130e55, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_CVScore__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":288
 *     """
 * 
 *     def __cinit__(self, int N):             # <<<<<<<<<<<<<<
 *         self.array_list = ['T','p','h','rho','V','dV','cp','cv','m',
 *                            'dpdT_constV','Q','drhodtheta',
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_8CVArrays_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_8CVArrays_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED int __pyx_v_N;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_N,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 288, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_N = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 288, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVArrays.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_8CVArrays___cinit__(((struct __pyx_obj_5PDSim_4core_10containers_CVArrays *)__pyx_v_self), __pyx_v_N);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_8CVArrays___cinit__(struct __pyx_obj_5PDSim_4core_10containers_CVArrays *__pyx_v_self, CYTHON_UNUSED int __pyx_v_N) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 288, 0, __PYX_ERR(0, 288, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":289
 * 
 *     def __cinit__(self, int N):
 *         self.array_list = ['T','p','h','rho','V','dV','cp','cv','m',             # <<<<<<<<<<<<<<
 *                            'dpdT_constV','Q','drhodtheta',
 *                            'dTdtheta', 'dmdtheta', 'summerdm',
 */
  __pyx_t_1 = PyList_New(17); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_T);
  __Pyx_GIVEREF(__pyx_n_s_T);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_T);
  __Pyx_INCREF(__pyx_n_s_p);
  __Pyx_GIVEREF(__pyx_n_s_p);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_p);
  __Pyx_INCREF(__pyx_n_s_h);
  __Pyx_GIVEREF(__pyx_n_s_h);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_h);
  __Pyx_INCREF(__pyx_n_s_rho);
  __Pyx_GIVEREF(__pyx_n_s_rho);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_rho);
  __Pyx_INCREF(__pyx_n_s_V);
  __Pyx_GIVEREF(__pyx_n_s_V);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_V);
  __Pyx_INCREF(__pyx_n_s_dV);
  __Pyx_GIVEREF(__pyx_n_s_dV);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_dV);
  __Pyx_INCREF(__pyx_n_s_cp);
  __Pyx_GIVEREF(__pyx_n_s_cp);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_cp);
  __Pyx_INCREF(__pyx_n_s_cv);
  __Pyx_GIVEREF(__pyx_n_s_cv);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_cv);
  __Pyx_INCREF(__pyx_n_s_m);
  __Pyx_GIVEREF(__pyx_n_s_m);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_m);
  __Pyx_INCREF(__pyx_n_s_dpdT_constV);
  __Pyx_GIVEREF(__pyx_n_s_dpdT_constV);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_s_dpdT_constV);
  __Pyx_INCREF(__pyx_n_s_Q);
  __Pyx_GIVEREF(__pyx_n_s_Q);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_s_Q);
  __Pyx_INCREF(__pyx_n_s_drhodtheta);
  __Pyx_GIVEREF(__pyx_n_s_drhodtheta);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_s_drhodtheta);
  __Pyx_INCREF(__pyx_n_s_dTdtheta);
  __Pyx_GIVEREF(__pyx_n_s_dTdtheta);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_n_s_dTdtheta);
  __Pyx_INCREF(__pyx_n_s_dmdtheta);
  __Pyx_GIVEREF(__pyx_n_s_dmdtheta);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_n_s_dmdtheta);
  __Pyx_INCREF(__pyx_n_s_summerdm);
  __Pyx_GIVEREF(__pyx_n_s_summerdm);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_n_s_summerdm);
  __Pyx_INCREF(__pyx_n_s_summerdT);
  __Pyx_GIVEREF(__pyx_n_s_summerdT);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_n_s_summerdT);
  __Pyx_INCREF(__pyx_n_s_property_derivs);
  __Pyx_GIVEREF(__pyx_n_s_property_derivs);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_n_s_property_derivs);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.array_list);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.array_list);
  __pyx_v_self->__pyx_base.array_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":288
 *     """
 * 
 *     def __cinit__(self, int N):             # <<<<<<<<<<<<<<
 *         self.array_list = ['T','p','h','rho','V','dV','cp','cv','m',
 *                            'dpdT_constV','Q','drhodtheta',
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVArrays.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":295
 * 
 *     @cython.cdivision(True)
 *     cpdef properties_and_volumes(self, list CVs, double theta, int state_vars, arraym x):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate all the required thermodynamic properties as well as the volumes
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_8CVArrays_3properties_and_volumes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_8CVArrays_properties_and_volumes(struct __pyx_obj_5PDSim_4core_10containers_CVArrays *__pyx_v_self, PyObject *__pyx_v_CVs, double __pyx_v_theta, int __pyx_v_state_vars, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_x, int __pyx_skip_dispatch) {
  struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_State = 0;
  int __pyx_v_N;
  int __pyx_v_iCV;
  int __pyx_v_i;
  long __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  long __pyx_t_12;
  long __pyx_t_13;
  long __pyx_t_14;
  double __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("properties_and_volumes", 0);
  __Pyx_TraceCall("properties_and_volumes", __pyx_f[0], 295, 0, __PYX_ERR(0, 295, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_properties_and_volumes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_8CVArrays_3properties_and_volumes)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_theta); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_state_vars); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[5] = {__pyx_t_6, __pyx_v_CVs, __pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_x)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[5] = {__pyx_t_6, __pyx_v_CVs, __pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_x)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 295, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_INCREF(__pyx_v_CVs);
          __Pyx_GIVEREF(__pyx_v_CVs);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_CVs);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_t_4);
          __Pyx_INCREF(((PyObject *)__pyx_v_x));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_x));
          PyTuple_SET_ITEM(__pyx_t_8, 3+__pyx_t_7, ((PyObject *)__pyx_v_x));
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":311
 *         """
 *         cdef StateClass State
 *         cdef int N = len(CVs)             # <<<<<<<<<<<<<<
 *         cdef int iCV, iVar, i
 * 
 */
  if (unlikely(__pyx_v_CVs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 311, __pyx_L1_error)
  }
  __pyx_t_9 = PyList_GET_SIZE(__pyx_v_CVs); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 311, __pyx_L1_error)
  __pyx_v_N = __pyx_t_9;

  /* "PDSim/core/containers.pyx":315
 * 
 *         # Calculate the volumes
 *         self.just_volumes(CVs,theta)             # <<<<<<<<<<<<<<
 * 
 *         # Split the state variable array into chunks
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_10containers_CVArrays *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.just_volumes(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v_self), __pyx_v_CVs, __pyx_v_theta, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":318
 * 
 *         # Split the state variable array into chunks
 *         for i in range(N):             # <<<<<<<<<<<<<<
 *             self.T.data[i] = x.data[i]
 * 
 */
  __pyx_t_7 = __pyx_v_N;
  __pyx_t_10 = __pyx_t_7;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "PDSim/core/containers.pyx":319
 *         # Split the state variable array into chunks
 *         for i in range(N):
 *             self.T.data[i] = x.data[i]             # <<<<<<<<<<<<<<
 * 
 *         if state_vars == STATE_VARS_TM:
 */
    (__pyx_v_self->__pyx_base.T->data[__pyx_v_i]) = (__pyx_v_x->data[__pyx_v_i]);
  }

  /* "PDSim/core/containers.pyx":321
 *             self.T.data[i] = x.data[i]
 * 
 *         if state_vars == STATE_VARS_TM:             # <<<<<<<<<<<<<<
 *             i = 0
 *             for j in xrange(N, 2*N):
 */
  switch (__pyx_v_state_vars) {
    case STATE_VARS_TM:

    /* "PDSim/core/containers.pyx":322
 * 
 *         if state_vars == STATE_VARS_TM:
 *             i = 0             # <<<<<<<<<<<<<<
 *             for j in xrange(N, 2*N):
 *                 self.m.data[i] = x.data[j]
 */
    __pyx_v_i = 0;

    /* "PDSim/core/containers.pyx":323
 *         if state_vars == STATE_VARS_TM:
 *             i = 0
 *             for j in xrange(N, 2*N):             # <<<<<<<<<<<<<<
 *                 self.m.data[i] = x.data[j]
 *                 i += 1
 */
    __pyx_t_12 = (2 * __pyx_v_N);
    __pyx_t_13 = __pyx_t_12;
    for (__pyx_t_14 = __pyx_v_N; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
      __pyx_v_j = __pyx_t_14;

      /* "PDSim/core/containers.pyx":324
 *             i = 0
 *             for j in xrange(N, 2*N):
 *                 self.m.data[i] = x.data[j]             # <<<<<<<<<<<<<<
 *                 i += 1
 *             for iCV in range(N):
 */
      (__pyx_v_self->__pyx_base.m->data[__pyx_v_i]) = (__pyx_v_x->data[__pyx_v_j]);

      /* "PDSim/core/containers.pyx":325
 *             for j in xrange(N, 2*N):
 *                 self.m.data[i] = x.data[j]
 *                 i += 1             # <<<<<<<<<<<<<<
 *             for iCV in range(N):
 *                 self.rho.data[iCV] = self.m.data[iCV]/self.V.data[iCV]
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "PDSim/core/containers.pyx":326
 *                 self.m.data[i] = x.data[j]
 *                 i += 1
 *             for iCV in range(N):             # <<<<<<<<<<<<<<
 *                 self.rho.data[iCV] = self.m.data[iCV]/self.V.data[iCV]
 * 
 */
    __pyx_t_7 = __pyx_v_N;
    __pyx_t_10 = __pyx_t_7;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_iCV = __pyx_t_11;

      /* "PDSim/core/containers.pyx":327
 *                 i += 1
 *             for iCV in range(N):
 *                 self.rho.data[iCV] = self.m.data[iCV]/self.V.data[iCV]             # <<<<<<<<<<<<<<
 * 
 *         elif state_vars == STATE_VARS_TD:
 */
      (__pyx_v_self->__pyx_base.rho->data[__pyx_v_iCV]) = ((__pyx_v_self->__pyx_base.m->data[__pyx_v_iCV]) / (__pyx_v_self->__pyx_base.V->data[__pyx_v_iCV]));
    }

    /* "PDSim/core/containers.pyx":321
 *             self.T.data[i] = x.data[i]
 * 
 *         if state_vars == STATE_VARS_TM:             # <<<<<<<<<<<<<<
 *             i = 0
 *             for j in xrange(N, 2*N):
 */
    break;
    case STATE_VARS_TD:

    /* "PDSim/core/containers.pyx":330
 * 
 *         elif state_vars == STATE_VARS_TD:
 *             i = 0             # <<<<<<<<<<<<<<
 *             for j in xrange(N, 2*N):
 *                 self.rho.data[i] = x.data[j]
 */
    __pyx_v_i = 0;

    /* "PDSim/core/containers.pyx":331
 *         elif state_vars == STATE_VARS_TD:
 *             i = 0
 *             for j in xrange(N, 2*N):             # <<<<<<<<<<<<<<
 *                 self.rho.data[i] = x.data[j]
 *                 i += 1
 */
    __pyx_t_12 = (2 * __pyx_v_N);
    __pyx_t_13 = __pyx_t_12;
    for (__pyx_t_14 = __pyx_v_N; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
      __pyx_v_j = __pyx_t_14;

      /* "PDSim/core/containers.pyx":332
 *             i = 0
 *             for j in xrange(N, 2*N):
 *                 self.rho.data[i] = x.data[j]             # <<<<<<<<<<<<<<
 *                 i += 1
 *             for iCV in range(N):
 */
      (__pyx_v_self->__pyx_base.rho->data[__pyx_v_i]) = (__pyx_v_x->data[__pyx_v_j]);

      /* "PDSim/core/containers.pyx":333
 *             for j in xrange(N, 2*N):
 *                 self.rho.data[i] = x.data[j]
 *                 i += 1             # <<<<<<<<<<<<<<
 *             for iCV in range(N):
 *                 self.m.data[iCV] = self.rho.data[iCV]*self.V.data[iCV]
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "PDSim/core/containers.pyx":334
 *                 self.rho.data[i] = x.data[j]
 *                 i += 1
 *             for iCV in range(N):             # <<<<<<<<<<<<<<
 *                 self.m.data[iCV] = self.rho.data[iCV]*self.V.data[iCV]
 * 
 */
    __pyx_t_7 = __pyx_v_N;
    __pyx_t_10 = __pyx_t_7;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_iCV = __pyx_t_11;

      /* "PDSim/core/containers.pyx":335
 *                 i += 1
 *             for iCV in range(N):
 *                 self.m.data[iCV] = self.rho.data[iCV]*self.V.data[iCV]             # <<<<<<<<<<<<<<
 * 
 *         for iCV in range(N):
 */
      (__pyx_v_self->__pyx_base.m->data[__pyx_v_iCV]) = ((__pyx_v_self->__pyx_base.rho->data[__pyx_v_iCV]) * (__pyx_v_self->__pyx_base.V->data[__pyx_v_iCV]));
    }

    /* "PDSim/core/containers.pyx":329
 *                 self.rho.data[iCV] = self.m.data[iCV]/self.V.data[iCV]
 * 
 *         elif state_vars == STATE_VARS_TD:             # <<<<<<<<<<<<<<
 *             i = 0
 *             for j in xrange(N, 2*N):
 */
    break;
    default: break;
  }

  /* "PDSim/core/containers.pyx":337
 *                 self.m.data[iCV] = self.rho.data[iCV]*self.V.data[iCV]
 * 
 *         for iCV in range(N):             # <<<<<<<<<<<<<<
 *             # Early-bind the State for speed
 *             State = (<ControlVolume>(CVs[iCV])).State
 */
  __pyx_t_7 = __pyx_v_N;
  __pyx_t_10 = __pyx_t_7;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_iCV = __pyx_t_11;

    /* "PDSim/core/containers.pyx":339
 *         for iCV in range(N):
 *             # Early-bind the State for speed
 *             State = (<ControlVolume>(CVs[iCV])).State             # <<<<<<<<<<<<<<
 *             State.update_Trho(self.T.data[iCV], self.rho.data[iCV])
 * 
 */
    if (unlikely(__pyx_v_CVs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 339, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_CVs, __pyx_v_iCV, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = ((PyObject *)((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_t_1)->State);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_State, ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "PDSim/core/containers.pyx":340
 *             # Early-bind the State for speed
 *             State = (<ControlVolume>(CVs[iCV])).State
 *             State.update_Trho(self.T.data[iCV], self.rho.data[iCV])             # <<<<<<<<<<<<<<
 * 
 *             self.p.data[iCV] = State.get_p()
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_State->__pyx_vtab)->update_Trho(__pyx_v_State, (__pyx_v_self->__pyx_base.T->data[__pyx_v_iCV]), (__pyx_v_self->__pyx_base.rho->data[__pyx_v_iCV]), 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "PDSim/core/containers.pyx":342
 *             State.update_Trho(self.T.data[iCV], self.rho.data[iCV])
 * 
 *             self.p.data[iCV] = State.get_p()             # <<<<<<<<<<<<<<
 *             self.h.data[iCV] = State.get_h()
 *             self.cp.data[iCV] = State.get_cp()
 */
    __pyx_t_15 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_State->__pyx_vtab)->get_p(__pyx_v_State, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 342, __pyx_L1_error)
    (__pyx_v_self->__pyx_base.p->data[__pyx_v_iCV]) = __pyx_t_15;

    /* "PDSim/core/containers.pyx":343
 * 
 *             self.p.data[iCV] = State.get_p()
 *             self.h.data[iCV] = State.get_h()             # <<<<<<<<<<<<<<
 *             self.cp.data[iCV] = State.get_cp()
 *             self.cv.data[iCV] = State.get_cv()
 */
    __pyx_t_15 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_State->__pyx_vtab)->get_h(__pyx_v_State, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L1_error)
    (__pyx_v_self->__pyx_base.h->data[__pyx_v_iCV]) = __pyx_t_15;

    /* "PDSim/core/containers.pyx":344
 *             self.p.data[iCV] = State.get_p()
 *             self.h.data[iCV] = State.get_h()
 *             self.cp.data[iCV] = State.get_cp()             # <<<<<<<<<<<<<<
 *             self.cv.data[iCV] = State.get_cv()
 *             self.dpdT_constV.data[iCV] = State.get_dpdT()
 */
    __pyx_t_15 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_State->__pyx_vtab)->get_cp(__pyx_v_State, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 344, __pyx_L1_error)
    (__pyx_v_self->__pyx_base.cp->data[__pyx_v_iCV]) = __pyx_t_15;

    /* "PDSim/core/containers.pyx":345
 *             self.h.data[iCV] = State.get_h()
 *             self.cp.data[iCV] = State.get_cp()
 *             self.cv.data[iCV] = State.get_cv()             # <<<<<<<<<<<<<<
 *             self.dpdT_constV.data[iCV] = State.get_dpdT()
 * 
 */
    __pyx_t_15 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_State->__pyx_vtab)->get_cv(__pyx_v_State, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L1_error)
    (__pyx_v_self->__pyx_base.cv->data[__pyx_v_iCV]) = __pyx_t_15;

    /* "PDSim/core/containers.pyx":346
 *             self.cp.data[iCV] = State.get_cp()
 *             self.cv.data[iCV] = State.get_cv()
 *             self.dpdT_constV.data[iCV] = State.get_dpdT()             # <<<<<<<<<<<<<<
 * 
 *         self.N = N
 */
    __pyx_t_15 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_State->__pyx_vtab)->get_dpdT(__pyx_v_State, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L1_error)
    (__pyx_v_self->__pyx_base.dpdT_constV->data[__pyx_v_iCV]) = __pyx_t_15;
  }

  /* "PDSim/core/containers.pyx":348
 *             self.dpdT_constV.data[iCV] = State.get_dpdT()
 * 
 *         self.N = N             # <<<<<<<<<<<<<<
 *         self.state_vars = state_vars
 * 
 */
  __pyx_v_self->__pyx_base.N = __pyx_v_N;

  /* "PDSim/core/containers.pyx":349
 * 
 *         self.N = N
 *         self.state_vars = state_vars             # <<<<<<<<<<<<<<
 * 
 *     @cython.cdivision(True)
 */
  __pyx_v_self->__pyx_base.state_vars = __pyx_v_state_vars;

  /* "PDSim/core/containers.pyx":295
 * 
 *     @cython.cdivision(True)
 *     cpdef properties_and_volumes(self, list CVs, double theta, int state_vars, arraym x):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate all the required thermodynamic properties as well as the volumes
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("PDSim.core.containers.CVArrays.properties_and_volumes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_State);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_8CVArrays_3properties_and_volumes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_8CVArrays_2properties_and_volumes[] = "CVArrays.properties_and_volumes(self, list CVs, double theta, int state_vars, arraym x)\n\n        Calculate all the required thermodynamic properties as well as the volumes\n        for each control volume.\n        \n        Parameters\n        ----------\n        CVs : list of control volumes\n        theta : double\n            Crank angle [radians]\n        state_vars : int\n            Flag for the set of input variables - one of STATE_VARS_TM or STATE_VARS_TD defined in this module\n        x : :class:`arraym <PDSim.misc.datatypes.arraym>` instance\n            List of state variables corresponding to the state_vars flag\n        ";
static PyObject *__pyx_pw_5PDSim_4core_10containers_8CVArrays_3properties_and_volumes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_CVs = 0;
  double __pyx_v_theta;
  int __pyx_v_state_vars;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_x = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("properties_and_volumes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_CVs,&__pyx_n_s_theta,&__pyx_n_s_state_vars,&__pyx_n_s_x,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_CVs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("properties_and_volumes", 1, 4, 4, 1); __PYX_ERR(0, 295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_state_vars)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("properties_and_volumes", 1, 4, 4, 2); __PYX_ERR(0, 295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("properties_and_volumes", 1, 4, 4, 3); __PYX_ERR(0, 295, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "properties_and_volumes") < 0)) __PYX_ERR(0, 295, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_CVs = ((PyObject*)values[0]);
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L3_error)
    __pyx_v_state_vars = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_state_vars == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L3_error)
    __pyx_v_x = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("properties_and_volumes", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 295, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVArrays.properties_and_volumes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_CVs), (&PyList_Type), 1, "CVs", 1))) __PYX_ERR(0, 295, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_5PDSim_4misc_9datatypes_arraym, 1, "x", 0))) __PYX_ERR(0, 295, __pyx_L1_error)
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_8CVArrays_2properties_and_volumes(((struct __pyx_obj_5PDSim_4core_10containers_CVArrays *)__pyx_v_self), __pyx_v_CVs, __pyx_v_theta, __pyx_v_state_vars, __pyx_v_x);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_8CVArrays_2properties_and_volumes(struct __pyx_obj_5PDSim_4core_10containers_CVArrays *__pyx_v_self, PyObject *__pyx_v_CVs, double __pyx_v_theta, int __pyx_v_state_vars, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("properties_and_volumes", 0);
  __Pyx_TraceCall("properties_and_volumes (wrapper)", __pyx_f[0], 295, 0, __PYX_ERR(0, 295, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_8CVArrays_properties_and_volumes(__pyx_v_self, __pyx_v_CVs, __pyx_v_theta, __pyx_v_state_vars, __pyx_v_x, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVArrays.properties_and_volumes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":352
 * 
 *     @cython.cdivision(True)
 *     cpdef calculate_derivs(self, double omega, bint has_liquid):             # <<<<<<<<<<<<<<
 * 
 *         cdef double m,T,cv,dV,V,v,summerdm,summerdT
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_8CVArrays_5calculate_derivs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_8CVArrays_calculate_derivs(struct __pyx_obj_5PDSim_4core_10containers_CVArrays *__pyx_v_self, double __pyx_v_omega, CYTHON_UNUSED int __pyx_v_has_liquid, int __pyx_skip_dispatch) {
  double __pyx_v_m;
  double __pyx_v_T;
  double __pyx_v_cv;
  double __pyx_v_dV;
  double __pyx_v_V;
  double __pyx_v_summerdT;
  int __pyx_v_i;
  double __pyx_v_h;
  double __pyx_v_Q;
  double __pyx_v_rho;
  double __pyx_v_dpdT;
  double __pyx_v_dmdtheta;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_derivs", 0);
  __Pyx_TraceCall("calculate_derivs", __pyx_f[0], 352, 0, __PYX_ERR(0, 352, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_calculate_derivs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_8CVArrays_5calculate_derivs)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_omega); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_has_liquid); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 352, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":357
 *         cdef int i
 * 
 *         self.omega = omega             # <<<<<<<<<<<<<<
 * 
 *         #Actually calculate the derivatives
 */
  __pyx_v_self->__pyx_base.omega = __pyx_v_omega;

  /* "PDSim/core/containers.pyx":360
 * 
 *         #Actually calculate the derivatives
 *         self.dmdtheta = self.summerdm             # <<<<<<<<<<<<<<
 *         self.property_derivs = arraym()
 *         self.property_derivs.set_size(self.N*2)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->__pyx_base.summerdm);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.dmdtheta);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.dmdtheta));
  __pyx_v_self->__pyx_base.dmdtheta = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":361
 *         #Actually calculate the derivatives
 *         self.dmdtheta = self.summerdm
 *         self.property_derivs = arraym()             # <<<<<<<<<<<<<<
 *         self.property_derivs.set_size(self.N*2)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5PDSim_4misc_9datatypes_arraym)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.property_derivs);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.property_derivs));
  __pyx_v_self->__pyx_base.property_derivs = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":362
 *         self.dmdtheta = self.summerdm
 *         self.property_derivs = arraym()
 *         self.property_derivs.set_size(self.N*2)             # <<<<<<<<<<<<<<
 * 
 *         # Loop over the control volumes
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->__pyx_base.property_derivs->__pyx_vtab)->set_size(__pyx_v_self->__pyx_base.property_derivs, (__pyx_v_self->__pyx_base.N * 2), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":365
 * 
 *         # Loop over the control volumes
 *         for i in range(self.N):             # <<<<<<<<<<<<<<
 *             # For compactness, pull the data from the arrays
 *             m = self.m.data[i]
 */
  __pyx_t_7 = __pyx_v_self->__pyx_base.N;
  __pyx_t_9 = __pyx_t_7;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "PDSim/core/containers.pyx":367
 *         for i in range(self.N):
 *             # For compactness, pull the data from the arrays
 *             m = self.m.data[i]             # <<<<<<<<<<<<<<
 *             h = self.h.data[i]
 *             T = self.T.data[i]
 */
    __pyx_v_m = (__pyx_v_self->__pyx_base.m->data[__pyx_v_i]);

    /* "PDSim/core/containers.pyx":368
 *             # For compactness, pull the data from the arrays
 *             m = self.m.data[i]
 *             h = self.h.data[i]             # <<<<<<<<<<<<<<
 *             T = self.T.data[i]
 *             Q = self.Q.data[i]
 */
    __pyx_v_h = (__pyx_v_self->__pyx_base.h->data[__pyx_v_i]);

    /* "PDSim/core/containers.pyx":369
 *             m = self.m.data[i]
 *             h = self.h.data[i]
 *             T = self.T.data[i]             # <<<<<<<<<<<<<<
 *             Q = self.Q.data[i]
 *             omega = self.omega
 */
    __pyx_v_T = (__pyx_v_self->__pyx_base.T->data[__pyx_v_i]);

    /* "PDSim/core/containers.pyx":370
 *             h = self.h.data[i]
 *             T = self.T.data[i]
 *             Q = self.Q.data[i]             # <<<<<<<<<<<<<<
 *             omega = self.omega
 *             rho = self.rho.data[i]
 */
    __pyx_v_Q = (__pyx_v_self->__pyx_base.Q->data[__pyx_v_i]);

    /* "PDSim/core/containers.pyx":371
 *             T = self.T.data[i]
 *             Q = self.Q.data[i]
 *             omega = self.omega             # <<<<<<<<<<<<<<
 *             rho = self.rho.data[i]
 *             cv = self.cv.data[i]
 */
    __pyx_t_11 = __pyx_v_self->__pyx_base.omega;
    __pyx_v_omega = __pyx_t_11;

    /* "PDSim/core/containers.pyx":372
 *             Q = self.Q.data[i]
 *             omega = self.omega
 *             rho = self.rho.data[i]             # <<<<<<<<<<<<<<
 *             cv = self.cv.data[i]
 *             dV = self.dV.data[i]
 */
    __pyx_v_rho = (__pyx_v_self->__pyx_base.rho->data[__pyx_v_i]);

    /* "PDSim/core/containers.pyx":373
 *             omega = self.omega
 *             rho = self.rho.data[i]
 *             cv = self.cv.data[i]             # <<<<<<<<<<<<<<
 *             dV = self.dV.data[i]
 *             V = self.V.data[i]
 */
    __pyx_v_cv = (__pyx_v_self->__pyx_base.cv->data[__pyx_v_i]);

    /* "PDSim/core/containers.pyx":374
 *             rho = self.rho.data[i]
 *             cv = self.cv.data[i]
 *             dV = self.dV.data[i]             # <<<<<<<<<<<<<<
 *             V = self.V.data[i]
 *             dpdT = self.dpdT_constV.data[i]
 */
    __pyx_v_dV = (__pyx_v_self->__pyx_base.dV->data[__pyx_v_i]);

    /* "PDSim/core/containers.pyx":375
 *             cv = self.cv.data[i]
 *             dV = self.dV.data[i]
 *             V = self.V.data[i]             # <<<<<<<<<<<<<<
 *             dpdT = self.dpdT_constV.data[i]
 *             summerdT = self.summerdT.data[i]
 */
    __pyx_v_V = (__pyx_v_self->__pyx_base.V->data[__pyx_v_i]);

    /* "PDSim/core/containers.pyx":376
 *             dV = self.dV.data[i]
 *             V = self.V.data[i]
 *             dpdT = self.dpdT_constV.data[i]             # <<<<<<<<<<<<<<
 *             summerdT = self.summerdT.data[i]
 *             dmdtheta = self.dmdtheta.data[i]
 */
    __pyx_v_dpdT = (__pyx_v_self->__pyx_base.dpdT_constV->data[__pyx_v_i]);

    /* "PDSim/core/containers.pyx":377
 *             V = self.V.data[i]
 *             dpdT = self.dpdT_constV.data[i]
 *             summerdT = self.summerdT.data[i]             # <<<<<<<<<<<<<<
 *             dmdtheta = self.dmdtheta.data[i]
 * 
 */
    __pyx_v_summerdT = (__pyx_v_self->__pyx_base.summerdT->data[__pyx_v_i]);

    /* "PDSim/core/containers.pyx":378
 *             dpdT = self.dpdT_constV.data[i]
 *             summerdT = self.summerdT.data[i]
 *             dmdtheta = self.dmdtheta.data[i]             # <<<<<<<<<<<<<<
 * 
 *             self.dTdtheta.data[i] = 1.0/(m*cv)*(-1.0*T*dpdT*(dV-(1/rho)*dmdtheta)-h*dmdtheta+Q/omega+summerdT)
 */
    __pyx_v_dmdtheta = (__pyx_v_self->__pyx_base.dmdtheta->data[__pyx_v_i]);

    /* "PDSim/core/containers.pyx":380
 *             dmdtheta = self.dmdtheta.data[i]
 * 
 *             self.dTdtheta.data[i] = 1.0/(m*cv)*(-1.0*T*dpdT*(dV-(1/rho)*dmdtheta)-h*dmdtheta+Q/omega+summerdT)             # <<<<<<<<<<<<<<
 *             self.drhodtheta.data[i] = 1.0/V*(dmdtheta-rho*dV)
 * 
 */
    (__pyx_v_self->__pyx_base.dTdtheta->data[__pyx_v_i]) = ((1.0 / (__pyx_v_m * __pyx_v_cv)) * ((((((-1.0 * __pyx_v_T) * __pyx_v_dpdT) * (__pyx_v_dV - ((1.0 / __pyx_v_rho) * __pyx_v_dmdtheta))) - (__pyx_v_h * __pyx_v_dmdtheta)) + (__pyx_v_Q / __pyx_v_omega)) + __pyx_v_summerdT));

    /* "PDSim/core/containers.pyx":381
 * 
 *             self.dTdtheta.data[i] = 1.0/(m*cv)*(-1.0*T*dpdT*(dV-(1/rho)*dmdtheta)-h*dmdtheta+Q/omega+summerdT)
 *             self.drhodtheta.data[i] = 1.0/V*(dmdtheta-rho*dV)             # <<<<<<<<<<<<<<
 * 
 *         #  Create the array of output values
 */
    (__pyx_v_self->__pyx_base.drhodtheta->data[__pyx_v_i]) = ((1.0 / __pyx_v_V) * (__pyx_v_dmdtheta - (__pyx_v_rho * __pyx_v_dV)));
  }

  /* "PDSim/core/containers.pyx":384
 * 
 *         #  Create the array of output values
 *         for i in range(self.N):             # <<<<<<<<<<<<<<
 *             self.property_derivs.set_index(i, self.dTdtheta.data[i])
 * 
 */
  __pyx_t_7 = __pyx_v_self->__pyx_base.N;
  __pyx_t_9 = __pyx_t_7;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "PDSim/core/containers.pyx":385
 *         #  Create the array of output values
 *         for i in range(self.N):
 *             self.property_derivs.set_index(i, self.dTdtheta.data[i])             # <<<<<<<<<<<<<<
 * 
 *             if self.state_vars == STATE_VARS_TM:
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->__pyx_base.property_derivs->__pyx_vtab)->set_index(__pyx_v_self->__pyx_base.property_derivs, __pyx_v_i, (__pyx_v_self->__pyx_base.dTdtheta->data[__pyx_v_i]), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PDSim/core/containers.pyx":387
 *             self.property_derivs.set_index(i, self.dTdtheta.data[i])
 * 
 *             if self.state_vars == STATE_VARS_TM:             # <<<<<<<<<<<<<<
 *                 self.property_derivs.set_index(i + self.N, self.dmdtheta.data[i])
 *             elif self.state_vars == STATE_VARS_TD:
 */
    switch (__pyx_v_self->__pyx_base.state_vars) {
      case STATE_VARS_TM:

      /* "PDSim/core/containers.pyx":388
 * 
 *             if self.state_vars == STATE_VARS_TM:
 *                 self.property_derivs.set_index(i + self.N, self.dmdtheta.data[i])             # <<<<<<<<<<<<<<
 *             elif self.state_vars == STATE_VARS_TD:
 *                 self.property_derivs.set_index(i + self.N, self.drhodtheta.data[i])
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->__pyx_base.property_derivs->__pyx_vtab)->set_index(__pyx_v_self->__pyx_base.property_derivs, (__pyx_v_i + __pyx_v_self->__pyx_base.N), (__pyx_v_self->__pyx_base.dmdtheta->data[__pyx_v_i]), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "PDSim/core/containers.pyx":387
 *             self.property_derivs.set_index(i, self.dTdtheta.data[i])
 * 
 *             if self.state_vars == STATE_VARS_TM:             # <<<<<<<<<<<<<<
 *                 self.property_derivs.set_index(i + self.N, self.dmdtheta.data[i])
 *             elif self.state_vars == STATE_VARS_TD:
 */
      break;
      case STATE_VARS_TD:

      /* "PDSim/core/containers.pyx":390
 *                 self.property_derivs.set_index(i + self.N, self.dmdtheta.data[i])
 *             elif self.state_vars == STATE_VARS_TD:
 *                 self.property_derivs.set_index(i + self.N, self.drhodtheta.data[i])             # <<<<<<<<<<<<<<
 * 
 * cdef class ControlVolume(object):
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_self->__pyx_base.property_derivs->__pyx_vtab)->set_index(__pyx_v_self->__pyx_base.property_derivs, (__pyx_v_i + __pyx_v_self->__pyx_base.N), (__pyx_v_self->__pyx_base.drhodtheta->data[__pyx_v_i]), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "PDSim/core/containers.pyx":389
 *             if self.state_vars == STATE_VARS_TM:
 *                 self.property_derivs.set_index(i + self.N, self.dmdtheta.data[i])
 *             elif self.state_vars == STATE_VARS_TD:             # <<<<<<<<<<<<<<
 *                 self.property_derivs.set_index(i + self.N, self.drhodtheta.data[i])
 * 
 */
      break;
      default: break;
    }
  }

  /* "PDSim/core/containers.pyx":352
 * 
 *     @cython.cdivision(True)
 *     cpdef calculate_derivs(self, double omega, bint has_liquid):             # <<<<<<<<<<<<<<
 * 
 *         cdef double m,T,cv,dV,V,v,summerdm,summerdT
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("PDSim.core.containers.CVArrays.calculate_derivs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_8CVArrays_5calculate_derivs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_8CVArrays_4calculate_derivs[] = "CVArrays.calculate_derivs(self, double omega, bool has_liquid)";
static PyObject *__pyx_pw_5PDSim_4core_10containers_8CVArrays_5calculate_derivs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_omega;
  int __pyx_v_has_liquid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_derivs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_omega,&__pyx_n_s_has_liquid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_has_liquid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calculate_derivs", 1, 2, 2, 1); __PYX_ERR(0, 352, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calculate_derivs") < 0)) __PYX_ERR(0, 352, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_omega = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 352, __pyx_L3_error)
    __pyx_v_has_liquid = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_has_liquid == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 352, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculate_derivs", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 352, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.containers.CVArrays.calculate_derivs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_8CVArrays_4calculate_derivs(((struct __pyx_obj_5PDSim_4core_10containers_CVArrays *)__pyx_v_self), __pyx_v_omega, __pyx_v_has_liquid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_8CVArrays_4calculate_derivs(struct __pyx_obj_5PDSim_4core_10containers_CVArrays *__pyx_v_self, double __pyx_v_omega, int __pyx_v_has_liquid) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_derivs", 0);
  __Pyx_TraceCall("calculate_derivs (wrapper)", __pyx_f[0], 352, 0, __PYX_ERR(0, 352, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_8CVArrays_calculate_derivs(__pyx_v_self, __pyx_v_omega, __pyx_v_has_liquid, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVArrays.calculate_derivs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_8CVArrays_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_8CVArrays_6__reduce_cython__[] = "CVArrays.__reduce_cython__(self)";
static PyObject *__pyx_pw_5PDSim_4core_10containers_8CVArrays_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_8CVArrays_6__reduce_cython__(((struct __pyx_obj_5PDSim_4core_10containers_CVArrays *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_8CVArrays_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5PDSim_4core_10containers_CVArrays *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVArrays.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_8CVArrays_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_8CVArrays_8__setstate_cython__[] = "CVArrays.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5PDSim_4core_10containers_8CVArrays_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_8CVArrays_8__setstate_cython__(((struct __pyx_obj_5PDSim_4core_10containers_CVArrays *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_8CVArrays_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5PDSim_4core_10containers_CVArrays *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.CVArrays.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":399
 *     """
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  str key,
 *                  object VdVFcn,
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_13ControlVolume___init__[] = "\n        Parameters\n        ----------\n        key : str\n            The string of the key for this control volume\n        VdVFcn : function, (future: VolumeFunction class)\n        initialState : :class:`State <CoolProp.State.State>` instance\n        exists : bool\n            ``True`` if control volume exists, ``False`` otherwise\n        VdVFcn_kwargs : dict\n            Dictionary of keyword arguments that can be passed to the VdVFcn\n        discharge_becomes : str\n            The key of the chamber that this control volume becomes at the \n            discharge angle (scroll compressor only)\n        becomes : str or list\n            The key of the control volume that this CV becomes in the next revolution,\n            or a list of keys of control volumes that take on the values of this\n            CV\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_5PDSim_4core_10containers_13ControlVolume___init__;
#endif
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_VdVFcn = 0;
  struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_initialState = 0;
  int __pyx_v_exists;
  PyObject *__pyx_v_VdVFcn_kwargs = 0;
  PyObject *__pyx_v_discharge_becomes = 0;
  PyObject *__pyx_v_becomes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_VdVFcn,&__pyx_n_s_initialState,&__pyx_n_s_exists,&__pyx_n_s_VdVFcn_kwargs,&__pyx_n_s_discharge_becomes,&__pyx_n_s_becomes,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[4] = __pyx_k__5;

    /* "PDSim/core/containers.pyx":405
 *                  bint exists = True,
 *                  dict VdVFcn_kwargs = {},
 *                  str discharge_becomes = None,             # <<<<<<<<<<<<<<
 *                  object becomes = None):
 *         """
 */
    values[5] = ((PyObject*)Py_None);

    /* "PDSim/core/containers.pyx":406
 *                  dict VdVFcn_kwargs = {},
 *                  str discharge_becomes = None,
 *                  object becomes = None):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */
    values[6] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_VdVFcn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 7, 1); __PYX_ERR(0, 399, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_initialState)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 7, 2); __PYX_ERR(0, 399, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exists);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_VdVFcn_kwargs);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_discharge_becomes);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_becomes);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 399, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = ((PyObject*)values[0]);
    __pyx_v_VdVFcn = values[1];
    __pyx_v_initialState = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)values[2]);
    if (values[3]) {
      __pyx_v_exists = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_exists == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
    } else {

      /* "PDSim/core/containers.pyx":403
 *                  object VdVFcn,
 *                  StateClass initialState,
 *                  bint exists = True,             # <<<<<<<<<<<<<<
 *                  dict VdVFcn_kwargs = {},
 *                  str discharge_becomes = None,
 */
      __pyx_v_exists = ((int)1);
    }
    __pyx_v_VdVFcn_kwargs = ((PyObject*)values[4]);
    __pyx_v_discharge_becomes = ((PyObject*)values[5]);
    __pyx_v_becomes = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 399, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyString_Type), 1, "key", 1))) __PYX_ERR(0, 400, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_initialState), __pyx_ptype_8CoolProp_8CoolProp_State, 1, "initialState", 0))) __PYX_ERR(0, 402, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_VdVFcn_kwargs), (&PyDict_Type), 1, "VdVFcn_kwargs", 1))) __PYX_ERR(0, 404, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_discharge_becomes), (&PyString_Type), 1, "discharge_becomes", 1))) __PYX_ERR(0, 405, __pyx_L1_error)
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume___init__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self), __pyx_v_key, __pyx_v_VdVFcn, __pyx_v_initialState, __pyx_v_exists, __pyx_v_VdVFcn_kwargs, __pyx_v_discharge_becomes, __pyx_v_becomes);

  /* "PDSim/core/containers.pyx":399
 *     """
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  str key,
 *                  object VdVFcn,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume___init__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_VdVFcn, struct __pyx_obj_8CoolProp_8CoolProp_State *__pyx_v_initialState, int __pyx_v_exists, PyObject *__pyx_v_VdVFcn_kwargs, PyObject *__pyx_v_discharge_becomes, PyObject *__pyx_v_becomes) {
  PyObject *__pyx_v__b = NULL;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 399, 0, __PYX_ERR(0, 399, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":427
 *         """
 * 
 *         self.key = key.encode('ascii')             # <<<<<<<<<<<<<<
 *         self.V_dV = VdVFcn
 *         self.State = initialState
 */
  __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyString_Type_encode, __pyx_v_key, __pyx_n_s_ascii); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_key, __pyx_t_1) < 0) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":428
 * 
 *         self.key = key.encode('ascii')
 *         self.V_dV = VdVFcn             # <<<<<<<<<<<<<<
 *         self.State = initialState
 *         self.exists = exists
 */
  __Pyx_INCREF(__pyx_v_VdVFcn);
  __Pyx_GIVEREF(__pyx_v_VdVFcn);
  __Pyx_GOTREF(__pyx_v_self->V_dV);
  __Pyx_DECREF(__pyx_v_self->V_dV);
  __pyx_v_self->V_dV = __pyx_v_VdVFcn;

  /* "PDSim/core/containers.pyx":429
 *         self.key = key.encode('ascii')
 *         self.V_dV = VdVFcn
 *         self.State = initialState             # <<<<<<<<<<<<<<
 *         self.exists = exists
 *         self.V_dV_kwargs = VdVFcn_kwargs
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_initialState));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_initialState));
  __Pyx_GOTREF(__pyx_v_self->State);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State));
  __pyx_v_self->State = __pyx_v_initialState;

  /* "PDSim/core/containers.pyx":430
 *         self.V_dV = VdVFcn
 *         self.State = initialState
 *         self.exists = exists             # <<<<<<<<<<<<<<
 *         self.V_dV_kwargs = VdVFcn_kwargs
 *         self.discharge_becomes = discharge_becomes.encode('ascii') if discharge_becomes is not None else key.encode('ascii')
 */
  __pyx_v_self->exists = __pyx_v_exists;

  /* "PDSim/core/containers.pyx":431
 *         self.State = initialState
 *         self.exists = exists
 *         self.V_dV_kwargs = VdVFcn_kwargs             # <<<<<<<<<<<<<<
 *         self.discharge_becomes = discharge_becomes.encode('ascii') if discharge_becomes is not None else key.encode('ascii')
 *         if becomes is not None:
 */
  __Pyx_INCREF(__pyx_v_VdVFcn_kwargs);
  __Pyx_GIVEREF(__pyx_v_VdVFcn_kwargs);
  __Pyx_GOTREF(__pyx_v_self->V_dV_kwargs);
  __Pyx_DECREF(__pyx_v_self->V_dV_kwargs);
  __pyx_v_self->V_dV_kwargs = __pyx_v_VdVFcn_kwargs;

  /* "PDSim/core/containers.pyx":432
 *         self.exists = exists
 *         self.V_dV_kwargs = VdVFcn_kwargs
 *         self.discharge_becomes = discharge_becomes.encode('ascii') if discharge_becomes is not None else key.encode('ascii')             # <<<<<<<<<<<<<<
 *         if becomes is not None:
 *             if isinstance(becomes, list):
 */
  __pyx_t_2 = (__pyx_v_discharge_becomes != ((PyObject*)Py_None));
  if ((__pyx_t_2 != 0)) {
    __pyx_t_3 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyString_Type_encode, __pyx_v_discharge_becomes, __pyx_n_s_ascii); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __pyx_t_3 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyString_Type_encode, __pyx_v_key, __pyx_n_s_ascii); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_discharge_becomes, __pyx_t_1) < 0) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":433
 *         self.V_dV_kwargs = VdVFcn_kwargs
 *         self.discharge_becomes = discharge_becomes.encode('ascii') if discharge_becomes is not None else key.encode('ascii')
 *         if becomes is not None:             # <<<<<<<<<<<<<<
 *             if isinstance(becomes, list):
 *                 self.becomes = [to_pystring(_b) for _b in becomes]
 */
  __pyx_t_2 = (__pyx_v_becomes != Py_None);
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "PDSim/core/containers.pyx":434
 *         self.discharge_becomes = discharge_becomes.encode('ascii') if discharge_becomes is not None else key.encode('ascii')
 *         if becomes is not None:
 *             if isinstance(becomes, list):             # <<<<<<<<<<<<<<
 *                 self.becomes = [to_pystring(_b) for _b in becomes]
 *             else:
 */
    __pyx_t_4 = PyList_Check(__pyx_v_becomes); 
    __pyx_t_2 = (__pyx_t_4 != 0);
    if (__pyx_t_2) {

      /* "PDSim/core/containers.pyx":435
 *         if becomes is not None:
 *             if isinstance(becomes, list):
 *                 self.becomes = [to_pystring(_b) for _b in becomes]             # <<<<<<<<<<<<<<
 *             else:
 *                 self.becomes = to_pystring(becomes)
 */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (likely(PyList_CheckExact(__pyx_v_becomes)) || PyTuple_CheckExact(__pyx_v_becomes)) {
        __pyx_t_3 = __pyx_v_becomes; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_becomes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 435, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 435, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_6)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 435, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 435, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 435, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 435, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_6(__pyx_t_3);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 435, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v__b, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __pyx_f_5PDSim_4core_10containers_to_pystring(__pyx_v__b); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 435, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 435, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_v_self->becomes);
      __Pyx_DECREF(__pyx_v_self->becomes);
      __pyx_v_self->becomes = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "PDSim/core/containers.pyx":434
 *         self.discharge_becomes = discharge_becomes.encode('ascii') if discharge_becomes is not None else key.encode('ascii')
 *         if becomes is not None:
 *             if isinstance(becomes, list):             # <<<<<<<<<<<<<<
 *                 self.becomes = [to_pystring(_b) for _b in becomes]
 *             else:
 */
      goto __pyx_L4;
    }

    /* "PDSim/core/containers.pyx":437
 *                 self.becomes = [to_pystring(_b) for _b in becomes]
 *             else:
 *                 self.becomes = to_pystring(becomes)             # <<<<<<<<<<<<<<
 *         else:
 *             self.becomes = to_pystring(self.key)
 */
    /*else*/ {
      __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_to_pystring(__pyx_v_becomes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_v_self->becomes);
      __Pyx_DECREF(__pyx_v_self->becomes);
      __pyx_v_self->becomes = __pyx_t_1;
      __pyx_t_1 = 0;
    }
    __pyx_L4:;

    /* "PDSim/core/containers.pyx":433
 *         self.V_dV_kwargs = VdVFcn_kwargs
 *         self.discharge_becomes = discharge_becomes.encode('ascii') if discharge_becomes is not None else key.encode('ascii')
 *         if becomes is not None:             # <<<<<<<<<<<<<<
 *             if isinstance(becomes, list):
 *                 self.becomes = [to_pystring(_b) for _b in becomes]
 */
    goto __pyx_L3;
  }

  /* "PDSim/core/containers.pyx":439
 *                 self.becomes = to_pystring(becomes)
 *         else:
 *             self.becomes = to_pystring(self.key)             # <<<<<<<<<<<<<<
 * 
 *     property key:
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_f_5PDSim_4core_10containers_to_pystring(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->becomes);
    __Pyx_DECREF(__pyx_v_self->becomes);
    __pyx_v_self->becomes = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "PDSim/core/containers.pyx":399
 *     """
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  str key,
 *                  object VdVFcn,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__b);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":442
 * 
 *     property key:
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.m_key = to_bytes(val)
 *         def __get__(self):
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_3key_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_3key_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_3key___set__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_3key___set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 442, 0, __PYX_ERR(0, 442, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":443
 *     property key:
 *         def __set__(self, val):
 *             self.m_key = to_bytes(val)             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             return self.m_key.decode('utf8')
 */
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_to_bytes(__pyx_v_val); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->m_key);
  __Pyx_DECREF(__pyx_v_self->m_key);
  __pyx_v_self->m_key = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":442
 * 
 *     property key:
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.m_key = to_bytes(val)
 *         def __get__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.key.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":444
 *         def __set__(self, val):
 *             self.m_key = to_bytes(val)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.m_key.decode('utf8')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_3key_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_3key_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_3key_2__get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_3key_2__get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 444, 0, __PYX_ERR(0, 444, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":445
 *             self.m_key = to_bytes(val)
 *         def __get__(self):
 *             return self.m_key.decode('utf8')             # <<<<<<<<<<<<<<
 * 
 *     property discharge_becomes:
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->m_key == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 445, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_decode_bytes(__pyx_v_self->m_key, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":444
 *         def __set__(self, val):
 *             self.m_key = to_bytes(val)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.m_key.decode('utf8')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.key.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":448
 * 
 *     property discharge_becomes:
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.m_discharge_becomes = to_bytes(val)
 *         def __get__(self):
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_17discharge_becomes_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_17discharge_becomes_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_17discharge_becomes___set__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_17discharge_becomes___set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[0], 448, 0, __PYX_ERR(0, 448, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":449
 *     property discharge_becomes:
 *         def __set__(self, val):
 *             self.m_discharge_becomes = to_bytes(val)             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             return self.m_discharge_becomes.decode('utf8')
 */
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_to_bytes(__pyx_v_val); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->m_discharge_becomes);
  __Pyx_DECREF(__pyx_v_self->m_discharge_becomes);
  __pyx_v_self->m_discharge_becomes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":448
 * 
 *     property discharge_becomes:
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.m_discharge_becomes = to_bytes(val)
 *         def __get__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.discharge_becomes.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":450
 *         def __set__(self, val):
 *             self.m_discharge_becomes = to_bytes(val)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.m_discharge_becomes.decode('utf8')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_17discharge_becomes_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_17discharge_becomes_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_17discharge_becomes_2__get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_17discharge_becomes_2__get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 450, 0, __PYX_ERR(0, 450, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":451
 *             self.m_discharge_becomes = to_bytes(val)
 *         def __get__(self):
 *             return self.m_discharge_becomes.decode('utf8')             # <<<<<<<<<<<<<<
 * 
 * cdef class ControlVolumeCollection(object):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->m_discharge_becomes == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 451, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_decode_bytes(__pyx_v_self->m_discharge_becomes, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":450
 *         def __set__(self, val):
 *             self.m_discharge_becomes = to_bytes(val)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.m_discharge_becomes.decode('utf8')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.discharge_becomes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":35
 * 
 * cdef class ControlVolume(object):
 *     cdef public long keyIndex             # <<<<<<<<<<<<<<
 *     cdef bytes m_key, m_discharge_becomes
 *     cdef public object becomes
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_8keyIndex_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_8keyIndex_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_8keyIndex___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_8keyIndex___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 35, 0, __PYX_ERR(2, 35, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->keyIndex); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.keyIndex.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_8keyIndex_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_8keyIndex_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_8keyIndex_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_8keyIndex_2__set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 35, 0, __PYX_ERR(2, 35, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 35, __pyx_L1_error)
  __pyx_v_self->keyIndex = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.keyIndex.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":37
 *     cdef public long keyIndex
 *     cdef bytes m_key, m_discharge_becomes
 *     cdef public object becomes             # <<<<<<<<<<<<<<
 *     cdef public object V_dV
 *     cdef public dict V_dV_kwargs
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_7becomes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_7becomes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_7becomes___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_7becomes___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 37, 0, __PYX_ERR(2, 37, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->becomes);
  __pyx_r = __pyx_v_self->becomes;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.becomes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_7becomes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_7becomes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_7becomes_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_7becomes_2__set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 37, 0, __PYX_ERR(2, 37, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->becomes);
  __Pyx_DECREF(__pyx_v_self->becomes);
  __pyx_v_self->becomes = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.becomes.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_7becomes_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_7becomes_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_7becomes_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_7becomes_4__del__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 37, 0, __PYX_ERR(2, 37, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->becomes);
  __Pyx_DECREF(__pyx_v_self->becomes);
  __pyx_v_self->becomes = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.becomes.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":38
 *     cdef bytes m_key, m_discharge_becomes
 *     cdef public object becomes
 *     cdef public object V_dV             # <<<<<<<<<<<<<<
 *     cdef public dict V_dV_kwargs
 *     cdef public object ForceFcn
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_4V_dV_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_4V_dV_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_4V_dV___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_4V_dV___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 38, 0, __PYX_ERR(2, 38, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->V_dV);
  __pyx_r = __pyx_v_self->V_dV;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.V_dV.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_4V_dV_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_4V_dV_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_4V_dV_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_4V_dV_2__set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 38, 0, __PYX_ERR(2, 38, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->V_dV);
  __Pyx_DECREF(__pyx_v_self->V_dV);
  __pyx_v_self->V_dV = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.V_dV.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_4V_dV_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_4V_dV_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_4V_dV_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_4V_dV_4__del__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 38, 0, __PYX_ERR(2, 38, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->V_dV);
  __Pyx_DECREF(__pyx_v_self->V_dV);
  __pyx_v_self->V_dV = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.V_dV.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":39
 *     cdef public object becomes
 *     cdef public object V_dV
 *     cdef public dict V_dV_kwargs             # <<<<<<<<<<<<<<
 *     cdef public object ForceFcn
 *     cdef public bint exists
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 39, 0, __PYX_ERR(2, 39, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->V_dV_kwargs);
  __pyx_r = __pyx_v_self->V_dV_kwargs;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.V_dV_kwargs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs_2__set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 39, 0, __PYX_ERR(2, 39, __pyx_L1_error));
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(2, 39, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->V_dV_kwargs);
  __Pyx_DECREF(__pyx_v_self->V_dV_kwargs);
  __pyx_v_self->V_dV_kwargs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.V_dV_kwargs.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs_4__del__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 39, 0, __PYX_ERR(2, 39, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->V_dV_kwargs);
  __Pyx_DECREF(__pyx_v_self->V_dV_kwargs);
  __pyx_v_self->V_dV_kwargs = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.V_dV_kwargs.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":40
 *     cdef public object V_dV
 *     cdef public dict V_dV_kwargs
 *     cdef public object ForceFcn             # <<<<<<<<<<<<<<
 *     cdef public bint exists
 *     cdef public StateClass State
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_8ForceFcn_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_8ForceFcn_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_8ForceFcn___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_8ForceFcn___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 40, 0, __PYX_ERR(2, 40, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->ForceFcn);
  __pyx_r = __pyx_v_self->ForceFcn;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.ForceFcn.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_8ForceFcn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_8ForceFcn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_8ForceFcn_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_8ForceFcn_2__set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 40, 0, __PYX_ERR(2, 40, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->ForceFcn);
  __Pyx_DECREF(__pyx_v_self->ForceFcn);
  __pyx_v_self->ForceFcn = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.ForceFcn.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_8ForceFcn_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_8ForceFcn_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_8ForceFcn_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_8ForceFcn_4__del__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 40, 0, __PYX_ERR(2, 40, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->ForceFcn);
  __Pyx_DECREF(__pyx_v_self->ForceFcn);
  __pyx_v_self->ForceFcn = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.ForceFcn.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":41
 *     cdef public dict V_dV_kwargs
 *     cdef public object ForceFcn
 *     cdef public bint exists             # <<<<<<<<<<<<<<
 *     cdef public StateClass State
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_6exists_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_6exists_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_6exists___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_6exists___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 41, 0, __PYX_ERR(2, 41, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->exists); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.exists.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_6exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_6exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_6exists_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_6exists_2__set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 41, 0, __PYX_ERR(2, 41, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 41, __pyx_L1_error)
  __pyx_v_self->exists = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.exists.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":42
 *     cdef public object ForceFcn
 *     cdef public bint exists
 *     cdef public StateClass State             # <<<<<<<<<<<<<<
 * 
 * cdef class CVScore(object):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_5State_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_5State_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_5State___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_5State___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 42, 0, __PYX_ERR(2, 42, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->State));
  __pyx_r = ((PyObject *)__pyx_v_self->State);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.State.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_5State_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_5State_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_5State_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_5State_2__set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 42, 0, __PYX_ERR(2, 42, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(2, 42, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->State);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State));
  __pyx_v_self->State = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.State.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_5State_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_13ControlVolume_5State_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_5State_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_13ControlVolume_5State_4__del__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 42, 0, __PYX_ERR(2, 42, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->State);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->State));
  __pyx_v_self->State = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.State.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_13ControlVolume_2__reduce_cython__[] = "ControlVolume.__reduce_cython__(self)";
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_2__reduce_cython__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_2__reduce_cython__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.ForceFcn, self.State, self.V_dV, self.V_dV_kwargs, self.becomes, self.exists, self.keyIndex, self.m_discharge_becomes, self.m_key)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->exists); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->keyIndex); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->ForceFcn);
  __Pyx_GIVEREF(__pyx_v_self->ForceFcn);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->ForceFcn);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->State));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->State));
  PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_self->State));
  __Pyx_INCREF(__pyx_v_self->V_dV);
  __Pyx_GIVEREF(__pyx_v_self->V_dV);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_self->V_dV);
  __Pyx_INCREF(__pyx_v_self->V_dV_kwargs);
  __Pyx_GIVEREF(__pyx_v_self->V_dV_kwargs);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_self->V_dV_kwargs);
  __Pyx_INCREF(__pyx_v_self->becomes);
  __Pyx_GIVEREF(__pyx_v_self->becomes);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_v_self->becomes);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->m_discharge_becomes);
  __Pyx_GIVEREF(__pyx_v_self->m_discharge_becomes);
  PyTuple_SET_ITEM(__pyx_t_3, 7, __pyx_v_self->m_discharge_becomes);
  __Pyx_INCREF(__pyx_v_self->m_key);
  __Pyx_GIVEREF(__pyx_v_self->m_key);
  PyTuple_SET_ITEM(__pyx_t_3, 8, __pyx_v_self->m_key);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.ForceFcn, self.State, self.V_dV, self.V_dV_kwargs, self.becomes, self.exists, self.keyIndex, self.m_discharge_becomes, self.m_key)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_3 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v__dict = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":7
 *     state = (self.ForceFcn, self.State, self.V_dV, self.V_dV_kwargs, self.becomes, self.exists, self.keyIndex, self.m_discharge_becomes, self.m_key)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_4 = (__pyx_v__dict != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v__dict);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.ForceFcn is not None or self.State is not None or self.V_dV is not None or self.V_dV_kwargs is not None or self.becomes is not None or self.m_discharge_becomes is not None or self.m_key is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.ForceFcn, self.State, self.V_dV, self.V_dV_kwargs, self.becomes, self.exists, self.keyIndex, self.m_discharge_becomes, self.m_key)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.ForceFcn is not None or self.State is not None or self.V_dV is not None or self.V_dV_kwargs is not None or self.becomes is not None or self.m_discharge_becomes is not None or self.m_key is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_ControlVolume, (type(self), 0x28d24fd, None), state
 */
  /*else*/ {
    __pyx_t_4 = (__pyx_v_self->ForceFcn != Py_None);
    __pyx_t_6 = (__pyx_t_4 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_6 = (((PyObject *)__pyx_v_self->State) != Py_None);
    __pyx_t_4 = (__pyx_t_6 != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_5 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->V_dV != Py_None);
    __pyx_t_6 = (__pyx_t_4 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_6 = (__pyx_v_self->V_dV_kwargs != ((PyObject*)Py_None));
    __pyx_t_4 = (__pyx_t_6 != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_5 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->becomes != Py_None);
    __pyx_t_6 = (__pyx_t_4 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_6 = (__pyx_v_self->m_discharge_becomes != ((PyObject*)Py_None));
    __pyx_t_4 = (__pyx_t_6 != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_5 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->m_key != ((PyObject*)Py_None));
    __pyx_t_6 = (__pyx_t_4 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_5;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.ForceFcn is not None or self.State is not None or self.V_dV is not None or self.V_dV_kwargs is not None or self.becomes is not None or self.m_discharge_becomes is not None or self.m_key is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ControlVolume, (type(self), 0x28d24fd, None), state
 *     else:
 */
  __pyx_t_5 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":13
 *         use_setstate = self.ForceFcn is not None or self.State is not None or self.V_dV is not None or self.V_dV_kwargs is not None or self.becomes is not None or self.m_discharge_becomes is not None or self.m_key is not None
 *     if use_setstate:
 *         return __pyx_unpickle_ControlVolume, (type(self), 0x28d24fd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_ControlVolume, (type(self), 0x28d24fd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_ControlVolume); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_42804477);
    __Pyx_GIVEREF(__pyx_int_42804477);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_42804477);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.ForceFcn is not None or self.State is not None or self.V_dV is not None or self.V_dV_kwargs is not None or self.becomes is not None or self.m_discharge_becomes is not None or self.m_key is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ControlVolume, (type(self), 0x28d24fd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_ControlVolume, (type(self), 0x28d24fd, None), state
 *     else:
 *         return __pyx_unpickle_ControlVolume, (type(self), 0x28d24fd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ControlVolume__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_ControlVolume); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_42804477);
    __Pyx_GIVEREF(__pyx_int_42804477);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_42804477);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ControlVolume, (type(self), 0x28d24fd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ControlVolume__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_13ControlVolume_4__setstate_cython__[] = "ControlVolume.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5PDSim_4core_10containers_13ControlVolume_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_13ControlVolume_4__setstate_cython__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_13ControlVolume_4__setstate_cython__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 16, 0, __PYX_ERR(1, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_ControlVolume, (type(self), 0x28d24fd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ControlVolume__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers___pyx_unpickle_ControlVolume__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ControlVolume, (type(self), 0x28d24fd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ControlVolume__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolume.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":457
 *     ControlVolumeCollection is class to hold all the control volumes
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.keys = []
 *         self.CVs = []
 */

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection___cinit__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection___cinit__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 457, 0, __PYX_ERR(0, 457, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":458
 *     """
 *     def __cinit__(self):
 *         self.keys = []             # <<<<<<<<<<<<<<
 *         self.CVs = []
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->keys);
  __Pyx_DECREF(__pyx_v_self->keys);
  __pyx_v_self->keys = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":459
 *     def __cinit__(self):
 *         self.keys = []
 *         self.CVs = []             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->CVs);
  __Pyx_DECREF(__pyx_v_self->CVs);
  __pyx_v_self->CVs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":457
 *     ControlVolumeCollection is class to hold all the control volumes
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.keys = []
 *         self.CVs = []
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":461
 *         self.CVs = []
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         #TODO: rewrite me
 *         return rebuildCVCollection,(self.__getstate__(),)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_3__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_2__reduce__[] = "ControlVolumeCollection.__reduce__(self)";
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_3__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_2__reduce__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_2__reduce__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);
  __Pyx_TraceCall("__reduce__", __pyx_f[0], 461, 0, __PYX_ERR(0, 461, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":463
 *     def __reduce__(self):
 *         #TODO: rewrite me
 *         return rebuildCVCollection,(self.__getstate__(),)             # <<<<<<<<<<<<<<
 * 
 *     def __getstate__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_rebuildCVCollection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getstate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":461
 *         self.CVs = []
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         #TODO: rewrite me
 *         return rebuildCVCollection,(self.__getstate__(),)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":465
 *         return rebuildCVCollection,(self.__getstate__(),)
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         import copy
 *         CVs = [copy.copy(CV) for CV in self.CVs]
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_5__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_4__getstate__[] = "ControlVolumeCollection.__getstate__(self)";
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_5__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_4__getstate__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_4__getstate__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_v_copy = NULL;
  PyObject *__pyx_v_CVs = NULL;
  PyObject *__pyx_v_CV = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getstate__", 0);
  __Pyx_TraceCall("__getstate__", __pyx_f[0], 465, 0, __PYX_ERR(0, 465, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":466
 * 
 *     def __getstate__(self):
 *         import copy             # <<<<<<<<<<<<<<
 *         CVs = [copy.copy(CV) for CV in self.CVs]
 *         return CVs
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_copy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_copy = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":467
 *     def __getstate__(self):
 *         import copy
 *         CVs = [copy.copy(CV) for CV in self.CVs]             # <<<<<<<<<<<<<<
 *         return CVs
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->CVs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 467, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_self->CVs; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 467, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_CV, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_copy, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_CV) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_CV);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_CVs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":468
 *         import copy
 *         CVs = [copy.copy(CV) for CV in self.CVs]
 *         return CVs             # <<<<<<<<<<<<<<
 * 
 *     def __setstate__(self, CVs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_CVs);
  __pyx_r = __pyx_v_CVs;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":465
 *         return rebuildCVCollection,(self.__getstate__(),)
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         import copy
 *         CVs = [copy.copy(CV) for CV in self.CVs]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_copy);
  __Pyx_XDECREF(__pyx_v_CVs);
  __Pyx_XDECREF(__pyx_v_CV);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":470
 *         return CVs
 * 
 *     def __setstate__(self, CVs):             # <<<<<<<<<<<<<<
 *         #TODO: rewrite me
 *         for CV in CVs:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_7__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_CVs); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_6__setstate__[] = "ControlVolumeCollection.__setstate__(self, CVs)";
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_7__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_CVs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_6__setstate__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self), ((PyObject *)__pyx_v_CVs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_6__setstate__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, PyObject *__pyx_v_CVs) {
  PyObject *__pyx_v_CV = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate__", 0);
  __Pyx_TraceCall("__setstate__", __pyx_f[0], 470, 0, __PYX_ERR(0, 470, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":472
 *     def __setstate__(self, CVs):
 *         #TODO: rewrite me
 *         for CV in CVs:             # <<<<<<<<<<<<<<
 *             self[CV.key]=CV
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_CVs)) || PyTuple_CheckExact(__pyx_v_CVs)) {
    __pyx_t_1 = __pyx_v_CVs; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_CVs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 472, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 472, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 472, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 472, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 472, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 472, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_CV, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "PDSim/core/containers.pyx":473
 *         #TODO: rewrite me
 *         for CV in CVs:
 *             self[CV.key]=CV             # <<<<<<<<<<<<<<
 * 
 *     cpdef at(self, int i):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_CV, __pyx_n_s_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self), __pyx_t_4, __pyx_v_CV) < 0)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "PDSim/core/containers.pyx":472
 *     def __setstate__(self, CVs):
 *         #TODO: rewrite me
 *         for CV in CVs:             # <<<<<<<<<<<<<<
 *             self[CV.key]=CV
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":470
 *         return CVs
 * 
 *     def __setstate__(self, CVs):             # <<<<<<<<<<<<<<
 *         #TODO: rewrite me
 *         for CV in CVs:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_CV);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":475
 *             self[CV.key]=CV
 * 
 *     cpdef at(self, int i):             # <<<<<<<<<<<<<<
 *         """
 *         Return the control volume at the given index
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_9at(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_at(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, int __pyx_v_i, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("at", 0);
  __Pyx_TraceCall("at", __pyx_f[0], 475, 0, __PYX_ERR(0, 475, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_at); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_9at)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 475, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":479
 *         Return the control volume at the given index
 *         """
 *         return self.CVs[i]             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, k):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->CVs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 479, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->CVs, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":475
 *             self[CV.key]=CV
 * 
 *     cpdef at(self, int i):             # <<<<<<<<<<<<<<
 *         """
 *         Return the control volume at the given index
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_9at(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_8at[] = "ControlVolumeCollection.at(self, int i)\n\n        Return the control volume at the given index\n        ";
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_9at(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("at (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_8at(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_8at(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("at", 0);
  __Pyx_TraceCall("at (wrapper)", __pyx_f[0], 475, 0, __PYX_ERR(0, 475, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_at(__pyx_v_self, __pyx_v_i, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":481
 *         return self.CVs[i]
 * 
 *     def __getitem__(self, k):             # <<<<<<<<<<<<<<
 *         """
 *         Can index based on integer index or string key
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_11__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_k); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_10__getitem__[] = "\n        Can index based on integer index or string key\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_5PDSim_4core_10containers_23ControlVolumeCollection_10__getitem__;
#endif
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_11__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_10__getitem__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self), ((PyObject *)__pyx_v_k));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_10__getitem__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_TraceCall("__getitem__", __pyx_f[0], 481, 0, __PYX_ERR(0, 481, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_k);

  /* "PDSim/core/containers.pyx":485
 *         Can index based on integer index or string key
 *         """
 *         k = to_pystring(k)             # <<<<<<<<<<<<<<
 *         if k in self.keys:
 *             return self.CVs[self.keys.index(k)]
 */
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_to_pystring(__pyx_v_k); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_k, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":486
 *         """
 *         k = to_pystring(k)
 *         if k in self.keys:             # <<<<<<<<<<<<<<
 *             return self.CVs[self.keys.index(k)]
 *         elif k in range(self.N):
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_k, __pyx_v_self->keys, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 486, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "PDSim/core/containers.pyx":487
 *         k = to_pystring(k)
 *         if k in self.keys:
 *             return self.CVs[self.keys.index(k)]             # <<<<<<<<<<<<<<
 *         elif k in range(self.N):
 *             return self.CVs[k]
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_self->CVs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 487, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->keys, __pyx_n_s_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_k) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_k);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_self->CVs, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "PDSim/core/containers.pyx":486
 *         """
 *         k = to_pystring(k)
 *         if k in self.keys:             # <<<<<<<<<<<<<<
 *             return self.CVs[self.keys.index(k)]
 *         elif k in range(self.N):
 */
  }

  /* "PDSim/core/containers.pyx":488
 *         if k in self.keys:
 *             return self.CVs[self.keys.index(k)]
 *         elif k in range(self.N):             # <<<<<<<<<<<<<<
 *             return self.CVs[k]
 *         else:
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_v_k, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (likely(__pyx_t_2)) {

    /* "PDSim/core/containers.pyx":489
 *             return self.CVs[self.keys.index(k)]
 *         elif k in range(self.N):
 *             return self.CVs[k]             # <<<<<<<<<<<<<<
 *         else:
 *             raise KeyError('Your key [{key}] of type [{_type}] is invalid'.format(key = k,_type = str(type(k))))
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_self->CVs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 489, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_self->CVs, __pyx_v_k); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "PDSim/core/containers.pyx":488
 *         if k in self.keys:
 *             return self.CVs[self.keys.index(k)]
 *         elif k in range(self.N):             # <<<<<<<<<<<<<<
 *             return self.CVs[k]
 *         else:
 */
  }

  /* "PDSim/core/containers.pyx":491
 *             return self.CVs[k]
 *         else:
 *             raise KeyError('Your key [{key}] of type [{_type}] is invalid'.format(key = k,_type = str(type(k))))             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Your_key_key_of_type__type_is_in, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_key, __pyx_v_k) < 0) __PYX_ERR(0, 491, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), ((PyObject *)Py_TYPE(__pyx_v_k))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_type, __pyx_t_5) < 0) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 491, __pyx_L1_error)
  }

  /* "PDSim/core/containers.pyx":481
 *         return self.CVs[i]
 * 
 *     def __getitem__(self, k):             # <<<<<<<<<<<<<<
 *         """
 *         Can index based on integer index or string key
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":493
 *             raise KeyError('Your key [{key}] of type [{_type}] is invalid'.format(key = k,_type = str(type(k))))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return len(self.CVs)
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_13__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_13__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_12__len__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_12__len__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);
  __Pyx_TraceCall("__len__", __pyx_f[0], 493, 0, __PYX_ERR(0, 493, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":494
 * 
 *     def __len__(self):
 *         return len(self.CVs)             # <<<<<<<<<<<<<<
 * 
 *     cpdef add(self, ControlVolume CV):
 */
  __pyx_t_1 = __pyx_v_self->CVs;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 494, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":493
 *             raise KeyError('Your key [{key}] of type [{_type}] is invalid'.format(key = k,_type = str(type(k))))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return len(self.CVs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":496
 *         return len(self.CVs)
 * 
 *     cpdef add(self, ControlVolume CV):             # <<<<<<<<<<<<<<
 *         """
 *         Add a control volume to the list of control volumes
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_15add(PyObject *__pyx_v_self, PyObject *__pyx_v_CV); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_add(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_CV, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);
  __Pyx_TraceCall("add", __pyx_f[0], 496, 0, __PYX_ERR(0, 496, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_15add)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_CV)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_CV));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 496, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":504
 *         CV : :class:`ControlVolume <PDSim.core.containers.ControlVolume>' instance
 *         """
 *         if CV.key in self.keys:             # <<<<<<<<<<<<<<
 *             raise ValueError('Your CV key [{key:s}] is already in use'.format(CV.key))
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_CV), __pyx_n_s_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_v_self->keys, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (unlikely(__pyx_t_6)) {

    /* "PDSim/core/containers.pyx":505
 *         """
 *         if CV.key in self.keys:
 *             raise ValueError('Your CV key [{key:s}] is already in use'.format(CV.key))             # <<<<<<<<<<<<<<
 *         else:
 *             self.CVs.append(CV)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Your_CV_key_key_s_is_already_in, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_CV), __pyx_n_s_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 505, __pyx_L1_error)

    /* "PDSim/core/containers.pyx":504
 *         CV : :class:`ControlVolume <PDSim.core.containers.ControlVolume>' instance
 *         """
 *         if CV.key in self.keys:             # <<<<<<<<<<<<<<
 *             raise ValueError('Your CV key [{key:s}] is already in use'.format(CV.key))
 *         else:
 */
  }

  /* "PDSim/core/containers.pyx":507
 *             raise ValueError('Your CV key [{key:s}] is already in use'.format(CV.key))
 *         else:
 *             self.CVs.append(CV)             # <<<<<<<<<<<<<<
 *             self.keys.append(CV.key)
 * 
 */
  /*else*/ {
    if (unlikely(__pyx_v_self->CVs == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 507, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_self->CVs, ((PyObject *)__pyx_v_CV)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 507, __pyx_L1_error)

    /* "PDSim/core/containers.pyx":508
 *         else:
 *             self.CVs.append(CV)
 *             self.keys.append(CV.key)             # <<<<<<<<<<<<<<
 * 
 *     cpdef rebuild_exists(self):
 */
    if (unlikely(__pyx_v_self->keys == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 508, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_CV), __pyx_n_s_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_self->keys, __pyx_t_2); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "PDSim/core/containers.pyx":496
 *         return len(self.CVs)
 * 
 *     cpdef add(self, ControlVolume CV):             # <<<<<<<<<<<<<<
 *         """
 *         Add a control volume to the list of control volumes
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_15add(PyObject *__pyx_v_self, PyObject *__pyx_v_CV); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_14add[] = "ControlVolumeCollection.add(self, ControlVolume CV)\n\n        Add a control volume to the list of control volumes\n        \n        Parameters\n        ----------\n        CV : :class:`ControlVolume <PDSim.core.containers.ControlVolume>' instance\n        ";
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_15add(PyObject *__pyx_v_self, PyObject *__pyx_v_CV) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_CV), __pyx_ptype_5PDSim_4core_10containers_ControlVolume, 1, "CV", 0))) __PYX_ERR(0, 496, __pyx_L1_error)
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_14add(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self), ((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_CV));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_14add(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_CV) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);
  __Pyx_TraceCall("add (wrapper)", __pyx_f[0], 496, 0, __PYX_ERR(0, 496, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_add(__pyx_v_self, __pyx_v_CV, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":510
 *             self.keys.append(CV.key)
 * 
 *     cpdef rebuild_exists(self):             # <<<<<<<<<<<<<<
 *         """
 *         Rebuild all the internal lists that hold the indices, keys, and control volumes
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_17rebuild_exists(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_rebuild_exists(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_CV = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rebuild_exists", 0);
  __Pyx_TraceCall("rebuild_exists", __pyx_f[0], 510, 0, __PYX_ERR(0, 510, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rebuild_exists); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_17rebuild_exists)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 510, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":517
 *         # For all CV - whether they exist or not
 *         # both indices and keys are in the same order
 *         self.indices = list(range(0,len(self.keys)))             # <<<<<<<<<<<<<<
 * 
 *         self.exists_indices = [i for i in self.indices if self.CVs[i].exists]
 */
  __pyx_t_1 = __pyx_v_self->keys;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 517, __pyx_L1_error)
  }
  __pyx_t_5 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->indices);
  __Pyx_DECREF(__pyx_v_self->indices);
  __pyx_v_self->indices = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "PDSim/core/containers.pyx":519
 *         self.indices = list(range(0,len(self.keys)))
 * 
 *         self.exists_indices = [i for i in self.indices if self.CVs[i].exists]             # <<<<<<<<<<<<<<
 *         self.exists_keys = [self.keys[i] for i in self.exists_indices]
 *         self.exists_CV = [self.CVs[i] for i in self.exists_indices]
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_v_self->indices == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 519, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->indices; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 519, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;
    if (unlikely(__pyx_v_self->CVs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 519, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_self->CVs, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_exists); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_6) {
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_v_i))) __PYX_ERR(0, 519, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->exists_indices);
  __Pyx_DECREF(__pyx_v_self->exists_indices);
  __pyx_v_self->exists_indices = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "PDSim/core/containers.pyx":520
 * 
 *         self.exists_indices = [i for i in self.indices if self.CVs[i].exists]
 *         self.exists_keys = [self.keys[i] for i in self.exists_indices]             # <<<<<<<<<<<<<<
 *         self.exists_CV = [self.CVs[i] for i in self.exists_indices]
 *         if len(self.exists_keys) == 0:
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_v_self->exists_indices == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 520, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->exists_indices; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 520, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(__pyx_v_self->keys == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 520, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_self->keys, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->exists_keys);
  __Pyx_DECREF(__pyx_v_self->exists_keys);
  __pyx_v_self->exists_keys = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "PDSim/core/containers.pyx":521
 *         self.exists_indices = [i for i in self.indices if self.CVs[i].exists]
 *         self.exists_keys = [self.keys[i] for i in self.exists_indices]
 *         self.exists_CV = [self.CVs[i] for i in self.exists_indices]             # <<<<<<<<<<<<<<
 *         if len(self.exists_keys) == 0:
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_v_self->exists_indices == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 521, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->exists_indices; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 521, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(__pyx_v_self->CVs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 521, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_self->CVs, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->exists_CV);
  __Pyx_DECREF(__pyx_v_self->exists_CV);
  __pyx_v_self->exists_CV = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "PDSim/core/containers.pyx":522
 *         self.exists_keys = [self.keys[i] for i in self.exists_indices]
 *         self.exists_CV = [self.CVs[i] for i in self.exists_indices]
 *         if len(self.exists_keys) == 0:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_2 = __pyx_v_self->exists_keys;
  __Pyx_INCREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 522, __pyx_L1_error)
  }
  __pyx_t_5 = PyList_GET_SIZE(__pyx_t_2); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = ((__pyx_t_5 == 0) != 0);
  if (__pyx_t_6) {

    /* "PDSim/core/containers.pyx":523
 *         self.exists_CV = [self.CVs[i] for i in self.exists_indices]
 *         if len(self.exists_keys) == 0:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         self.Nodes = dict([(CV.key, CV.State) for CV in self.exists_CV])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "PDSim/core/containers.pyx":522
 *         self.exists_keys = [self.keys[i] for i in self.exists_indices]
 *         self.exists_CV = [self.CVs[i] for i in self.exists_indices]
 *         if len(self.exists_keys) == 0:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "PDSim/core/containers.pyx":525
 *             return
 * 
 *         self.Nodes = dict([(CV.key, CV.State) for CV in self.exists_CV])             # <<<<<<<<<<<<<<
 *         self.N = len(self.CVs)
 *         self.Nexist = len(self.exists_CV)
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_v_self->exists_CV == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 525, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->exists_CV; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 525, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_CV, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_CV, __pyx_n_s_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_CV, __pyx_n_s_State); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->Nodes);
  __Pyx_DECREF(__pyx_v_self->Nodes);
  __pyx_v_self->Nodes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":526
 * 
 *         self.Nodes = dict([(CV.key, CV.State) for CV in self.exists_CV])
 *         self.N = len(self.CVs)             # <<<<<<<<<<<<<<
 *         self.Nexist = len(self.exists_CV)
 * 
 */
  __pyx_t_1 = __pyx_v_self->CVs;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 526, __pyx_L1_error)
  }
  __pyx_t_5 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->N = __pyx_t_5;

  /* "PDSim/core/containers.pyx":527
 *         self.Nodes = dict([(CV.key, CV.State) for CV in self.exists_CV])
 *         self.N = len(self.CVs)
 *         self.Nexist = len(self.exists_CV)             # <<<<<<<<<<<<<<
 * 
 *     def index(self,key):
 */
  __pyx_t_1 = __pyx_v_self->exists_CV;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 527, __pyx_L1_error)
  }
  __pyx_t_5 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->Nexist = __pyx_t_5;

  /* "PDSim/core/containers.pyx":510
 *             self.keys.append(CV.key)
 * 
 *     cpdef rebuild_exists(self):             # <<<<<<<<<<<<<<
 *         """
 *         Rebuild all the internal lists that hold the indices, keys, and control volumes
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.rebuild_exists", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_CV);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_17rebuild_exists(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_16rebuild_exists[] = "ControlVolumeCollection.rebuild_exists(self)\n\n        Rebuild all the internal lists that hold the indices, keys, and control volumes\n        ";
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_17rebuild_exists(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rebuild_exists (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_16rebuild_exists(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_16rebuild_exists(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rebuild_exists", 0);
  __Pyx_TraceCall("rebuild_exists (wrapper)", __pyx_f[0], 510, 0, __PYX_ERR(0, 510, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_rebuild_exists(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.rebuild_exists", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":529
 *         self.Nexist = len(self.exists_CV)
 * 
 *     def index(self,key):             # <<<<<<<<<<<<<<
 *         return self.keys.index(to_pystring(key))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_19index(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_18index[] = "ControlVolumeCollection.index(self, key)";
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_19index(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("index (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_18index(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_18index(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("index", 0);
  __Pyx_TraceCall("index", __pyx_f[0], 529, 0, __PYX_ERR(0, 529, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":530
 * 
 *     def index(self,key):
 *         return self.keys.index(to_pystring(key))             # <<<<<<<<<<<<<<
 * 
 *     cpdef get(self, parameters key, double factor = 1.0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->keys, __pyx_n_s_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_f_5PDSim_4core_10containers_to_pystring(__pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":529
 *         self.Nexist = len(self.exists_CV)
 * 
 *     def index(self,key):             # <<<<<<<<<<<<<<
 *         return self.keys.index(to_pystring(key))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":532
 *         return self.keys.index(to_pystring(key))
 * 
 *     cpdef get(self, parameters key, double factor = 1.0):             # <<<<<<<<<<<<<<
 *         """
 *         Get a value from all the control volumes
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_21get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_get(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, CoolProp::parameters __pyx_v_key, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_get *__pyx_optional_args) {
  double __pyx_v_factor = ((double)1.0);
  int __pyx_v_i;
  struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_CV = 0;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_arr = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 0);
  __Pyx_TraceCall("get", __pyx_f[0], 532, 0, __PYX_ERR(0, 532, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_factor = __pyx_optional_args->factor;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_21get)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyInt_From_CoolProp_3a__3a_parameters(__pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 532, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_factor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 532, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 532, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 532, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 532, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 532, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":544
 *         cdef int i
 *         cdef ControlVolume CV
 *         cdef arraym arr = arraym.__new__(arraym)             # <<<<<<<<<<<<<<
 *         arr.set_size(self.Nexist)
 *         for i in range(self.Nexist):
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_5PDSim_4misc_9datatypes_arraym), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym)))) __PYX_ERR(0, 544, __pyx_L1_error)
  __pyx_v_arr = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":545
 *         cdef ControlVolume CV
 *         cdef arraym arr = arraym.__new__(arraym)
 *         arr.set_size(self.Nexist)             # <<<<<<<<<<<<<<
 *         for i in range(self.Nexist):
 *             CV = self.exists_CV[i]
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_arr->__pyx_vtab)->set_size(__pyx_v_arr, __pyx_v_self->Nexist, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":546
 *         cdef arraym arr = arraym.__new__(arraym)
 *         arr.set_size(self.Nexist)
 *         for i in range(self.Nexist):             # <<<<<<<<<<<<<<
 *             CV = self.exists_CV[i]
 *             arr.set_index(i,CV.State.Props(key)*factor)
 */
  __pyx_t_7 = __pyx_v_self->Nexist;
  __pyx_t_9 = __pyx_t_7;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "PDSim/core/containers.pyx":547
 *         arr.set_size(self.Nexist)
 *         for i in range(self.Nexist):
 *             CV = self.exists_CV[i]             # <<<<<<<<<<<<<<
 *             arr.set_index(i,CV.State.Props(key)*factor)
 *         return arr
 */
    if (unlikely(__pyx_v_self->exists_CV == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 547, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->exists_CV, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4core_10containers_ControlVolume))))) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_CV, ((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "PDSim/core/containers.pyx":548
 *         for i in range(self.Nexist):
 *             CV = self.exists_CV[i]
 *             arr.set_index(i,CV.State.Props(key)*factor)             # <<<<<<<<<<<<<<
 *         return arr
 * 
 */
    __pyx_t_11 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_CV->State->__pyx_vtab)->Props(__pyx_v_CV->State, __pyx_v_key, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 548, __pyx_L1_error)
    __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_arr->__pyx_vtab)->set_index(__pyx_v_arr, __pyx_v_i, (__pyx_t_11 * __pyx_v_factor), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim/core/containers.pyx":549
 *             CV = self.exists_CV[i]
 *             arr.set_index(i,CV.State.Props(key)*factor)
 *         return arr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":532
 *         return self.keys.index(to_pystring(key))
 * 
 *     cpdef get(self, parameters key, double factor = 1.0):             # <<<<<<<<<<<<<<
 *         """
 *         Get a value from all the control volumes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_CV);
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_21get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_20get[] = "ControlVolumeCollection.get(self, parameters key, double factor=1.0)\n\n        Get a value from all the control volumes \n        Parameters\n        ----------\n        key : \n            The key to get from CoolProp\n        factor : double\n            The value to multiply each acquired value by\n        ";
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_21get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CoolProp::parameters __pyx_v_key;
  double __pyx_v_factor;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_factor,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_factor);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get") < 0)) __PYX_ERR(0, 532, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = ((CoolProp::parameters)__Pyx_PyInt_As_CoolProp_3a__3a_parameters(values[0])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 532, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_factor = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 532, __pyx_L3_error)
    } else {
      __pyx_v_factor = ((double)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 532, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_20get(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self), __pyx_v_key, __pyx_v_factor);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_20get(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, CoolProp::parameters __pyx_v_key, double __pyx_v_factor) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_get __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 0);
  __Pyx_TraceCall("get (wrapper)", __pyx_f[0], 532, 0, __PYX_ERR(0, 532, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.factor = __pyx_v_factor;
  __pyx_t_1 = __pyx_vtabptr_5PDSim_4core_10containers_ControlVolumeCollection->get(__pyx_v_self, __pyx_v_key, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":552
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         """ Temperature for each CV that exists """
 *         return self.get(constants.iT)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_1T___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_1T___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 552, 0, __PYX_ERR(0, 552, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":554
 *     def T(self):
 *         """ Temperature for each CV that exists """
 *         return self.get(constants.iT)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self->__pyx_vtab)->get(__pyx_v_self, CoolProp::iT, 0, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":552
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         """ Temperature for each CV that exists """
 *         return self.get(constants.iT)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":557
 * 
 *     @property
 *     def p(self):             # <<<<<<<<<<<<<<
 *         """ Pressure for each CV that exists """
 *         return self.get(constants.iP,0.001)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_1p_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_1p_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_1p___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_1p___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_get __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 557, 0, __PYX_ERR(0, 557, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":559
 *     def p(self):
 *         """ Pressure for each CV that exists """
 *         return self.get(constants.iP,0.001)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.factor = 0.001;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self->__pyx_vtab)->get(__pyx_v_self, CoolProp::iP, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":557
 * 
 *     @property
 *     def p(self):             # <<<<<<<<<<<<<<
 *         """ Pressure for each CV that exists """
 *         return self.get(constants.iP,0.001)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.p.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":562
 * 
 *     @property
 *     def rho(self):             # <<<<<<<<<<<<<<
 *         """ Density for each CV that exists """
 *         return self.get(constants.iDmass)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_3rho_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_3rho_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_3rho___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_3rho___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 562, 0, __PYX_ERR(0, 562, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":564
 *     def rho(self):
 *         """ Density for each CV that exists """
 *         return self.get(constants.iDmass)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self->__pyx_vtab)->get(__pyx_v_self, CoolProp::iDmass, 0, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":562
 * 
 *     @property
 *     def rho(self):             # <<<<<<<<<<<<<<
 *         """ Density for each CV that exists """
 *         return self.get(constants.iDmass)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.rho.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":567
 * 
 *     @property
 *     def h(self):             # <<<<<<<<<<<<<<
 *         """ Enthalpy for each CV that exists """
 *         return self.get(constants.iHmass,0.001)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_1h_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_1h_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_1h___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_1h___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_get __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 567, 0, __PYX_ERR(0, 567, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":569
 *     def h(self):
 *         """ Enthalpy for each CV that exists """
 *         return self.get(constants.iHmass,0.001)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.factor = 0.001;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self->__pyx_vtab)->get(__pyx_v_self, CoolProp::iHmass, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":567
 * 
 *     @property
 *     def h(self):             # <<<<<<<<<<<<<<
 *         """ Enthalpy for each CV that exists """
 *         return self.get(constants.iHmass,0.001)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.h.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":572
 * 
 *     @property
 *     def cp(self):             # <<<<<<<<<<<<<<
 *         """ Specific heat at constant volume for each CV that exists """
 *         return self.get(constants.iCpmass,0.001)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_2cp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_2cp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_2cp___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_2cp___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_get __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 572, 0, __PYX_ERR(0, 572, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":574
 *     def cp(self):
 *         """ Specific heat at constant volume for each CV that exists """
 *         return self.get(constants.iCpmass,0.001)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.factor = 0.001;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self->__pyx_vtab)->get(__pyx_v_self, CoolProp::iCpmass, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":572
 * 
 *     @property
 *     def cp(self):             # <<<<<<<<<<<<<<
 *         """ Specific heat at constant volume for each CV that exists """
 *         return self.get(constants.iCpmass,0.001)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.cp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":577
 * 
 *     @property
 *     def cv(self):             # <<<<<<<<<<<<<<
 *         """ Specific heat at constant volume for each CV that exists """
 *         return self.get(constants.iCvmass,0.001)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_2cv_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_2cv_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_2cv___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_2cv___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_get __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 577, 0, __PYX_ERR(0, 577, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":579
 *     def cv(self):
 *         """ Specific heat at constant volume for each CV that exists """
 *         return self.get(constants.iCvmass,0.001)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.factor = 0.001;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self->__pyx_vtab)->get(__pyx_v_self, CoolProp::iCvmass, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":577
 * 
 *     @property
 *     def cv(self):             # <<<<<<<<<<<<<<
 *         """ Specific heat at constant volume for each CV that exists """
 *         return self.get(constants.iCvmass,0.001)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.cv.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":582
 * 
 *     @property
 *     def dpdT(self):             # <<<<<<<<<<<<<<
 *         """
 *         Derivative of pressure with respect to temperature at constant volume for each CV that exists
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_4dpdT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_4dpdT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_4dpdT___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_4dpdT___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  int __pyx_v_i;
  struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_CV = 0;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_arr = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 582, 0, __PYX_ERR(0, 582, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":588
 *         cdef int i
 *         cdef ControlVolume CV
 *         cdef arraym arr = arraym.__new__(arraym)             # <<<<<<<<<<<<<<
 *         arr.set_size(self.Nexist)
 *         for i in range(self.Nexist):
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_5PDSim_4misc_9datatypes_arraym), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym)))) __PYX_ERR(0, 588, __pyx_L1_error)
  __pyx_v_arr = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":589
 *         cdef ControlVolume CV
 *         cdef arraym arr = arraym.__new__(arraym)
 *         arr.set_size(self.Nexist)             # <<<<<<<<<<<<<<
 *         for i in range(self.Nexist):
 *             CV = self.exists_CV[i]
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_arr->__pyx_vtab)->set_size(__pyx_v_arr, __pyx_v_self->Nexist, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":590
 *         cdef arraym arr = arraym.__new__(arraym)
 *         arr.set_size(self.Nexist)
 *         for i in range(self.Nexist):             # <<<<<<<<<<<<<<
 *             CV = self.exists_CV[i]
 *             arr.set_index(i,CV.State.get_dpdT())
 */
  __pyx_t_2 = __pyx_v_self->Nexist;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PDSim/core/containers.pyx":591
 *         arr.set_size(self.Nexist)
 *         for i in range(self.Nexist):
 *             CV = self.exists_CV[i]             # <<<<<<<<<<<<<<
 *             arr.set_index(i,CV.State.get_dpdT())
 *         return arr
 */
    if (unlikely(__pyx_v_self->exists_CV == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 591, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->exists_CV, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4core_10containers_ControlVolume))))) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_CV, ((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "PDSim/core/containers.pyx":592
 *         for i in range(self.Nexist):
 *             CV = self.exists_CV[i]
 *             arr.set_index(i,CV.State.get_dpdT())             # <<<<<<<<<<<<<<
 *         return arr
 * 
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_CV->State->__pyx_vtab)->get_dpdT(__pyx_v_CV->State, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 592, __pyx_L1_error)
    __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym *)__pyx_v_arr->__pyx_vtab)->set_index(__pyx_v_arr, __pyx_v_i, __pyx_t_5, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PDSim/core/containers.pyx":593
 *             CV = self.exists_CV[i]
 *             arr.set_index(i,CV.State.get_dpdT())
 *         return arr             # <<<<<<<<<<<<<<
 * 
 *     cpdef updateStates(self, str name1, arraym array1, str name2, arraym array2):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":582
 * 
 *     @property
 *     def dpdT(self):             # <<<<<<<<<<<<<<
 *         """
 *         Derivative of pressure with respect to temperature at constant volume for each CV that exists
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.dpdT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_CV);
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":595
 *         return arr
 * 
 *     cpdef updateStates(self, str name1, arraym array1, str name2, arraym array2):             # <<<<<<<<<<<<<<
 * #        if not len(array1) == len(array2) or not len(array2)==len(self.exists_CV):
 * #            raise AttributeError('length of arrays must be the same and equal number of CV in existence')
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_23updateStates(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_updateStates(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, PyObject *__pyx_v_name1, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_array1, PyObject *__pyx_v_name2, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_array2, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_CV = NULL;
  PyObject *__pyx_v_v1 = NULL;
  PyObject *__pyx_v_v2 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("updateStates", 0);
  __Pyx_TraceCall("updateStates", __pyx_f[0], 595, 0, __PYX_ERR(0, 595, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_updateStates); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_23updateStates)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[5] = {__pyx_t_4, __pyx_v_name1, ((PyObject *)__pyx_v_array1), __pyx_v_name2, ((PyObject *)__pyx_v_array2)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[5] = {__pyx_t_4, __pyx_v_name1, ((PyObject *)__pyx_v_array1), __pyx_v_name2, ((PyObject *)__pyx_v_array2)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 595, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(__pyx_v_name1);
          __Pyx_GIVEREF(__pyx_v_name1);
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_name1);
          __Pyx_INCREF(((PyObject *)__pyx_v_array1));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_array1));
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_array1));
          __Pyx_INCREF(__pyx_v_name2);
          __Pyx_GIVEREF(__pyx_v_name2);
          PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_name2);
          __Pyx_INCREF(((PyObject *)__pyx_v_array2));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_array2));
          PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, ((PyObject *)__pyx_v_array2));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":600
 * #        keys = self.exists_keys
 *         # Update each of the states of the control volume
 *         for CV,v1,v2 in zip(self.exists_CV, array1, array2):             # <<<<<<<<<<<<<<
 *             CV.State.update({name1:v1,name2:v2})
 * 
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->exists_CV);
  __Pyx_GIVEREF(__pyx_v_self->exists_CV);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->exists_CV);
  __Pyx_INCREF(((PyObject *)__pyx_v_array1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_array1));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_array1));
  __Pyx_INCREF(((PyObject *)__pyx_v_array2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_array2));
  PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_array2));
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 600, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 600, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 600, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 600, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 600, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 600, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 600, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 600, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 600, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 600, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 600, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_6 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 2; __pyx_t_4 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 3) < 0) __PYX_ERR(0, 600, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 600, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_CV, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v2, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "PDSim/core/containers.pyx":601
 *         # Update each of the states of the control volume
 *         for CV,v1,v2 in zip(self.exists_CV, array1, array2):
 *             CV.State.update({name1:v1,name2:v2})             # <<<<<<<<<<<<<<
 * 
 *     cpdef volumes(self, double theta, bint as_dict = False):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_CV, __pyx_n_s_State); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_v_name1, __pyx_v_v1) < 0) __PYX_ERR(0, 601, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_4, __pyx_v_name2, __pyx_v_v2) < 0) __PYX_ERR(0, 601, __pyx_L1_error)
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "PDSim/core/containers.pyx":600
 * #        keys = self.exists_keys
 *         # Update each of the states of the control volume
 *         for CV,v1,v2 in zip(self.exists_CV, array1, array2):             # <<<<<<<<<<<<<<
 *             CV.State.update({name1:v1,name2:v2})
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":595
 *         return arr
 * 
 *     cpdef updateStates(self, str name1, arraym array1, str name2, arraym array2):             # <<<<<<<<<<<<<<
 * #        if not len(array1) == len(array2) or not len(array2)==len(self.exists_CV):
 * #            raise AttributeError('length of arrays must be the same and equal number of CV in existence')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.updateStates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_CV);
  __Pyx_XDECREF(__pyx_v_v1);
  __Pyx_XDECREF(__pyx_v_v2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_23updateStates(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_22updateStates[] = "ControlVolumeCollection.updateStates(self, str name1, arraym array1, str name2, arraym array2)";
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_23updateStates(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name1 = 0;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_array1 = 0;
  PyObject *__pyx_v_name2 = 0;
  struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_array2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateStates (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name1,&__pyx_n_s_array1,&__pyx_n_s_name2,&__pyx_n_s_array2,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_array1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("updateStates", 1, 4, 4, 1); __PYX_ERR(0, 595, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("updateStates", 1, 4, 4, 2); __PYX_ERR(0, 595, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_array2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("updateStates", 1, 4, 4, 3); __PYX_ERR(0, 595, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "updateStates") < 0)) __PYX_ERR(0, 595, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_name1 = ((PyObject*)values[0]);
    __pyx_v_array1 = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)values[1]);
    __pyx_v_name2 = ((PyObject*)values[2]);
    __pyx_v_array2 = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("updateStates", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 595, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.updateStates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name1), (&PyString_Type), 1, "name1", 1))) __PYX_ERR(0, 595, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array1), __pyx_ptype_5PDSim_4misc_9datatypes_arraym, 1, "array1", 0))) __PYX_ERR(0, 595, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name2), (&PyString_Type), 1, "name2", 1))) __PYX_ERR(0, 595, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array2), __pyx_ptype_5PDSim_4misc_9datatypes_arraym, 1, "array2", 0))) __PYX_ERR(0, 595, __pyx_L1_error)
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_22updateStates(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self), __pyx_v_name1, __pyx_v_array1, __pyx_v_name2, __pyx_v_array2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_22updateStates(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, PyObject *__pyx_v_name1, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_array1, PyObject *__pyx_v_name2, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_array2) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("updateStates", 0);
  __Pyx_TraceCall("updateStates (wrapper)", __pyx_f[0], 595, 0, __PYX_ERR(0, 595, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_updateStates(__pyx_v_self, __pyx_v_name1, __pyx_v_array1, __pyx_v_name2, __pyx_v_array2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.updateStates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":603
 *             CV.State.update({name1:v1,name2:v2})
 * 
 *     cpdef volumes(self, double theta, bint as_dict = False):             # <<<<<<<<<<<<<<
 *         """
 *         Each control volume class must define a function V_dV (through a pointer)
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_25volumes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_volumes(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, double __pyx_v_theta, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_volumes *__pyx_optional_args) {
  int __pyx_v_as_dict = ((int)0);
  PyObject *__pyx_v_V_dV = NULL;
  PyObject *__pyx_v_V = NULL;
  PyObject *__pyx_v_dV = NULL;
  PyObject *__pyx_v_V_dict = NULL;
  PyObject *__pyx_v_dV_dict = NULL;
  PyObject *__pyx_v_CV = NULL;
  PyObject *__pyx_7genexpr__pyx_v_key = NULL;
  PyObject *__pyx_7genexpr__pyx_v__V = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_key = NULL;
  PyObject *__pyx_8genexpr1__pyx_v__dV = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("volumes", 0);
  __Pyx_TraceCall("volumes", __pyx_f[0], 603, 0, __PYX_ERR(0, 603, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_as_dict = __pyx_optional_args->as_dict;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_volumes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 603, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_25volumes)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_theta); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 603, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_as_dict); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 603, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 603, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 603, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 603, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 603, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PDSim/core/containers.pyx":627
 * 
 *         #Loop over the control volumes that exist
 *         V_dV=[CV.V_dV(theta, **CV.V_dV_kwargs) for CV in self.exists_CV] #See below for Vfunc             # <<<<<<<<<<<<<<
 *         V,dV=zip(*V_dV)
 *         if not as_dict:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->exists_CV == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 627, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_self->exists_CV; __Pyx_INCREF(__pyx_t_2); __pyx_t_9 = 0;
  for (;;) {
    if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 627, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_CV, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_CV, __pyx_n_s_V_dV); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_theta); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_CV, __pyx_n_s_V_dV_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
      __PYX_ERR(0, 627, __pyx_L1_error)
    }
    if (likely(PyDict_CheckExact(__pyx_t_3))) {
      __pyx_t_8 = PyDict_Copy(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_8 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_t_3, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_V_dV = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":628
 *         #Loop over the control volumes that exist
 *         V_dV=[CV.V_dV(theta, **CV.V_dV_kwargs) for CV in self.exists_CV] #See below for Vfunc
 *         V,dV=zip(*V_dV)             # <<<<<<<<<<<<<<
 *         if not as_dict:
 *             return arraym(V),arraym(dV)
 */
  __pyx_t_1 = PySequence_Tuple(__pyx_v_V_dV); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 628, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = Py_TYPE(__pyx_t_8)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_10(__pyx_t_8); if (unlikely(!__pyx_t_1)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_3 = __pyx_t_10(__pyx_t_8); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_8), 2) < 0) __PYX_ERR(0, 628, __pyx_L1_error)
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 628, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_v_V = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_dV = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "PDSim/core/containers.pyx":629
 *         V_dV=[CV.V_dV(theta, **CV.V_dV_kwargs) for CV in self.exists_CV] #See below for Vfunc
 *         V,dV=zip(*V_dV)
 *         if not as_dict:             # <<<<<<<<<<<<<<
 *             return arraym(V),arraym(dV)
 *         else:
 */
  __pyx_t_11 = ((!(__pyx_v_as_dict != 0)) != 0);
  if (__pyx_t_11) {

    /* "PDSim/core/containers.pyx":630
 *         V,dV=zip(*V_dV)
 *         if not as_dict:
 *             return arraym(V),arraym(dV)             # <<<<<<<<<<<<<<
 *         else:
 *             V_dict = {key:_V for key,_V in zip(self.exists_keys,V)}
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5PDSim_4misc_9datatypes_arraym), __pyx_v_V); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5PDSim_4misc_9datatypes_arraym), __pyx_v_dV); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "PDSim/core/containers.pyx":629
 *         V_dV=[CV.V_dV(theta, **CV.V_dV_kwargs) for CV in self.exists_CV] #See below for Vfunc
 *         V,dV=zip(*V_dV)
 *         if not as_dict:             # <<<<<<<<<<<<<<
 *             return arraym(V),arraym(dV)
 *         else:
 */
  }

  /* "PDSim/core/containers.pyx":632
 *             return arraym(V),arraym(dV)
 *         else:
 *             V_dict = {key:_V for key,_V in zip(self.exists_keys,V)}             # <<<<<<<<<<<<<<
 *             dV_dict = {key:_dV for key,_dV in zip(self.exists_keys,dV)}
 *             return V_dict, dV_dict
 */
  /*else*/ {
    { /* enter inner scope */
      __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 632, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 632, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_self->exists_keys);
      __Pyx_GIVEREF(__pyx_v_self->exists_keys);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->exists_keys);
      __Pyx_INCREF(__pyx_v_V);
      __Pyx_GIVEREF(__pyx_v_V);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_V);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 632, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
        __pyx_t_12 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 632, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_12 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 632, __pyx_L10_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_12)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 632, __pyx_L10_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 632, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 632, __pyx_L10_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 632, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_12(__pyx_t_3);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 632, __pyx_L10_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
          PyObject* sequence = __pyx_t_2;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 632, __pyx_L10_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_4);
          #else
          __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 632, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 632, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 632, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_10 = Py_TYPE(__pyx_t_5)->tp_iternext;
          index = 0; __pyx_t_8 = __pyx_t_10(__pyx_t_5); if (unlikely(!__pyx_t_8)) goto __pyx_L13_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_8);
          index = 1; __pyx_t_4 = __pyx_t_10(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L13_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_4);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_5), 2) < 0) __PYX_ERR(0, 632, __pyx_L10_error)
          __pyx_t_10 = NULL;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L14_unpacking_done;
          __pyx_L13_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_10 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 632, __pyx_L10_error)
          __pyx_L14_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_key, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v__V, __pyx_t_4);
        __pyx_t_4 = 0;
        if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_7genexpr__pyx_v_key, (PyObject*)__pyx_7genexpr__pyx_v__V))) __PYX_ERR(0, 632, __pyx_L10_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v__V); __pyx_7genexpr__pyx_v__V = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_key); __pyx_7genexpr__pyx_v_key = 0;
      goto __pyx_L15_exit_scope;
      __pyx_L10_error:;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v__V); __pyx_7genexpr__pyx_v__V = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_key); __pyx_7genexpr__pyx_v_key = 0;
      goto __pyx_L1_error;
      __pyx_L15_exit_scope:;
    } /* exit inner scope */
    __pyx_v_V_dict = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "PDSim/core/containers.pyx":633
 *         else:
 *             V_dict = {key:_V for key,_V in zip(self.exists_keys,V)}
 *             dV_dict = {key:_dV for key,_dV in zip(self.exists_keys,dV)}             # <<<<<<<<<<<<<<
 *             return V_dict, dV_dict
 * 
 */
    { /* enter inner scope */
      __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 633, __pyx_L18_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 633, __pyx_L18_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_self->exists_keys);
      __Pyx_GIVEREF(__pyx_v_self->exists_keys);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->exists_keys);
      __Pyx_INCREF(__pyx_v_dV);
      __Pyx_GIVEREF(__pyx_v_dV);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_dV);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 633, __pyx_L18_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
        __pyx_t_12 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 633, __pyx_L18_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_12 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 633, __pyx_L18_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_12)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 633, __pyx_L18_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 633, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 633, __pyx_L18_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 633, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_12(__pyx_t_3);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 633, __pyx_L18_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
          PyObject* sequence = __pyx_t_2;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 633, __pyx_L18_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_8);
          #else
          __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 633, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 633, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 633, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_10 = Py_TYPE(__pyx_t_5)->tp_iternext;
          index = 0; __pyx_t_4 = __pyx_t_10(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L21_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_4);
          index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_5); if (unlikely(!__pyx_t_8)) goto __pyx_L21_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_8);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_5), 2) < 0) __PYX_ERR(0, 633, __pyx_L18_error)
          __pyx_t_10 = NULL;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L22_unpacking_done;
          __pyx_L21_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_10 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 633, __pyx_L18_error)
          __pyx_L22_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_key, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v__dV, __pyx_t_8);
        __pyx_t_8 = 0;
        if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_8genexpr1__pyx_v_key, (PyObject*)__pyx_8genexpr1__pyx_v__dV))) __PYX_ERR(0, 633, __pyx_L18_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v__dV); __pyx_8genexpr1__pyx_v__dV = 0;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_key); __pyx_8genexpr1__pyx_v_key = 0;
      goto __pyx_L23_exit_scope;
      __pyx_L18_error:;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v__dV); __pyx_8genexpr1__pyx_v__dV = 0;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_key); __pyx_8genexpr1__pyx_v_key = 0;
      goto __pyx_L1_error;
      __pyx_L23_exit_scope:;
    } /* exit inner scope */
    __pyx_v_dV_dict = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "PDSim/core/containers.pyx":634
 *             V_dict = {key:_V for key,_V in zip(self.exists_keys,V)}
 *             dV_dict = {key:_dV for key,_dV in zip(self.exists_keys,dV)}
 *             return V_dict, dV_dict             # <<<<<<<<<<<<<<
 * 
 * def rebuildCVCollection(CVs):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_V_dict);
    __Pyx_GIVEREF(__pyx_v_V_dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_V_dict);
    __Pyx_INCREF(__pyx_v_dV_dict);
    __Pyx_GIVEREF(__pyx_v_dV_dict);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_dV_dict);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "PDSim/core/containers.pyx":603
 *             CV.State.update({name1:v1,name2:v2})
 * 
 *     cpdef volumes(self, double theta, bint as_dict = False):             # <<<<<<<<<<<<<<
 *         """
 *         Each control volume class must define a function V_dV (through a pointer)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.volumes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_V_dV);
  __Pyx_XDECREF(__pyx_v_V);
  __Pyx_XDECREF(__pyx_v_dV);
  __Pyx_XDECREF(__pyx_v_V_dict);
  __Pyx_XDECREF(__pyx_v_dV_dict);
  __Pyx_XDECREF(__pyx_v_CV);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_key);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v__V);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_key);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v__dV);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_25volumes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_24volumes[] = "ControlVolumeCollection.volumes(self, double theta, bool as_dict=False)\n\n        Each control volume class must define a function V_dV (through a pointer) \n        that defines the volume and derivative of volume with respect to the \n        independent variable.  The function that V_dV points to MUST be of the form\n        \n        V,dV=V_dV(theta,**kwargs)\n        \n        If the parameter V_dV_kwargs is passed to the class constructor, these keyword \n        arguments will be unpacked into the volume function call.  Useful for passing \n        a flag to a given function\n        \n        Parameters\n        ----------\n        as_dict : boolean, optional\n            If ``True``, return the volumes and derivatives of volumes as a dictionary\n            \n        Returns\n        -------\n        A tuple of volumes and derivatives of volumes as arraym instances\n        \n        ";
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_25volumes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_theta;
  int __pyx_v_as_dict;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("volumes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_as_dict,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_as_dict);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "volumes") < 0)) __PYX_ERR(0, 603, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 603, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_as_dict = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_as_dict == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 603, __pyx_L3_error)
    } else {
      __pyx_v_as_dict = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("volumes", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 603, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.volumes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_24volumes(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self), __pyx_v_theta, __pyx_v_as_dict);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_24volumes(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, double __pyx_v_theta, int __pyx_v_as_dict) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_volumes __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("volumes", 0);
  __Pyx_TraceCall("volumes (wrapper)", __pyx_f[0], 603, 0, __PYX_ERR(0, 603, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.as_dict = __pyx_v_as_dict;
  __pyx_t_1 = __pyx_vtabptr_5PDSim_4core_10containers_ControlVolumeCollection->volumes(__pyx_v_self, __pyx_v_theta, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.volumes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":69
 * 
 * cdef class ControlVolumeCollection(object):
 *     cdef readonly list keys, CVs, indices, exists_keys, exists_indices, exists_CV             # <<<<<<<<<<<<<<
 *     cdef readonly dict Nodes
 *     cdef readonly int N, Nexist
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_4keys_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_4keys_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_4keys___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_4keys___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 69, 0, __PYX_ERR(2, 69, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->keys);
  __pyx_r = __pyx_v_self->keys;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.keys.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_3CVs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_3CVs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_3CVs___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_3CVs___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 69, 0, __PYX_ERR(2, 69, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->CVs);
  __pyx_r = __pyx_v_self->CVs;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.CVs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_7indices_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_7indices_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_7indices___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_7indices___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 69, 0, __PYX_ERR(2, 69, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->indices);
  __pyx_r = __pyx_v_self->indices;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.indices.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_11exists_keys_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_11exists_keys_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_11exists_keys___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_11exists_keys___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 69, 0, __PYX_ERR(2, 69, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->exists_keys);
  __pyx_r = __pyx_v_self->exists_keys;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.exists_keys.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_14exists_indices_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_14exists_indices_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_14exists_indices___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_14exists_indices___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 69, 0, __PYX_ERR(2, 69, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->exists_indices);
  __pyx_r = __pyx_v_self->exists_indices;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.exists_indices.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_9exists_CV_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_9exists_CV_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_9exists_CV___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_9exists_CV___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 69, 0, __PYX_ERR(2, 69, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->exists_CV);
  __pyx_r = __pyx_v_self->exists_CV;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.exists_CV.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":70
 * cdef class ControlVolumeCollection(object):
 *     cdef readonly list keys, CVs, indices, exists_keys, exists_indices, exists_CV
 *     cdef readonly dict Nodes             # <<<<<<<<<<<<<<
 *     cdef readonly int N, Nexist
 *     cdef public CVArrays arrays
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_5Nodes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_5Nodes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_5Nodes___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_5Nodes___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 70, 0, __PYX_ERR(2, 70, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->Nodes);
  __pyx_r = __pyx_v_self->Nodes;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.Nodes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":71
 *     cdef readonly list keys, CVs, indices, exists_keys, exists_indices, exists_CV
 *     cdef readonly dict Nodes
 *     cdef readonly int N, Nexist             # <<<<<<<<<<<<<<
 *     cdef public CVArrays arrays
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_1N_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_1N_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_1N___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_1N___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 71, 0, __PYX_ERR(2, 71, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->N); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.N.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_6Nexist_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_6Nexist_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_6Nexist___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_6Nexist___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 71, 0, __PYX_ERR(2, 71, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->Nexist); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.Nexist.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pxd":72
 *     cdef readonly dict Nodes
 *     cdef readonly int N, Nexist
 *     cdef public CVArrays arrays             # <<<<<<<<<<<<<<
 * 
 *     cpdef add(self, ControlVolume CV)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays___get__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays___get__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 72, 0, __PYX_ERR(2, 72, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->arrays));
  __pyx_r = ((PyObject *)__pyx_v_self->arrays);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.arrays.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays_2__set__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays_2__set__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 72, 0, __PYX_ERR(2, 72, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5PDSim_4core_10containers_CVArrays))))) __PYX_ERR(2, 72, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->arrays);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->arrays));
  __pyx_v_self->arrays = ((struct __pyx_obj_5PDSim_4core_10containers_CVArrays *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.arrays.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays_4__del__(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays_4__del__(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 72, 0, __PYX_ERR(2, 72, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->arrays);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->arrays));
  __pyx_v_self->arrays = ((struct __pyx_obj_5PDSim_4core_10containers_CVArrays *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PDSim.core.containers.ControlVolumeCollection.arrays.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":636
 *             return V_dict, dV_dict
 * 
 * def rebuildCVCollection(CVs):             # <<<<<<<<<<<<<<
 *     CVC = ControlVolumeCollection()
 *     for CV in CVs:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_1rebuildCVCollection(PyObject *__pyx_self, PyObject *__pyx_v_CVs); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_rebuildCVCollection[] = "rebuildCVCollection(CVs)";
static PyMethodDef __pyx_mdef_5PDSim_4core_10containers_1rebuildCVCollection = {"rebuildCVCollection", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_1rebuildCVCollection, METH_O, __pyx_doc_5PDSim_4core_10containers_rebuildCVCollection};
static PyObject *__pyx_pw_5PDSim_4core_10containers_1rebuildCVCollection(PyObject *__pyx_self, PyObject *__pyx_v_CVs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rebuildCVCollection (wrapper)", 0);
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_rebuildCVCollection(__pyx_self, ((PyObject *)__pyx_v_CVs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_rebuildCVCollection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_CVs) {
  struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *__pyx_v_CVC = NULL;
  PyObject *__pyx_v_CV = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__6)
  __Pyx_RefNannySetupContext("rebuildCVCollection", 0);
  __Pyx_TraceCall("rebuildCVCollection", __pyx_f[0], 636, 0, __PYX_ERR(0, 636, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":637
 * 
 * def rebuildCVCollection(CVs):
 *     CVC = ControlVolumeCollection()             # <<<<<<<<<<<<<<
 *     for CV in CVs:
 *         CVC.add(CV)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5PDSim_4core_10containers_ControlVolumeCollection)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_CVC = ((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":638
 * def rebuildCVCollection(CVs):
 *     CVC = ControlVolumeCollection()
 *     for CV in CVs:             # <<<<<<<<<<<<<<
 *         CVC.add(CV)
 *     CVC.rebuild_exists()
 */
  if (likely(PyList_CheckExact(__pyx_v_CVs)) || PyTuple_CheckExact(__pyx_v_CVs)) {
    __pyx_t_1 = __pyx_v_CVs; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_CVs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 638, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 638, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 638, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 638, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 638, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 638, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_CV, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "PDSim/core/containers.pyx":639
 *     CVC = ControlVolumeCollection()
 *     for CV in CVs:
 *         CVC.add(CV)             # <<<<<<<<<<<<<<
 *     CVC.rebuild_exists()
 *     return CVC
 */
    if (!(likely(((__pyx_v_CV) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_CV, __pyx_ptype_5PDSim_4core_10containers_ControlVolume))))) __PYX_ERR(0, 639, __pyx_L1_error)
    __pyx_t_4 = ((struct __pyx_vtabstruct_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_CVC->__pyx_vtab)->add(__pyx_v_CVC, ((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v_CV), 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "PDSim/core/containers.pyx":638
 * def rebuildCVCollection(CVs):
 *     CVC = ControlVolumeCollection()
 *     for CV in CVs:             # <<<<<<<<<<<<<<
 *         CVC.add(CV)
 *     CVC.rebuild_exists()
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":640
 *     for CV in CVs:
 *         CVC.add(CV)
 *     CVC.rebuild_exists()             # <<<<<<<<<<<<<<
 *     return CVC
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5PDSim_4core_10containers_ControlVolumeCollection *)__pyx_v_CVC->__pyx_vtab)->rebuild_exists(__pyx_v_CVC, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":641
 *         CVC.add(CV)
 *     CVC.rebuild_exists()
 *     return CVC             # <<<<<<<<<<<<<<
 * 
 * cpdef list collect_State_h(list CVList):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_CVC));
  __pyx_r = ((PyObject *)__pyx_v_CVC);
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":636
 *             return V_dict, dV_dict
 * 
 * def rebuildCVCollection(CVs):             # <<<<<<<<<<<<<<
 *     CVC = ControlVolumeCollection()
 *     for CV in CVs:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.containers.rebuildCVCollection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_CVC);
  __Pyx_XDECREF(__pyx_v_CV);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/core/containers.pyx":643
 *     return CVC
 * 
 * cpdef list collect_State_h(list CVList):             # <<<<<<<<<<<<<<
 *     cdef ControlVolume CV
 *     return [CV.State.get_h() for CV in CVList]
 */

static PyObject *__pyx_pw_5PDSim_4core_10containers_3collect_State_h(PyObject *__pyx_self, PyObject *__pyx_v_CVList); /*proto*/
static PyObject *__pyx_f_5PDSim_4core_10containers_collect_State_h(PyObject *__pyx_v_CVList, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v_CV = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("collect_State_h", 0);
  __Pyx_TraceCall("collect_State_h", __pyx_f[0], 643, 0, __PYX_ERR(0, 643, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":645
 * cpdef list collect_State_h(list CVList):
 *     cdef ControlVolume CV
 *     return [CV.State.get_h() for CV in CVList]             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_CVList == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 645, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_CVList; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 645, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5PDSim_4core_10containers_ControlVolume))))) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_CV, ((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_t_4));
    __pyx_t_4 = 0;
    __pyx_t_5 = ((struct __pyx_vtabstruct_8CoolProp_8CoolProp_State *)__pyx_v_CV->State->__pyx_vtab)->get_h(__pyx_v_CV->State, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L1_error)
    __pyx_t_4 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PDSim/core/containers.pyx":643
 *     return CVC
 * 
 * cpdef list collect_State_h(list CVList):             # <<<<<<<<<<<<<<
 *     cdef ControlVolume CV
 *     return [CV.State.get_h() for CV in CVList]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.core.containers.collect_State_h", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_CV);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_3collect_State_h(PyObject *__pyx_self, PyObject *__pyx_v_CVList); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_2collect_State_h[] = "collect_State_h(list CVList) -> list";
static PyObject *__pyx_pw_5PDSim_4core_10containers_3collect_State_h(PyObject *__pyx_self, PyObject *__pyx_v_CVList) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("collect_State_h (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_CVList), (&PyList_Type), 1, "CVList", 1))) __PYX_ERR(0, 643, __pyx_L1_error)
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_2collect_State_h(__pyx_self, ((PyObject*)__pyx_v_CVList));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_2collect_State_h(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_CVList) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("collect_State_h", 0);
  __Pyx_TraceCall("collect_State_h (wrapper)", __pyx_f[0], 643, 0, __PYX_ERR(0, 643, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_4core_10containers_collect_State_h(__pyx_v_CVList, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.core.containers.collect_State_h", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Tube(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_5__pyx_unpickle_Tube(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_4__pyx_unpickle_Tube[] = "__pyx_unpickle_Tube(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_5PDSim_4core_10containers_5__pyx_unpickle_Tube = {"__pyx_unpickle_Tube", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5PDSim_4core_10containers_5__pyx_unpickle_Tube, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4core_10containers_4__pyx_unpickle_Tube};
static PyObject *__pyx_pw_5PDSim_4core_10containers_5__pyx_unpickle_Tube(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Tube (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Tube", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Tube", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Tube") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Tube", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.containers.__pyx_unpickle_Tube", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_4__pyx_unpickle_Tube(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_4__pyx_unpickle_Tube(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__7)
  __Pyx_RefNannySetupContext("__pyx_unpickle_Tube", 0);
  __Pyx_TraceCall("__pyx_unpickle_Tube", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x1eb2107:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1eb2107 = (ID, L, OD, Q, Q_add, State1, State2, TubeFcn, alpha, exists, fixed, i1, i2, m_key1, m_key2, mdot))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x1eb2107) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x1eb2107:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1eb2107 = (ID, L, OD, Q, Q_add, State1, State2, TubeFcn, alpha, exists, fixed, i1, i2, m_key1, m_key2, mdot))" % __pyx_checksum)
 *     __pyx_result = Tube.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x1eb2107:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1eb2107 = (ID, L, OD, Q, Q_add, State1, State2, TubeFcn, alpha, exists, fixed, i1, i2, m_key1, m_key2, mdot))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Tube.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x1e, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x1eb2107:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1eb2107 = (ID, L, OD, Q, Q_add, State1, State2, TubeFcn, alpha, exists, fixed, i1, i2, m_key1, m_key2, mdot))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1eb2107 = (ID, L, OD, Q, Q_add, State1, State2, TubeFcn, alpha, exists, fixed, i1, i2, m_key1, m_key2, mdot))" % __pyx_checksum)
 *     __pyx_result = Tube.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Tube__set_state(<Tube> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5PDSim_4core_10containers_Tube), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1eb2107 = (ID, L, OD, Q, Q_add, State1, State2, TubeFcn, alpha, exists, fixed, i1, i2, m_key1, m_key2, mdot))" % __pyx_checksum)
 *     __pyx_result = Tube.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Tube__set_state(<Tube> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Tube.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Tube__set_state(<Tube> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Tube__set_state(Tube __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_5PDSim_4core_10containers___pyx_unpickle_Tube__set_state(((struct __pyx_obj_5PDSim_4core_10containers_Tube *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1eb2107 = (ID, L, OD, Q, Q_add, State1, State2, TubeFcn, alpha, exists, fixed, i1, i2, m_key1, m_key2, mdot))" % __pyx_checksum)
 *     __pyx_result = Tube.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Tube__set_state(<Tube> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Tube__set_state(<Tube> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Tube__set_state(Tube __pyx_result, tuple __pyx_state):
 *     __pyx_result.ID = __pyx_state[0]; __pyx_result.L = __pyx_state[1]; __pyx_result.OD = __pyx_state[2]; __pyx_result.Q = __pyx_state[3]; __pyx_result.Q_add = __pyx_state[4]; __pyx_result.State1 = __pyx_state[5]; __pyx_result.State2 = __pyx_state[6]; __pyx_result.TubeFcn = __pyx_state[7]; __pyx_result.alpha = __pyx_state[8]; __pyx_result.exists = __pyx_state[9]; __pyx_result.fixed = __pyx_state[10]; __pyx_result.i1 = __pyx_state[11]; __pyx_result.i2 = __pyx_state[12]; __pyx_result.m_key1 = __pyx_state[13]; __pyx_result.m_key2 = __pyx_state[14]; __pyx_result.mdot = __pyx_state[15]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Tube(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.core.containers.__pyx_unpickle_Tube", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Tube__set_state(<Tube> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Tube__set_state(Tube __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ID = __pyx_state[0]; __pyx_result.L = __pyx_state[1]; __pyx_result.OD = __pyx_state[2]; __pyx_result.Q = __pyx_state[3]; __pyx_result.Q_add = __pyx_state[4]; __pyx_result.State1 = __pyx_state[5]; __pyx_result.State2 = __pyx_state[6]; __pyx_result.TubeFcn = __pyx_state[7]; __pyx_result.alpha = __pyx_state[8]; __pyx_result.exists = __pyx_state[9]; __pyx_result.fixed = __pyx_state[10]; __pyx_result.i1 = __pyx_state[11]; __pyx_result.i2 = __pyx_state[12]; __pyx_result.m_key1 = __pyx_state[13]; __pyx_result.m_key2 = __pyx_state[14]; __pyx_result.mdot = __pyx_state[15]
 *     if len(__pyx_state) > 16 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_5PDSim_4core_10containers___pyx_unpickle_Tube__set_state(struct __pyx_obj_5PDSim_4core_10containers_Tube *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  bool __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Tube__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_Tube__set_state", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Tube__set_state(Tube __pyx_result, tuple __pyx_state):
 *     __pyx_result.ID = __pyx_state[0]; __pyx_result.L = __pyx_state[1]; __pyx_result.OD = __pyx_state[2]; __pyx_result.Q = __pyx_state[3]; __pyx_result.Q_add = __pyx_state[4]; __pyx_result.State1 = __pyx_state[5]; __pyx_result.State2 = __pyx_state[6]; __pyx_result.TubeFcn = __pyx_state[7]; __pyx_result.alpha = __pyx_state[8]; __pyx_result.exists = __pyx_state[9]; __pyx_result.fixed = __pyx_state[10]; __pyx_result.i1 = __pyx_state[11]; __pyx_result.i2 = __pyx_state[12]; __pyx_result.m_key1 = __pyx_state[13]; __pyx_result.m_key2 = __pyx_state[14]; __pyx_result.mdot = __pyx_state[15]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 16 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[16])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->ID = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->L = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->OD = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->Q = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->Q_add = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->State1);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->State1));
  __pyx_v___pyx_result->State1 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->State2);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->State2));
  __pyx_v___pyx_result->State2 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TubeFcn);
  __Pyx_DECREF(__pyx_v___pyx_result->TubeFcn);
  __pyx_v___pyx_result->TubeFcn = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->alpha = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->exists = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->fixed = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->i1 = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->i2 = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->m_key1);
  __Pyx_DECREF(__pyx_v___pyx_result->m_key1);
  __pyx_v___pyx_result->m_key1 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->m_key2);
  __Pyx_DECREF(__pyx_v___pyx_result->m_key2);
  __pyx_v___pyx_result->m_key2 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 15, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->mdot = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Tube__set_state(Tube __pyx_result, tuple __pyx_state):
 *     __pyx_result.ID = __pyx_state[0]; __pyx_result.L = __pyx_state[1]; __pyx_result.OD = __pyx_state[2]; __pyx_result.Q = __pyx_state[3]; __pyx_result.Q_add = __pyx_state[4]; __pyx_result.State1 = __pyx_state[5]; __pyx_result.State2 = __pyx_state[6]; __pyx_result.TubeFcn = __pyx_state[7]; __pyx_result.alpha = __pyx_state[8]; __pyx_result.exists = __pyx_state[9]; __pyx_result.fixed = __pyx_state[10]; __pyx_result.i1 = __pyx_state[11]; __pyx_result.i2 = __pyx_state[12]; __pyx_result.m_key1 = __pyx_state[13]; __pyx_result.m_key2 = __pyx_state[14]; __pyx_result.mdot = __pyx_state[15]
 *     if len(__pyx_state) > 16 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[16])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_6 > 16) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "(tree fragment)":14
 *     __pyx_result.ID = __pyx_state[0]; __pyx_result.L = __pyx_state[1]; __pyx_result.OD = __pyx_state[2]; __pyx_result.Q = __pyx_state[3]; __pyx_result.Q_add = __pyx_state[4]; __pyx_result.State1 = __pyx_state[5]; __pyx_result.State2 = __pyx_state[6]; __pyx_result.TubeFcn = __pyx_state[7]; __pyx_result.alpha = __pyx_state[8]; __pyx_result.exists = __pyx_state[9]; __pyx_result.fixed = __pyx_state[10]; __pyx_result.i1 = __pyx_state[11]; __pyx_result.i2 = __pyx_state[12]; __pyx_result.m_key1 = __pyx_state[13]; __pyx_result.m_key2 = __pyx_state[14]; __pyx_result.mdot = __pyx_state[15]
 *     if len(__pyx_state) > 16 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[16])             # <<<<<<<<<<<<<<
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_update); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 16, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Tube__set_state(Tube __pyx_result, tuple __pyx_state):
 *     __pyx_result.ID = __pyx_state[0]; __pyx_result.L = __pyx_state[1]; __pyx_result.OD = __pyx_state[2]; __pyx_result.Q = __pyx_state[3]; __pyx_result.Q_add = __pyx_state[4]; __pyx_result.State1 = __pyx_state[5]; __pyx_result.State2 = __pyx_state[6]; __pyx_result.TubeFcn = __pyx_state[7]; __pyx_result.alpha = __pyx_state[8]; __pyx_result.exists = __pyx_state[9]; __pyx_result.fixed = __pyx_state[10]; __pyx_result.i1 = __pyx_state[11]; __pyx_result.i2 = __pyx_state[12]; __pyx_result.m_key1 = __pyx_state[13]; __pyx_result.m_key2 = __pyx_state[14]; __pyx_result.mdot = __pyx_state[15]
 *     if len(__pyx_state) > 16 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[16])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Tube__set_state(<Tube> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Tube__set_state(Tube __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ID = __pyx_state[0]; __pyx_result.L = __pyx_state[1]; __pyx_result.OD = __pyx_state[2]; __pyx_result.Q = __pyx_state[3]; __pyx_result.Q_add = __pyx_state[4]; __pyx_result.State1 = __pyx_state[5]; __pyx_result.State2 = __pyx_state[6]; __pyx_result.TubeFcn = __pyx_state[7]; __pyx_result.alpha = __pyx_state[8]; __pyx_result.exists = __pyx_state[9]; __pyx_result.fixed = __pyx_state[10]; __pyx_result.i1 = __pyx_state[11]; __pyx_result.i2 = __pyx_state[12]; __pyx_result.m_key1 = __pyx_state[13]; __pyx_result.m_key2 = __pyx_state[14]; __pyx_result.mdot = __pyx_state[15]
 *     if len(__pyx_state) > 16 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("PDSim.core.containers.__pyx_unpickle_Tube__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_TubeCollection(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_7__pyx_unpickle_TubeCollection(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_6__pyx_unpickle_TubeCollection[] = "__pyx_unpickle_TubeCollection(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_5PDSim_4core_10containers_7__pyx_unpickle_TubeCollection = {"__pyx_unpickle_TubeCollection", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5PDSim_4core_10containers_7__pyx_unpickle_TubeCollection, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4core_10containers_6__pyx_unpickle_TubeCollection};
static PyObject *__pyx_pw_5PDSim_4core_10containers_7__pyx_unpickle_TubeCollection(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_TubeCollection (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_TubeCollection", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_TubeCollection", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_TubeCollection") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_TubeCollection", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.containers.__pyx_unpickle_TubeCollection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_6__pyx_unpickle_TubeCollection(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_6__pyx_unpickle_TubeCollection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__8)
  __Pyx_RefNannySetupContext("__pyx_unpickle_TubeCollection", 0);
  __Pyx_TraceCall("__pyx_unpickle_TubeCollection", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x5c6cba0:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x5c6cba0 = (Tarray, _Nodes, harray, parray))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x5c6cba0) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x5c6cba0:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x5c6cba0 = (Tarray, _Nodes, harray, parray))" % __pyx_checksum)
 *     __pyx_result = TubeCollection.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x5c6cba0:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x5c6cba0 = (Tarray, _Nodes, harray, parray))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = TubeCollection.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x5c, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x5c6cba0:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x5c6cba0 = (Tarray, _Nodes, harray, parray))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x5c6cba0 = (Tarray, _Nodes, harray, parray))" % __pyx_checksum)
 *     __pyx_result = TubeCollection.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_TubeCollection__set_state(<TubeCollection> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5PDSim_4core_10containers_TubeCollection), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x5c6cba0 = (Tarray, _Nodes, harray, parray))" % __pyx_checksum)
 *     __pyx_result = TubeCollection.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_TubeCollection__set_state(<TubeCollection> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = TubeCollection.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_TubeCollection__set_state(<TubeCollection> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_TubeCollection__set_state(TubeCollection __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_5PDSim_4core_10containers___pyx_unpickle_TubeCollection__set_state(((struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x5c6cba0 = (Tarray, _Nodes, harray, parray))" % __pyx_checksum)
 *     __pyx_result = TubeCollection.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_TubeCollection__set_state(<TubeCollection> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_TubeCollection__set_state(<TubeCollection> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_TubeCollection__set_state(TubeCollection __pyx_result, tuple __pyx_state):
 *     __pyx_result.Tarray = __pyx_state[0]; __pyx_result._Nodes = __pyx_state[1]; __pyx_result.harray = __pyx_state[2]; __pyx_result.parray = __pyx_state[3]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_TubeCollection(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.core.containers.__pyx_unpickle_TubeCollection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_TubeCollection__set_state(<TubeCollection> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_TubeCollection__set_state(TubeCollection __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.Tarray = __pyx_state[0]; __pyx_result._Nodes = __pyx_state[1]; __pyx_result.harray = __pyx_state[2]; __pyx_result.parray = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_5PDSim_4core_10containers___pyx_unpickle_TubeCollection__set_state(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_TubeCollection__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_TubeCollection__set_state", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_TubeCollection__set_state(TubeCollection __pyx_result, tuple __pyx_state):
 *     __pyx_result.Tarray = __pyx_state[0]; __pyx_result._Nodes = __pyx_state[1]; __pyx_result.harray = __pyx_state[2]; __pyx_result.parray = __pyx_state[3]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->Tarray);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->Tarray));
  __pyx_v___pyx_result->Tarray = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_Nodes);
  __Pyx_DECREF(__pyx_v___pyx_result->_Nodes);
  __pyx_v___pyx_result->_Nodes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->harray);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->harray));
  __pyx_v___pyx_result->harray = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->parray);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->parray));
  __pyx_v___pyx_result->parray = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_TubeCollection__set_state(TubeCollection __pyx_result, tuple __pyx_state):
 *     __pyx_result.Tarray = __pyx_state[0]; __pyx_result._Nodes = __pyx_state[1]; __pyx_result.harray = __pyx_state[2]; __pyx_result.parray = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 4) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.Tarray = __pyx_state[0]; __pyx_result._Nodes = __pyx_state[1]; __pyx_result.harray = __pyx_state[2]; __pyx_result.parray = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_TubeCollection__set_state(TubeCollection __pyx_result, tuple __pyx_state):
 *     __pyx_result.Tarray = __pyx_state[0]; __pyx_result._Nodes = __pyx_state[1]; __pyx_result.harray = __pyx_state[2]; __pyx_result.parray = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_TubeCollection__set_state(<TubeCollection> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_TubeCollection__set_state(TubeCollection __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.Tarray = __pyx_state[0]; __pyx_result._Nodes = __pyx_state[1]; __pyx_result.harray = __pyx_state[2]; __pyx_result.parray = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("PDSim.core.containers.__pyx_unpickle_TubeCollection__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_CVScore(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_9__pyx_unpickle_CVScore(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_8__pyx_unpickle_CVScore[] = "__pyx_unpickle_CVScore(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_5PDSim_4core_10containers_9__pyx_unpickle_CVScore = {"__pyx_unpickle_CVScore", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5PDSim_4core_10containers_9__pyx_unpickle_CVScore, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4core_10containers_8__pyx_unpickle_CVScore};
static PyObject *__pyx_pw_5PDSim_4core_10containers_9__pyx_unpickle_CVScore(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_CVScore (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CVScore", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CVScore", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_CVScore") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CVScore", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.containers.__pyx_unpickle_CVScore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_8__pyx_unpickle_CVScore(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_8__pyx_unpickle_CVScore(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__9)
  __Pyx_RefNannySetupContext("__pyx_unpickle_CVScore", 0);
  __Pyx_TraceCall("__pyx_unpickle_CVScore", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xc130e55:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xc130e55 = (N, Q, T, V, array_list, cp, cv, dTdtheta, dV, dmdtheta, dpdT_constV, drhodtheta, h, m, omega, p, property_derivs, rho, state_vars, summerdT, summerdm, v))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xc130e55) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xc130e55:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xc130e55 = (N, Q, T, V, array_list, cp, cv, dTdtheta, dV, dmdtheta, dpdT_constV, drhodtheta, h, m, omega, p, property_derivs, rho, state_vars, summerdT, summerdm, v))" % __pyx_checksum)
 *     __pyx_result = CVScore.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xc130e55:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xc130e55 = (N, Q, T, V, array_list, cp, cv, dTdtheta, dV, dmdtheta, dpdT_constV, drhodtheta, h, m, omega, p, property_derivs, rho, state_vars, summerdT, summerdm, v))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = CVScore.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xc1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xc130e55:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xc130e55 = (N, Q, T, V, array_list, cp, cv, dTdtheta, dV, dmdtheta, dpdT_constV, drhodtheta, h, m, omega, p, property_derivs, rho, state_vars, summerdT, summerdm, v))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xc130e55 = (N, Q, T, V, array_list, cp, cv, dTdtheta, dV, dmdtheta, dpdT_constV, drhodtheta, h, m, omega, p, property_derivs, rho, state_vars, summerdT, summerdm, v))" % __pyx_checksum)
 *     __pyx_result = CVScore.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_CVScore__set_state(<CVScore> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5PDSim_4core_10containers_CVScore), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xc130e55 = (N, Q, T, V, array_list, cp, cv, dTdtheta, dV, dmdtheta, dpdT_constV, drhodtheta, h, m, omega, p, property_derivs, rho, state_vars, summerdT, summerdm, v))" % __pyx_checksum)
 *     __pyx_result = CVScore.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_CVScore__set_state(<CVScore> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = CVScore.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_CVScore__set_state(<CVScore> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_CVScore__set_state(CVScore __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_5PDSim_4core_10containers___pyx_unpickle_CVScore__set_state(((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xc130e55 = (N, Q, T, V, array_list, cp, cv, dTdtheta, dV, dmdtheta, dpdT_constV, drhodtheta, h, m, omega, p, property_derivs, rho, state_vars, summerdT, summerdm, v))" % __pyx_checksum)
 *     __pyx_result = CVScore.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_CVScore__set_state(<CVScore> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_CVScore__set_state(<CVScore> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_CVScore__set_state(CVScore __pyx_result, tuple __pyx_state):
 *     __pyx_result.N = __pyx_state[0]; __pyx_result.Q = __pyx_state[1]; __pyx_result.T = __pyx_state[2]; __pyx_result.V = __pyx_state[3]; __pyx_result.array_list = __pyx_state[4]; __pyx_result.cp = __pyx_state[5]; __pyx_result.cv = __pyx_state[6]; __pyx_result.dTdtheta = __pyx_state[7]; __pyx_result.dV = __pyx_state[8]; __pyx_result.dmdtheta = __pyx_state[9]; __pyx_result.dpdT_constV = __pyx_state[10]; __pyx_result.drhodtheta = __pyx_state[11]; __pyx_result.h = __pyx_state[12]; __pyx_result.m = __pyx_state[13]; __pyx_result.omega = __pyx_state[14]; __pyx_result.p = __pyx_state[15]; __pyx_result.property_derivs = __pyx_state[16]; __pyx_result.rho = __pyx_state[17]; __pyx_result.state_vars = __pyx_state[18]; __pyx_result.summerdT = __pyx_state[19]; __pyx_result.summerdm = __pyx_state[20]; __pyx_result.v = __pyx_state[21]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_CVScore(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.core.containers.__pyx_unpickle_CVScore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_CVScore__set_state(<CVScore> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_CVScore__set_state(CVScore __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.N = __pyx_state[0]; __pyx_result.Q = __pyx_state[1]; __pyx_result.T = __pyx_state[2]; __pyx_result.V = __pyx_state[3]; __pyx_result.array_list = __pyx_state[4]; __pyx_result.cp = __pyx_state[5]; __pyx_result.cv = __pyx_state[6]; __pyx_result.dTdtheta = __pyx_state[7]; __pyx_result.dV = __pyx_state[8]; __pyx_result.dmdtheta = __pyx_state[9]; __pyx_result.dpdT_constV = __pyx_state[10]; __pyx_result.drhodtheta = __pyx_state[11]; __pyx_result.h = __pyx_state[12]; __pyx_result.m = __pyx_state[13]; __pyx_result.omega = __pyx_state[14]; __pyx_result.p = __pyx_state[15]; __pyx_result.property_derivs = __pyx_state[16]; __pyx_result.rho = __pyx_state[17]; __pyx_result.state_vars = __pyx_state[18]; __pyx_result.summerdT = __pyx_state[19]; __pyx_result.summerdm = __pyx_state[20]; __pyx_result.v = __pyx_state[21]
 *     if len(__pyx_state) > 22 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_5PDSim_4core_10containers___pyx_unpickle_CVScore__set_state(struct __pyx_obj_5PDSim_4core_10containers_CVScore *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_CVScore__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_CVScore__set_state", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_CVScore__set_state(CVScore __pyx_result, tuple __pyx_state):
 *     __pyx_result.N = __pyx_state[0]; __pyx_result.Q = __pyx_state[1]; __pyx_result.T = __pyx_state[2]; __pyx_result.V = __pyx_state[3]; __pyx_result.array_list = __pyx_state[4]; __pyx_result.cp = __pyx_state[5]; __pyx_result.cv = __pyx_state[6]; __pyx_result.dTdtheta = __pyx_state[7]; __pyx_result.dV = __pyx_state[8]; __pyx_result.dmdtheta = __pyx_state[9]; __pyx_result.dpdT_constV = __pyx_state[10]; __pyx_result.drhodtheta = __pyx_state[11]; __pyx_result.h = __pyx_state[12]; __pyx_result.m = __pyx_state[13]; __pyx_result.omega = __pyx_state[14]; __pyx_result.p = __pyx_state[15]; __pyx_result.property_derivs = __pyx_state[16]; __pyx_result.rho = __pyx_state[17]; __pyx_result.state_vars = __pyx_state[18]; __pyx_result.summerdT = __pyx_state[19]; __pyx_result.summerdm = __pyx_state[20]; __pyx_result.v = __pyx_state[21]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 22 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[22])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->N = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->Q);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->Q));
  __pyx_v___pyx_result->Q = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->T);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->T));
  __pyx_v___pyx_result->T = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->V);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->V));
  __pyx_v___pyx_result->V = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->array_list);
  __Pyx_DECREF(__pyx_v___pyx_result->array_list);
  __pyx_v___pyx_result->array_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->cp);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->cp));
  __pyx_v___pyx_result->cp = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->cv);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->cv));
  __pyx_v___pyx_result->cv = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->dTdtheta);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->dTdtheta));
  __pyx_v___pyx_result->dTdtheta = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->dV);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->dV));
  __pyx_v___pyx_result->dV = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->dmdtheta);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->dmdtheta));
  __pyx_v___pyx_result->dmdtheta = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->dpdT_constV);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->dpdT_constV));
  __pyx_v___pyx_result->dpdT_constV = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->drhodtheta);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->drhodtheta));
  __pyx_v___pyx_result->drhodtheta = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->h);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->h));
  __pyx_v___pyx_result->h = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->m);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->m));
  __pyx_v___pyx_result->m = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->omega = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 15, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->p);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->p));
  __pyx_v___pyx_result->p = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 16, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->property_derivs);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->property_derivs));
  __pyx_v___pyx_result->property_derivs = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 17, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->rho);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->rho));
  __pyx_v___pyx_result->rho = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 18, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->state_vars = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 19, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->summerdT);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->summerdT));
  __pyx_v___pyx_result->summerdT = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 20, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->summerdm);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->summerdm));
  __pyx_v___pyx_result->summerdm = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 21, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_4misc_9datatypes_arraym))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->v);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->v));
  __pyx_v___pyx_result->v = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_CVScore__set_state(CVScore __pyx_result, tuple __pyx_state):
 *     __pyx_result.N = __pyx_state[0]; __pyx_result.Q = __pyx_state[1]; __pyx_result.T = __pyx_state[2]; __pyx_result.V = __pyx_state[3]; __pyx_result.array_list = __pyx_state[4]; __pyx_result.cp = __pyx_state[5]; __pyx_result.cv = __pyx_state[6]; __pyx_result.dTdtheta = __pyx_state[7]; __pyx_result.dV = __pyx_state[8]; __pyx_result.dmdtheta = __pyx_state[9]; __pyx_result.dpdT_constV = __pyx_state[10]; __pyx_result.drhodtheta = __pyx_state[11]; __pyx_result.h = __pyx_state[12]; __pyx_result.m = __pyx_state[13]; __pyx_result.omega = __pyx_state[14]; __pyx_result.p = __pyx_state[15]; __pyx_result.property_derivs = __pyx_state[16]; __pyx_result.rho = __pyx_state[17]; __pyx_result.state_vars = __pyx_state[18]; __pyx_result.summerdT = __pyx_state[19]; __pyx_result.summerdm = __pyx_state[20]; __pyx_result.v = __pyx_state[21]
 *     if len(__pyx_state) > 22 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[22])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_5 > 22) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6 != 0);
  __pyx_t_4 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "(tree fragment)":14
 *     __pyx_result.N = __pyx_state[0]; __pyx_result.Q = __pyx_state[1]; __pyx_result.T = __pyx_state[2]; __pyx_result.V = __pyx_state[3]; __pyx_result.array_list = __pyx_state[4]; __pyx_result.cp = __pyx_state[5]; __pyx_result.cv = __pyx_state[6]; __pyx_result.dTdtheta = __pyx_state[7]; __pyx_result.dV = __pyx_state[8]; __pyx_result.dmdtheta = __pyx_state[9]; __pyx_result.dpdT_constV = __pyx_state[10]; __pyx_result.drhodtheta = __pyx_state[11]; __pyx_result.h = __pyx_state[12]; __pyx_result.m = __pyx_state[13]; __pyx_result.omega = __pyx_state[14]; __pyx_result.p = __pyx_state[15]; __pyx_result.property_derivs = __pyx_state[16]; __pyx_result.rho = __pyx_state[17]; __pyx_result.state_vars = __pyx_state[18]; __pyx_result.summerdT = __pyx_state[19]; __pyx_result.summerdm = __pyx_state[20]; __pyx_result.v = __pyx_state[21]
 *     if len(__pyx_state) > 22 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[22])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 22, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_1 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_CVScore__set_state(CVScore __pyx_result, tuple __pyx_state):
 *     __pyx_result.N = __pyx_state[0]; __pyx_result.Q = __pyx_state[1]; __pyx_result.T = __pyx_state[2]; __pyx_result.V = __pyx_state[3]; __pyx_result.array_list = __pyx_state[4]; __pyx_result.cp = __pyx_state[5]; __pyx_result.cv = __pyx_state[6]; __pyx_result.dTdtheta = __pyx_state[7]; __pyx_result.dV = __pyx_state[8]; __pyx_result.dmdtheta = __pyx_state[9]; __pyx_result.dpdT_constV = __pyx_state[10]; __pyx_result.drhodtheta = __pyx_state[11]; __pyx_result.h = __pyx_state[12]; __pyx_result.m = __pyx_state[13]; __pyx_result.omega = __pyx_state[14]; __pyx_result.p = __pyx_state[15]; __pyx_result.property_derivs = __pyx_state[16]; __pyx_result.rho = __pyx_state[17]; __pyx_result.state_vars = __pyx_state[18]; __pyx_result.summerdT = __pyx_state[19]; __pyx_result.summerdm = __pyx_state[20]; __pyx_result.v = __pyx_state[21]
 *     if len(__pyx_state) > 22 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[22])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_CVScore__set_state(<CVScore> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_CVScore__set_state(CVScore __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.N = __pyx_state[0]; __pyx_result.Q = __pyx_state[1]; __pyx_result.T = __pyx_state[2]; __pyx_result.V = __pyx_state[3]; __pyx_result.array_list = __pyx_state[4]; __pyx_result.cp = __pyx_state[5]; __pyx_result.cv = __pyx_state[6]; __pyx_result.dTdtheta = __pyx_state[7]; __pyx_result.dV = __pyx_state[8]; __pyx_result.dmdtheta = __pyx_state[9]; __pyx_result.dpdT_constV = __pyx_state[10]; __pyx_result.drhodtheta = __pyx_state[11]; __pyx_result.h = __pyx_state[12]; __pyx_result.m = __pyx_state[13]; __pyx_result.omega = __pyx_state[14]; __pyx_result.p = __pyx_state[15]; __pyx_result.property_derivs = __pyx_state[16]; __pyx_result.rho = __pyx_state[17]; __pyx_result.state_vars = __pyx_state[18]; __pyx_result.summerdT = __pyx_state[19]; __pyx_result.summerdm = __pyx_state[20]; __pyx_result.v = __pyx_state[21]
 *     if len(__pyx_state) > 22 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("PDSim.core.containers.__pyx_unpickle_CVScore__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_ControlVolume(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_4core_10containers_11__pyx_unpickle_ControlVolume(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_4core_10containers_10__pyx_unpickle_ControlVolume[] = "__pyx_unpickle_ControlVolume(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_5PDSim_4core_10containers_11__pyx_unpickle_ControlVolume = {"__pyx_unpickle_ControlVolume", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5PDSim_4core_10containers_11__pyx_unpickle_ControlVolume, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4core_10containers_10__pyx_unpickle_ControlVolume};
static PyObject *__pyx_pw_5PDSim_4core_10containers_11__pyx_unpickle_ControlVolume(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_ControlVolume (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ControlVolume", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ControlVolume", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_ControlVolume") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ControlVolume", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.core.containers.__pyx_unpickle_ControlVolume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_4core_10containers_10__pyx_unpickle_ControlVolume(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_4core_10containers_10__pyx_unpickle_ControlVolume(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__10)
  __Pyx_RefNannySetupContext("__pyx_unpickle_ControlVolume", 0);
  __Pyx_TraceCall("__pyx_unpickle_ControlVolume", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x28d24fd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x28d24fd = (ForceFcn, State, V_dV, V_dV_kwargs, becomes, exists, keyIndex, m_discharge_becomes, m_key))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x28d24fd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x28d24fd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x28d24fd = (ForceFcn, State, V_dV, V_dV_kwargs, becomes, exists, keyIndex, m_discharge_becomes, m_key))" % __pyx_checksum)
 *     __pyx_result = ControlVolume.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x28d24fd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x28d24fd = (ForceFcn, State, V_dV, V_dV_kwargs, becomes, exists, keyIndex, m_discharge_becomes, m_key))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = ControlVolume.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x28, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x28d24fd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x28d24fd = (ForceFcn, State, V_dV, V_dV_kwargs, becomes, exists, keyIndex, m_discharge_becomes, m_key))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x28d24fd = (ForceFcn, State, V_dV, V_dV_kwargs, becomes, exists, keyIndex, m_discharge_becomes, m_key))" % __pyx_checksum)
 *     __pyx_result = ControlVolume.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ControlVolume__set_state(<ControlVolume> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5PDSim_4core_10containers_ControlVolume), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x28d24fd = (ForceFcn, State, V_dV, V_dV_kwargs, becomes, exists, keyIndex, m_discharge_becomes, m_key))" % __pyx_checksum)
 *     __pyx_result = ControlVolume.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ControlVolume__set_state(<ControlVolume> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = ControlVolume.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ControlVolume__set_state(<ControlVolume> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_ControlVolume__set_state(ControlVolume __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_5PDSim_4core_10containers___pyx_unpickle_ControlVolume__set_state(((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x28d24fd = (ForceFcn, State, V_dV, V_dV_kwargs, becomes, exists, keyIndex, m_discharge_becomes, m_key))" % __pyx_checksum)
 *     __pyx_result = ControlVolume.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ControlVolume__set_state(<ControlVolume> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ControlVolume__set_state(<ControlVolume> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_ControlVolume__set_state(ControlVolume __pyx_result, tuple __pyx_state):
 *     __pyx_result.ForceFcn = __pyx_state[0]; __pyx_result.State = __pyx_state[1]; __pyx_result.V_dV = __pyx_state[2]; __pyx_result.V_dV_kwargs = __pyx_state[3]; __pyx_result.becomes = __pyx_state[4]; __pyx_result.exists = __pyx_state[5]; __pyx_result.keyIndex = __pyx_state[6]; __pyx_result.m_discharge_becomes = __pyx_state[7]; __pyx_result.m_key = __pyx_state[8]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ControlVolume(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PDSim.core.containers.__pyx_unpickle_ControlVolume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_ControlVolume__set_state(<ControlVolume> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ControlVolume__set_state(ControlVolume __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ForceFcn = __pyx_state[0]; __pyx_result.State = __pyx_state[1]; __pyx_result.V_dV = __pyx_state[2]; __pyx_result.V_dV_kwargs = __pyx_state[3]; __pyx_result.becomes = __pyx_state[4]; __pyx_result.exists = __pyx_state[5]; __pyx_result.keyIndex = __pyx_state[6]; __pyx_result.m_discharge_becomes = __pyx_state[7]; __pyx_result.m_key = __pyx_state[8]
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_5PDSim_4core_10containers___pyx_unpickle_ControlVolume__set_state(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  long __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ControlVolume__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_ControlVolume__set_state", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_ControlVolume__set_state(ControlVolume __pyx_result, tuple __pyx_state):
 *     __pyx_result.ForceFcn = __pyx_state[0]; __pyx_result.State = __pyx_state[1]; __pyx_result.V_dV = __pyx_state[2]; __pyx_result.V_dV_kwargs = __pyx_state[3]; __pyx_result.becomes = __pyx_state[4]; __pyx_result.exists = __pyx_state[5]; __pyx_result.keyIndex = __pyx_state[6]; __pyx_result.m_discharge_becomes = __pyx_state[7]; __pyx_result.m_key = __pyx_state[8]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[9])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->ForceFcn);
  __Pyx_DECREF(__pyx_v___pyx_result->ForceFcn);
  __pyx_v___pyx_result->ForceFcn = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8CoolProp_8CoolProp_State))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->State);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->State));
  __pyx_v___pyx_result->State = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->V_dV);
  __Pyx_DECREF(__pyx_v___pyx_result->V_dV);
  __pyx_v___pyx_result->V_dV = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->V_dV_kwargs);
  __Pyx_DECREF(__pyx_v___pyx_result->V_dV_kwargs);
  __pyx_v___pyx_result->V_dV_kwargs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->becomes);
  __Pyx_DECREF(__pyx_v___pyx_result->becomes);
  __pyx_v___pyx_result->becomes = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->exists = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_3 == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->keyIndex = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->m_discharge_becomes);
  __Pyx_DECREF(__pyx_v___pyx_result->m_discharge_becomes);
  __pyx_v___pyx_result->m_discharge_becomes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->m_key);
  __Pyx_DECREF(__pyx_v___pyx_result->m_key);
  __pyx_v___pyx_result->m_key = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_ControlVolume__set_state(ControlVolume __pyx_result, tuple __pyx_state):
 *     __pyx_result.ForceFcn = __pyx_state[0]; __pyx_result.State = __pyx_state[1]; __pyx_result.V_dV = __pyx_state[2]; __pyx_result.V_dV_kwargs = __pyx_state[3]; __pyx_result.becomes = __pyx_state[4]; __pyx_result.exists = __pyx_state[5]; __pyx_result.keyIndex = __pyx_state[6]; __pyx_result.m_discharge_becomes = __pyx_state[7]; __pyx_result.m_key = __pyx_state[8]
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[9])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 9) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.ForceFcn = __pyx_state[0]; __pyx_result.State = __pyx_state[1]; __pyx_result.V_dV = __pyx_state[2]; __pyx_result.V_dV_kwargs = __pyx_state[3]; __pyx_result.becomes = __pyx_state[4]; __pyx_result.exists = __pyx_state[5]; __pyx_result.keyIndex = __pyx_state[6]; __pyx_result.m_discharge_becomes = __pyx_state[7]; __pyx_result.m_key = __pyx_state[8]
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[9])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_ControlVolume__set_state(ControlVolume __pyx_result, tuple __pyx_state):
 *     __pyx_result.ForceFcn = __pyx_state[0]; __pyx_result.State = __pyx_state[1]; __pyx_result.V_dV = __pyx_state[2]; __pyx_result.V_dV_kwargs = __pyx_state[3]; __pyx_result.becomes = __pyx_state[4]; __pyx_result.exists = __pyx_state[5]; __pyx_result.keyIndex = __pyx_state[6]; __pyx_result.m_discharge_becomes = __pyx_state[7]; __pyx_result.m_key = __pyx_state[8]
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[9])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_ControlVolume__set_state(<ControlVolume> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ControlVolume__set_state(ControlVolume __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ForceFcn = __pyx_state[0]; __pyx_result.State = __pyx_state[1]; __pyx_result.V_dV = __pyx_state[2]; __pyx_result.V_dV_kwargs = __pyx_state[3]; __pyx_result.becomes = __pyx_state[4]; __pyx_result.exists = __pyx_state[5]; __pyx_result.keyIndex = __pyx_state[6]; __pyx_result.m_discharge_becomes = __pyx_state[7]; __pyx_result.m_key = __pyx_state[8]
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("PDSim.core.containers.__pyx_unpickle_ControlVolume__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew1", __pyx_f[3], 734, 0, __PYX_ERR(3, 734, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew2", __pyx_f[3], 737, 0, __PYX_ERR(3, 737, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew3", __pyx_f[3], 740, 0, __PYX_ERR(3, 740, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew4", __pyx_f[3], 743, 0, __PYX_ERR(3, 743, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew5", __pyx_f[3], 746, 0, __PYX_ERR(3, 746, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);
  __Pyx_TraceCall("PyDataType_SHAPE", __pyx_f[3], 749, 0, __PYX_ERR(3, 749, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":751
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":753
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.PyDataType_SHAPE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_array_base", 0);
  __Pyx_TraceCall("set_array_base", __pyx_f[3], 868, 0, __PYX_ERR(3, 868, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":869
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":870
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_array_base", 0);
  __Pyx_TraceCall("get_array_base", __pyx_f[3], 872, 0, __PYX_ERR(3, 872, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":873
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":875
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":876
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.get_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);
  __Pyx_TraceCall("import_array", __pyx_f[3], 880, 0, __PYX_ERR(3, 880, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":882
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 882, __pyx_L3_error)

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":883
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 883, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 884, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 884, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);
  __Pyx_TraceCall("import_umath", __pyx_f[3], 886, 0, __PYX_ERR(3, 886, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":888
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 888, __pyx_L3_error)

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":889
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 889, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 890, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 890, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);
  __Pyx_TraceCall("import_ufunc", __pyx_f[3], 892, 0, __PYX_ERR(3, 892, __pyx_L1_error));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":894
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 894, __pyx_L3_error)

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":895
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 895, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":896
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 896, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 896, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/misc/datatypes.pxd":41
 * cpdef arraym empty_arraym(int N)
 * 
 * cdef inline check_dims(arraym x, arraym y):             # <<<<<<<<<<<<<<
 *     if x.N != y.N:
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */

static CYTHON_INLINE PyObject *__pyx_f_5PDSim_4misc_9datatypes_check_dims(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_x, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_dims", 0);
  __Pyx_TraceCall("check_dims", __pyx_f[4], 41, 0, __PYX_ERR(4, 41, __pyx_L1_error));

  /* "PDSim/misc/datatypes.pxd":42
 * 
 * cdef inline check_dims(arraym x, arraym y):
 *     if x.N != y.N:             # <<<<<<<<<<<<<<
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */
  __pyx_t_1 = ((__pyx_v_x->N != __pyx_v_y->N) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "PDSim/misc/datatypes.pxd":43
 * cdef inline check_dims(arraym x, arraym y):
 *     if x.N != y.N:
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))             # <<<<<<<<<<<<<<
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_x->N); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Cannot_apply_unary_operator_to_a, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_and); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_y->N); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(4, 43, __pyx_L1_error)

    /* "PDSim/misc/datatypes.pxd":42
 * 
 * cdef inline check_dims(arraym x, arraym y):
 *     if x.N != y.N:             # <<<<<<<<<<<<<<
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */
  }

  /* "PDSim/misc/datatypes.pxd":41
 * cpdef arraym empty_arraym(int N)
 * 
 * cdef inline check_dims(arraym x, arraym y):             # <<<<<<<<<<<<<<
 *     if x.N != y.N:
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PDSim.misc.datatypes.check_dims", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5PDSim_4core_10containers_TubeCollection __pyx_vtable_5PDSim_4core_10containers_TubeCollection;

static PyObject *__pyx_tp_new_5PDSim_4core_10containers_TubeCollection(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *p;
  PyObject *o = (&PyList_Type)->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *)o);
  p->__pyx_vtab = __pyx_vtabptr_5PDSim_4core_10containers_TubeCollection;
  p->_Nodes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->harray = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->parray = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->Tarray = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4core_10containers_TubeCollection(PyObject *o) {
  struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *p = (struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_Nodes);
  Py_CLEAR(p->harray);
  Py_CLEAR(p->parray);
  Py_CLEAR(p->Tarray);
  PyObject_GC_Track(o);
  (&PyList_Type)->tp_dealloc(o);
}

static int __pyx_tp_traverse_5PDSim_4core_10containers_TubeCollection(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *p = (struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *)o;
  if (!(&PyList_Type)->tp_traverse); else { e = (&PyList_Type)->tp_traverse(o,v,a); if (e) return e; }
  if (p->_Nodes) {
    e = (*v)(p->_Nodes, a); if (e) return e;
  }
  if (p->harray) {
    e = (*v)(((PyObject *)p->harray), a); if (e) return e;
  }
  if (p->parray) {
    e = (*v)(((PyObject *)p->parray), a); if (e) return e;
  }
  if (p->Tarray) {
    e = (*v)(((PyObject *)p->Tarray), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4core_10containers_TubeCollection(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *p = (struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *)o;
  if (!(&PyList_Type)->tp_clear); else (&PyList_Type)->tp_clear(o);
  tmp = ((PyObject*)p->_Nodes);
  p->_Nodes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->harray);
  p->harray = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->parray);
  p->parray = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Tarray);
  p->Tarray = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_5PDSim_4core_10containers_TubeCollection(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_14TubeCollection_Nodes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_14TubeCollection_5Nodes_1__get__(o);
}

static PyMethodDef __pyx_methods_5PDSim_4core_10containers_TubeCollection[] = {
  {"get_Nodes", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_14TubeCollection_3get_Nodes, METH_NOARGS, __pyx_doc_5PDSim_4core_10containers_14TubeCollection_2get_Nodes},
  {"get_h", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_14TubeCollection_5get_h, METH_NOARGS, __pyx_doc_5PDSim_4core_10containers_14TubeCollection_4get_h},
  {"get_p", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_14TubeCollection_7get_p, METH_NOARGS, __pyx_doc_5PDSim_4core_10containers_14TubeCollection_6get_p},
  {"get_T", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_14TubeCollection_9get_T, METH_NOARGS, __pyx_doc_5PDSim_4core_10containers_14TubeCollection_8get_T},
  {"update_existence", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_14TubeCollection_11update_existence, METH_O, __pyx_doc_5PDSim_4core_10containers_14TubeCollection_10update_existence},
  {"update", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_14TubeCollection_13update, METH_NOARGS, __pyx_doc_5PDSim_4core_10containers_14TubeCollection_12update},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_14TubeCollection_17__reduce_cython__, METH_NOARGS, __pyx_doc_5PDSim_4core_10containers_14TubeCollection_16__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_14TubeCollection_19__setstate_cython__, METH_O, __pyx_doc_5PDSim_4core_10containers_14TubeCollection_18__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5PDSim_4core_10containers_TubeCollection[] = {
  {(char *)"Nodes", __pyx_getprop_5PDSim_4core_10containers_14TubeCollection_Nodes, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_TubeCollection = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5PDSim_4core_10containers_TubeCollection, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_TubeCollection = {
  0, /*mp_length*/
  __pyx_pw_5PDSim_4core_10containers_14TubeCollection_15__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5PDSim_4core_10containers_TubeCollection = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.core.containers.TubeCollection", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4core_10containers_TubeCollection, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_TubeCollection, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_TubeCollection, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "TubeCollection()", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4core_10containers_TubeCollection, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4core_10containers_TubeCollection, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4core_10containers_TubeCollection, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5PDSim_4core_10containers_TubeCollection, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5PDSim_4core_10containers_14TubeCollection_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4core_10containers_TubeCollection, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_5PDSim_4core_10containers_Tube(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5PDSim_4core_10containers_Tube *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4core_10containers_Tube *)o);
  p->m_key1 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->m_key2 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->State1 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  p->State2 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  p->TubeFcn = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4core_10containers_Tube(PyObject *o) {
  struct __pyx_obj_5PDSim_4core_10containers_Tube *p = (struct __pyx_obj_5PDSim_4core_10containers_Tube *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->m_key1);
  Py_CLEAR(p->m_key2);
  Py_CLEAR(p->State1);
  Py_CLEAR(p->State2);
  Py_CLEAR(p->TubeFcn);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5PDSim_4core_10containers_Tube(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4core_10containers_Tube *p = (struct __pyx_obj_5PDSim_4core_10containers_Tube *)o;
  if (p->State1) {
    e = (*v)(((PyObject *)p->State1), a); if (e) return e;
  }
  if (p->State2) {
    e = (*v)(((PyObject *)p->State2), a); if (e) return e;
  }
  if (p->TubeFcn) {
    e = (*v)(p->TubeFcn, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4core_10containers_Tube(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4core_10containers_Tube *p = (struct __pyx_obj_5PDSim_4core_10containers_Tube *)o;
  tmp = ((PyObject*)p->State1);
  p->State1 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->State2);
  p->State2 = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TubeFcn);
  p->TubeFcn = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_4Tube_key1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_4Tube_4key1_3__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_4Tube_key1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_4key1_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_4Tube_key2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_4Tube_4key2_3__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_4Tube_key2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_4key2_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_4Tube_fixed(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_4Tube_5fixed_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_4Tube_fixed(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_5fixed_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_4Tube_State1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_4Tube_6State1_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_4Tube_State1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_6State1_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_6State1_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_4Tube_State2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_4Tube_6State2_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_4Tube_State2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_6State2_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_6State2_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_4Tube_TubeFcn(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_4Tube_7TubeFcn_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_4Tube_TubeFcn(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_7TubeFcn_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_7TubeFcn_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_4Tube_Q_add(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_4Tube_5Q_add_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_4Tube_Q_add(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_5Q_add_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_4Tube_alpha(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_4Tube_5alpha_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_4Tube_alpha(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_5alpha_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_4Tube_L(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_4Tube_1L_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_4Tube_L(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_1L_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_4Tube_ID(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_4Tube_2ID_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_4Tube_ID(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_2ID_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_4Tube_OD(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_4Tube_2OD_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_4Tube_OD(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_2OD_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_4Tube_mdot(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_4Tube_4mdot_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_4Tube_mdot(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_4mdot_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_4Tube_Q(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_4Tube_1Q_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_4Tube_Q(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_1Q_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_4Tube_exists(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_4Tube_6exists_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_4Tube_exists(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_6exists_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_4Tube_i1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_4Tube_2i1_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_4Tube_i1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_2i1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_4Tube_i2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_4Tube_2i2_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_4Tube_i2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_4Tube_2i2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5PDSim_4core_10containers_Tube[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_4Tube_3__reduce_cython__, METH_NOARGS, __pyx_doc_5PDSim_4core_10containers_4Tube_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_4Tube_5__setstate_cython__, METH_O, __pyx_doc_5PDSim_4core_10containers_4Tube_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5PDSim_4core_10containers_Tube[] = {
  {(char *)"key1", __pyx_getprop_5PDSim_4core_10containers_4Tube_key1, __pyx_setprop_5PDSim_4core_10containers_4Tube_key1, (char *)0, 0},
  {(char *)"key2", __pyx_getprop_5PDSim_4core_10containers_4Tube_key2, __pyx_setprop_5PDSim_4core_10containers_4Tube_key2, (char *)0, 0},
  {(char *)"fixed", __pyx_getprop_5PDSim_4core_10containers_4Tube_fixed, __pyx_setprop_5PDSim_4core_10containers_4Tube_fixed, (char *)"fixed: 'int'", 0},
  {(char *)"State1", __pyx_getprop_5PDSim_4core_10containers_4Tube_State1, __pyx_setprop_5PDSim_4core_10containers_4Tube_State1, (char *)"State1: CoolProp.CoolProp.State", 0},
  {(char *)"State2", __pyx_getprop_5PDSim_4core_10containers_4Tube_State2, __pyx_setprop_5PDSim_4core_10containers_4Tube_State2, (char *)"State2: CoolProp.CoolProp.State", 0},
  {(char *)"TubeFcn", __pyx_getprop_5PDSim_4core_10containers_4Tube_TubeFcn, __pyx_setprop_5PDSim_4core_10containers_4Tube_TubeFcn, (char *)"TubeFcn: object", 0},
  {(char *)"Q_add", __pyx_getprop_5PDSim_4core_10containers_4Tube_Q_add, __pyx_setprop_5PDSim_4core_10containers_4Tube_Q_add, (char *)"Q_add: 'double'", 0},
  {(char *)"alpha", __pyx_getprop_5PDSim_4core_10containers_4Tube_alpha, __pyx_setprop_5PDSim_4core_10containers_4Tube_alpha, (char *)"alpha: 'double'", 0},
  {(char *)"L", __pyx_getprop_5PDSim_4core_10containers_4Tube_L, __pyx_setprop_5PDSim_4core_10containers_4Tube_L, (char *)"L: 'double'", 0},
  {(char *)"ID", __pyx_getprop_5PDSim_4core_10containers_4Tube_ID, __pyx_setprop_5PDSim_4core_10containers_4Tube_ID, (char *)"ID: 'double'", 0},
  {(char *)"OD", __pyx_getprop_5PDSim_4core_10containers_4Tube_OD, __pyx_setprop_5PDSim_4core_10containers_4Tube_OD, (char *)"OD: 'double'", 0},
  {(char *)"mdot", __pyx_getprop_5PDSim_4core_10containers_4Tube_mdot, __pyx_setprop_5PDSim_4core_10containers_4Tube_mdot, (char *)"mdot: 'double'", 0},
  {(char *)"Q", __pyx_getprop_5PDSim_4core_10containers_4Tube_Q, __pyx_setprop_5PDSim_4core_10containers_4Tube_Q, (char *)"Q: 'double'", 0},
  {(char *)"exists", __pyx_getprop_5PDSim_4core_10containers_4Tube_exists, __pyx_setprop_5PDSim_4core_10containers_4Tube_exists, (char *)"exists: 'bool'", 0},
  {(char *)"i1", __pyx_getprop_5PDSim_4core_10containers_4Tube_i1, __pyx_setprop_5PDSim_4core_10containers_4Tube_i1, (char *)"i1: 'int'", 0},
  {(char *)"i2", __pyx_getprop_5PDSim_4core_10containers_4Tube_i2, __pyx_setprop_5PDSim_4core_10containers_4Tube_i2, (char *)"i2: 'int'", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4core_10containers_Tube = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.core.containers.Tube", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4core_10containers_Tube), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4core_10containers_Tube, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Tube(key1, key2, L, ID, State1=None, State2=None, OD=-1, fixed=-1, TubeFcn=None, mdot=-1, exists=True)\n\n    A tube is a component of the model that allows for heat transfer and pressure drop.\n    \n    With this class, the state of at least one of the points is fixed.  For instance, at the inlet of the compressor, the state well upstream is quasi-steady.\n    ", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4core_10containers_Tube, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4core_10containers_Tube, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4core_10containers_Tube, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5PDSim_4core_10containers_Tube, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5PDSim_4core_10containers_4Tube_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4core_10containers_Tube, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_5PDSim_4core_10containers_ControlVolume(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)o);
  p->m_key = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->m_discharge_becomes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->becomes = Py_None; Py_INCREF(Py_None);
  p->V_dV = Py_None; Py_INCREF(Py_None);
  p->V_dV_kwargs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->ForceFcn = Py_None; Py_INCREF(Py_None);
  p->State = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4core_10containers_ControlVolume(PyObject *o) {
  struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *p = (struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->m_key);
  Py_CLEAR(p->m_discharge_becomes);
  Py_CLEAR(p->becomes);
  Py_CLEAR(p->V_dV);
  Py_CLEAR(p->V_dV_kwargs);
  Py_CLEAR(p->ForceFcn);
  Py_CLEAR(p->State);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5PDSim_4core_10containers_ControlVolume(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *p = (struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)o;
  if (p->becomes) {
    e = (*v)(p->becomes, a); if (e) return e;
  }
  if (p->V_dV) {
    e = (*v)(p->V_dV, a); if (e) return e;
  }
  if (p->V_dV_kwargs) {
    e = (*v)(p->V_dV_kwargs, a); if (e) return e;
  }
  if (p->ForceFcn) {
    e = (*v)(p->ForceFcn, a); if (e) return e;
  }
  if (p->State) {
    e = (*v)(((PyObject *)p->State), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4core_10containers_ControlVolume(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *p = (struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *)o;
  tmp = ((PyObject*)p->becomes);
  p->becomes = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->V_dV);
  p->V_dV = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->V_dV_kwargs);
  p->V_dV_kwargs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ForceFcn);
  p->ForceFcn = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->State);
  p->State = ((struct __pyx_obj_8CoolProp_8CoolProp_State *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_13ControlVolume_key(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_3key_3__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_key(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_3key_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_13ControlVolume_discharge_becomes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_17discharge_becomes_3__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_discharge_becomes(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_17discharge_becomes_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_13ControlVolume_keyIndex(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_8keyIndex_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_keyIndex(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_8keyIndex_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_13ControlVolume_becomes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_7becomes_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_becomes(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_7becomes_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_7becomes_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_13ControlVolume_V_dV(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_4V_dV_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_V_dV(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_4V_dV_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_4V_dV_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_13ControlVolume_V_dV_kwargs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_V_dV_kwargs(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_11V_dV_kwargs_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_13ControlVolume_ForceFcn(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_8ForceFcn_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_ForceFcn(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_8ForceFcn_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_8ForceFcn_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_13ControlVolume_exists(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_6exists_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_exists(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_6exists_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_13ControlVolume_State(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_5State_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_State(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_5State_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_13ControlVolume_5State_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5PDSim_4core_10containers_ControlVolume[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_13ControlVolume_3__reduce_cython__, METH_NOARGS, __pyx_doc_5PDSim_4core_10containers_13ControlVolume_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_13ControlVolume_5__setstate_cython__, METH_O, __pyx_doc_5PDSim_4core_10containers_13ControlVolume_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5PDSim_4core_10containers_ControlVolume[] = {
  {(char *)"key", __pyx_getprop_5PDSim_4core_10containers_13ControlVolume_key, __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_key, (char *)0, 0},
  {(char *)"discharge_becomes", __pyx_getprop_5PDSim_4core_10containers_13ControlVolume_discharge_becomes, __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_discharge_becomes, (char *)0, 0},
  {(char *)"keyIndex", __pyx_getprop_5PDSim_4core_10containers_13ControlVolume_keyIndex, __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_keyIndex, (char *)"keyIndex: 'long'", 0},
  {(char *)"becomes", __pyx_getprop_5PDSim_4core_10containers_13ControlVolume_becomes, __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_becomes, (char *)"becomes: object", 0},
  {(char *)"V_dV", __pyx_getprop_5PDSim_4core_10containers_13ControlVolume_V_dV, __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_V_dV, (char *)"V_dV: object", 0},
  {(char *)"V_dV_kwargs", __pyx_getprop_5PDSim_4core_10containers_13ControlVolume_V_dV_kwargs, __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_V_dV_kwargs, (char *)"V_dV_kwargs: dict", 0},
  {(char *)"ForceFcn", __pyx_getprop_5PDSim_4core_10containers_13ControlVolume_ForceFcn, __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_ForceFcn, (char *)"ForceFcn: object", 0},
  {(char *)"exists", __pyx_getprop_5PDSim_4core_10containers_13ControlVolume_exists, __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_exists, (char *)"exists: 'bool'", 0},
  {(char *)"State", __pyx_getprop_5PDSim_4core_10containers_13ControlVolume_State, __pyx_setprop_5PDSim_4core_10containers_13ControlVolume_State, (char *)"State: CoolProp.CoolProp.State", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4core_10containers_ControlVolume = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.core.containers.ControlVolume", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4core_10containers_ControlVolume), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4core_10containers_ControlVolume, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "ControlVolume(str key, VdVFcn, State initialState, bool exists=True, dict VdVFcn_kwargs={}, str discharge_becomes=None, becomes=None)\n\n    This is a class that contains all the code for a given control volume.  \n    \n    It includes the code for calculation of volumes and others.\n    ", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4core_10containers_ControlVolume, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4core_10containers_ControlVolume, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4core_10containers_ControlVolume, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5PDSim_4core_10containers_ControlVolume, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5PDSim_4core_10containers_13ControlVolume_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4core_10containers_ControlVolume, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5PDSim_4core_10containers_CVScore __pyx_vtable_5PDSim_4core_10containers_CVScore;

static PyObject *__pyx_tp_new_5PDSim_4core_10containers_CVScore(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5PDSim_4core_10containers_CVScore *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4core_10containers_CVScore *)o);
  p->__pyx_vtab = __pyx_vtabptr_5PDSim_4core_10containers_CVScore;
  p->array_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->T = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->p = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->h = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->rho = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->V = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->dV = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->cp = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->cv = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->m = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->v = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->dpdT_constV = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->Q = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->summerdm = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->summerdT = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->drhodtheta = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->dTdtheta = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->dmdtheta = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  p->property_derivs = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5PDSim_4core_10containers_CVScore(PyObject *o) {
  struct __pyx_obj_5PDSim_4core_10containers_CVScore *p = (struct __pyx_obj_5PDSim_4core_10containers_CVScore *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->array_list);
  Py_CLEAR(p->T);
  Py_CLEAR(p->p);
  Py_CLEAR(p->h);
  Py_CLEAR(p->rho);
  Py_CLEAR(p->V);
  Py_CLEAR(p->dV);
  Py_CLEAR(p->cp);
  Py_CLEAR(p->cv);
  Py_CLEAR(p->m);
  Py_CLEAR(p->v);
  Py_CLEAR(p->dpdT_constV);
  Py_CLEAR(p->Q);
  Py_CLEAR(p->summerdm);
  Py_CLEAR(p->summerdT);
  Py_CLEAR(p->drhodtheta);
  Py_CLEAR(p->dTdtheta);
  Py_CLEAR(p->dmdtheta);
  Py_CLEAR(p->property_derivs);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5PDSim_4core_10containers_CVScore(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4core_10containers_CVScore *p = (struct __pyx_obj_5PDSim_4core_10containers_CVScore *)o;
  if (p->array_list) {
    e = (*v)(p->array_list, a); if (e) return e;
  }
  if (p->T) {
    e = (*v)(((PyObject *)p->T), a); if (e) return e;
  }
  if (p->p) {
    e = (*v)(((PyObject *)p->p), a); if (e) return e;
  }
  if (p->h) {
    e = (*v)(((PyObject *)p->h), a); if (e) return e;
  }
  if (p->rho) {
    e = (*v)(((PyObject *)p->rho), a); if (e) return e;
  }
  if (p->V) {
    e = (*v)(((PyObject *)p->V), a); if (e) return e;
  }
  if (p->dV) {
    e = (*v)(((PyObject *)p->dV), a); if (e) return e;
  }
  if (p->cp) {
    e = (*v)(((PyObject *)p->cp), a); if (e) return e;
  }
  if (p->cv) {
    e = (*v)(((PyObject *)p->cv), a); if (e) return e;
  }
  if (p->m) {
    e = (*v)(((PyObject *)p->m), a); if (e) return e;
  }
  if (p->v) {
    e = (*v)(((PyObject *)p->v), a); if (e) return e;
  }
  if (p->dpdT_constV) {
    e = (*v)(((PyObject *)p->dpdT_constV), a); if (e) return e;
  }
  if (p->Q) {
    e = (*v)(((PyObject *)p->Q), a); if (e) return e;
  }
  if (p->summerdm) {
    e = (*v)(((PyObject *)p->summerdm), a); if (e) return e;
  }
  if (p->summerdT) {
    e = (*v)(((PyObject *)p->summerdT), a); if (e) return e;
  }
  if (p->drhodtheta) {
    e = (*v)(((PyObject *)p->drhodtheta), a); if (e) return e;
  }
  if (p->dTdtheta) {
    e = (*v)(((PyObject *)p->dTdtheta), a); if (e) return e;
  }
  if (p->dmdtheta) {
    e = (*v)(((PyObject *)p->dmdtheta), a); if (e) return e;
  }
  if (p->property_derivs) {
    e = (*v)(((PyObject *)p->property_derivs), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4core_10containers_CVScore(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4core_10containers_CVScore *p = (struct __pyx_obj_5PDSim_4core_10containers_CVScore *)o;
  tmp = ((PyObject*)p->array_list);
  p->array_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->T);
  p->T = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->p);
  p->p = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->h);
  p->h = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rho);
  p->rho = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->V);
  p->V = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dV);
  p->dV = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->cp);
  p->cp = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->cv);
  p->cv = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->m);
  p->m = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->v);
  p->v = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dpdT_constV);
  p->dpdT_constV = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Q);
  p->Q = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->summerdm);
  p->summerdm = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->summerdT);
  p->summerdT = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->drhodtheta);
  p->drhodtheta = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dTdtheta);
  p->dTdtheta = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dmdtheta);
  p->dmdtheta = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->property_derivs);
  p->property_derivs = ((struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_1T_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_T(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_1T_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_1T_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_p(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_1p_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_p(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_1p_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_1p_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_h(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_1h_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_h(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_1h_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_1h_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_rho(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_3rho_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_rho(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_3rho_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_3rho_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_V(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_1V_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_V(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_1V_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_1V_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_dV(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_2dV_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_dV(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_2dV_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_2dV_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_cp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_2cp_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_cp(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_2cp_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_2cp_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_cv(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_2cv_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_cv(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_2cv_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_2cv_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_m(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_1m_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_m(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_1m_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_1m_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_v(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_1v_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_v(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_1v_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_1v_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_dpdT_constV(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_11dpdT_constV_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_dpdT_constV(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_11dpdT_constV_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_11dpdT_constV_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_Q(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_1Q_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_Q(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_1Q_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_1Q_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_summerdm(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdm_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_summerdm(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdm_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdm_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_summerdT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdT_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_summerdT(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdT_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_8summerdT_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_drhodtheta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_10drhodtheta_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_drhodtheta(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_10drhodtheta_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_10drhodtheta_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_dTdtheta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_8dTdtheta_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_dTdtheta(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_8dTdtheta_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_8dTdtheta_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_dmdtheta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_8dmdtheta_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_dmdtheta(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_8dmdtheta_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_8dmdtheta_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_7CVScore_property_derivs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_7CVScore_15property_derivs_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_7CVScore_property_derivs(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_15property_derivs_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_7CVScore_15property_derivs_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5PDSim_4core_10containers_CVScore[] = {
  {"update_size", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_7CVScore_1update_size, METH_O, __pyx_doc_5PDSim_4core_10containers_7CVScore_update_size},
  {"copy", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_7CVScore_3copy, METH_NOARGS, __pyx_doc_5PDSim_4core_10containers_7CVScore_2copy},
  {"calculate_flows", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_7CVScore_5calculate_flows, METH_O, __pyx_doc_5PDSim_4core_10containers_7CVScore_4calculate_flows},
  {"just_volumes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5PDSim_4core_10containers_7CVScore_7just_volumes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4core_10containers_7CVScore_6just_volumes},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_7CVScore_9__reduce_cython__, METH_NOARGS, __pyx_doc_5PDSim_4core_10containers_7CVScore_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_7CVScore_11__setstate_cython__, METH_O, __pyx_doc_5PDSim_4core_10containers_7CVScore_10__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5PDSim_4core_10containers_CVScore[] = {
  {(char *)"T", __pyx_getprop_5PDSim_4core_10containers_7CVScore_T, __pyx_setprop_5PDSim_4core_10containers_7CVScore_T, (char *)"T: PDSim.misc.datatypes.arraym", 0},
  {(char *)"p", __pyx_getprop_5PDSim_4core_10containers_7CVScore_p, __pyx_setprop_5PDSim_4core_10containers_7CVScore_p, (char *)"p: PDSim.misc.datatypes.arraym", 0},
  {(char *)"h", __pyx_getprop_5PDSim_4core_10containers_7CVScore_h, __pyx_setprop_5PDSim_4core_10containers_7CVScore_h, (char *)"h: PDSim.misc.datatypes.arraym", 0},
  {(char *)"rho", __pyx_getprop_5PDSim_4core_10containers_7CVScore_rho, __pyx_setprop_5PDSim_4core_10containers_7CVScore_rho, (char *)"rho: PDSim.misc.datatypes.arraym", 0},
  {(char *)"V", __pyx_getprop_5PDSim_4core_10containers_7CVScore_V, __pyx_setprop_5PDSim_4core_10containers_7CVScore_V, (char *)"V: PDSim.misc.datatypes.arraym", 0},
  {(char *)"dV", __pyx_getprop_5PDSim_4core_10containers_7CVScore_dV, __pyx_setprop_5PDSim_4core_10containers_7CVScore_dV, (char *)"dV: PDSim.misc.datatypes.arraym", 0},
  {(char *)"cp", __pyx_getprop_5PDSim_4core_10containers_7CVScore_cp, __pyx_setprop_5PDSim_4core_10containers_7CVScore_cp, (char *)"cp: PDSim.misc.datatypes.arraym", 0},
  {(char *)"cv", __pyx_getprop_5PDSim_4core_10containers_7CVScore_cv, __pyx_setprop_5PDSim_4core_10containers_7CVScore_cv, (char *)"cv: PDSim.misc.datatypes.arraym", 0},
  {(char *)"m", __pyx_getprop_5PDSim_4core_10containers_7CVScore_m, __pyx_setprop_5PDSim_4core_10containers_7CVScore_m, (char *)"m: PDSim.misc.datatypes.arraym", 0},
  {(char *)"v", __pyx_getprop_5PDSim_4core_10containers_7CVScore_v, __pyx_setprop_5PDSim_4core_10containers_7CVScore_v, (char *)"v: PDSim.misc.datatypes.arraym", 0},
  {(char *)"dpdT_constV", __pyx_getprop_5PDSim_4core_10containers_7CVScore_dpdT_constV, __pyx_setprop_5PDSim_4core_10containers_7CVScore_dpdT_constV, (char *)"dpdT_constV: PDSim.misc.datatypes.arraym", 0},
  {(char *)"Q", __pyx_getprop_5PDSim_4core_10containers_7CVScore_Q, __pyx_setprop_5PDSim_4core_10containers_7CVScore_Q, (char *)"Q: PDSim.misc.datatypes.arraym", 0},
  {(char *)"summerdm", __pyx_getprop_5PDSim_4core_10containers_7CVScore_summerdm, __pyx_setprop_5PDSim_4core_10containers_7CVScore_summerdm, (char *)"summerdm: PDSim.misc.datatypes.arraym", 0},
  {(char *)"summerdT", __pyx_getprop_5PDSim_4core_10containers_7CVScore_summerdT, __pyx_setprop_5PDSim_4core_10containers_7CVScore_summerdT, (char *)"summerdT: PDSim.misc.datatypes.arraym", 0},
  {(char *)"drhodtheta", __pyx_getprop_5PDSim_4core_10containers_7CVScore_drhodtheta, __pyx_setprop_5PDSim_4core_10containers_7CVScore_drhodtheta, (char *)"drhodtheta: PDSim.misc.datatypes.arraym", 0},
  {(char *)"dTdtheta", __pyx_getprop_5PDSim_4core_10containers_7CVScore_dTdtheta, __pyx_setprop_5PDSim_4core_10containers_7CVScore_dTdtheta, (char *)"dTdtheta: PDSim.misc.datatypes.arraym", 0},
  {(char *)"dmdtheta", __pyx_getprop_5PDSim_4core_10containers_7CVScore_dmdtheta, __pyx_setprop_5PDSim_4core_10containers_7CVScore_dmdtheta, (char *)"dmdtheta: PDSim.misc.datatypes.arraym", 0},
  {(char *)"property_derivs", __pyx_getprop_5PDSim_4core_10containers_7CVScore_property_derivs, __pyx_setprop_5PDSim_4core_10containers_7CVScore_property_derivs, (char *)"property_derivs: PDSim.misc.datatypes.arraym", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4core_10containers_CVScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.core.containers.CVScore", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4core_10containers_CVScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4core_10containers_CVScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    The base class for all control volumes\n\n    In the derived class, before anything is done, you must set the parameter array_list as a list of strings, each\n    entry in the list should be the name of an arraym instance that will be stored in the class\n    ", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4core_10containers_CVScore, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4core_10containers_CVScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4core_10containers_CVScore, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5PDSim_4core_10containers_CVScore, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4core_10containers_CVScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5PDSim_4core_10containers_CVArrays __pyx_vtable_5PDSim_4core_10containers_CVArrays;

static PyObject *__pyx_tp_new_5PDSim_4core_10containers_CVArrays(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5PDSim_4core_10containers_CVArrays *p;
  PyObject *o = __pyx_tp_new_5PDSim_4core_10containers_CVScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4core_10containers_CVArrays *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5PDSim_4core_10containers_CVScore*)__pyx_vtabptr_5PDSim_4core_10containers_CVArrays;
  if (unlikely(__pyx_pw_5PDSim_4core_10containers_8CVArrays_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_5PDSim_4core_10containers_CVArrays[] = {
  {"properties_and_volumes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5PDSim_4core_10containers_8CVArrays_3properties_and_volumes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4core_10containers_8CVArrays_2properties_and_volumes},
  {"calculate_derivs", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5PDSim_4core_10containers_8CVArrays_5calculate_derivs, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4core_10containers_8CVArrays_4calculate_derivs},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_8CVArrays_7__reduce_cython__, METH_NOARGS, __pyx_doc_5PDSim_4core_10containers_8CVArrays_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_8CVArrays_9__setstate_cython__, METH_O, __pyx_doc_5PDSim_4core_10containers_8CVArrays_8__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5PDSim_4core_10containers_CVArrays = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.core.containers.CVArrays", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4core_10containers_CVArrays), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4core_10containers_CVScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    A stub class that contains the arraym arrays of the state variables for\n    all the control volumes that are passed into the instantiator\n    ", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4core_10containers_CVScore, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4core_10containers_CVScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4core_10containers_CVArrays, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4core_10containers_CVArrays, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5PDSim_4core_10containers_ControlVolumeCollection __pyx_vtable_5PDSim_4core_10containers_ControlVolumeCollection;

static PyObject *__pyx_tp_new_5PDSim_4core_10containers_ControlVolumeCollection(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)o);
  p->__pyx_vtab = __pyx_vtabptr_5PDSim_4core_10containers_ControlVolumeCollection;
  p->keys = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->CVs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->indices = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->exists_keys = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->exists_indices = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->exists_CV = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->Nodes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->arrays = ((struct __pyx_obj_5PDSim_4core_10containers_CVArrays *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5PDSim_4core_10containers_ControlVolumeCollection(PyObject *o) {
  struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *p = (struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->keys);
  Py_CLEAR(p->CVs);
  Py_CLEAR(p->indices);
  Py_CLEAR(p->exists_keys);
  Py_CLEAR(p->exists_indices);
  Py_CLEAR(p->exists_CV);
  Py_CLEAR(p->Nodes);
  Py_CLEAR(p->arrays);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5PDSim_4core_10containers_ControlVolumeCollection(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *p = (struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)o;
  if (p->keys) {
    e = (*v)(p->keys, a); if (e) return e;
  }
  if (p->CVs) {
    e = (*v)(p->CVs, a); if (e) return e;
  }
  if (p->indices) {
    e = (*v)(p->indices, a); if (e) return e;
  }
  if (p->exists_keys) {
    e = (*v)(p->exists_keys, a); if (e) return e;
  }
  if (p->exists_indices) {
    e = (*v)(p->exists_indices, a); if (e) return e;
  }
  if (p->exists_CV) {
    e = (*v)(p->exists_CV, a); if (e) return e;
  }
  if (p->Nodes) {
    e = (*v)(p->Nodes, a); if (e) return e;
  }
  if (p->arrays) {
    e = (*v)(((PyObject *)p->arrays), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5PDSim_4core_10containers_ControlVolumeCollection(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *p = (struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *)o;
  tmp = ((PyObject*)p->keys);
  p->keys = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->CVs);
  p->CVs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->indices);
  p->indices = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->exists_keys);
  p->exists_keys = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->exists_indices);
  p->exists_indices = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->exists_CV);
  p->exists_CV = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Nodes);
  p->Nodes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->arrays);
  p->arrays = ((struct __pyx_obj_5PDSim_4core_10containers_CVArrays *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_5PDSim_4core_10containers_ControlVolumeCollection(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_1T_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_p(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_1p_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_rho(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_3rho_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_h(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_1h_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_cp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_2cp_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_cv(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_2cv_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_dpdT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_4dpdT_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_keys(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_4keys_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_CVs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_3CVs_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_indices(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_7indices_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_exists_keys(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_11exists_keys_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_exists_indices(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_14exists_indices_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_exists_CV(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_9exists_CV_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_Nodes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_5Nodes_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_N(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_1N_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_Nexist(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_6Nexist_1__get__(o);
}

static PyObject *__pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_arrays(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays_1__get__(o);
}

static int __pyx_setprop_5PDSim_4core_10containers_23ControlVolumeCollection_arrays(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays_3__set__(o, v);
  }
  else {
    return __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_6arrays_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5PDSim_4core_10containers_ControlVolumeCollection[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_3__reduce__, METH_NOARGS, __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_2__reduce__},
  {"__getstate__", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_5__getstate__, METH_NOARGS, __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_4__getstate__},
  {"__setstate__", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_7__setstate__, METH_O, __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_6__setstate__},
  {"at", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_9at, METH_O, __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_8at},
  {"add", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_15add, METH_O, __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_14add},
  {"rebuild_exists", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_17rebuild_exists, METH_NOARGS, __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_16rebuild_exists},
  {"index", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_19index, METH_O, __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_18index},
  {"get", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_21get, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_20get},
  {"updateStates", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_23updateStates, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_22updateStates},
  {"volumes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_25volumes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_24volumes},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5PDSim_4core_10containers_ControlVolumeCollection[] = {
  {(char *)"T", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_T, 0, (char *)" Temperature for each CV that exists ", 0},
  {(char *)"p", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_p, 0, (char *)" Pressure for each CV that exists ", 0},
  {(char *)"rho", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_rho, 0, (char *)" Density for each CV that exists ", 0},
  {(char *)"h", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_h, 0, (char *)" Enthalpy for each CV that exists ", 0},
  {(char *)"cp", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_cp, 0, (char *)" Specific heat at constant volume for each CV that exists ", 0},
  {(char *)"cv", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_cv, 0, (char *)" Specific heat at constant volume for each CV that exists ", 0},
  {(char *)"dpdT", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_dpdT, 0, (char *)"\n        Derivative of pressure with respect to temperature at constant volume for each CV that exists\n        ", 0},
  {(char *)"keys", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_keys, 0, (char *)0, 0},
  {(char *)"CVs", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_CVs, 0, (char *)0, 0},
  {(char *)"indices", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_indices, 0, (char *)0, 0},
  {(char *)"exists_keys", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_exists_keys, 0, (char *)0, 0},
  {(char *)"exists_indices", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_exists_indices, 0, (char *)0, 0},
  {(char *)"exists_CV", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_exists_CV, 0, (char *)0, 0},
  {(char *)"Nodes", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_Nodes, 0, (char *)0, 0},
  {(char *)"N", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_N, 0, (char *)0, 0},
  {(char *)"Nexist", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_Nexist, 0, (char *)0, 0},
  {(char *)"arrays", __pyx_getprop_5PDSim_4core_10containers_23ControlVolumeCollection_arrays, __pyx_setprop_5PDSim_4core_10containers_23ControlVolumeCollection_arrays, (char *)"arrays: PDSim.core.containers.CVArrays", 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_ControlVolumeCollection = {
  __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_13__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5PDSim_4core_10containers_ControlVolumeCollection, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ControlVolumeCollection = {
  __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_13__len__, /*mp_length*/
  __pyx_pw_5PDSim_4core_10containers_23ControlVolumeCollection_11__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5PDSim_4core_10containers_ControlVolumeCollection = {
  PyVarObject_HEAD_INIT(0, 0)
  "PDSim.core.containers.ControlVolumeCollection", /*tp_name*/
  sizeof(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5PDSim_4core_10containers_ControlVolumeCollection, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_ControlVolumeCollection, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ControlVolumeCollection, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    ControlVolumeCollection is class to hold all the control volumes\n    ", /*tp_doc*/
  __pyx_tp_traverse_5PDSim_4core_10containers_ControlVolumeCollection, /*tp_traverse*/
  __pyx_tp_clear_5PDSim_4core_10containers_ControlVolumeCollection, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5PDSim_4core_10containers_ControlVolumeCollection, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5PDSim_4core_10containers_ControlVolumeCollection, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5PDSim_4core_10containers_ControlVolumeCollection, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"collect_State_h", (PyCFunction)__pyx_pw_5PDSim_4core_10containers_3collect_State_h, METH_O, __pyx_doc_5PDSim_4core_10containers_2collect_State_h},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_containers(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_containers},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "containers",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_n_s_CV, __pyx_k_CV, sizeof(__pyx_k_CV), 0, 0, 1, 1},
  {&__pyx_n_s_CVArrays, __pyx_k_CVArrays, sizeof(__pyx_k_CVArrays), 0, 0, 1, 1},
  {&__pyx_n_s_CVC, __pyx_k_CVC, sizeof(__pyx_k_CVC), 0, 0, 1, 1},
  {&__pyx_n_s_CVScore, __pyx_k_CVScore, sizeof(__pyx_k_CVScore), 0, 0, 1, 1},
  {&__pyx_n_s_CVs, __pyx_k_CVs, sizeof(__pyx_k_CVs), 0, 0, 1, 1},
  {&__pyx_kp_s_Cannot_apply_unary_operator_to_a, __pyx_k_Cannot_apply_unary_operator_to_a, sizeof(__pyx_k_Cannot_apply_unary_operator_to_a), 0, 0, 1, 0},
  {&__pyx_n_s_ControlVolume, __pyx_k_ControlVolume, sizeof(__pyx_k_ControlVolume), 0, 0, 1, 1},
  {&__pyx_n_s_ControlVolumeCollection, __pyx_k_ControlVolumeCollection, sizeof(__pyx_k_ControlVolumeCollection), 0, 0, 1, 1},
  {&__pyx_n_s_CoolProp, __pyx_k_CoolProp, sizeof(__pyx_k_CoolProp), 0, 0, 1, 1},
  {&__pyx_n_s_ID, __pyx_k_ID, sizeof(__pyx_k_ID), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatibility_between_the_valu, __pyx_k_Incompatibility_between_the_valu, sizeof(__pyx_k_Incompatibility_between_the_valu), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x1e, __pyx_k_Incompatible_checksums_s_vs_0x1e, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x1e), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x28, __pyx_k_Incompatible_checksums_s_vs_0x28, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x28), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x5c, __pyx_k_Incompatible_checksums_s_vs_0x5c, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x5c), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xc1, __pyx_k_Incompatible_checksums_s_vs_0xc1, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xc1), 0, 0, 1, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 0, 1, 1},
  {&__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
  {&__pyx_n_s_OD, __pyx_k_OD, sizeof(__pyx_k_OD), 0, 0, 1, 1},
  {&__pyx_n_s_PDSim_core_containers, __pyx_k_PDSim_core_containers, sizeof(__pyx_k_PDSim_core_containers), 0, 0, 1, 1},
  {&__pyx_kp_s_PDSim_core_containers_pyx, __pyx_k_PDSim_core_containers_pyx, sizeof(__pyx_k_PDSim_core_containers_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_Q, __pyx_k_Q, sizeof(__pyx_k_Q), 0, 0, 1, 1},
  {&__pyx_n_s_State, __pyx_k_State, sizeof(__pyx_k_State), 0, 0, 1, 1},
  {&__pyx_n_s_State1, __pyx_k_State1, sizeof(__pyx_k_State1), 0, 0, 1, 1},
  {&__pyx_n_s_State2, __pyx_k_State2, sizeof(__pyx_k_State2), 0, 0, 1, 1},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_n_s_Tube, __pyx_k_Tube, sizeof(__pyx_k_Tube), 0, 0, 1, 1},
  {&__pyx_n_s_TubeCollection, __pyx_k_TubeCollection, sizeof(__pyx_k_TubeCollection), 0, 0, 1, 1},
  {&__pyx_n_s_TubeFcn, __pyx_k_TubeFcn, sizeof(__pyx_k_TubeFcn), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_V, __pyx_k_V, sizeof(__pyx_k_V), 0, 0, 1, 1},
  {&__pyx_n_s_V_dV, __pyx_k_V_dV, sizeof(__pyx_k_V_dV), 0, 0, 1, 1},
  {&__pyx_n_s_V_dV_kwargs, __pyx_k_V_dV_kwargs, sizeof(__pyx_k_V_dV_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_VdVFcn, __pyx_k_VdVFcn, sizeof(__pyx_k_VdVFcn), 0, 0, 1, 1},
  {&__pyx_n_s_VdVFcn_kwargs, __pyx_k_VdVFcn_kwargs, sizeof(__pyx_k_VdVFcn_kwargs), 0, 0, 1, 1},
  {&__pyx_kp_s_Warning_mdot_not_provided_to_Tub, __pyx_k_Warning_mdot_not_provided_to_Tub, sizeof(__pyx_k_Warning_mdot_not_provided_to_Tub), 0, 0, 1, 0},
  {&__pyx_kp_s_You_must_provide_an_integer_valu, __pyx_k_You_must_provide_an_integer_valu, sizeof(__pyx_k_You_must_provide_an_integer_valu), 0, 0, 1, 0},
  {&__pyx_kp_s_Your_CV_key_key_s_is_already_in, __pyx_k_Your_CV_key_key_s_is_already_in, sizeof(__pyx_k_Your_CV_key_key_s_is_already_in), 0, 0, 1, 0},
  {&__pyx_kp_s_Your_key_key_of_type__type_is_in, __pyx_k_Your_key_key_of_type__type_is_in, sizeof(__pyx_k_Your_key_key_of_type__type_is_in), 0, 0, 1, 0},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_kp_s_and, __pyx_k_and, sizeof(__pyx_k_and), 0, 0, 1, 0},
  {&__pyx_n_s_array1, __pyx_k_array1, sizeof(__pyx_k_array1), 0, 0, 1, 1},
  {&__pyx_n_s_array2, __pyx_k_array2, sizeof(__pyx_k_array2), 0, 0, 1, 1},
  {&__pyx_n_s_as_dict, __pyx_k_as_dict, sizeof(__pyx_k_as_dict), 0, 0, 1, 1},
  {&__pyx_n_s_ascii, __pyx_k_ascii, sizeof(__pyx_k_ascii), 0, 0, 1, 1},
  {&__pyx_n_s_at, __pyx_k_at, sizeof(__pyx_k_at), 0, 0, 1, 1},
  {&__pyx_n_s_becomes, __pyx_k_becomes, sizeof(__pyx_k_becomes), 0, 0, 1, 1},
  {&__pyx_n_s_calculate_derivs, __pyx_k_calculate_derivs, sizeof(__pyx_k_calculate_derivs), 0, 0, 1, 1},
  {&__pyx_n_s_calculate_flows, __pyx_k_calculate_flows, sizeof(__pyx_k_calculate_flows), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_constants, __pyx_k_constants, sizeof(__pyx_k_constants), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_cp, __pyx_k_cp, sizeof(__pyx_k_cp), 0, 0, 1, 1},
  {&__pyx_n_s_cv, __pyx_k_cv, sizeof(__pyx_k_cv), 0, 0, 1, 1},
  {&__pyx_n_s_dTdtheta, __pyx_k_dTdtheta, sizeof(__pyx_k_dTdtheta), 0, 0, 1, 1},
  {&__pyx_n_s_dV, __pyx_k_dV, sizeof(__pyx_k_dV), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_discharge_becomes, __pyx_k_discharge_becomes, sizeof(__pyx_k_discharge_becomes), 0, 0, 1, 1},
  {&__pyx_n_s_dmdtheta, __pyx_k_dmdtheta, sizeof(__pyx_k_dmdtheta), 0, 0, 1, 1},
  {&__pyx_n_s_dpdT_constV, __pyx_k_dpdT_constV, sizeof(__pyx_k_dpdT_constV), 0, 0, 1, 1},
  {&__pyx_n_s_drhodtheta, __pyx_k_drhodtheta, sizeof(__pyx_k_drhodtheta), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_exists, __pyx_k_exists, sizeof(__pyx_k_exists), 0, 0, 1, 1},
  {&__pyx_n_s_factor, __pyx_k_factor, sizeof(__pyx_k_factor), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_fixed, __pyx_k_fixed, sizeof(__pyx_k_fixed), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_Nodes, __pyx_k_get_Nodes, sizeof(__pyx_k_get_Nodes), 0, 0, 1, 1},
  {&__pyx_n_s_get_T, __pyx_k_get_T, sizeof(__pyx_k_get_T), 0, 0, 1, 1},
  {&__pyx_n_s_get_h, __pyx_k_get_h, sizeof(__pyx_k_get_h), 0, 0, 1, 1},
  {&__pyx_n_s_get_p, __pyx_k_get_p, sizeof(__pyx_k_get_p), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_n_s_has_liquid, __pyx_k_has_liquid, sizeof(__pyx_k_has_liquid), 0, 0, 1, 1},
  {&__pyx_n_s_i1, __pyx_k_i1, sizeof(__pyx_k_i1), 0, 0, 1, 1},
  {&__pyx_n_s_i2, __pyx_k_i2, sizeof(__pyx_k_i2), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_initialState, __pyx_k_initialState, sizeof(__pyx_k_initialState), 0, 0, 1, 1},
  {&__pyx_n_s_just_volumes, __pyx_k_just_volumes, sizeof(__pyx_k_just_volumes), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_key1, __pyx_k_key1, sizeof(__pyx_k_key1), 0, 0, 1, 1},
  {&__pyx_n_s_key2, __pyx_k_key2, sizeof(__pyx_k_key2), 0, 0, 1, 1},
  {&__pyx_kp_s_kg_s_used, __pyx_k_kg_s_used, sizeof(__pyx_k_kg_s_used), 0, 0, 1, 0},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mdot, __pyx_k_mdot, sizeof(__pyx_k_mdot), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name1, __pyx_k_name1, sizeof(__pyx_k_name1), 0, 0, 1, 1},
  {&__pyx_n_s_name2, __pyx_k_name2, sizeof(__pyx_k_name2), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_omega, __pyx_k_omega, sizeof(__pyx_k_omega), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_properties_and_volumes, __pyx_k_properties_and_volumes, sizeof(__pyx_k_properties_and_volumes), 0, 0, 1, 1},
  {&__pyx_n_s_property_derivs, __pyx_k_property_derivs, sizeof(__pyx_k_property_derivs), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_CVScore, __pyx_k_pyx_unpickle_CVScore, sizeof(__pyx_k_pyx_unpickle_CVScore), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_ControlVolume, __pyx_k_pyx_unpickle_ControlVolume, sizeof(__pyx_k_pyx_unpickle_ControlVolume), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Tube, __pyx_k_pyx_unpickle_Tube, sizeof(__pyx_k_pyx_unpickle_Tube), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_TubeCollection, __pyx_k_pyx_unpickle_TubeCollection, sizeof(__pyx_k_pyx_unpickle_TubeCollection), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rebuildCVCollection, __pyx_k_rebuildCVCollection, sizeof(__pyx_k_rebuildCVCollection), 0, 0, 1, 1},
  {&__pyx_n_s_rebuild_exists, __pyx_k_rebuild_exists, sizeof(__pyx_k_rebuild_exists), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_rho, __pyx_k_rho, sizeof(__pyx_k_rho), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_state_vars, __pyx_k_state_vars, sizeof(__pyx_k_state_vars), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_summerdT, __pyx_k_summerdT, sizeof(__pyx_k_summerdT), 0, 0, 1, 1},
  {&__pyx_n_s_summerdm, __pyx_k_summerdm, sizeof(__pyx_k_summerdm), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_theta, __pyx_k_theta, sizeof(__pyx_k_theta), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_updateStates, __pyx_k_updateStates, sizeof(__pyx_k_updateStates), 0, 0, 1, 1},
  {&__pyx_n_s_update_existence, __pyx_k_update_existence, sizeof(__pyx_k_update_existence), 0, 0, 1, 1},
  {&__pyx_n_s_update_size, __pyx_k_update_size, sizeof(__pyx_k_update_size), 0, 0, 1, 1},
  {&__pyx_n_s_utf8, __pyx_k_utf8, sizeof(__pyx_k_utf8), 0, 0, 1, 1},
  {&__pyx_n_s_volumes, __pyx_k_volumes, sizeof(__pyx_k_volumes), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) __PYX_ERR(0, 21, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 183, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 274, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 323, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 323, __pyx_L1_error)
  #endif
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 505, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 600, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 884, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "PDSim/core/containers.pyx":71
 *         self.exists = exists
 *         if fixed<0:
 *             raise AttributeError("You must provide an integer value for fixed, either 1 for Node 1 fixed, or 2 for Node 2 fixed.")             # <<<<<<<<<<<<<<
 *         if fixed==1 and isinstance(State1,StateClass) and State2==None:
 *             #Everything good
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_You_must_provide_an_integer_valu); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "PDSim/core/containers.pyx":81
 *             self.State1=State2.copy()
 *         else:
 *             raise AttributeError('Incompatibility between the value for fixed and the states provided')             # <<<<<<<<<<<<<<
 * 
 *         self.TubeFcn=TubeFcn
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Incompatibility_between_the_valu); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(3, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(3, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "PDSim/core/containers.pyx":636
 *             return V_dict, dV_dict
 * 
 * def rebuildCVCollection(CVs):             # <<<<<<<<<<<<<<
 *     CVC = ControlVolumeCollection()
 *     for CV in CVs:
 */
  __pyx_tuple__13 = PyTuple_Pack(3, __pyx_n_s_CVs, __pyx_n_s_CVC, __pyx_n_s_CV); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PDSim_core_containers_pyx, __pyx_n_s_rebuildCVCollection, 636, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 636, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_Tube(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__14 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Tube, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__15 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_TubeCollection, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__16 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_CVScore, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__17 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_ControlVolume, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyString_Type_encode.type = (PyObject*)&PyString_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_32186631 = PyInt_FromLong(32186631L); if (unlikely(!__pyx_int_32186631)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_42804477 = PyInt_FromLong(42804477L); if (unlikely(!__pyx_int_42804477)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_96914336 = PyInt_FromLong(96914336L); if (unlikely(!__pyx_int_96914336)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_202575445 = PyInt_FromLong(202575445L); if (unlikely(!__pyx_int_202575445)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_5PDSim_4core_10containers_TubeCollection = &__pyx_vtable_5PDSim_4core_10containers_TubeCollection;
  __pyx_vtable_5PDSim_4core_10containers_TubeCollection.update_existence = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *, int, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_10containers_14TubeCollection_update_existence;
  __pyx_vtable_5PDSim_4core_10containers_TubeCollection.get_h = (struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*)(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_10containers_14TubeCollection_get_h;
  __pyx_vtable_5PDSim_4core_10containers_TubeCollection.get_p = (struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*)(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_10containers_14TubeCollection_get_p;
  __pyx_vtable_5PDSim_4core_10containers_TubeCollection.get_T = (struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(*)(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_10containers_14TubeCollection_get_T;
  __pyx_vtable_5PDSim_4core_10containers_TubeCollection.get_Nodes = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_10containers_14TubeCollection_get_Nodes;
  __pyx_vtable_5PDSim_4core_10containers_TubeCollection.update = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_TubeCollection *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_10containers_14TubeCollection_update;
  __pyx_type_5PDSim_4core_10containers_TubeCollection.tp_base = (&PyList_Type);
  if (PyType_Ready(&__pyx_type_5PDSim_4core_10containers_TubeCollection) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5PDSim_4core_10containers_TubeCollection.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5PDSim_4core_10containers_TubeCollection.tp_dictoffset && __pyx_type_5PDSim_4core_10containers_TubeCollection.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5PDSim_4core_10containers_TubeCollection.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4core_10containers_TubeCollection.tp_dict, __pyx_vtabptr_5PDSim_4core_10containers_TubeCollection) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TubeCollection, (PyObject *)&__pyx_type_5PDSim_4core_10containers_TubeCollection) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5PDSim_4core_10containers_TubeCollection) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  __pyx_ptype_5PDSim_4core_10containers_TubeCollection = &__pyx_type_5PDSim_4core_10containers_TubeCollection;
  if (PyType_Ready(&__pyx_type_5PDSim_4core_10containers_Tube) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5PDSim_4core_10containers_Tube.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5PDSim_4core_10containers_Tube.tp_dictoffset && __pyx_type_5PDSim_4core_10containers_Tube.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5PDSim_4core_10containers_Tube.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_5PDSim_4core_10containers_Tube, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 25, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_5PDSim_4core_10containers_4Tube___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5PDSim_4core_10containers_4Tube___init__.doc = __pyx_doc_5PDSim_4core_10containers_4Tube___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5PDSim_4core_10containers_4Tube___init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Tube, (PyObject *)&__pyx_type_5PDSim_4core_10containers_Tube) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5PDSim_4core_10containers_Tube) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __pyx_ptype_5PDSim_4core_10containers_Tube = &__pyx_type_5PDSim_4core_10containers_Tube;
  if (PyType_Ready(&__pyx_type_5PDSim_4core_10containers_ControlVolume) < 0) __PYX_ERR(0, 392, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5PDSim_4core_10containers_ControlVolume.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5PDSim_4core_10containers_ControlVolume.tp_dictoffset && __pyx_type_5PDSim_4core_10containers_ControlVolume.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5PDSim_4core_10containers_ControlVolume.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_5PDSim_4core_10containers_ControlVolume, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 392, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_5PDSim_4core_10containers_13ControlVolume___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5PDSim_4core_10containers_13ControlVolume___init__.doc = __pyx_doc_5PDSim_4core_10containers_13ControlVolume___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5PDSim_4core_10containers_13ControlVolume___init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ControlVolume, (PyObject *)&__pyx_type_5PDSim_4core_10containers_ControlVolume) < 0) __PYX_ERR(0, 392, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5PDSim_4core_10containers_ControlVolume) < 0) __PYX_ERR(0, 392, __pyx_L1_error)
  __pyx_ptype_5PDSim_4core_10containers_ControlVolume = &__pyx_type_5PDSim_4core_10containers_ControlVolume;
  __pyx_vtabptr_5PDSim_4core_10containers_CVScore = &__pyx_vtable_5PDSim_4core_10containers_CVScore;
  __pyx_vtable_5PDSim_4core_10containers_CVScore.update_size = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_CVScore *, int, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_10containers_7CVScore_update_size;
  __pyx_vtable_5PDSim_4core_10containers_CVScore.build_all = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_CVScore *, int))__pyx_f_5PDSim_4core_10containers_7CVScore_build_all;
  __pyx_vtable_5PDSim_4core_10containers_CVScore.free_all = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_CVScore *))__pyx_f_5PDSim_4core_10containers_7CVScore_free_all;
  __pyx_vtable_5PDSim_4core_10containers_CVScore.copy = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_CVScore *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_10containers_7CVScore_copy;
  __pyx_vtable_5PDSim_4core_10containers_CVScore.calculate_flows = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_CVScore *, struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_10containers_7CVScore_calculate_flows;
  __pyx_vtable_5PDSim_4core_10containers_CVScore.just_volumes = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_CVScore *, PyObject *, double, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_10containers_7CVScore_just_volumes;
  if (PyType_Ready(&__pyx_type_5PDSim_4core_10containers_CVScore) < 0) __PYX_ERR(0, 185, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5PDSim_4core_10containers_CVScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5PDSim_4core_10containers_CVScore.tp_dictoffset && __pyx_type_5PDSim_4core_10containers_CVScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5PDSim_4core_10containers_CVScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4core_10containers_CVScore.tp_dict, __pyx_vtabptr_5PDSim_4core_10containers_CVScore) < 0) __PYX_ERR(0, 185, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CVScore, (PyObject *)&__pyx_type_5PDSim_4core_10containers_CVScore) < 0) __PYX_ERR(0, 185, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5PDSim_4core_10containers_CVScore) < 0) __PYX_ERR(0, 185, __pyx_L1_error)
  __pyx_ptype_5PDSim_4core_10containers_CVScore = &__pyx_type_5PDSim_4core_10containers_CVScore;
  __pyx_vtabptr_5PDSim_4core_10containers_CVArrays = &__pyx_vtable_5PDSim_4core_10containers_CVArrays;
  __pyx_vtable_5PDSim_4core_10containers_CVArrays.__pyx_base = *__pyx_vtabptr_5PDSim_4core_10containers_CVScore;
  __pyx_vtable_5PDSim_4core_10containers_CVArrays.properties_and_volumes = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_CVArrays *, PyObject *, double, int, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_10containers_8CVArrays_properties_and_volumes;
  __pyx_vtable_5PDSim_4core_10containers_CVArrays.calculate_derivs = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_CVArrays *, double, int, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_10containers_8CVArrays_calculate_derivs;
  __pyx_type_5PDSim_4core_10containers_CVArrays.tp_base = __pyx_ptype_5PDSim_4core_10containers_CVScore;
  if (PyType_Ready(&__pyx_type_5PDSim_4core_10containers_CVArrays) < 0) __PYX_ERR(0, 282, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5PDSim_4core_10containers_CVArrays.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5PDSim_4core_10containers_CVArrays.tp_dictoffset && __pyx_type_5PDSim_4core_10containers_CVArrays.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5PDSim_4core_10containers_CVArrays.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4core_10containers_CVArrays.tp_dict, __pyx_vtabptr_5PDSim_4core_10containers_CVArrays) < 0) __PYX_ERR(0, 282, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CVArrays, (PyObject *)&__pyx_type_5PDSim_4core_10containers_CVArrays) < 0) __PYX_ERR(0, 282, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5PDSim_4core_10containers_CVArrays) < 0) __PYX_ERR(0, 282, __pyx_L1_error)
  __pyx_ptype_5PDSim_4core_10containers_CVArrays = &__pyx_type_5PDSim_4core_10containers_CVArrays;
  __pyx_vtabptr_5PDSim_4core_10containers_ControlVolumeCollection = &__pyx_vtable_5PDSim_4core_10containers_ControlVolumeCollection;
  __pyx_vtable_5PDSim_4core_10containers_ControlVolumeCollection.add = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *, struct __pyx_obj_5PDSim_4core_10containers_ControlVolume *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_add;
  __pyx_vtable_5PDSim_4core_10containers_ControlVolumeCollection.rebuild_exists = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_rebuild_exists;
  __pyx_vtable_5PDSim_4core_10containers_ControlVolumeCollection.updateStates = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *, PyObject *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, PyObject *, struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_updateStates;
  __pyx_vtable_5PDSim_4core_10containers_ControlVolumeCollection.volumes = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *, double, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_volumes *__pyx_optional_args))__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_volumes;
  __pyx_vtable_5PDSim_4core_10containers_ControlVolumeCollection.at = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *, int, int __pyx_skip_dispatch))__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_at;
  __pyx_vtable_5PDSim_4core_10containers_ControlVolumeCollection.get = (PyObject *(*)(struct __pyx_obj_5PDSim_4core_10containers_ControlVolumeCollection *, CoolProp::parameters, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_4core_10containers_23ControlVolumeCollection_get *__pyx_optional_args))__pyx_f_5PDSim_4core_10containers_23ControlVolumeCollection_get;
  if (PyType_Ready(&__pyx_type_5PDSim_4core_10containers_ControlVolumeCollection) < 0) __PYX_ERR(0, 453, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5PDSim_4core_10containers_ControlVolumeCollection.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5PDSim_4core_10containers_ControlVolumeCollection.tp_dictoffset && __pyx_type_5PDSim_4core_10containers_ControlVolumeCollection.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5PDSim_4core_10containers_ControlVolumeCollection.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_5PDSim_4core_10containers_ControlVolumeCollection, "__getitem__"); if (unlikely(!wrapper)) __PYX_ERR(0, 453, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_5PDSim_4core_10containers_23ControlVolumeCollection_10__getitem__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5PDSim_4core_10containers_23ControlVolumeCollection_10__getitem__.doc = __pyx_doc_5PDSim_4core_10containers_23ControlVolumeCollection_10__getitem__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5PDSim_4core_10containers_23ControlVolumeCollection_10__getitem__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_5PDSim_4core_10containers_ControlVolumeCollection.tp_dict, __pyx_vtabptr_5PDSim_4core_10containers_ControlVolumeCollection) < 0) __PYX_ERR(0, 453, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ControlVolumeCollection, (PyObject *)&__pyx_type_5PDSim_4core_10containers_ControlVolumeCollection) < 0) __PYX_ERR(0, 453, __pyx_L1_error)
  __pyx_ptype_5PDSim_4core_10containers_ControlVolumeCollection = &__pyx_type_5PDSim_4core_10containers_ControlVolumeCollection;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("CoolProp.CoolProp"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_8CoolProp_8CoolProp_PyPhaseEnvelopeData = __Pyx_ImportType(__pyx_t_1, "CoolProp.CoolProp", "PyPhaseEnvelopeData", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_PyPhaseEnvelopeData), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8CoolProp_8CoolProp_PyPhaseEnvelopeData) __PYX_ERR(5, 29, __pyx_L1_error)
  __pyx_ptype_8CoolProp_8CoolProp_PyGuessesStructure = __Pyx_ImportType(__pyx_t_1, "CoolProp.CoolProp", "PyGuessesStructure", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_PyGuessesStructure), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8CoolProp_8CoolProp_PyGuessesStructure) __PYX_ERR(5, 35, __pyx_L1_error)
  __pyx_ptype_8CoolProp_8CoolProp_PyCriticalState = __Pyx_ImportType(__pyx_t_1, "CoolProp.CoolProp", "PyCriticalState", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_PyCriticalState), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8CoolProp_8CoolProp_PyCriticalState) __PYX_ERR(5, 40, __pyx_L1_error)
  __pyx_ptype_8CoolProp_8CoolProp_PySpinodalData = __Pyx_ImportType(__pyx_t_1, "CoolProp.CoolProp", "PySpinodalData", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_PySpinodalData), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8CoolProp_8CoolProp_PySpinodalData) __PYX_ERR(5, 44, __pyx_L1_error)
  __pyx_ptype_8CoolProp_8CoolProp_AbstractState = __Pyx_ImportType(__pyx_t_1, "CoolProp.CoolProp", "AbstractState", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_AbstractState), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8CoolProp_8CoolProp_AbstractState) __PYX_ERR(5, 47, __pyx_L1_error)
  __pyx_vtabptr_8CoolProp_8CoolProp_AbstractState = (struct __pyx_vtabstruct_8CoolProp_8CoolProp_AbstractState*)__Pyx_GetVtable(__pyx_ptype_8CoolProp_8CoolProp_AbstractState->tp_dict); if (unlikely(!__pyx_vtabptr_8CoolProp_8CoolProp_AbstractState)) __PYX_ERR(5, 47, __pyx_L1_error)
  __pyx_ptype_8CoolProp_8CoolProp_State = __Pyx_ImportType(__pyx_t_1, "CoolProp.CoolProp", "State", sizeof(struct __pyx_obj_8CoolProp_8CoolProp_State), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8CoolProp_8CoolProp_State) __PYX_ERR(6, 11, __pyx_L1_error)
  __pyx_vtabptr_8CoolProp_8CoolProp_State = (struct __pyx_vtabstruct_8CoolProp_8CoolProp_State*)__Pyx_GetVtable(__pyx_ptype_8CoolProp_8CoolProp_State->tp_dict); if (unlikely(!__pyx_vtabptr_8CoolProp_8CoolProp_State)) __PYX_ERR(6, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(7, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(8, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(9, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(3, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(3, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(3, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(3, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(3, 764, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("PDSim.misc.datatypes"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5PDSim_4misc_9datatypes_AnnotatedValue = __Pyx_ImportType(__pyx_t_1, "PDSim.misc.datatypes", "AnnotatedValue", sizeof(struct __pyx_obj_5PDSim_4misc_9datatypes_AnnotatedValue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4misc_9datatypes_AnnotatedValue) __PYX_ERR(4, 6, __pyx_L1_error)
  __pyx_ptype_5PDSim_4misc_9datatypes_Collector = __Pyx_ImportType(__pyx_t_1, "PDSim.misc.datatypes", "Collector", sizeof(struct __pyx_obj_5PDSim_4misc_9datatypes_Collector), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4misc_9datatypes_Collector) __PYX_ERR(4, 11, __pyx_L1_error)
  __pyx_vtabptr_5PDSim_4misc_9datatypes_Collector = (struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_Collector*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4misc_9datatypes_Collector->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4misc_9datatypes_Collector)) __PYX_ERR(4, 11, __pyx_L1_error)
  __pyx_ptype_5PDSim_4misc_9datatypes_listm = __Pyx_ImportType(__pyx_t_1, "PDSim.misc.datatypes", "listm", sizeof(struct __pyx_obj_5PDSim_4misc_9datatypes_listm), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4misc_9datatypes_listm) __PYX_ERR(4, 17, __pyx_L1_error)
  __pyx_ptype_5PDSim_4misc_9datatypes_arraym = __Pyx_ImportType(__pyx_t_1, "PDSim.misc.datatypes", "arraym", sizeof(struct __pyx_obj_5PDSim_4misc_9datatypes_arraym), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4misc_9datatypes_arraym) __PYX_ERR(4, 22, __pyx_L1_error)
  __pyx_vtabptr_5PDSim_4misc_9datatypes_arraym = (struct __pyx_vtabstruct_5PDSim_4misc_9datatypes_arraym*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4misc_9datatypes_arraym->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4misc_9datatypes_arraym)) __PYX_ERR(4, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("PDSim.flow.flow_models"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction = __Pyx_ImportType(__pyx_t_1, "PDSim.flow.flow_models", "FlowFunction", sizeof(struct __pyx_obj_5PDSim_4flow_11flow_models_FlowFunction), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction) __PYX_ERR(10, 21, __pyx_L1_error)
  __pyx_vtabptr_5PDSim_4flow_11flow_models_FlowFunction = (struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_FlowFunction*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4flow_11flow_models_FlowFunction->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4flow_11flow_models_FlowFunction)) __PYX_ERR(10, 21, __pyx_L1_error)
  __pyx_ptype_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper = __Pyx_ImportType(__pyx_t_1, "PDSim.flow.flow_models", "PyFlowFunctionWrapper", sizeof(struct __pyx_obj_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper) __PYX_ERR(10, 28, __pyx_L1_error)
  __pyx_vtabptr_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper = (struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4flow_11flow_models_PyFlowFunctionWrapper)) __PYX_ERR(10, 28, __pyx_L1_error)
  __pyx_ptype_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper = __Pyx_ImportType(__pyx_t_1, "PDSim.flow.flow_models", "IsentropicNozzleWrapper", sizeof(struct __pyx_obj_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper) __PYX_ERR(10, 34, __pyx_L1_error)
  __pyx_vtabptr_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper = (struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4flow_11flow_models_IsentropicNozzleWrapper)) __PYX_ERR(10, 34, __pyx_L1_error)
  __pyx_ptype_5PDSim_4flow_11flow_models_ValveModel = __Pyx_ImportType(__pyx_t_1, "PDSim.flow.flow_models", "ValveModel", sizeof(struct __pyx_obj_5PDSim_4flow_11flow_models_ValveModel), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4flow_11flow_models_ValveModel) __PYX_ERR(10, 39, __pyx_L1_error)
  __pyx_vtabptr_5PDSim_4flow_11flow_models_ValveModel = (struct __pyx_vtabstruct_5PDSim_4flow_11flow_models_ValveModel*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4flow_11flow_models_ValveModel->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4flow_11flow_models_ValveModel)) __PYX_ERR(10, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("PDSim.flow.flow"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5PDSim_4flow_4flow_FlowPathCollection = __Pyx_ImportType(__pyx_t_1, "PDSim.flow.flow", "FlowPathCollection", sizeof(struct __pyx_obj_5PDSim_4flow_4flow_FlowPathCollection), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4flow_4flow_FlowPathCollection) __PYX_ERR(11, 17, __pyx_L1_error)
  __pyx_vtabptr_5PDSim_4flow_4flow_FlowPathCollection = (struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPathCollection*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4flow_4flow_FlowPathCollection->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4flow_4flow_FlowPathCollection)) __PYX_ERR(11, 17, __pyx_L1_error)
  __pyx_ptype_5PDSim_4flow_4flow_FlowPath = __Pyx_ImportType(__pyx_t_1, "PDSim.flow.flow", "FlowPath", sizeof(struct __pyx_obj_5PDSim_4flow_4flow_FlowPath), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_4flow_4flow_FlowPath) __PYX_ERR(11, 34, __pyx_L1_error)
  __pyx_vtabptr_5PDSim_4flow_4flow_FlowPath = (struct __pyx_vtabstruct_5PDSim_4flow_4flow_FlowPath*)__Pyx_GetVtable(__pyx_ptype_5PDSim_4flow_4flow_FlowPath->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_4flow_4flow_FlowPath)) __PYX_ERR(11, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("PDSim.misc.datatypes"); if (!__pyx_t_1) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "empty_arraym", (void (**)(void))&__pyx_f_5PDSim_4misc_9datatypes_empty_arraym, "struct __pyx_obj_5PDSim_4misc_9datatypes_arraym *(int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcontainers(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcontainers(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_containers(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_containers(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_containers(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'containers' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_containers(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 2, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("containers", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_PDSim__core__containers) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 2, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "PDSim.core.containers")) {
      if (unlikely(PyDict_SetItemString(modules, "PDSim.core.containers", __pyx_m) < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_containers(void)", __pyx_f[0], 2, 0, __PYX_ERR(0, 2, __pyx_L1_error));

  /* "PDSim/core/containers.pyx":5
 * cimport cython
 * 
 * cdef public enum STATE_VARS:             # <<<<<<<<<<<<<<
 *     STATE_VARS_TD
 *     STATE_VARS_TM
 */
  __pyx_t_1 = PyInt_FromLong(STATE_VARS_TD); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItemString(__pyx_d, "STATE_VARS_TD", __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromLong(STATE_VARS_TM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItemString(__pyx_d, "STATE_VARS_TM", __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/core/containers.pyx":10
 * 
 * cimport CoolProp.constants_header as constants
 * from CoolProp import constants             # <<<<<<<<<<<<<<
 * 
 * cdef bytes to_bytes(object val):
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_constants);
  __Pyx_GIVEREF(__pyx_n_s_constants);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_constants);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_CoolProp, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_constants); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_constants, __pyx_t_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim/core/containers.pyx":404
 *                  StateClass initialState,
 *                  bint exists = True,
 *                  dict VdVFcn_kwargs = {},             # <<<<<<<<<<<<<<
 *                  str discharge_becomes = None,
 *                  object becomes = None):
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__5 = ((PyObject*)__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "PDSim/core/containers.pyx":636
 *             return V_dict, dV_dict
 * 
 * def rebuildCVCollection(CVs):             # <<<<<<<<<<<<<<
 *     CVC = ControlVolumeCollection()
 *     for CV in CVs:
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5PDSim_4core_10containers_1rebuildCVCollection, NULL, __pyx_n_s_PDSim_core_containers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rebuildCVCollection, __pyx_t_2) < 0) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Tube(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5PDSim_4core_10containers_5__pyx_unpickle_Tube, NULL, __pyx_n_s_PDSim_core_containers); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Tube, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Tube__set_state(<Tube> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Tube__set_state(Tube __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ID = __pyx_state[0]; __pyx_result.L = __pyx_state[1]; __pyx_result.OD = __pyx_state[2]; __pyx_result.Q = __pyx_state[3]; __pyx_result.Q_add = __pyx_state[4]; __pyx_result.State1 = __pyx_state[5]; __pyx_result.State2 = __pyx_state[6]; __pyx_result.TubeFcn = __pyx_state[7]; __pyx_result.alpha = __pyx_state[8]; __pyx_result.exists = __pyx_state[9]; __pyx_result.fixed = __pyx_state[10]; __pyx_result.i1 = __pyx_state[11]; __pyx_result.i2 = __pyx_state[12]; __pyx_result.m_key1 = __pyx_state[13]; __pyx_result.m_key2 = __pyx_state[14]; __pyx_result.mdot = __pyx_state[15]
 *     if len(__pyx_state) > 16 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5PDSim_4core_10containers_7__pyx_unpickle_TubeCollection, NULL, __pyx_n_s_PDSim_core_containers); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_TubeCollection, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_CVScore(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5PDSim_4core_10containers_9__pyx_unpickle_CVScore, NULL, __pyx_n_s_PDSim_core_containers); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_CVScore, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_CVScore__set_state(<CVScore> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_CVScore__set_state(CVScore __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.N = __pyx_state[0]; __pyx_result.Q = __pyx_state[1]; __pyx_result.T = __pyx_state[2]; __pyx_result.V = __pyx_state[3]; __pyx_result.array_list = __pyx_state[4]; __pyx_result.cp = __pyx_state[5]; __pyx_result.cv = __pyx_state[6]; __pyx_result.dTdtheta = __pyx_state[7]; __pyx_result.dV = __pyx_state[8]; __pyx_result.dmdtheta = __pyx_state[9]; __pyx_result.dpdT_constV = __pyx_state[10]; __pyx_result.drhodtheta = __pyx_state[11]; __pyx_result.h = __pyx_state[12]; __pyx_result.m = __pyx_state[13]; __pyx_result.omega = __pyx_state[14]; __pyx_result.p = __pyx_state[15]; __pyx_result.property_derivs = __pyx_state[16]; __pyx_result.rho = __pyx_state[17]; __pyx_result.state_vars = __pyx_state[18]; __pyx_result.summerdT = __pyx_state[19]; __pyx_result.summerdm = __pyx_state[20]; __pyx_result.v = __pyx_state[21]
 *     if len(__pyx_state) > 22 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5PDSim_4core_10containers_11__pyx_unpickle_ControlVolume, NULL, __pyx_n_s_PDSim_core_containers); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_ControlVolume, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim/core/containers.pyx":2
 * 
 * from __future__ import division             # <<<<<<<<<<<<<<
 * cimport cython
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PDSim/misc/datatypes.pxd":41
 * cpdef arraym empty_arraym(int N)
 * 
 * cdef inline check_dims(arraym x, arraym y):             # <<<<<<<<<<<<<<
 *     if x.N != y.N:
 *         raise ValueError('Cannot apply unary operator to arraym instances with lengths of '+str(x.N)+' and '+str(y.N))
 */
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init PDSim.core.containers", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init PDSim.core.containers");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
      __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return tstate->use_tracing && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Print */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE CoolProp::parameters __Pyx_PyInt_As_CoolProp_3a__3a_parameters(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const CoolProp::parameters neg_one = (CoolProp::parameters) -1, const_zero = (CoolProp::parameters) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(CoolProp::parameters) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(CoolProp::parameters, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (CoolProp::parameters) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (CoolProp::parameters) 0;
                case  1: __PYX_VERIFY_RETURN_INT(CoolProp::parameters, digit, digits[0])
                case 2:
                    if (8 * sizeof(CoolProp::parameters) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CoolProp::parameters, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CoolProp::parameters) >= 2 * PyLong_SHIFT) {
                            return (CoolProp::parameters) (((((CoolProp::parameters)digits[1]) << PyLong_SHIFT) | (CoolProp::parameters)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(CoolProp::parameters) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CoolProp::parameters, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CoolProp::parameters) >= 3 * PyLong_SHIFT) {
                            return (CoolProp::parameters) (((((((CoolProp::parameters)digits[2]) << PyLong_SHIFT) | (CoolProp::parameters)digits[1]) << PyLong_SHIFT) | (CoolProp::parameters)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(CoolProp::parameters) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CoolProp::parameters, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CoolProp::parameters) >= 4 * PyLong_SHIFT) {
                            return (CoolProp::parameters) (((((((((CoolProp::parameters)digits[3]) << PyLong_SHIFT) | (CoolProp::parameters)digits[2]) << PyLong_SHIFT) | (CoolProp::parameters)digits[1]) << PyLong_SHIFT) | (CoolProp::parameters)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (CoolProp::parameters) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(CoolProp::parameters) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(CoolProp::parameters, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(CoolProp::parameters) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(CoolProp::parameters, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (CoolProp::parameters) 0;
                case -1: __PYX_VERIFY_RETURN_INT(CoolProp::parameters, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(CoolProp::parameters,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(CoolProp::parameters) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CoolProp::parameters, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CoolProp::parameters) - 1 > 2 * PyLong_SHIFT) {
                            return (CoolProp::parameters) (((CoolProp::parameters)-1)*(((((CoolProp::parameters)digits[1]) << PyLong_SHIFT) | (CoolProp::parameters)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(CoolProp::parameters) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CoolProp::parameters, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CoolProp::parameters) - 1 > 2 * PyLong_SHIFT) {
                            return (CoolProp::parameters) ((((((CoolProp::parameters)digits[1]) << PyLong_SHIFT) | (CoolProp::parameters)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(CoolProp::parameters) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CoolProp::parameters, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CoolProp::parameters) - 1 > 3 * PyLong_SHIFT) {
                            return (CoolProp::parameters) (((CoolProp::parameters)-1)*(((((((CoolProp::parameters)digits[2]) << PyLong_SHIFT) | (CoolProp::parameters)digits[1]) << PyLong_SHIFT) | (CoolProp::parameters)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(CoolProp::parameters) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CoolProp::parameters, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CoolProp::parameters) - 1 > 3 * PyLong_SHIFT) {
                            return (CoolProp::parameters) ((((((((CoolProp::parameters)digits[2]) << PyLong_SHIFT) | (CoolProp::parameters)digits[1]) << PyLong_SHIFT) | (CoolProp::parameters)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(CoolProp::parameters) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CoolProp::parameters, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CoolProp::parameters) - 1 > 4 * PyLong_SHIFT) {
                            return (CoolProp::parameters) (((CoolProp::parameters)-1)*(((((((((CoolProp::parameters)digits[3]) << PyLong_SHIFT) | (CoolProp::parameters)digits[2]) << PyLong_SHIFT) | (CoolProp::parameters)digits[1]) << PyLong_SHIFT) | (CoolProp::parameters)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(CoolProp::parameters) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CoolProp::parameters, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CoolProp::parameters) - 1 > 4 * PyLong_SHIFT) {
                            return (CoolProp::parameters) ((((((((((CoolProp::parameters)digits[3]) << PyLong_SHIFT) | (CoolProp::parameters)digits[2]) << PyLong_SHIFT) | (CoolProp::parameters)digits[1]) << PyLong_SHIFT) | (CoolProp::parameters)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(CoolProp::parameters) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(CoolProp::parameters, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(CoolProp::parameters) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(CoolProp::parameters, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            CoolProp::parameters val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (CoolProp::parameters) -1;
        }
    } else {
        CoolProp::parameters val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (CoolProp::parameters) -1;
        val = __Pyx_PyInt_As_CoolProp_3a__3a_parameters(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to CoolProp::parameters");
    return (CoolProp::parameters) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to CoolProp::parameters");
    return (CoolProp::parameters) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CoolProp_3a__3a_parameters(CoolProp::parameters value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const CoolProp::parameters neg_one = (CoolProp::parameters) -1, const_zero = (CoolProp::parameters) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(CoolProp::parameters) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(CoolProp::parameters) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(CoolProp::parameters) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(CoolProp::parameters) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(CoolProp::parameters) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(CoolProp::parameters),
                                     little, !is_unsigned);
    }
}

/* PrintOne */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
