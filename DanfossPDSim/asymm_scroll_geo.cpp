/* Generated by Cython 0.29.32 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_32"
#define CYTHON_HEX_VERSION 0x001D20F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_HEX >= 0x07030900)
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__DanfossPDSim__asymm_scroll_geo
#define __PYX_HAVE_API__DanfossPDSim__asymm_scroll_geo
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "DanfossPDSim\\asymm_scroll_geo.pyx",
  "DanfossPDSim\\asymm_scroll_geo.pxd",
  "stringsource",
  "__init__.pxd",
  "common_scroll_geo.pxd",
  "type.pxd",
};

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":689
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":690
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":696
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":697
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":703
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":704
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":713
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":714
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":717
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":718
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":719
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":724
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":725
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":726
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct;
struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_HTAnglesClass;
struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolute;
struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes;
struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals;
struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":728
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":729
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":730
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":732
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo_coords_norm;
struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo_coords_inv;
struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo__coords_inv_np;
struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo__coords_inv_d;

/* "PDSim/scroll/common_scroll_geo.pxd":45
 *     """ The initial angle on the outer involute of the wrap that forms the inner wall of the CV"""
 * 
 * cdef enum involute_index:             # <<<<<<<<<<<<<<
 *     INVOLUTE_FI
 *     INVOLUTE_FO
 */
enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_involute_index {
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FI,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FO,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OI,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OO
};

/* "PDSim/scroll/common_scroll_geo.pxd":84
 *     """ Boolean for existence of the line #2 """
 * 
 * cdef enum sides:             # <<<<<<<<<<<<<<
 *     UP
 *     DOWN
 */
enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_sides {
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_UP,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_DOWN,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_MID
};

/* "PDSim/scroll/common_scroll_geo.pxd":89
 *     MID
 * 
 * cdef enum compressor_CV_indices:             # <<<<<<<<<<<<<<
 *     keyIsa, keyIs1, keyIs2, keyId1, keyId2,
 *     keyIdd, keyIddd
 */
enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices {
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIsa,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIs1,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIs2,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyId1,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyId2,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIdd,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIddd,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_1 = 0x3E9,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_1 = 0x7D1,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_2 = 0x3EA,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_2 = 0x7D2,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_3 = 0x3EB,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_3 = 0x7D3,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_4 = 0x3EC,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_4 = 0x7D4,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_5 = 0x3ED,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_5 = 0x7D5,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_6 = 0x3EE,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_6 = 0x7D6,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_7 = 0x3EF,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_7 = 0x7D7,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_8 = 0x3F0,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_8 = 0x7D8,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_9 = 0x3F1,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_9 = 0x7D9,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_10 = 0x3F2,
  __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_10 = 0x7DA
};

/* "PDSim/scroll/common_scroll_geo.pxd":129
 *     np.ndarray
 * 
 * cpdef tuple coords_norm(phi_vec, geoVals geo, double theta, flag = *)             # <<<<<<<<<<<<<<
 * cpdef tuple coords_inv(phi_vec, geoVals geo, double theta, flag = *)
 * cpdef tuple _coords_inv_np(np.ndarray[np.float_t] phi, geoVals geo, double theta, flag = *)
 */
struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo_coords_norm {
  int __pyx_n;
  PyObject *flag;
};

/* "PDSim/scroll/common_scroll_geo.pxd":130
 * 
 * cpdef tuple coords_norm(phi_vec, geoVals geo, double theta, flag = *)
 * cpdef tuple coords_inv(phi_vec, geoVals geo, double theta, flag = *)             # <<<<<<<<<<<<<<
 * cpdef tuple _coords_inv_np(np.ndarray[np.float_t] phi, geoVals geo, double theta, flag = *)
 * cpdef tuple _coords_inv_d(double phi, geoVals geo, double theta, flag = *)
 */
struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo_coords_inv {
  int __pyx_n;
  PyObject *flag;
};

/* "PDSim/scroll/common_scroll_geo.pxd":131
 * cpdef tuple coords_norm(phi_vec, geoVals geo, double theta, flag = *)
 * cpdef tuple coords_inv(phi_vec, geoVals geo, double theta, flag = *)
 * cpdef tuple _coords_inv_np(np.ndarray[np.float_t] phi, geoVals geo, double theta, flag = *)             # <<<<<<<<<<<<<<
 * cpdef tuple _coords_inv_d(double phi, geoVals geo, double theta, flag = *)
 * 
 */
struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo__coords_inv_np {
  int __pyx_n;
  PyObject *flag;
};

/* "PDSim/scroll/common_scroll_geo.pxd":132
 * cpdef tuple coords_inv(phi_vec, geoVals geo, double theta, flag = *)
 * cpdef tuple _coords_inv_np(np.ndarray[np.float_t] phi, geoVals geo, double theta, flag = *)
 * cpdef tuple _coords_inv_d(double phi, geoVals geo, double theta, flag = *)             # <<<<<<<<<<<<<<
 * 
 * cdef _coords_inv_d_int(double phi, geoVals geo, double theta, int flag, double *x, double *y)
 */
struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo__coords_inv_d {
  int __pyx_n;
  PyObject *flag;
};
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_radial_leakage_area;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_getNc;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_SA;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_SA_forces;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_S1;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_S1_forces;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_S2;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_S2_forces;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_C1;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_C1_forces;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_C2;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_C2_forces;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_D1;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_D1_forces;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_D2;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_D2_forces;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_DD;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_DD_forces;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_DDD;
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_DDD_forces;

/* "PDSim/scroll/symm_scroll_geo.pxd":17
 * cpdef double theta_d(geoVals geo) except *
 * 
 * cpdef double radial_leakage_area(double theta, geoVals geo, long key1, long key2, int location = *) except *             # <<<<<<<<<<<<<<
 * cdef _radial_leakage_angles(double theta, geoVals geo, long key1, long key2, double *angle_min, double *angle_max)
 * 
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_radial_leakage_area {
  int __pyx_n;
  int location;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":20
 * cdef _radial_leakage_angles(double theta, geoVals geo, long key1, long key2, double *angle_min, double *angle_max)
 * 
 * cpdef int getNc(double theta, geoVals geo, int path = *) except *             # <<<<<<<<<<<<<<
 * 
 * cpdef HTAnglesClass HT_angles(double theta, geoVals geo, key)
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_getNc {
  int __pyx_n;
  int path;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":24
 * cpdef HTAnglesClass HT_angles(double theta, geoVals geo, key)
 * 
 * cpdef tuple SA(double theta, geoVals geo, bint poly=*, bint use_offset = *, double Vremove = *)             # <<<<<<<<<<<<<<
 * cpdef dict SA_forces(double theta, geoVals geo, bint poly = *, bint use_offset = *)
 * 
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_SA {
  int __pyx_n;
  int poly;
  int use_offset;
  double Vremove;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":25
 * 
 * cpdef tuple SA(double theta, geoVals geo, bint poly=*, bint use_offset = *, double Vremove = *)
 * cpdef dict SA_forces(double theta, geoVals geo, bint poly = *, bint use_offset = *)             # <<<<<<<<<<<<<<
 * 
 * cpdef tuple S1(double theta, geoVals geo, bint poly = *, double theta_0_volume = *, bint use_offset = *)
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_SA_forces {
  int __pyx_n;
  int poly;
  int use_offset;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":27
 * cpdef dict SA_forces(double theta, geoVals geo, bint poly = *, bint use_offset = *)
 * 
 * cpdef tuple S1(double theta, geoVals geo, bint poly = *, double theta_0_volume = *, bint use_offset = *)             # <<<<<<<<<<<<<<
 * cpdef dict S1_forces(double theta, geoVals geo, bint poly = *, double theta_0_volume =*, bint use_offset = *)
 * 
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_S1 {
  int __pyx_n;
  int poly;
  double theta_0_volume;
  int use_offset;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":28
 * 
 * cpdef tuple S1(double theta, geoVals geo, bint poly = *, double theta_0_volume = *, bint use_offset = *)
 * cpdef dict S1_forces(double theta, geoVals geo, bint poly = *, double theta_0_volume =*, bint use_offset = *)             # <<<<<<<<<<<<<<
 * 
 * cpdef tuple S2(double theta, geoVals geo, bint poly = *, double theta_0_volume = *)
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_S1_forces {
  int __pyx_n;
  int poly;
  double theta_0_volume;
  int use_offset;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":30
 * cpdef dict S1_forces(double theta, geoVals geo, bint poly = *, double theta_0_volume =*, bint use_offset = *)
 * 
 * cpdef tuple S2(double theta, geoVals geo, bint poly = *, double theta_0_volume = *)             # <<<<<<<<<<<<<<
 * cpdef dict S2_forces(double theta, geoVals geo, bint poly = *, double theta_0_volume =*)
 * 
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_S2 {
  int __pyx_n;
  int poly;
  double theta_0_volume;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":31
 * 
 * cpdef tuple S2(double theta, geoVals geo, bint poly = *, double theta_0_volume = *)
 * cpdef dict S2_forces(double theta, geoVals geo, bint poly = *, double theta_0_volume =*)             # <<<<<<<<<<<<<<
 * 
 * cpdef tuple C1(double theta, int alpha, geoVals geo, bint poly=*)
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_S2_forces {
  int __pyx_n;
  int poly;
  double theta_0_volume;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":33
 * cpdef dict S2_forces(double theta, geoVals geo, bint poly = *, double theta_0_volume =*)
 * 
 * cpdef tuple C1(double theta, int alpha, geoVals geo, bint poly=*)             # <<<<<<<<<<<<<<
 * cpdef dict C1_forces(double theta, int alpha, geoVals geo, bint poly = *)
 * 
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_C1 {
  int __pyx_n;
  int poly;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":34
 * 
 * cpdef tuple C1(double theta, int alpha, geoVals geo, bint poly=*)
 * cpdef dict C1_forces(double theta, int alpha, geoVals geo, bint poly = *)             # <<<<<<<<<<<<<<
 * 
 * cpdef tuple C2(double theta, int alpha, geoVals geo, bint poly=*)
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_C1_forces {
  int __pyx_n;
  int poly;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":36
 * cpdef dict C1_forces(double theta, int alpha, geoVals geo, bint poly = *)
 * 
 * cpdef tuple C2(double theta, int alpha, geoVals geo, bint poly=*)             # <<<<<<<<<<<<<<
 * cpdef dict C2_forces(double theta, int alpha, geoVals geo, bint poly = *)
 * 
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_C2 {
  int __pyx_n;
  int poly;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":37
 * 
 * cpdef tuple C2(double theta, int alpha, geoVals geo, bint poly=*)
 * cpdef dict C2_forces(double theta, int alpha, geoVals geo, bint poly = *)             # <<<<<<<<<<<<<<
 * 
 * cpdef tuple D1(double theta, geoVals geo, bint poly=*)
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_C2_forces {
  int __pyx_n;
  int poly;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":39
 * cpdef dict C2_forces(double theta, int alpha, geoVals geo, bint poly = *)
 * 
 * cpdef tuple D1(double theta, geoVals geo, bint poly=*)             # <<<<<<<<<<<<<<
 * cpdef dict D1_forces(double theta, geoVals geo, bint poly = *)
 * 
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_D1 {
  int __pyx_n;
  int poly;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":40
 * 
 * cpdef tuple D1(double theta, geoVals geo, bint poly=*)
 * cpdef dict D1_forces(double theta, geoVals geo, bint poly = *)             # <<<<<<<<<<<<<<
 * 
 * cpdef tuple D2(double theta, geoVals geo, bint poly=*)
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_D1_forces {
  int __pyx_n;
  int poly;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":42
 * cpdef dict D1_forces(double theta, geoVals geo, bint poly = *)
 * 
 * cpdef tuple D2(double theta, geoVals geo, bint poly=*)             # <<<<<<<<<<<<<<
 * cpdef dict D2_forces(double theta, geoVals geo, bint poly = *)
 * 
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_D2 {
  int __pyx_n;
  int poly;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":43
 * 
 * cpdef tuple D2(double theta, geoVals geo, bint poly=*)
 * cpdef dict D2_forces(double theta, geoVals geo, bint poly = *)             # <<<<<<<<<<<<<<
 * 
 * cpdef tuple DD(double theta, geoVals geo, bint poly=*)
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_D2_forces {
  int __pyx_n;
  int poly;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":45
 * cpdef dict D2_forces(double theta, geoVals geo, bint poly = *)
 * 
 * cpdef tuple DD(double theta, geoVals geo, bint poly=*)             # <<<<<<<<<<<<<<
 * cpdef dict DD_forces(double theta, geoVals geo, bint poly=*)
 * 
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_DD {
  int __pyx_n;
  int poly;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":46
 * 
 * cpdef tuple DD(double theta, geoVals geo, bint poly=*)
 * cpdef dict DD_forces(double theta, geoVals geo, bint poly=*)             # <<<<<<<<<<<<<<
 * 
 * cpdef tuple DDD(double theta, geoVals geo, bint poly=*)
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_DD_forces {
  int __pyx_n;
  int poly;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":48
 * cpdef dict DD_forces(double theta, geoVals geo, bint poly=*)
 * 
 * cpdef tuple DDD(double theta, geoVals geo, bint poly=*)             # <<<<<<<<<<<<<<
 * cpdef dict DDD_forces(double theta, geoVals geo, bint poly=*)
 * 
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_DDD {
  int __pyx_n;
  int poly;
};

/* "PDSim/scroll/symm_scroll_geo.pxd":49
 * 
 * cpdef tuple DDD(double theta, geoVals geo, bint poly=*)
 * cpdef dict DDD_forces(double theta, geoVals geo, bint poly=*)             # <<<<<<<<<<<<<<
 * 
 * cpdef CVcoords(CVkey, geoVals geo, double theta)
 */
struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_DDD_forces {
  int __pyx_n;
  int poly;
};
struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_CVcoords;
struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_forces;
struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_radial_leakage_area;

/* "DanfossPDSim/asymm_scroll_geo.pxd":25
 * cpdef get_radial_leakage_angles(double theta, DanfossGeoVals geo, long key1, long key2)
 * 
 * cpdef CVcoords(CVkey, DanfossGeoVals geo, double theta, int Ninv=*)             # <<<<<<<<<<<<<<
 * 
 * cpdef VdVstruct SA(double theta, DanfossGeoVals geo)
 */
struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_CVcoords {
  int __pyx_n;
  int Ninv;
};

/* "DanfossPDSim/asymm_scroll_geo.pxd":37
 * 
 * cpdef VdVstruct VdV(int index, double theta, DanfossGeoVals geo)
 * cpdef dict forces(int index, double theta, DanfossGeoVals geo, CVInvolutes angles = *)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_forces {
  int __pyx_n;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *angles;
};

/* "DanfossPDSim/asymm_scroll_geo.pyx":872
 *     return _radial_leakage_angles(CV_up, CV_down, &phi_min, &phi_max)
 * 
 * cpdef double radial_leakage_area(double theta, DanfossGeoVals geo, int index_up, int index_down, int location = common.UP) except *:             # <<<<<<<<<<<<<<
 *     """
 *     Notes
 */
struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_radial_leakage_area {
  int __pyx_n;
  int location;
};

/* "PDSim/scroll/common_scroll_geo.pxd":10
 * from libc.math cimport sqrt,sin,cos,tan,atan2,acos,floor,M_PI as pi,pow
 * 
 * cdef class VdVstruct:             # <<<<<<<<<<<<<<
 *     """
 *     A struct with values for volume and derivative of volume w.r.t. crank angle
 */
struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct {
  PyObject_HEAD
  double V;
  double dV;
};


/* "PDSim/scroll/common_scroll_geo.pxd":21
 *     """ Derivative of volume with respect to crank angle [m^3/radian] """
 * 
 * cdef class HTAnglesClass:             # <<<<<<<<<<<<<<
 *     """
 *     A struct with angles associated with the calculations needed for the assesment
 */
struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_HTAnglesClass {
  PyObject_HEAD
  double phi_1_i;
  double phi_2_i;
  double phi_1_o;
  double phi_2_o;
  double phi_i0;
  double phi_o0;
};


/* "PDSim/scroll/common_scroll_geo.pxd":51
 *     INVOLUTE_OO
 * 
 * cdef class CVInvolute:             # <<<<<<<<<<<<<<
 *     """
 *     A simple struct to contain the involute angles
 */
struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolute {
  PyObject_HEAD
  double phi_max;
  double phi_min;
  double phi_0;
  double dphi_max_dtheta;
  double dphi_min_dtheta;
  enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_involute_index involute;
};


/* "PDSim/scroll/common_scroll_geo.pxd":74
 *     """ The involute_index of this involute """
 * 
 * cdef class CVInvolutes:             # <<<<<<<<<<<<<<
 *     cdef public CVInvolute Inner
 *     """ The values for the inner involute of this chamber """
 */
struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes {
  PyObject_HEAD
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolute *Inner;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolute *Outer;
  int has_line_1;
  int has_line_2;
};


/* "PDSim/scroll/common_scroll_geo.pxd":104
 * 
 * #Take over the geo class with strict typing
 * cdef class geoVals:             # <<<<<<<<<<<<<<
 *     cdef public double h,ro,rb,t
 *     cdef public double phi_fi0,phi_fis,phi_fie,phi_fo0,phi_fos,phi_foe, phi_oi0,phi_ois,phi_oie, phi_oo0,phi_oos,phi_ooe
 */
struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PDSim_6scroll_17common_scroll_geo_geoVals *__pyx_vtab;
  double h;
  double ro;
  double rb;
  double t;
  double phi_fi0;
  double phi_fis;
  double phi_fie;
  double phi_fo0;
  double phi_fos;
  double phi_foe;
  double phi_oi0;
  double phi_ois;
  double phi_oie;
  double phi_oo0;
  double phi_oos;
  double phi_ooe;
  double xa_arc1;
  double ya_arc1;
  double ra_arc1;
  double t1_arc1;
  double t2_arc1;
  double xa_arc2;
  double ya_arc2;
  double ra_arc2;
  double t1_arc2;
  double t2_arc2;
  double b_line;
  double t1_line;
  double t2_line;
  double m_line;
  double x0_wall;
  double y0_wall;
  double r_wall;
  double delta_radial;
  double delta_flank;
  double phi_ie_offset;
  double delta_suction_offset;
  double cx_scroll;
  double cy_scroll;
  double V_scroll;
  double Vremove;
  PyArrayObject *xvec_disc_port;
  PyArrayObject *yvec_disc_port;
};


/* "DanfossPDSim/asymm_scroll_geo.pxd":6
 * from PDSim.scroll.common_scroll_geo cimport geoVals, VdVstruct, HTAnglesClass, CVInvolutes
 * 
 * cdef class DanfossGeoVals(geoVals):             # <<<<<<<<<<<<<<
 *     """
 *     This is a custom class that add the geometric parameters that are
 */
struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals {
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals __pyx_base;
  double xa_arc3;
  double ya_arc3;
  double ra_arc3;
  double t1_arc3;
  double t2_arc3;
};



/* "PDSim/scroll/common_scroll_geo.pxd":104
 * 
 * #Take over the geo class with strict typing
 * cdef class geoVals:             # <<<<<<<<<<<<<<
 *     cdef public double h,ro,rb,t
 *     cdef public double phi_fi0,phi_fis,phi_fie,phi_fo0,phi_fos,phi_foe, phi_oi0,phi_ois,phi_oie, phi_oo0,phi_oos,phi_ooe
 */

struct __pyx_vtabstruct_5PDSim_6scroll_17common_scroll_geo_geoVals {
  int (*is_symmetric)(struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, int __pyx_skip_dispatch);
  double (*val_if_symmetric)(struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int __pyx_skip_dispatch);
  PyObject *(*copy_inplace)(struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5PDSim_6scroll_17common_scroll_geo_geoVals *__pyx_vtabptr_5PDSim_6scroll_17common_scroll_geo_geoVals;


/* "DanfossPDSim/asymm_scroll_geo.pyx":80
 *     return (t1,t2)
 * 
 * cdef class DanfossGeoVals(geoVals):             # <<<<<<<<<<<<<<
 *     """
 *     This is a custom class that add the geometric parameters that are
 */

struct __pyx_vtabstruct_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals {
  struct __pyx_vtabstruct_5PDSim_6scroll_17common_scroll_geo_geoVals __pyx_base;
};
static struct __pyx_vtabstruct_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_vtabptr_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
      static PyCodeObject *__pyx_frame_code = NULL;\
      CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
      int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
      if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
#if PY_VERSION_HEX >= 0x030b00a2
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate) PyThreadState_EnterTracing(tstate)
  #define __Pyx_LeaveTracing(tstate) PyThreadState_LeaveTracing(tstate)
#elif PY_VERSION_HEX >= 0x030a00b1
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->cframe->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->cframe->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                 || tstate->c_profilefunc != NULL);\
      } while (0)
#else
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                         || tstate->c_profilefunc != NULL);\
      } while (0)
#endif
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 1, 1)) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 1)) {\
          __Pyx_EnterTracing(tstate);\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          __Pyx_LeaveTracing(tstate);\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_EnterTracing(tstate);
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      __Pyx_LeaveTracing(tstate);
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0)) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0)) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0)) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      __Pyx_EnterTracing(tstate);
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      __Pyx_LeaveTracing(tstate);
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* tp_new.proto */
#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* ModFloat[double].proto */
static CYTHON_INLINE double __Pyx_mod_double(double, double);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cython' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'libc.math' */

/* Module declarations from 'PDSim.scroll.common_scroll_geo' */
static PyTypeObject *__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_VdVstruct = 0;
static PyTypeObject *__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_HTAnglesClass = 0;
static PyTypeObject *__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_CVInvolute = 0;
static PyTypeObject *__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_CVInvolutes = 0;
static PyTypeObject *__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_geoVals = 0;
static PyObject *(*__pyx_f_5PDSim_6scroll_17common_scroll_geo_involute_index_to_key)(int, int __pyx_skip_dispatch); /*proto*/
static PyObject *(*__pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_norm)(PyObject *, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo_coords_norm *__pyx_optional_args); /*proto*/
static PyObject *(*__pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv)(PyObject *, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo_coords_inv *__pyx_optional_args); /*proto*/
static PyObject *(*__pyx_f_5PDSim_6scroll_17common_scroll_geo__coords_inv_d)(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo__coords_inv_d *__pyx_optional_args); /*proto*/
static PyObject *(*__pyx_f_5PDSim_6scroll_17common_scroll_geo__coords_inv_d_int)(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int, double *, double *); /*proto*/
static PyObject *(*__pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv_dtheta)(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int, double *, double *); /*proto*/
static PyObject *(*__pyx_f_5PDSim_6scroll_17common_scroll_geo__dcoords_inv_dphi_int)(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int, double *, double *); /*proto*/
static long (*__pyx_f_5PDSim_6scroll_17common_scroll_geo_get_compressor_CV_index)(PyObject *, int __pyx_skip_dispatch); /*proto*/
static long (*__pyx_f_5PDSim_6scroll_17common_scroll_geo_get_compression_chamber_index)(long, long, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE double __pyx_f_5PDSim_6scroll_17common_scroll_geo_min2(double, double, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE double __pyx_f_5PDSim_6scroll_17common_scroll_geo_max2(double, double, int __pyx_skip_dispatch); /*proto*/
static double (*__pyx_f_5PDSim_6scroll_17common_scroll_geo_Gr)(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int, int __pyx_skip_dispatch); /*proto*/
static double (*__pyx_f_5PDSim_6scroll_17common_scroll_geo_dGr_dphi)(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int, int __pyx_skip_dispatch); /*proto*/
static double (*__pyx_f_5PDSim_6scroll_17common_scroll_geo_dGr_dtheta)(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *(*__pyx_f_5PDSim_6scroll_17common_scroll_geo_VdV)(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *, int __pyx_skip_dispatch); /*proto*/
static PyObject *(*__pyx_f_5PDSim_6scroll_17common_scroll_geo_forces)(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *, double, int __pyx_skip_dispatch); /*proto*/
static double (*__pyx_f_5PDSim_6scroll_17common_scroll_geo_fFx_p)(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_involute_index, int __pyx_skip_dispatch); /*proto*/
static double (*__pyx_f_5PDSim_6scroll_17common_scroll_geo_fFy_p)(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_involute_index, int __pyx_skip_dispatch); /*proto*/
static double (*__pyx_f_5PDSim_6scroll_17common_scroll_geo_fMO_p)(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_involute_index, int __pyx_skip_dispatch); /*proto*/

/* Module declarations from 'PDSim.scroll.symm_scroll_geo' */
static PyObject *(*__pyx_f_5PDSim_6scroll_15symm_scroll_geo_DD_forces)(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_DD_forces *__pyx_optional_args); /*proto*/

/* Module declarations from 'DanfossPDSim.asymm_scroll_geo' */
static PyTypeObject *__pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals = 0;
static double __pyx_f_12DanfossPDSim_16asymm_scroll_geo_theta_d(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Nc(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_12DanfossPDSim_16asymm_scroll_geo_getNc(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_phi_s1_sa(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_phi_s2_sa(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_HTAnglesClass *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_HT_angles(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo__radial_leakage_angles(struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *, double *, double *); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_get_radial_leakage_angles(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, long, long, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVcoords(PyObject *, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, double, int __pyx_skip_dispatch, struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_CVcoords *__pyx_optional_args); /*proto*/
static struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_SA(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_SA_forces(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_DD(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_DD_forces(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_DDD(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_DDD_forces(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_VdV(int, double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_forces(int, double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch, struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_forces *__pyx_optional_args); /*proto*/
static CYTHON_INLINE double __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Danfossmin2(double, double, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE double __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Danfossmax2(double, double, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_12DanfossPDSim_16asymm_scroll_geo_overlap(double, double, double, double, double *, double *); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_sortAnglesCCW(double, double, int __pyx_skip_dispatch); /*proto*/
static double __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle(double, double, double, double, int __pyx_skip_dispatch); /*proto*/
static double __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle_orb(double, double, double, double, double, double); /*proto*/
static double __pyx_f_12DanfossPDSim_16asymm_scroll_geo_dGreen_circle_orb_dtheta(double, double, double, double, double, double); /*proto*/
static int __pyx_f_12DanfossPDSim_16asymm_scroll_geo_D_as_C_index(int, double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *); /*proto*/
static double __pyx_f_12DanfossPDSim_16asymm_scroll_geo_radial_leakage_area(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int, int, int __pyx_skip_dispatch, struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_radial_leakage_area *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo___pyx_unpickle_DanfossGeoVals__set_state(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "DanfossPDSim.asymm_scroll_geo"
extern int __pyx_module_is_main_DanfossPDSim__asymm_scroll_geo;
int __pyx_module_is_main_DanfossPDSim__asymm_scroll_geo = 0;

/* Implementation of 'DanfossPDSim.asymm_scroll_geo' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k__2[] = ": ";
static const char __pyx_k__3[] = "\n";
static const char __pyx_k__9[] = "*";
static const char __pyx_k_c1[] = "c1.";
static const char __pyx_k_c2[] = "c2.";
static const char __pyx_k_cx[] = "cx";
static const char __pyx_k_cy[] = "cy";
static const char __pyx_k_d1[] = "d1";
static const char __pyx_k_d2[] = "d2";
static const char __pyx_k_dd[] = "dd";
static const char __pyx_k_fi[] = "fi";
static const char __pyx_k_fo[] = "fo";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_oi[] = "oi";
static const char __pyx_k_oo[] = "oo";
static const char __pyx_k_s1[] = "s1";
static const char __pyx_k_s2[] = "s2";
static const char __pyx_k_sa[] = "sa";
static const char __pyx_k_t1[] = "t1";
static const char __pyx_k_t2[] = "t2";
static const char __pyx_k_x0[] = "x0";
static const char __pyx_k_y0[] = "y0";
static const char __pyx_k_cos[] = "cos";
static const char __pyx_k_geo[] = "geo";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_plt[] = "plt";
static const char __pyx_k_r_2[] = "r_";
static const char __pyx_k_sin[] = "sin";
static const char __pyx_k_Ninv[] = "Ninv";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_fx_p[] = "fx_p";
static const char __pyx_k_fy_p[] = "fy_p";
static const char __pyx_k_fz_p[] = "fz_p";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_repr[] = "__repr__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_CVkey[] = "CVkey";
static const char __pyx_k_M_O_p[] = "M_O_p";
static const char __pyx_k_cross[] = "cross";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_theta[] = "theta";
static const char __pyx_k_angles[] = "angles";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_keyId1[] = "keyId1";
static const char __pyx_k_keyId2[] = "keyId2";
static const char __pyx_k_keyIdd[] = "keyIdd";
static const char __pyx_k_keyIs1[] = "keyIs1";
static const char __pyx_k_keyIs2[] = "keyIs2";
static const char __pyx_k_keyIsa[] = "keyIsa";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_keyIddd[] = "keyIddd";
static const char __pyx_k_ra_arc3[] = "ra_arc3";
static const char __pyx_k_t1_arc3[] = "t1_arc3";
static const char __pyx_k_t2_arc3[] = "t2_arc3";
static const char __pyx_k_xa_arc3[] = "xa_arc3";
static const char __pyx_k_ya_arc3[] = "ya_arc3";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_index_up[] = "index_up";
static const char __pyx_k_keyIc1_1[] = "keyIc1_1";
static const char __pyx_k_keyIc1_2[] = "keyIc1_2";
static const char __pyx_k_keyIc1_3[] = "keyIc1_3";
static const char __pyx_k_keyIc1_4[] = "keyIc1_4";
static const char __pyx_k_keyIc1_5[] = "keyIc1_5";
static const char __pyx_k_keyIc2_1[] = "keyIc2_1";
static const char __pyx_k_keyIc2_2[] = "keyIc2_2";
static const char __pyx_k_keyIc2_3[] = "keyIc2_3";
static const char __pyx_k_keyIc2_4[] = "keyIc2_4";
static const char __pyx_k_keyIc2_5[] = "keyIc2_5";
static const char __pyx_k_linspace[] = "linspace";
static const char __pyx_k_location[] = "location";
static const char __pyx_k_polyarea[] = "polyarea";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_index_down[] = "index_down";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_startswith[] = "startswith";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_polycentroid[] = "polycentroid";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_DanfossGeoVals[] = "DanfossGeoVals";
static const char __pyx_k_Danfoss_hybrid[] = "(Danfoss-hybrid)";
static const char __pyx_k_path_is_invalid[] = "path is invalid: ";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_matplotlib_pyplot[] = "matplotlib.pyplot";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_index_s_d_not_valid[] = "index [{s:d}] not valid";
static const char __pyx_k_CVkey_key_s_is_invalid[] = "CVkey [{key:s}] is invalid";
static const char __pyx_k_Could_not_match_this_CVkey[] = "Could not match this CVkey: ";
static const char __pyx_k_pyx_unpickle_DanfossGeoVals[] = "__pyx_unpickle_DanfossGeoVals";
static const char __pyx_k_DanfossPDSim_asymm_scroll_geo[] = "DanfossPDSim.asymm_scroll_geo";
static const char __pyx_k_PDSim_scroll_common_scroll_geo[] = "PDSim.scroll.common_scroll_geo";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xb9a57b5, 0x9123f88, 0x5c2c894) = (V_scroll, Vremove, b_line, cx_scroll, cy_scroll, delta_flank, delta_radial, delta_suction_offset, h, m_line, phi_fi0, phi_fie, phi_fis, phi_fo0, phi_foe, phi_fos, phi_ie_offset, phi_oi0, phi_oie, phi_ois, phi_oo0, phi_ooe, phi_oos, r_wall, ra_arc1, ra_arc2, ra_arc3, rb, ro, t, t1_arc1, t1_arc2, t1_arc3, t1_line, t2_arc1, t2_arc2, t2_arc3, t2_line, x0_wall, xa_arc1, xa_arc2, xa_arc3, xvec_disc_port, y0_wall, ya_arc1, ya_arc2, ya_arc3, yvec_disc_port))";
static const char __pyx_k_Requested_alpha_0_d_is_not_possi[] = "Requested alpha [{0:d}] is not possible; N_c_max is {1:d}";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static PyObject *__pyx_n_s_CVkey;
static PyObject *__pyx_kp_s_CVkey_key_s_is_invalid;
static PyObject *__pyx_kp_s_Could_not_match_this_CVkey;
static PyObject *__pyx_n_s_DanfossGeoVals;
static PyObject *__pyx_n_s_DanfossPDSim_asymm_scroll_geo;
static PyObject *__pyx_kp_s_Danfoss_hybrid;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_M_O_p;
static PyObject *__pyx_n_s_Ninv;
static PyObject *__pyx_n_s_PDSim_scroll_common_scroll_geo;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_kp_s_Requested_alpha_0_d_is_not_possi;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_n_s__9;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_angles;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_kp_s_c1;
static PyObject *__pyx_kp_s_c2;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_cos;
static PyObject *__pyx_n_s_cross;
static PyObject *__pyx_n_s_cx;
static PyObject *__pyx_n_s_cy;
static PyObject *__pyx_n_s_d1;
static PyObject *__pyx_n_s_d2;
static PyObject *__pyx_n_s_dd;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_fi;
static PyObject *__pyx_n_s_fo;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fx_p;
static PyObject *__pyx_n_s_fy_p;
static PyObject *__pyx_n_s_fz_p;
static PyObject *__pyx_n_s_geo;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_index_down;
static PyObject *__pyx_kp_s_index_s_d_not_valid;
static PyObject *__pyx_n_s_index_up;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_keyIc1_1;
static PyObject *__pyx_n_s_keyIc1_2;
static PyObject *__pyx_n_s_keyIc1_3;
static PyObject *__pyx_n_s_keyIc1_4;
static PyObject *__pyx_n_s_keyIc1_5;
static PyObject *__pyx_n_s_keyIc2_1;
static PyObject *__pyx_n_s_keyIc2_2;
static PyObject *__pyx_n_s_keyIc2_3;
static PyObject *__pyx_n_s_keyIc2_4;
static PyObject *__pyx_n_s_keyIc2_5;
static PyObject *__pyx_n_s_keyId1;
static PyObject *__pyx_n_s_keyId2;
static PyObject *__pyx_n_s_keyIdd;
static PyObject *__pyx_n_s_keyIddd;
static PyObject *__pyx_n_s_keyIs1;
static PyObject *__pyx_n_s_keyIs2;
static PyObject *__pyx_n_s_keyIsa;
static PyObject *__pyx_n_s_linspace;
static PyObject *__pyx_n_s_location;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_matplotlib_pyplot;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_oi;
static PyObject *__pyx_n_s_oo;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_kp_s_path_is_invalid;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_plt;
static PyObject *__pyx_n_s_polyarea;
static PyObject *__pyx_n_s_polycentroid;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_DanfossGeoVals;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_r_2;
static PyObject *__pyx_n_s_ra_arc3;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_repr;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_s1;
static PyObject *__pyx_n_s_s2;
static PyObject *__pyx_n_s_sa;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_sin;
static PyObject *__pyx_n_s_startswith;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_t1;
static PyObject *__pyx_n_s_t1_arc3;
static PyObject *__pyx_n_s_t2;
static PyObject *__pyx_n_s_t2_arc3;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_theta;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_x0;
static PyObject *__pyx_n_s_xa_arc3;
static PyObject *__pyx_n_s_y0;
static PyObject *__pyx_n_s_ya_arc3;
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_Danfossmin2(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_b); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_2Danfossmax2(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_b); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_4sortAnglesCCW(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_t1, double __pyx_v_t2); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals___repr__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7xa_arc3___get__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self); /* proto */
static int __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7xa_arc3_2__set__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ya_arc3___get__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self); /* proto */
static int __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ya_arc3_2__set__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ra_arc3___get__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self); /* proto */
static int __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ra_arc3_2__set__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t1_arc3___get__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self); /* proto */
static int __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t1_arc3_2__set__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t2_arc3___get__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self); /* proto */
static int __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t2_arc3_2__set__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_2__reduce_cython__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_4__setstate_cython__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_6phi_s1_sa(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_8phi_s2_sa(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_10CVangles(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_12theta_d(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, int __pyx_v_path); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14Nc(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, int __pyx_v_path); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_16getNc(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, int __pyx_v_path); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_18Green_circle(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_t, double __pyx_v_r, double __pyx_v_x0, double __pyx_v_y0); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_20SA(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_22SA_forces(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_24DD(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_26DD_forces(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_28DDD(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_30DDD_forces(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_32VdV(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_34forces(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_angles); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_36CVcoords(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_CVkey, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, double __pyx_v_theta, int __pyx_v_Ninv); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_38HT_angles(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_40get_radial_leakage_angles(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, long __pyx_v_index_up, long __pyx_v_index_down); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_42radial_leakage_area(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, int __pyx_v_index_up, int __pyx_v_index_down, int __pyx_v_location); /* proto */
static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_44__pyx_unpickle_DanfossGeoVals(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5PDSim_6scroll_17common_scroll_geo_min2(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_b); /* proto */
static PyObject *__pyx_pf_5PDSim_6scroll_17common_scroll_geo_2max2(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_b); /* proto */
static PyObject *__pyx_tp_new_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_300;
static PyObject *__pyx_int_700;
static PyObject *__pyx_int_1000;
static PyObject *__pyx_int_96651412;
static PyObject *__pyx_int_152190856;
static PyObject *__pyx_int_194664373;
static PyObject *__pyx_int_neg_1;
static int __pyx_k__4;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_codeobj__5;
/* Late includes */

/* "DanfossPDSim/asymm_scroll_geo.pyx":35
 * keyIc2_5 = common.keyIc2_5
 * 
 * cpdef inline double Danfossmin2(double a, double b):             # <<<<<<<<<<<<<<
 *     return a if a<b else b
 * 
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_1Danfossmin2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE double __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Danfossmin2(double __pyx_v_a, double __pyx_v_b, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Danfossmin2", 0);
  __Pyx_TraceCall("Danfossmin2", __pyx_f[0], 35, 0, __PYX_ERR(0, 35, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":36
 * 
 * cpdef inline double Danfossmin2(double a, double b):
 *     return a if a<b else b             # <<<<<<<<<<<<<<
 * 
 * cpdef inline double Danfossmax2(double a, double b):
 */
  if (((__pyx_v_a < __pyx_v_b) != 0)) {
    __pyx_t_1 = __pyx_v_a;
  } else {
    __pyx_t_1 = __pyx_v_b;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":35
 * keyIc2_5 = common.keyIc2_5
 * 
 * cpdef inline double Danfossmin2(double a, double b):             # <<<<<<<<<<<<<<
 *     return a if a<b else b
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("DanfossPDSim.asymm_scroll_geo.Danfossmin2", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_1Danfossmin2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_Danfossmin2[] = "Danfossmin2(double a, double b) -> double";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_1Danfossmin2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  double __pyx_v_b;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Danfossmin2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Danfossmin2", 1, 2, 2, 1); __PYX_ERR(0, 35, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Danfossmin2") < 0)) __PYX_ERR(0, 35, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 35, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 35, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Danfossmin2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 35, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.Danfossmin2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_Danfossmin2(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_Danfossmin2(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Danfossmin2", 0);
  __Pyx_TraceCall("Danfossmin2 (wrapper)", __pyx_f[0], 35, 0, __PYX_ERR(0, 35, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_12DanfossPDSim_16asymm_scroll_geo_Danfossmin2(__pyx_v_a, __pyx_v_b, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.Danfossmin2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":38
 *     return a if a<b else b
 * 
 * cpdef inline double Danfossmax2(double a, double b):             # <<<<<<<<<<<<<<
 *     return a if a>b else b
 * 
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_3Danfossmax2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE double __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Danfossmax2(double __pyx_v_a, double __pyx_v_b, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Danfossmax2", 0);
  __Pyx_TraceCall("Danfossmax2", __pyx_f[0], 38, 0, __PYX_ERR(0, 38, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":39
 * 
 * cpdef inline double Danfossmax2(double a, double b):
 *     return a if a>b else b             # <<<<<<<<<<<<<<
 * 
 * cdef bint overlap(double minv1, double maxv1, double minv2, double maxv2, double *min, double *max):
 */
  if (((__pyx_v_a > __pyx_v_b) != 0)) {
    __pyx_t_1 = __pyx_v_a;
  } else {
    __pyx_t_1 = __pyx_v_b;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":38
 *     return a if a<b else b
 * 
 * cpdef inline double Danfossmax2(double a, double b):             # <<<<<<<<<<<<<<
 *     return a if a>b else b
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("DanfossPDSim.asymm_scroll_geo.Danfossmax2", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_3Danfossmax2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_2Danfossmax2[] = "Danfossmax2(double a, double b) -> double";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_3Danfossmax2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  double __pyx_v_b;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Danfossmax2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Danfossmax2", 1, 2, 2, 1); __PYX_ERR(0, 38, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Danfossmax2") < 0)) __PYX_ERR(0, 38, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 38, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 38, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Danfossmax2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 38, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.Danfossmax2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_2Danfossmax2(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_2Danfossmax2(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Danfossmax2", 0);
  __Pyx_TraceCall("Danfossmax2 (wrapper)", __pyx_f[0], 38, 0, __PYX_ERR(0, 38, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_12DanfossPDSim_16asymm_scroll_geo_Danfossmax2(__pyx_v_a, __pyx_v_b, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.Danfossmax2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":41
 *     return a if a>b else b
 * 
 * cdef bint overlap(double minv1, double maxv1, double minv2, double maxv2, double *min, double *max):             # <<<<<<<<<<<<<<
 *     """
 *     Returns True if the ranges overlap, with the pointers to the overlap range
 */

static int __pyx_f_12DanfossPDSim_16asymm_scroll_geo_overlap(double __pyx_v_minv1, double __pyx_v_maxv1, double __pyx_v_minv2, double __pyx_v_maxv2, double *__pyx_v_min, double *__pyx_v_max) {
  double __pyx_v_e;
  double __pyx_v__min;
  double __pyx_v__max;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlap", 0);
  __Pyx_TraceCall("overlap", __pyx_f[0], 41, 0, __PYX_ERR(0, 41, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":45
 *     Returns True if the ranges overlap, with the pointers to the overlap range
 *     """
 *     cdef double e = 1e-14 #epsilon to deal with floating point accuracy             # <<<<<<<<<<<<<<
 *     cdef double _min = Danfossmax2(minv1, minv2)
 *     cdef double _max = Danfossmin2(maxv1, maxv2)
 */
  __pyx_v_e = 1e-14;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":46
 *     """
 *     cdef double e = 1e-14 #epsilon to deal with floating point accuracy
 *     cdef double _min = Danfossmax2(minv1, minv2)             # <<<<<<<<<<<<<<
 *     cdef double _max = Danfossmin2(maxv1, maxv2)
 * 
 */
  __pyx_v__min = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Danfossmax2(__pyx_v_minv1, __pyx_v_minv2, 0);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":47
 *     cdef double e = 1e-14 #epsilon to deal with floating point accuracy
 *     cdef double _min = Danfossmax2(minv1, minv2)
 *     cdef double _max = Danfossmin2(maxv1, maxv2)             # <<<<<<<<<<<<<<
 * 
 *     if minv1-e <= _max <= maxv1+e and minv2-e <= _max <= maxv2+e and minv1-e <= _min <= maxv2+e and minv2-e <= _min <= maxv2+e:
 */
  __pyx_v__max = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Danfossmin2(__pyx_v_maxv1, __pyx_v_maxv2, 0);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":49
 *     cdef double _max = Danfossmin2(maxv1, maxv2)
 * 
 *     if minv1-e <= _max <= maxv1+e and minv2-e <= _max <= maxv2+e and minv1-e <= _min <= maxv2+e and minv2-e <= _min <= maxv2+e:             # <<<<<<<<<<<<<<
 *         min[0] = _min
 *         max[0] = _max
 */
  __pyx_t_2 = ((__pyx_v_minv1 - __pyx_v_e) <= __pyx_v__max);
  if (__pyx_t_2) {
    __pyx_t_2 = (__pyx_v__max <= (__pyx_v_maxv1 + __pyx_v_e));
  }
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_minv2 - __pyx_v_e) <= __pyx_v__max);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v__max <= (__pyx_v_maxv2 + __pyx_v_e));
  }
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_minv1 - __pyx_v_e) <= __pyx_v__min);
  if (__pyx_t_2) {
    __pyx_t_2 = (__pyx_v__min <= (__pyx_v_maxv2 + __pyx_v_e));
  }
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_minv2 - __pyx_v_e) <= __pyx_v__min);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v__min <= (__pyx_v_maxv2 + __pyx_v_e));
  }
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":50
 * 
 *     if minv1-e <= _max <= maxv1+e and minv2-e <= _max <= maxv2+e and minv1-e <= _min <= maxv2+e and minv2-e <= _min <= maxv2+e:
 *         min[0] = _min             # <<<<<<<<<<<<<<
 *         max[0] = _max
 *         return True
 */
    (__pyx_v_min[0]) = __pyx_v__min;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":51
 *     if minv1-e <= _max <= maxv1+e and minv2-e <= _max <= maxv2+e and minv1-e <= _min <= maxv2+e and minv2-e <= _min <= maxv2+e:
 *         min[0] = _min
 *         max[0] = _max             # <<<<<<<<<<<<<<
 *         return True
 *     else:
 */
    (__pyx_v_max[0]) = __pyx_v__max;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":52
 *         min[0] = _min
 *         max[0] = _max
 *         return True             # <<<<<<<<<<<<<<
 *     else:
 *         return False
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":49
 *     cdef double _max = Danfossmin2(maxv1, maxv2)
 * 
 *     if minv1-e <= _max <= maxv1+e and minv2-e <= _max <= maxv2+e and minv1-e <= _min <= maxv2+e and minv2-e <= _min <= maxv2+e:             # <<<<<<<<<<<<<<
 *         min[0] = _min
 *         max[0] = _max
 */
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":54
 *         return True
 *     else:
 *         return False             # <<<<<<<<<<<<<<
 * 
 * cpdef tuple sortAnglesCCW(double t1, double t2):
 */
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":41
 *     return a if a>b else b
 * 
 * cdef bint overlap(double minv1, double maxv1, double minv2, double maxv2, double *min, double *max):             # <<<<<<<<<<<<<<
 *     """
 *     Returns True if the ranges overlap, with the pointers to the overlap range
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("DanfossPDSim.asymm_scroll_geo.overlap", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":56
 *         return False
 * 
 * cpdef tuple sortAnglesCCW(double t1, double t2):             # <<<<<<<<<<<<<<
 *     """
 *     Sort angles so that t2>t1 in a counter-clockwise sense
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_5sortAnglesCCW(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_sortAnglesCCW(double __pyx_v_t1, double __pyx_v_t2, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sortAnglesCCW", 0);
  __Pyx_TraceCall("sortAnglesCCW", __pyx_f[0], 56, 0, __PYX_ERR(0, 56, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":72
 *     """
 * 
 *     if (cos(t1)*sin(t2)-cos(t2)*sin(t1)<0):             # <<<<<<<<<<<<<<
 *         # Swap angles
 *         t1,t2 = t2,t1
 */
  __pyx_t_1 = ((((cos(__pyx_v_t1) * sin(__pyx_v_t2)) - (cos(__pyx_v_t2) * sin(__pyx_v_t1))) < 0.0) != 0);
  if (__pyx_t_1) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":74
 *     if (cos(t1)*sin(t2)-cos(t2)*sin(t1)<0):
 *         # Swap angles
 *         t1,t2 = t2,t1             # <<<<<<<<<<<<<<
 *     while (t1 > t2):
 *         # Make t2 bigger than t1
 */
    __pyx_t_2 = __pyx_v_t2;
    __pyx_t_3 = __pyx_v_t1;
    __pyx_v_t1 = __pyx_t_2;
    __pyx_v_t2 = __pyx_t_3;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":72
 *     """
 * 
 *     if (cos(t1)*sin(t2)-cos(t2)*sin(t1)<0):             # <<<<<<<<<<<<<<
 *         # Swap angles
 *         t1,t2 = t2,t1
 */
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":75
 *         # Swap angles
 *         t1,t2 = t2,t1
 *     while (t1 > t2):             # <<<<<<<<<<<<<<
 *         # Make t2 bigger than t1
 *         t2=t2 + 2*pi;
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_t1 > __pyx_v_t2) != 0);
    if (!__pyx_t_1) break;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":77
 *     while (t1 > t2):
 *         # Make t2 bigger than t1
 *         t2=t2 + 2*pi;             # <<<<<<<<<<<<<<
 *     return (t1,t2)
 * 
 */
    __pyx_v_t2 = (__pyx_v_t2 + (2.0 * M_PI));
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":78
 *         # Make t2 bigger than t1
 *         t2=t2 + 2*pi;
 *     return (t1,t2)             # <<<<<<<<<<<<<<
 * 
 * cdef class DanfossGeoVals(geoVals):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_t1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_t2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_r = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":56
 *         return False
 * 
 * cpdef tuple sortAnglesCCW(double t1, double t2):             # <<<<<<<<<<<<<<
 *     """
 *     Sort angles so that t2>t1 in a counter-clockwise sense
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.sortAnglesCCW", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_5sortAnglesCCW(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_4sortAnglesCCW[] = "sortAnglesCCW(double t1, double t2) -> tuple\n\n    Sort angles so that t2>t1 in a counter-clockwise sense\n    idea from `StackOverflow <http://stackoverflow.com/questions/242404/sort-four-points-in-clockwise-order>`_\n    more description: `SoftSurfer <http://softsurfer.com/Archive/algorithm_0101/algorithm_0101.htm>`_\n\n    If the signed area of the triangle formed between the points on a unit circle with angles t1 and t2\n    and the origin is positive, the angles are sorted counterclockwise. Otherwise, the angles\n    are sorted in a counter-clockwise manner.  Here we want the angles to be sorted CCW, so\n    if area is negative, swap angles\n    \n    Area obtained from the cross product of a vector from origin \n    to 1 and a vector to point 2, so use right hand rule to get \n    sign of cross product with unit length\n    ";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_5sortAnglesCCW(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_t1;
  double __pyx_v_t2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sortAnglesCCW (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t1,&__pyx_n_s_t2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sortAnglesCCW", 1, 2, 2, 1); __PYX_ERR(0, 56, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sortAnglesCCW") < 0)) __PYX_ERR(0, 56, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_t1 = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_t1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 56, __pyx_L3_error)
    __pyx_v_t2 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_t2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 56, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sortAnglesCCW", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 56, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.sortAnglesCCW", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_4sortAnglesCCW(__pyx_self, __pyx_v_t1, __pyx_v_t2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_4sortAnglesCCW(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_t1, double __pyx_v_t2) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sortAnglesCCW", 0);
  __Pyx_TraceCall("sortAnglesCCW (wrapper)", __pyx_f[0], 56, 0, __PYX_ERR(0, 56, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_sortAnglesCCW(__pyx_v_t1, __pyx_v_t2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.sortAnglesCCW", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":86
 *     """
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         s = "(Danfoss-hybrid)" + geoVals.__repr__(self)
 *         for atr in ['xa_arc3','ya_arc3','ra_arc3','t1_arc3','t2_arc3']:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals___repr__(((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals___repr__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_atr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);
  __Pyx_TraceCall("__repr__", __pyx_f[0], 86, 0, __PYX_ERR(0, 86, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":87
 * 
 *     def __repr__(self):
 *         s = "(Danfoss-hybrid)" + geoVals.__repr__(self)             # <<<<<<<<<<<<<<
 *         for atr in ['xa_arc3','ya_arc3','ra_arc3','t1_arc3','t2_arc3']:
 *             s += atr+': '+str(getattr(self,atr))+'\n'
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_geoVals), __pyx_n_s_repr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_self));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Danfoss_hybrid, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_s = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":88
 *     def __repr__(self):
 *         s = "(Danfoss-hybrid)" + geoVals.__repr__(self)
 *         for atr in ['xa_arc3','ya_arc3','ra_arc3','t1_arc3','t2_arc3']:             # <<<<<<<<<<<<<<
 *             s += atr+': '+str(getattr(self,atr))+'\n'
 *         return s
 */
  __pyx_t_2 = __pyx_tuple_; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= 5) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 88, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_atr, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":89
 *         s = "(Danfoss-hybrid)" + geoVals.__repr__(self)
 *         for atr in ['xa_arc3','ya_arc3','ra_arc3','t1_arc3','t2_arc3']:
 *             s += atr+': '+str(getattr(self,atr))+'\n'             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
    __pyx_t_1 = PyNumber_Add(__pyx_v_atr, __pyx_kp_s__2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_GetAttr(((PyObject *)__pyx_v_self), __pyx_v_atr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_s, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":88
 *     def __repr__(self):
 *         s = "(Danfoss-hybrid)" + geoVals.__repr__(self)
 *         for atr in ['xa_arc3','ya_arc3','ra_arc3','t1_arc3','t2_arc3']:             # <<<<<<<<<<<<<<
 *             s += atr+': '+str(getattr(self,atr))+'\n'
 *         return s
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":90
 *         for atr in ['xa_arc3','ya_arc3','ra_arc3','t1_arc3','t2_arc3']:
 *             s += atr+': '+str(getattr(self,atr))+'\n'
 *         return s             # <<<<<<<<<<<<<<
 * 
 * cpdef tuple phi_s1_sa(double theta, DanfossGeoVals geo):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":86
 *     """
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         s = "(Danfoss-hybrid)" + geoVals.__repr__(self)
 *         for atr in ['xa_arc3','ya_arc3','ra_arc3','t1_arc3','t2_arc3']:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DanfossGeoVals.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_atr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pxd":11
 *     required for the three-arc PMP
 *     """
 *     cdef public double xa_arc3,ya_arc3,ra_arc3,t1_arc3,t2_arc3             # <<<<<<<<<<<<<<
 * 
 * cpdef double theta_d(DanfossGeoVals geo, int path) except *
 */

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7xa_arc3_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7xa_arc3_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7xa_arc3___get__(((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7xa_arc3___get__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->xa_arc3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DanfossGeoVals.xa_arc3.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7xa_arc3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7xa_arc3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7xa_arc3_2__set__(((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7xa_arc3_2__set__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_v_self->xa_arc3 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DanfossGeoVals.xa_arc3.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ya_arc3_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ya_arc3_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ya_arc3___get__(((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ya_arc3___get__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ya_arc3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DanfossGeoVals.ya_arc3.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ya_arc3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ya_arc3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ya_arc3_2__set__(((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ya_arc3_2__set__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_v_self->ya_arc3 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DanfossGeoVals.ya_arc3.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ra_arc3_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ra_arc3_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ra_arc3___get__(((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ra_arc3___get__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ra_arc3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DanfossGeoVals.ra_arc3.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ra_arc3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ra_arc3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ra_arc3_2__set__(((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ra_arc3_2__set__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_v_self->ra_arc3 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DanfossGeoVals.ra_arc3.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t1_arc3_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t1_arc3_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t1_arc3___get__(((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t1_arc3___get__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->t1_arc3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DanfossGeoVals.t1_arc3.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t1_arc3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t1_arc3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t1_arc3_2__set__(((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t1_arc3_2__set__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_v_self->t1_arc3 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DanfossGeoVals.t1_arc3.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t2_arc3_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t2_arc3_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t2_arc3___get__(((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t2_arc3___get__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->t2_arc3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DanfossGeoVals.t2_arc3.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t2_arc3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t2_arc3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t2_arc3_2__set__(((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t2_arc3_2__set__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_v_self->t2_arc3 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DanfossGeoVals.t2_arc3.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_2__reduce_cython__[] = "DanfossGeoVals.__reduce_cython__(self)";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_2__reduce_cython__(((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_2__reduce_cython__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  PyObject *__pyx_t_29 = NULL;
  PyObject *__pyx_t_30 = NULL;
  PyObject *__pyx_t_31 = NULL;
  PyObject *__pyx_t_32 = NULL;
  PyObject *__pyx_t_33 = NULL;
  PyObject *__pyx_t_34 = NULL;
  PyObject *__pyx_t_35 = NULL;
  PyObject *__pyx_t_36 = NULL;
  PyObject *__pyx_t_37 = NULL;
  PyObject *__pyx_t_38 = NULL;
  PyObject *__pyx_t_39 = NULL;
  PyObject *__pyx_t_40 = NULL;
  PyObject *__pyx_t_41 = NULL;
  PyObject *__pyx_t_42 = NULL;
  PyObject *__pyx_t_43 = NULL;
  PyObject *__pyx_t_44 = NULL;
  PyObject *__pyx_t_45 = NULL;
  PyObject *__pyx_t_46 = NULL;
  PyObject *__pyx_t_47 = NULL;
  int __pyx_t_48;
  int __pyx_t_49;
  int __pyx_t_50;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.V_scroll, self.Vremove, self.b_line, self.cx_scroll, self.cy_scroll, self.delta_flank, self.delta_radial, self.delta_suction_offset, self.h, self.m_line, self.phi_fi0, self.phi_fie, self.phi_fis, self.phi_fo0, self.phi_foe, self.phi_fos, self.phi_ie_offset, self.phi_oi0, self.phi_oie, self.phi_ois, self.phi_oo0, self.phi_ooe, self.phi_oos, self.r_wall, self.ra_arc1, self.ra_arc2, self.ra_arc3, self.rb, self.ro, self.t, self.t1_arc1, self.t1_arc2, self.t1_arc3, self.t1_line, self.t2_arc1, self.t2_arc2, self.t2_arc3, self.t2_line, self.x0_wall, self.xa_arc1, self.xa_arc2, self.xa_arc3, self.xvec_disc_port, self.y0_wall, self.ya_arc1, self.ya_arc2, self.ya_arc3, self.yvec_disc_port)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.V_scroll); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.Vremove); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.b_line); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.cx_scroll); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.cy_scroll); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.delta_flank); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.delta_radial); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.delta_suction_offset); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.h); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.m_line); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.phi_fi0); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.phi_fie); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.phi_fis); if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.phi_fo0); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.phi_foe); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.phi_fos); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_17 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.phi_ie_offset); if (unlikely(!__pyx_t_17)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.phi_oi0); if (unlikely(!__pyx_t_18)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_19 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.phi_oie); if (unlikely(!__pyx_t_19)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_20 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.phi_ois); if (unlikely(!__pyx_t_20)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_21 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.phi_oo0); if (unlikely(!__pyx_t_21)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_22 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.phi_ooe); if (unlikely(!__pyx_t_22)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __pyx_t_23 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.phi_oos); if (unlikely(!__pyx_t_23)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_24 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.r_wall); if (unlikely(!__pyx_t_24)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_25 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.ra_arc1); if (unlikely(!__pyx_t_25)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __pyx_t_26 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.ra_arc2); if (unlikely(!__pyx_t_26)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_27 = PyFloat_FromDouble(__pyx_v_self->ra_arc3); if (unlikely(!__pyx_t_27)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __pyx_t_28 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.rb); if (unlikely(!__pyx_t_28)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __pyx_t_29 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.ro); if (unlikely(!__pyx_t_29)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_30 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.t); if (unlikely(!__pyx_t_30)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __pyx_t_31 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.t1_arc1); if (unlikely(!__pyx_t_31)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_32 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.t1_arc2); if (unlikely(!__pyx_t_32)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_33 = PyFloat_FromDouble(__pyx_v_self->t1_arc3); if (unlikely(!__pyx_t_33)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_33);
  __pyx_t_34 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.t1_line); if (unlikely(!__pyx_t_34)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_34);
  __pyx_t_35 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.t2_arc1); if (unlikely(!__pyx_t_35)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_35);
  __pyx_t_36 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.t2_arc2); if (unlikely(!__pyx_t_36)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_37 = PyFloat_FromDouble(__pyx_v_self->t2_arc3); if (unlikely(!__pyx_t_37)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_38 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.t2_line); if (unlikely(!__pyx_t_38)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_38);
  __pyx_t_39 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.x0_wall); if (unlikely(!__pyx_t_39)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_39);
  __pyx_t_40 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.xa_arc1); if (unlikely(!__pyx_t_40)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __pyx_t_41 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.xa_arc2); if (unlikely(!__pyx_t_41)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_41);
  __pyx_t_42 = PyFloat_FromDouble(__pyx_v_self->xa_arc3); if (unlikely(!__pyx_t_42)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_42);
  __pyx_t_43 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.y0_wall); if (unlikely(!__pyx_t_43)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_43);
  __pyx_t_44 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.ya_arc1); if (unlikely(!__pyx_t_44)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_44);
  __pyx_t_45 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.ya_arc2); if (unlikely(!__pyx_t_45)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_45);
  __pyx_t_46 = PyFloat_FromDouble(__pyx_v_self->ya_arc3); if (unlikely(!__pyx_t_46)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_46);
  __pyx_t_47 = PyTuple_New(48); if (unlikely(!__pyx_t_47)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_47);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_47, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_47, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_47, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_47, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_47, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_47, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_47, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_47, 7, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_47, 8, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_47, 9, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_47, 10, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_47, 11, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_47, 12, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_47, 13, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_47, 14, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_16);
  PyTuple_SET_ITEM(__pyx_t_47, 15, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_47, 16, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_47, 17, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_19);
  PyTuple_SET_ITEM(__pyx_t_47, 18, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_20);
  PyTuple_SET_ITEM(__pyx_t_47, 19, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_21);
  PyTuple_SET_ITEM(__pyx_t_47, 20, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_22);
  PyTuple_SET_ITEM(__pyx_t_47, 21, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_23);
  PyTuple_SET_ITEM(__pyx_t_47, 22, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_24);
  PyTuple_SET_ITEM(__pyx_t_47, 23, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_25);
  PyTuple_SET_ITEM(__pyx_t_47, 24, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_26);
  PyTuple_SET_ITEM(__pyx_t_47, 25, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_27);
  PyTuple_SET_ITEM(__pyx_t_47, 26, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_28);
  PyTuple_SET_ITEM(__pyx_t_47, 27, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_29);
  PyTuple_SET_ITEM(__pyx_t_47, 28, __pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_30);
  PyTuple_SET_ITEM(__pyx_t_47, 29, __pyx_t_30);
  __Pyx_GIVEREF(__pyx_t_31);
  PyTuple_SET_ITEM(__pyx_t_47, 30, __pyx_t_31);
  __Pyx_GIVEREF(__pyx_t_32);
  PyTuple_SET_ITEM(__pyx_t_47, 31, __pyx_t_32);
  __Pyx_GIVEREF(__pyx_t_33);
  PyTuple_SET_ITEM(__pyx_t_47, 32, __pyx_t_33);
  __Pyx_GIVEREF(__pyx_t_34);
  PyTuple_SET_ITEM(__pyx_t_47, 33, __pyx_t_34);
  __Pyx_GIVEREF(__pyx_t_35);
  PyTuple_SET_ITEM(__pyx_t_47, 34, __pyx_t_35);
  __Pyx_GIVEREF(__pyx_t_36);
  PyTuple_SET_ITEM(__pyx_t_47, 35, __pyx_t_36);
  __Pyx_GIVEREF(__pyx_t_37);
  PyTuple_SET_ITEM(__pyx_t_47, 36, __pyx_t_37);
  __Pyx_GIVEREF(__pyx_t_38);
  PyTuple_SET_ITEM(__pyx_t_47, 37, __pyx_t_38);
  __Pyx_GIVEREF(__pyx_t_39);
  PyTuple_SET_ITEM(__pyx_t_47, 38, __pyx_t_39);
  __Pyx_GIVEREF(__pyx_t_40);
  PyTuple_SET_ITEM(__pyx_t_47, 39, __pyx_t_40);
  __Pyx_GIVEREF(__pyx_t_41);
  PyTuple_SET_ITEM(__pyx_t_47, 40, __pyx_t_41);
  __Pyx_GIVEREF(__pyx_t_42);
  PyTuple_SET_ITEM(__pyx_t_47, 41, __pyx_t_42);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.xvec_disc_port));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.xvec_disc_port));
  PyTuple_SET_ITEM(__pyx_t_47, 42, ((PyObject *)__pyx_v_self->__pyx_base.xvec_disc_port));
  __Pyx_GIVEREF(__pyx_t_43);
  PyTuple_SET_ITEM(__pyx_t_47, 43, __pyx_t_43);
  __Pyx_GIVEREF(__pyx_t_44);
  PyTuple_SET_ITEM(__pyx_t_47, 44, __pyx_t_44);
  __Pyx_GIVEREF(__pyx_t_45);
  PyTuple_SET_ITEM(__pyx_t_47, 45, __pyx_t_45);
  __Pyx_GIVEREF(__pyx_t_46);
  PyTuple_SET_ITEM(__pyx_t_47, 46, __pyx_t_46);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.yvec_disc_port));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.yvec_disc_port));
  PyTuple_SET_ITEM(__pyx_t_47, 47, ((PyObject *)__pyx_v_self->__pyx_base.yvec_disc_port));
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_22 = 0;
  __pyx_t_23 = 0;
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  __pyx_t_26 = 0;
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  __pyx_t_29 = 0;
  __pyx_t_30 = 0;
  __pyx_t_31 = 0;
  __pyx_t_32 = 0;
  __pyx_t_33 = 0;
  __pyx_t_34 = 0;
  __pyx_t_35 = 0;
  __pyx_t_36 = 0;
  __pyx_t_37 = 0;
  __pyx_t_38 = 0;
  __pyx_t_39 = 0;
  __pyx_t_40 = 0;
  __pyx_t_41 = 0;
  __pyx_t_42 = 0;
  __pyx_t_43 = 0;
  __pyx_t_44 = 0;
  __pyx_t_45 = 0;
  __pyx_t_46 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_47);
  __pyx_t_47 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.V_scroll, self.Vremove, self.b_line, self.cx_scroll, self.cy_scroll, self.delta_flank, self.delta_radial, self.delta_suction_offset, self.h, self.m_line, self.phi_fi0, self.phi_fie, self.phi_fis, self.phi_fo0, self.phi_foe, self.phi_fos, self.phi_ie_offset, self.phi_oi0, self.phi_oie, self.phi_ois, self.phi_oo0, self.phi_ooe, self.phi_oos, self.r_wall, self.ra_arc1, self.ra_arc2, self.ra_arc3, self.rb, self.ro, self.t, self.t1_arc1, self.t1_arc2, self.t1_arc3, self.t1_line, self.t2_arc1, self.t2_arc2, self.t2_arc3, self.t2_line, self.x0_wall, self.xa_arc1, self.xa_arc2, self.xa_arc3, self.xvec_disc_port, self.y0_wall, self.ya_arc1, self.ya_arc2, self.ya_arc3, self.yvec_disc_port)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_47 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_47)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_47);
  __pyx_v__dict = __pyx_t_47;
  __pyx_t_47 = 0;

  /* "(tree fragment)":7
 *     state = (self.V_scroll, self.Vremove, self.b_line, self.cx_scroll, self.cy_scroll, self.delta_flank, self.delta_radial, self.delta_suction_offset, self.h, self.m_line, self.phi_fi0, self.phi_fie, self.phi_fis, self.phi_fo0, self.phi_foe, self.phi_fos, self.phi_ie_offset, self.phi_oi0, self.phi_oie, self.phi_ois, self.phi_oo0, self.phi_ooe, self.phi_oos, self.r_wall, self.ra_arc1, self.ra_arc2, self.ra_arc3, self.rb, self.ro, self.t, self.t1_arc1, self.t1_arc2, self.t1_arc3, self.t1_line, self.t2_arc1, self.t2_arc2, self.t2_arc3, self.t2_line, self.x0_wall, self.xa_arc1, self.xa_arc2, self.xa_arc3, self.xvec_disc_port, self.y0_wall, self.ya_arc1, self.ya_arc2, self.ya_arc3, self.yvec_disc_port)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_48 = (__pyx_v__dict != Py_None);
  __pyx_t_49 = (__pyx_t_48 != 0);
  if (__pyx_t_49) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_47 = PyTuple_New(1); if (unlikely(!__pyx_t_47)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_47);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_47, 0, __pyx_v__dict);
    __pyx_t_46 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_47); if (unlikely(!__pyx_t_46)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_46);
    __Pyx_DECREF(__pyx_t_47); __pyx_t_47 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_46));
    __pyx_t_46 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.xvec_disc_port is not None or self.yvec_disc_port is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.V_scroll, self.Vremove, self.b_line, self.cx_scroll, self.cy_scroll, self.delta_flank, self.delta_radial, self.delta_suction_offset, self.h, self.m_line, self.phi_fi0, self.phi_fie, self.phi_fis, self.phi_fo0, self.phi_foe, self.phi_fos, self.phi_ie_offset, self.phi_oi0, self.phi_oie, self.phi_ois, self.phi_oo0, self.phi_ooe, self.phi_oos, self.r_wall, self.ra_arc1, self.ra_arc2, self.ra_arc3, self.rb, self.ro, self.t, self.t1_arc1, self.t1_arc2, self.t1_arc3, self.t1_line, self.t2_arc1, self.t2_arc2, self.t2_arc3, self.t2_line, self.x0_wall, self.xa_arc1, self.xa_arc2, self.xa_arc3, self.xvec_disc_port, self.y0_wall, self.ya_arc1, self.ya_arc2, self.ya_arc3, self.yvec_disc_port)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.xvec_disc_port is not None or self.yvec_disc_port is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_DanfossGeoVals, (type(self), 0xb9a57b5, None), state
 */
  /*else*/ {
    __pyx_t_48 = (((PyObject *)__pyx_v_self->__pyx_base.xvec_disc_port) != Py_None);
    __pyx_t_50 = (__pyx_t_48 != 0);
    if (!__pyx_t_50) {
    } else {
      __pyx_t_49 = __pyx_t_50;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_50 = (((PyObject *)__pyx_v_self->__pyx_base.yvec_disc_port) != Py_None);
    __pyx_t_48 = (__pyx_t_50 != 0);
    __pyx_t_49 = __pyx_t_48;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_49;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.xvec_disc_port is not None or self.yvec_disc_port is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_DanfossGeoVals, (type(self), 0xb9a57b5, None), state
 *     else:
 */
  __pyx_t_49 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_49) {

    /* "(tree fragment)":13
 *         use_setstate = self.xvec_disc_port is not None or self.yvec_disc_port is not None
 *     if use_setstate:
 *         return __pyx_unpickle_DanfossGeoVals, (type(self), 0xb9a57b5, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_DanfossGeoVals, (type(self), 0xb9a57b5, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_46, __pyx_n_s_pyx_unpickle_DanfossGeoVals); if (unlikely(!__pyx_t_46)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_46);
    __pyx_t_47 = PyTuple_New(3); if (unlikely(!__pyx_t_47)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_47);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_47, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_194664373);
    __Pyx_GIVEREF(__pyx_int_194664373);
    PyTuple_SET_ITEM(__pyx_t_47, 1, __pyx_int_194664373);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_47, 2, Py_None);
    __pyx_t_45 = PyTuple_New(3); if (unlikely(!__pyx_t_45)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_45);
    __Pyx_GIVEREF(__pyx_t_46);
    PyTuple_SET_ITEM(__pyx_t_45, 0, __pyx_t_46);
    __Pyx_GIVEREF(__pyx_t_47);
    PyTuple_SET_ITEM(__pyx_t_45, 1, __pyx_t_47);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_45, 2, __pyx_v_state);
    __pyx_t_46 = 0;
    __pyx_t_47 = 0;
    __pyx_r = __pyx_t_45;
    __pyx_t_45 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.xvec_disc_port is not None or self.yvec_disc_port is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_DanfossGeoVals, (type(self), 0xb9a57b5, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_DanfossGeoVals, (type(self), 0xb9a57b5, None), state
 *     else:
 *         return __pyx_unpickle_DanfossGeoVals, (type(self), 0xb9a57b5, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_DanfossGeoVals__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_45, __pyx_n_s_pyx_unpickle_DanfossGeoVals); if (unlikely(!__pyx_t_45)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_45);
    __pyx_t_47 = PyTuple_New(3); if (unlikely(!__pyx_t_47)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_47);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_47, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_194664373);
    __Pyx_GIVEREF(__pyx_int_194664373);
    PyTuple_SET_ITEM(__pyx_t_47, 1, __pyx_int_194664373);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_47, 2, __pyx_v_state);
    __pyx_t_46 = PyTuple_New(2); if (unlikely(!__pyx_t_46)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_46);
    __Pyx_GIVEREF(__pyx_t_45);
    PyTuple_SET_ITEM(__pyx_t_46, 0, __pyx_t_45);
    __Pyx_GIVEREF(__pyx_t_47);
    PyTuple_SET_ITEM(__pyx_t_46, 1, __pyx_t_47);
    __pyx_t_45 = 0;
    __pyx_t_47 = 0;
    __pyx_r = __pyx_t_46;
    __pyx_t_46 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_XDECREF(__pyx_t_29);
  __Pyx_XDECREF(__pyx_t_30);
  __Pyx_XDECREF(__pyx_t_31);
  __Pyx_XDECREF(__pyx_t_32);
  __Pyx_XDECREF(__pyx_t_33);
  __Pyx_XDECREF(__pyx_t_34);
  __Pyx_XDECREF(__pyx_t_35);
  __Pyx_XDECREF(__pyx_t_36);
  __Pyx_XDECREF(__pyx_t_37);
  __Pyx_XDECREF(__pyx_t_38);
  __Pyx_XDECREF(__pyx_t_39);
  __Pyx_XDECREF(__pyx_t_40);
  __Pyx_XDECREF(__pyx_t_41);
  __Pyx_XDECREF(__pyx_t_42);
  __Pyx_XDECREF(__pyx_t_43);
  __Pyx_XDECREF(__pyx_t_44);
  __Pyx_XDECREF(__pyx_t_45);
  __Pyx_XDECREF(__pyx_t_46);
  __Pyx_XDECREF(__pyx_t_47);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DanfossGeoVals.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_DanfossGeoVals, (type(self), 0xb9a57b5, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_DanfossGeoVals__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_4__setstate_cython__[] = "DanfossGeoVals.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_4__setstate_cython__(((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_4__setstate_cython__(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[2], 16, 0, __PYX_ERR(2, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_DanfossGeoVals, (type(self), 0xb9a57b5, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_DanfossGeoVals__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo___pyx_unpickle_DanfossGeoVals__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_DanfossGeoVals, (type(self), 0xb9a57b5, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_DanfossGeoVals__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DanfossGeoVals.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":92
 *         return s
 * 
 * cpdef tuple phi_s1_sa(double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 *     """
 *     # As in Bell, DOI: 10.1016/j.ijrefrig.2014.05.029 - typo in published work, C=-1, not C=1
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_7phi_s1_sa(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_phi_s1_sa(double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_A;
  double __pyx_v_B;
  double __pyx_v_C;
  double __pyx_v_S;
  double __pyx_v_u1;
  double __pyx_v_u2;
  double __pyx_v_ro_rb;
  double __pyx_v_dA_dtheta;
  double __pyx_v_dB_dtheta;
  double __pyx_v_delta1;
  double __pyx_v_delta2;
  double __pyx_v_du1_dA;
  double __pyx_v_du2_dA;
  double __pyx_v_du1_dB;
  double __pyx_v_du2_dB;
  double __pyx_v_ddelta1_dtheta;
  double __pyx_v_ddelta2_dtheta;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("phi_s1_sa", 0);
  __Pyx_TraceCall("phi_s1_sa", __pyx_f[0], 92, 0, __PYX_ERR(0, 92, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":110
 *     cdef double A,B,C,S,u1,u2
 * 
 *     ro_rb = geo.ro/geo.rb             # <<<<<<<<<<<<<<
 *     A = (geo.phi_fi0-geo.phi_fie)+ro_rb*cos(theta)
 *     dA_dtheta = -ro_rb*sin(theta)
 */
  if (unlikely(__pyx_v_geo->__pyx_base.rb == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 110, __pyx_L1_error)
  }
  __pyx_v_ro_rb = (__pyx_v_geo->__pyx_base.ro / __pyx_v_geo->__pyx_base.rb);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":111
 * 
 *     ro_rb = geo.ro/geo.rb
 *     A = (geo.phi_fi0-geo.phi_fie)+ro_rb*cos(theta)             # <<<<<<<<<<<<<<
 *     dA_dtheta = -ro_rb*sin(theta)
 *     B = 1+ro_rb*sin(theta)
 */
  __pyx_v_A = ((__pyx_v_geo->__pyx_base.phi_fi0 - __pyx_v_geo->__pyx_base.phi_fie) + (__pyx_v_ro_rb * cos(__pyx_v_theta)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":112
 *     ro_rb = geo.ro/geo.rb
 *     A = (geo.phi_fi0-geo.phi_fie)+ro_rb*cos(theta)
 *     dA_dtheta = -ro_rb*sin(theta)             # <<<<<<<<<<<<<<
 *     B = 1+ro_rb*sin(theta)
 *     dB_dtheta = ro_rb*cos(theta)
 */
  __pyx_v_dA_dtheta = ((-__pyx_v_ro_rb) * sin(__pyx_v_theta));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":113
 *     A = (geo.phi_fi0-geo.phi_fie)+ro_rb*cos(theta)
 *     dA_dtheta = -ro_rb*sin(theta)
 *     B = 1+ro_rb*sin(theta)             # <<<<<<<<<<<<<<
 *     dB_dtheta = ro_rb*cos(theta)
 *     C = -1
 */
  __pyx_v_B = (1.0 + (__pyx_v_ro_rb * sin(__pyx_v_theta)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":114
 *     dA_dtheta = -ro_rb*sin(theta)
 *     B = 1+ro_rb*sin(theta)
 *     dB_dtheta = ro_rb*cos(theta)             # <<<<<<<<<<<<<<
 *     C = -1
 *     S = sqrt(A**2 + B**2 - C**2)
 */
  __pyx_v_dB_dtheta = (__pyx_v_ro_rb * cos(__pyx_v_theta));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":115
 *     B = 1+ro_rb*sin(theta)
 *     dB_dtheta = ro_rb*cos(theta)
 *     C = -1             # <<<<<<<<<<<<<<
 *     S = sqrt(A**2 + B**2 - C**2)
 *     u1 = (A - S)/(B-C)
 */
  __pyx_v_C = -1.0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":116
 *     dB_dtheta = ro_rb*cos(theta)
 *     C = -1
 *     S = sqrt(A**2 + B**2 - C**2)             # <<<<<<<<<<<<<<
 *     u1 = (A - S)/(B-C)
 *     u2 = (A + S)/(B-C)
 */
  __pyx_v_S = sqrt(((pow(__pyx_v_A, 2.0) + pow(__pyx_v_B, 2.0)) - pow(__pyx_v_C, 2.0)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":117
 *     C = -1
 *     S = sqrt(A**2 + B**2 - C**2)
 *     u1 = (A - S)/(B-C)             # <<<<<<<<<<<<<<
 *     u2 = (A + S)/(B-C)
 * 
 */
  __pyx_t_1 = (__pyx_v_A - __pyx_v_S);
  __pyx_t_2 = (__pyx_v_B - __pyx_v_C);
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 117, __pyx_L1_error)
  }
  __pyx_v_u1 = (__pyx_t_1 / __pyx_t_2);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":118
 *     S = sqrt(A**2 + B**2 - C**2)
 *     u1 = (A - S)/(B-C)
 *     u2 = (A + S)/(B-C)             # <<<<<<<<<<<<<<
 * 
 *     delta1 = 2*atan(u1)
 */
  __pyx_t_2 = (__pyx_v_A + __pyx_v_S);
  __pyx_t_1 = (__pyx_v_B - __pyx_v_C);
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 118, __pyx_L1_error)
  }
  __pyx_v_u2 = (__pyx_t_2 / __pyx_t_1);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":120
 *     u2 = (A + S)/(B-C)
 * 
 *     delta1 = 2*atan(u1)             # <<<<<<<<<<<<<<
 *     delta2 = 2*atan(u2)
 * 
 */
  __pyx_v_delta1 = (2.0 * atan(__pyx_v_u1));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":121
 * 
 *     delta1 = 2*atan(u1)
 *     delta2 = 2*atan(u2)             # <<<<<<<<<<<<<<
 * 
 *     du1_dA = (S-A)/(B-C)/S
 */
  __pyx_v_delta2 = (2.0 * atan(__pyx_v_u2));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":123
 *     delta2 = 2*atan(u2)
 * 
 *     du1_dA = (S-A)/(B-C)/S             # <<<<<<<<<<<<<<
 *     du2_dA = (S+A)/(B-C)/S
 * 
 */
  __pyx_t_1 = (__pyx_v_S - __pyx_v_A);
  __pyx_t_2 = (__pyx_v_B - __pyx_v_C);
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 123, __pyx_L1_error)
  }
  __pyx_t_3 = (__pyx_t_1 / __pyx_t_2);
  if (unlikely(__pyx_v_S == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 123, __pyx_L1_error)
  }
  __pyx_v_du1_dA = (__pyx_t_3 / __pyx_v_S);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":124
 * 
 *     du1_dA = (S-A)/(B-C)/S
 *     du2_dA = (S+A)/(B-C)/S             # <<<<<<<<<<<<<<
 * 
 *     du1_dB = ((B-C)*(-B/S)-(A-S))/(B-C)**2
 */
  __pyx_t_3 = (__pyx_v_S + __pyx_v_A);
  __pyx_t_2 = (__pyx_v_B - __pyx_v_C);
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 124, __pyx_L1_error)
  }
  __pyx_t_1 = (__pyx_t_3 / __pyx_t_2);
  if (unlikely(__pyx_v_S == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 124, __pyx_L1_error)
  }
  __pyx_v_du2_dA = (__pyx_t_1 / __pyx_v_S);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":126
 *     du2_dA = (S+A)/(B-C)/S
 * 
 *     du1_dB = ((B-C)*(-B/S)-(A-S))/(B-C)**2             # <<<<<<<<<<<<<<
 *     du2_dB = ((B-C)*(+B/S)-(A+S))/(B-C)**2
 * 
 */
  __pyx_t_1 = (-__pyx_v_B);
  if (unlikely(__pyx_v_S == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 126, __pyx_L1_error)
  }
  __pyx_t_2 = (((__pyx_v_B - __pyx_v_C) * (__pyx_t_1 / __pyx_v_S)) - (__pyx_v_A - __pyx_v_S));
  __pyx_t_1 = pow((__pyx_v_B - __pyx_v_C), 2.0);
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 126, __pyx_L1_error)
  }
  __pyx_v_du1_dB = (__pyx_t_2 / __pyx_t_1);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":127
 * 
 *     du1_dB = ((B-C)*(-B/S)-(A-S))/(B-C)**2
 *     du2_dB = ((B-C)*(+B/S)-(A+S))/(B-C)**2             # <<<<<<<<<<<<<<
 * 
 *     ddelta1_dtheta = 2/(1+u1**2)*(du1_dA*dA_dtheta + du1_dB*dB_dtheta)
 */
  __pyx_t_1 = __pyx_v_B;
  if (unlikely(__pyx_v_S == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 127, __pyx_L1_error)
  }
  __pyx_t_2 = (((__pyx_v_B - __pyx_v_C) * (__pyx_t_1 / __pyx_v_S)) - (__pyx_v_A + __pyx_v_S));
  __pyx_t_1 = pow((__pyx_v_B - __pyx_v_C), 2.0);
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 127, __pyx_L1_error)
  }
  __pyx_v_du2_dB = (__pyx_t_2 / __pyx_t_1);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":129
 *     du2_dB = ((B-C)*(+B/S)-(A+S))/(B-C)**2
 * 
 *     ddelta1_dtheta = 2/(1+u1**2)*(du1_dA*dA_dtheta + du1_dB*dB_dtheta)             # <<<<<<<<<<<<<<
 *     ddelta2_dtheta = 2/(1+u2**2)*(du2_dA*dA_dtheta + du2_dB*dB_dtheta)
 * 
 */
  __pyx_t_1 = (1.0 + pow(__pyx_v_u1, 2.0));
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 129, __pyx_L1_error)
  }
  __pyx_v_ddelta1_dtheta = ((2.0 / __pyx_t_1) * ((__pyx_v_du1_dA * __pyx_v_dA_dtheta) + (__pyx_v_du1_dB * __pyx_v_dB_dtheta)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":130
 * 
 *     ddelta1_dtheta = 2/(1+u1**2)*(du1_dA*dA_dtheta + du1_dB*dB_dtheta)
 *     ddelta2_dtheta = 2/(1+u2**2)*(du2_dA*dA_dtheta + du2_dB*dB_dtheta)             # <<<<<<<<<<<<<<
 * 
 *     if abs(delta1) < 1:
 */
  __pyx_t_1 = (1.0 + pow(__pyx_v_u2, 2.0));
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 130, __pyx_L1_error)
  }
  __pyx_v_ddelta2_dtheta = ((2.0 / __pyx_t_1) * ((__pyx_v_du2_dA * __pyx_v_dA_dtheta) + (__pyx_v_du2_dB * __pyx_v_dB_dtheta)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":132
 *     ddelta2_dtheta = 2/(1+u2**2)*(du2_dA*dA_dtheta + du2_dB*dB_dtheta)
 * 
 *     if abs(delta1) < 1:             # <<<<<<<<<<<<<<
 *         return geo.phi_fie - pi + delta1, ddelta1_dtheta
 *     elif abs(delta2) < 1:
 */
  __pyx_t_4 = ((fabs(__pyx_v_delta1) < 1.0) != 0);
  if (__pyx_t_4) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":133
 * 
 *     if abs(delta1) < 1:
 *         return geo.phi_fie - pi + delta1, ddelta1_dtheta             # <<<<<<<<<<<<<<
 *     elif abs(delta2) < 1:
 *         return geo.phi_fie - pi + delta2, ddelta2_dtheta
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(((__pyx_v_geo->__pyx_base.phi_fie - M_PI) + __pyx_v_delta1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_ddelta1_dtheta); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_r = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":132
 *     ddelta2_dtheta = 2/(1+u2**2)*(du2_dA*dA_dtheta + du2_dB*dB_dtheta)
 * 
 *     if abs(delta1) < 1:             # <<<<<<<<<<<<<<
 *         return geo.phi_fie - pi + delta1, ddelta1_dtheta
 *     elif abs(delta2) < 1:
 */
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":134
 *     if abs(delta1) < 1:
 *         return geo.phi_fie - pi + delta1, ddelta1_dtheta
 *     elif abs(delta2) < 1:             # <<<<<<<<<<<<<<
 *         return geo.phi_fie - pi + delta2, ddelta2_dtheta
 *     else:
 */
  __pyx_t_4 = ((fabs(__pyx_v_delta2) < 1.0) != 0);
  if (likely(__pyx_t_4)) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":135
 *         return geo.phi_fie - pi + delta1, ddelta1_dtheta
 *     elif abs(delta2) < 1:
 *         return geo.phi_fie - pi + delta2, ddelta2_dtheta             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_geo->__pyx_base.phi_fie - M_PI) + __pyx_v_delta2)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_ddelta2_dtheta); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
    __pyx_t_7 = 0;
    __pyx_t_6 = 0;
    __pyx_r = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":134
 *     if abs(delta1) < 1:
 *         return geo.phi_fie - pi + delta1, ddelta1_dtheta
 *     elif abs(delta2) < 1:             # <<<<<<<<<<<<<<
 *         return geo.phi_fie - pi + delta2, ddelta2_dtheta
 *     else:
 */
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":137
 *         return geo.phi_fie - pi + delta2, ddelta2_dtheta
 *     else:
 *         raise ValueError             # <<<<<<<<<<<<<<
 * 
 * cpdef tuple phi_s2_sa(double theta, DanfossGeoVals geo):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 137, __pyx_L1_error)
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":92
 *         return s
 * 
 * cpdef tuple phi_s1_sa(double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 *     """
 *     # As in Bell, DOI: 10.1016/j.ijrefrig.2014.05.029 - typo in published work, C=-1, not C=1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.phi_s1_sa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_7phi_s1_sa(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_6phi_s1_sa[] = "phi_s1_sa(double theta, DanfossGeoVals geo) -> tuple\n\n    # As in Bell, DOI: 10.1016/j.ijrefrig.2014.05.029 - typo in published work, C=-1, not C=1\n    r_b,ro,phi_oie,phi_i0,phi_o0,phi_fie,theta,delta = symbols('r_b,ro,phi_oie,phi_i0,phi_o0,phi_fie,theta,delta')\n    ro = r_b*pi - r_b*(phi_i0-phi_o0) #rb*pi-t\n    om = phi_fie - theta + 3*pi/2\n    # End point on fixed scroll\n    xfi = r_b*cos(phi_fie)+r_b*(phi_fie-phi_i0)*sin(phi_fie)\n    yfi = r_b*sin(phi_fie)-r_b*(phi_fie-phi_i0)*cos(phi_fie)\n    # Other point on orbiting scroll\n    phi_ssa = phi_fie - pi + delta\n    xssa = -r_b*cos(phi_ssa)-r_b*(phi_ssa-phi_o0)*sin(phi_ssa)+ro*cos(om)\n    yssa = -r_b*sin(phi_ssa)+r_b*(phi_ssa-phi_o0)*cos(phi_ssa)+ro*sin(om)\n    d2 = (xfi-xssa)**2+(yfi-yssa)**2 # squared distance\n    factor(expand_trig(simplify((diff(d2, delta)))),[sin(delta),cos(delta)])\n    ";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_7phi_s1_sa(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_theta;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("phi_s1_sa (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_geo,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("phi_s1_sa", 1, 2, 2, 1); __PYX_ERR(0, 92, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "phi_s1_sa") < 0)) __PYX_ERR(0, 92, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 92, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("phi_s1_sa", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 92, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.phi_s1_sa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 92, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_6phi_s1_sa(__pyx_self, __pyx_v_theta, __pyx_v_geo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_6phi_s1_sa(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("phi_s1_sa", 0);
  __Pyx_TraceCall("phi_s1_sa (wrapper)", __pyx_f[0], 92, 0, __PYX_ERR(0, 92, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_phi_s1_sa(__pyx_v_theta, __pyx_v_geo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.phi_s1_sa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":139
 *         raise ValueError
 * 
 * cpdef tuple phi_s2_sa(double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 *     """
 *     Formulate the problem like in Bell, DOI: 10.1016/j.ijrefrig.2014.05.029, see the appendix.
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_9phi_s2_sa(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_phi_s2_sa(double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_A;
  double __pyx_v_B;
  double __pyx_v_C;
  double __pyx_v_S;
  double __pyx_v_u1;
  double __pyx_v_u2;
  double __pyx_v_ro_rb;
  double __pyx_v_dA_dtheta;
  double __pyx_v_dB_dtheta;
  double __pyx_v_delta1;
  double __pyx_v_delta2;
  double __pyx_v_du1_dA;
  double __pyx_v_du2_dA;
  double __pyx_v_du1_dB;
  double __pyx_v_du2_dB;
  double __pyx_v_ddelta1_dtheta;
  double __pyx_v_ddelta2_dtheta;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("phi_s2_sa", 0);
  __Pyx_TraceCall("phi_s2_sa", __pyx_f[0], 139, 0, __PYX_ERR(0, 139, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":162
 *     cdef double A,B,C,S,u1,u2
 * 
 *     ro_rb = geo.ro/geo.rb             # <<<<<<<<<<<<<<
 *     A = (geo.phi_oi0-geo.phi_oie)+ro_rb*cos(-geo.phi_fie+geo.phi_oie+theta)
 *     dA_dtheta = -ro_rb*sin(-geo.phi_fie+geo.phi_oie+theta)
 */
  if (unlikely(__pyx_v_geo->__pyx_base.rb == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 162, __pyx_L1_error)
  }
  __pyx_v_ro_rb = (__pyx_v_geo->__pyx_base.ro / __pyx_v_geo->__pyx_base.rb);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":163
 * 
 *     ro_rb = geo.ro/geo.rb
 *     A = (geo.phi_oi0-geo.phi_oie)+ro_rb*cos(-geo.phi_fie+geo.phi_oie+theta)             # <<<<<<<<<<<<<<
 *     dA_dtheta = -ro_rb*sin(-geo.phi_fie+geo.phi_oie+theta)
 *     B = 1+ro_rb*sin(-geo.phi_fie+geo.phi_oie+theta)
 */
  __pyx_v_A = ((__pyx_v_geo->__pyx_base.phi_oi0 - __pyx_v_geo->__pyx_base.phi_oie) + (__pyx_v_ro_rb * cos((((-__pyx_v_geo->__pyx_base.phi_fie) + __pyx_v_geo->__pyx_base.phi_oie) + __pyx_v_theta))));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":164
 *     ro_rb = geo.ro/geo.rb
 *     A = (geo.phi_oi0-geo.phi_oie)+ro_rb*cos(-geo.phi_fie+geo.phi_oie+theta)
 *     dA_dtheta = -ro_rb*sin(-geo.phi_fie+geo.phi_oie+theta)             # <<<<<<<<<<<<<<
 *     B = 1+ro_rb*sin(-geo.phi_fie+geo.phi_oie+theta)
 *     dB_dtheta = ro_rb*cos(-geo.phi_fie+geo.phi_oie+theta)
 */
  __pyx_v_dA_dtheta = ((-__pyx_v_ro_rb) * sin((((-__pyx_v_geo->__pyx_base.phi_fie) + __pyx_v_geo->__pyx_base.phi_oie) + __pyx_v_theta)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":165
 *     A = (geo.phi_oi0-geo.phi_oie)+ro_rb*cos(-geo.phi_fie+geo.phi_oie+theta)
 *     dA_dtheta = -ro_rb*sin(-geo.phi_fie+geo.phi_oie+theta)
 *     B = 1+ro_rb*sin(-geo.phi_fie+geo.phi_oie+theta)             # <<<<<<<<<<<<<<
 *     dB_dtheta = ro_rb*cos(-geo.phi_fie+geo.phi_oie+theta)
 *     C = -1
 */
  __pyx_v_B = (1.0 + (__pyx_v_ro_rb * sin((((-__pyx_v_geo->__pyx_base.phi_fie) + __pyx_v_geo->__pyx_base.phi_oie) + __pyx_v_theta))));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":166
 *     dA_dtheta = -ro_rb*sin(-geo.phi_fie+geo.phi_oie+theta)
 *     B = 1+ro_rb*sin(-geo.phi_fie+geo.phi_oie+theta)
 *     dB_dtheta = ro_rb*cos(-geo.phi_fie+geo.phi_oie+theta)             # <<<<<<<<<<<<<<
 *     C = -1
 *     S = sqrt(A**2 + B**2 - C**2)
 */
  __pyx_v_dB_dtheta = (__pyx_v_ro_rb * cos((((-__pyx_v_geo->__pyx_base.phi_fie) + __pyx_v_geo->__pyx_base.phi_oie) + __pyx_v_theta)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":167
 *     B = 1+ro_rb*sin(-geo.phi_fie+geo.phi_oie+theta)
 *     dB_dtheta = ro_rb*cos(-geo.phi_fie+geo.phi_oie+theta)
 *     C = -1             # <<<<<<<<<<<<<<
 *     S = sqrt(A**2 + B**2 - C**2)
 *     u1 = (A - S)/(B-C)
 */
  __pyx_v_C = -1.0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":168
 *     dB_dtheta = ro_rb*cos(-geo.phi_fie+geo.phi_oie+theta)
 *     C = -1
 *     S = sqrt(A**2 + B**2 - C**2)             # <<<<<<<<<<<<<<
 *     u1 = (A - S)/(B-C)
 *     u2 = (A + S)/(B-C)
 */
  __pyx_v_S = sqrt(((pow(__pyx_v_A, 2.0) + pow(__pyx_v_B, 2.0)) - pow(__pyx_v_C, 2.0)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":169
 *     C = -1
 *     S = sqrt(A**2 + B**2 - C**2)
 *     u1 = (A - S)/(B-C)             # <<<<<<<<<<<<<<
 *     u2 = (A + S)/(B-C)
 * 
 */
  __pyx_t_1 = (__pyx_v_A - __pyx_v_S);
  __pyx_t_2 = (__pyx_v_B - __pyx_v_C);
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 169, __pyx_L1_error)
  }
  __pyx_v_u1 = (__pyx_t_1 / __pyx_t_2);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":170
 *     S = sqrt(A**2 + B**2 - C**2)
 *     u1 = (A - S)/(B-C)
 *     u2 = (A + S)/(B-C)             # <<<<<<<<<<<<<<
 * 
 *     delta1 = 2*atan(u1)
 */
  __pyx_t_2 = (__pyx_v_A + __pyx_v_S);
  __pyx_t_1 = (__pyx_v_B - __pyx_v_C);
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 170, __pyx_L1_error)
  }
  __pyx_v_u2 = (__pyx_t_2 / __pyx_t_1);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":172
 *     u2 = (A + S)/(B-C)
 * 
 *     delta1 = 2*atan(u1)             # <<<<<<<<<<<<<<
 *     delta2 = 2*atan(u2)
 * 
 */
  __pyx_v_delta1 = (2.0 * atan(__pyx_v_u1));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":173
 * 
 *     delta1 = 2*atan(u1)
 *     delta2 = 2*atan(u2)             # <<<<<<<<<<<<<<
 * 
 *     du1_dA = (S-A)/(B-C)/S
 */
  __pyx_v_delta2 = (2.0 * atan(__pyx_v_u2));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":175
 *     delta2 = 2*atan(u2)
 * 
 *     du1_dA = (S-A)/(B-C)/S             # <<<<<<<<<<<<<<
 *     du2_dA = (S+A)/(B-C)/S
 * 
 */
  __pyx_t_1 = (__pyx_v_S - __pyx_v_A);
  __pyx_t_2 = (__pyx_v_B - __pyx_v_C);
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 175, __pyx_L1_error)
  }
  __pyx_t_3 = (__pyx_t_1 / __pyx_t_2);
  if (unlikely(__pyx_v_S == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 175, __pyx_L1_error)
  }
  __pyx_v_du1_dA = (__pyx_t_3 / __pyx_v_S);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":176
 * 
 *     du1_dA = (S-A)/(B-C)/S
 *     du2_dA = (S+A)/(B-C)/S             # <<<<<<<<<<<<<<
 * 
 *     du1_dB = ((B-C)*(-B/S)-(A-S))/(B-C)**2
 */
  __pyx_t_3 = (__pyx_v_S + __pyx_v_A);
  __pyx_t_2 = (__pyx_v_B - __pyx_v_C);
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 176, __pyx_L1_error)
  }
  __pyx_t_1 = (__pyx_t_3 / __pyx_t_2);
  if (unlikely(__pyx_v_S == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 176, __pyx_L1_error)
  }
  __pyx_v_du2_dA = (__pyx_t_1 / __pyx_v_S);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":178
 *     du2_dA = (S+A)/(B-C)/S
 * 
 *     du1_dB = ((B-C)*(-B/S)-(A-S))/(B-C)**2             # <<<<<<<<<<<<<<
 *     du2_dB = ((B-C)*(+B/S)-(A+S))/(B-C)**2
 * 
 */
  __pyx_t_1 = (-__pyx_v_B);
  if (unlikely(__pyx_v_S == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 178, __pyx_L1_error)
  }
  __pyx_t_2 = (((__pyx_v_B - __pyx_v_C) * (__pyx_t_1 / __pyx_v_S)) - (__pyx_v_A - __pyx_v_S));
  __pyx_t_1 = pow((__pyx_v_B - __pyx_v_C), 2.0);
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 178, __pyx_L1_error)
  }
  __pyx_v_du1_dB = (__pyx_t_2 / __pyx_t_1);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":179
 * 
 *     du1_dB = ((B-C)*(-B/S)-(A-S))/(B-C)**2
 *     du2_dB = ((B-C)*(+B/S)-(A+S))/(B-C)**2             # <<<<<<<<<<<<<<
 * 
 *     ddelta1_dtheta = 2/(1+u1**2)*(du1_dA*dA_dtheta + du1_dB*dB_dtheta)
 */
  __pyx_t_1 = __pyx_v_B;
  if (unlikely(__pyx_v_S == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 179, __pyx_L1_error)
  }
  __pyx_t_2 = (((__pyx_v_B - __pyx_v_C) * (__pyx_t_1 / __pyx_v_S)) - (__pyx_v_A + __pyx_v_S));
  __pyx_t_1 = pow((__pyx_v_B - __pyx_v_C), 2.0);
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 179, __pyx_L1_error)
  }
  __pyx_v_du2_dB = (__pyx_t_2 / __pyx_t_1);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":181
 *     du2_dB = ((B-C)*(+B/S)-(A+S))/(B-C)**2
 * 
 *     ddelta1_dtheta = 2/(1+u1**2)*(du1_dA*dA_dtheta + du1_dB*dB_dtheta)             # <<<<<<<<<<<<<<
 *     ddelta2_dtheta = 2/(1+u2**2)*(du2_dA*dA_dtheta + du2_dB*dB_dtheta)
 * 
 */
  __pyx_t_1 = (1.0 + pow(__pyx_v_u1, 2.0));
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 181, __pyx_L1_error)
  }
  __pyx_v_ddelta1_dtheta = ((2.0 / __pyx_t_1) * ((__pyx_v_du1_dA * __pyx_v_dA_dtheta) + (__pyx_v_du1_dB * __pyx_v_dB_dtheta)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":182
 * 
 *     ddelta1_dtheta = 2/(1+u1**2)*(du1_dA*dA_dtheta + du1_dB*dB_dtheta)
 *     ddelta2_dtheta = 2/(1+u2**2)*(du2_dA*dA_dtheta + du2_dB*dB_dtheta)             # <<<<<<<<<<<<<<
 * 
 *     if abs(delta1) < 1:
 */
  __pyx_t_1 = (1.0 + pow(__pyx_v_u2, 2.0));
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 182, __pyx_L1_error)
  }
  __pyx_v_ddelta2_dtheta = ((2.0 / __pyx_t_1) * ((__pyx_v_du2_dA * __pyx_v_dA_dtheta) + (__pyx_v_du2_dB * __pyx_v_dB_dtheta)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":184
 *     ddelta2_dtheta = 2/(1+u2**2)*(du2_dA*dA_dtheta + du2_dB*dB_dtheta)
 * 
 *     if abs(delta1) < 1:             # <<<<<<<<<<<<<<
 *         return geo.phi_oie - pi + delta1, ddelta1_dtheta
 *     elif abs(delta2) < 1:
 */
  __pyx_t_4 = ((fabs(__pyx_v_delta1) < 1.0) != 0);
  if (__pyx_t_4) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":185
 * 
 *     if abs(delta1) < 1:
 *         return geo.phi_oie - pi + delta1, ddelta1_dtheta             # <<<<<<<<<<<<<<
 *     elif abs(delta2) < 1:
 *         return geo.phi_oie - pi + delta2, ddelta2_dtheta
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(((__pyx_v_geo->__pyx_base.phi_oie - M_PI) + __pyx_v_delta1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_ddelta1_dtheta); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_r = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":184
 *     ddelta2_dtheta = 2/(1+u2**2)*(du2_dA*dA_dtheta + du2_dB*dB_dtheta)
 * 
 *     if abs(delta1) < 1:             # <<<<<<<<<<<<<<
 *         return geo.phi_oie - pi + delta1, ddelta1_dtheta
 *     elif abs(delta2) < 1:
 */
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":186
 *     if abs(delta1) < 1:
 *         return geo.phi_oie - pi + delta1, ddelta1_dtheta
 *     elif abs(delta2) < 1:             # <<<<<<<<<<<<<<
 *         return geo.phi_oie - pi + delta2, ddelta2_dtheta
 *     else:
 */
  __pyx_t_4 = ((fabs(__pyx_v_delta2) < 1.0) != 0);
  if (likely(__pyx_t_4)) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":187
 *         return geo.phi_oie - pi + delta1, ddelta1_dtheta
 *     elif abs(delta2) < 1:
 *         return geo.phi_oie - pi + delta2, ddelta2_dtheta             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_geo->__pyx_base.phi_oie - M_PI) + __pyx_v_delta2)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_ddelta2_dtheta); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
    __pyx_t_7 = 0;
    __pyx_t_6 = 0;
    __pyx_r = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":186
 *     if abs(delta1) < 1:
 *         return geo.phi_oie - pi + delta1, ddelta1_dtheta
 *     elif abs(delta2) < 1:             # <<<<<<<<<<<<<<
 *         return geo.phi_oie - pi + delta2, ddelta2_dtheta
 *     else:
 */
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":189
 *         return geo.phi_oie - pi + delta2, ddelta2_dtheta
 *     else:
 *         raise ValueError             # <<<<<<<<<<<<<<
 * 
 * cpdef CVInvolutes CVangles(double theta, DanfossGeoVals geo, int index):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 189, __pyx_L1_error)
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":139
 *         raise ValueError
 * 
 * cpdef tuple phi_s2_sa(double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 *     """
 *     Formulate the problem like in Bell, DOI: 10.1016/j.ijrefrig.2014.05.029, see the appendix.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.phi_s2_sa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_9phi_s2_sa(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_8phi_s2_sa[] = "phi_s2_sa(double theta, DanfossGeoVals geo) -> tuple\n\n    Formulate the problem like in Bell, DOI: 10.1016/j.ijrefrig.2014.05.029, see the appendix.\n    Basically problem ends up being quite similar to the symmetric scroll problem with a different\n    argument in the trig functions.  In the symmetric scroll case, cos(-geo.phi_fie+geo.phi_oie+theta)\n    turns into cos(theta)\n\n    Sympy code:\n    r_b,ro,phi_oie,phi_i0,phi_o0,phi_fie,theta,delta = symbols('r_b,ro,phi_oie,phi_i0,phi_o0,phi_fie,theta,delta',real=True)\n    om = phi_fie - theta + 3*pi/2\n    ro = r_b*pi - r_b*(phi_i0-phi_o0) #rb*pi-t\n    # End point on orbiting scroll\n    xoi = -r_b*cos(phi_oie)-r_b*(phi_oie-phi_i0)*sin(phi_oie)+ro*cos(om)\n    yoi = -r_b*sin(phi_oie)+r_b*(phi_oie-phi_i0)*cos(phi_oie)+ro*sin(om)\n    # Other end point on fixed scroll\n    phi_ssa = phi_oie-pi+delta\n    xssa = r_b*cos(phi_ssa)+r_b*(phi_ssa-phi_o0)*sin(phi_ssa)\n    yssa = r_b*sin(phi_ssa)-r_b*(phi_ssa-phi_o0)*cos(phi_ssa)\n    d2 = (xoi-xssa)**2+(yoi-yssa)**2 # squared distance\n    trigsimp(factor(expand_trig(simplify(diff(d2, delta))),[sin(delta),cos(delta)]))\n    ";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_9phi_s2_sa(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_theta;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("phi_s2_sa (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_geo,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("phi_s2_sa", 1, 2, 2, 1); __PYX_ERR(0, 139, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "phi_s2_sa") < 0)) __PYX_ERR(0, 139, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 139, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("phi_s2_sa", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 139, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.phi_s2_sa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 139, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_8phi_s2_sa(__pyx_self, __pyx_v_theta, __pyx_v_geo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_8phi_s2_sa(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("phi_s2_sa", 0);
  __Pyx_TraceCall("phi_s2_sa (wrapper)", __pyx_f[0], 139, 0, __PYX_ERR(0, 139, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_phi_s2_sa(__pyx_v_theta, __pyx_v_geo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.phi_s2_sa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":191
 *         raise ValueError
 * 
 * cpdef CVInvolutes CVangles(double theta, DanfossGeoVals geo, int index):             # <<<<<<<<<<<<<<
 *     """
 *     Get the involute angles for the inner and outer involutes which form the given control volume
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_11CVangles(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, int __pyx_v_index, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_Nc1;
  int __pyx_v_Nc2;
  int __pyx_v_alpha;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_CV = 0;
  double __pyx_v_theta_star;
  double __pyx_v_phi_s_sa;
  double __pyx_v_d_phi_s_sa_dtheta;
  double __pyx_v_theta_break;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CVangles", 0);
  __Pyx_TraceCall("CVangles", __pyx_f[0], 191, 0, __PYX_ERR(0, 191, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":200
 *     """
 *     cdef int Nc1, Nc2, alpha
 *     cdef CVInvolutes CV = CVInvolutes()             # <<<<<<<<<<<<<<
 *     cdef double theta_star
 *     cdef double phi_s_sa,  d_phi_s_sa_dtheta
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_CVInvolutes)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_CV = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":205
 * 
 *     # The break angle where the s2 chamber just begins
 *     theta_break = geo.phi_fie - geo.phi_oie             # <<<<<<<<<<<<<<
 *     # Define the effective crank angle for path 2
 *     if theta_break < 1e-14:
 */
  __pyx_v_theta_break = (__pyx_v_geo->__pyx_base.phi_fie - __pyx_v_geo->__pyx_base.phi_oie);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":207
 *     theta_break = geo.phi_fie - geo.phi_oie
 *     # Define the effective crank angle for path 2
 *     if theta_break < 1e-14:             # <<<<<<<<<<<<<<
 *         # This means the geometry is actually symmetric, because the break angle is actually equal to zero
 *         theta_star = theta
 */
  __pyx_t_2 = ((__pyx_v_theta_break < 1e-14) != 0);
  if (__pyx_t_2) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":209
 *     if theta_break < 1e-14:
 *         # This means the geometry is actually symmetric, because the break angle is actually equal to zero
 *         theta_star = theta             # <<<<<<<<<<<<<<
 *     elif theta > theta_break:
 *         # At the break angle, the effective angle is zero
 */
    __pyx_v_theta_star = __pyx_v_theta;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":207
 *     theta_break = geo.phi_fie - geo.phi_oie
 *     # Define the effective crank angle for path 2
 *     if theta_break < 1e-14:             # <<<<<<<<<<<<<<
 *         # This means the geometry is actually symmetric, because the break angle is actually equal to zero
 *         theta_star = theta
 */
    goto __pyx_L3;
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":210
 *         # This means the geometry is actually symmetric, because the break angle is actually equal to zero
 *         theta_star = theta
 *     elif theta > theta_break:             # <<<<<<<<<<<<<<
 *         # At the break angle, the effective angle is zero
 *         theta_star = theta - theta_break
 */
  __pyx_t_2 = ((__pyx_v_theta > __pyx_v_theta_break) != 0);
  if (__pyx_t_2) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":212
 *     elif theta > theta_break:
 *         # At the break angle, the effective angle is zero
 *         theta_star = theta - theta_break             # <<<<<<<<<<<<<<
 *     else:
 *         # At the break angle, the effective angle is a full rotation or 2*pi radians
 */
    __pyx_v_theta_star = (__pyx_v_theta - __pyx_v_theta_break);

    /* "DanfossPDSim/asymm_scroll_geo.pyx":210
 *         # This means the geometry is actually symmetric, because the break angle is actually equal to zero
 *         theta_star = theta
 *     elif theta > theta_break:             # <<<<<<<<<<<<<<
 *         # At the break angle, the effective angle is zero
 *         theta_star = theta - theta_break
 */
    goto __pyx_L3;
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":215
 *     else:
 *         # At the break angle, the effective angle is a full rotation or 2*pi radians
 *         theta_star = theta + 2*pi - theta_break             # <<<<<<<<<<<<<<
 * 
 *     if index == common.keyIs1:
 */
  /*else*/ {
    __pyx_v_theta_star = ((__pyx_v_theta + (2.0 * M_PI)) - __pyx_v_theta_break);
  }
  __pyx_L3:;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":217
 *         theta_star = theta + 2*pi - theta_break
 * 
 *     if index == common.keyIs1:             # <<<<<<<<<<<<<<
 *         phi_s_sa, d_phi_s_sa_dtheta = phi_s1_sa(theta, geo)
 *         CV.Outer.involute = common.INVOLUTE_FI
 */
  __pyx_t_2 = ((__pyx_v_index == __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIs1) != 0);
  if (__pyx_t_2) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":218
 * 
 *     if index == common.keyIs1:
 *         phi_s_sa, d_phi_s_sa_dtheta = phi_s1_sa(theta, geo)             # <<<<<<<<<<<<<<
 *         CV.Outer.involute = common.INVOLUTE_FI
 *         CV.Outer.phi_0 = geo.phi_fi0
 */
    __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_phi_s1_sa(__pyx_v_theta, __pyx_v_geo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(__pyx_t_1 != Py_None)) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 218, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 218, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 218, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_phi_s_sa = __pyx_t_5;
    __pyx_v_d_phi_s_sa_dtheta = __pyx_t_6;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":219
 *     if index == common.keyIs1:
 *         phi_s_sa, d_phi_s_sa_dtheta = phi_s1_sa(theta, geo)
 *         CV.Outer.involute = common.INVOLUTE_FI             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_0 = geo.phi_fi0
 *         CV.Outer.phi_max = geo.phi_fie
 */
    __pyx_v_CV->Outer->involute = __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FI;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":220
 *         phi_s_sa, d_phi_s_sa_dtheta = phi_s1_sa(theta, geo)
 *         CV.Outer.involute = common.INVOLUTE_FI
 *         CV.Outer.phi_0 = geo.phi_fi0             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_max = geo.phi_fie
 *         CV.Outer.phi_min = geo.phi_fie-theta
 */
    __pyx_t_6 = __pyx_v_geo->__pyx_base.phi_fi0;
    __pyx_v_CV->Outer->phi_0 = __pyx_t_6;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":221
 *         CV.Outer.involute = common.INVOLUTE_FI
 *         CV.Outer.phi_0 = geo.phi_fi0
 *         CV.Outer.phi_max = geo.phi_fie             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_min = geo.phi_fie-theta
 *         CV.Inner.involute = common.INVOLUTE_OO
 */
    __pyx_t_6 = __pyx_v_geo->__pyx_base.phi_fie;
    __pyx_v_CV->Outer->phi_max = __pyx_t_6;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":222
 *         CV.Outer.phi_0 = geo.phi_fi0
 *         CV.Outer.phi_max = geo.phi_fie
 *         CV.Outer.phi_min = geo.phi_fie-theta             # <<<<<<<<<<<<<<
 *         CV.Inner.involute = common.INVOLUTE_OO
 *         CV.Inner.phi_0 = geo.phi_oo0
 */
    __pyx_v_CV->Outer->phi_min = (__pyx_v_geo->__pyx_base.phi_fie - __pyx_v_theta);

    /* "DanfossPDSim/asymm_scroll_geo.pyx":223
 *         CV.Outer.phi_max = geo.phi_fie
 *         CV.Outer.phi_min = geo.phi_fie-theta
 *         CV.Inner.involute = common.INVOLUTE_OO             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_0 = geo.phi_oo0
 *         CV.Inner.phi_max = phi_s_sa
 */
    __pyx_v_CV->Inner->involute = __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OO;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":224
 *         CV.Outer.phi_min = geo.phi_fie-theta
 *         CV.Inner.involute = common.INVOLUTE_OO
 *         CV.Inner.phi_0 = geo.phi_oo0             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_max = phi_s_sa
 *         CV.Inner.phi_min = geo.phi_fie-pi-theta
 */
    __pyx_t_6 = __pyx_v_geo->__pyx_base.phi_oo0;
    __pyx_v_CV->Inner->phi_0 = __pyx_t_6;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":225
 *         CV.Inner.involute = common.INVOLUTE_OO
 *         CV.Inner.phi_0 = geo.phi_oo0
 *         CV.Inner.phi_max = phi_s_sa             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_min = geo.phi_fie-pi-theta
 *         CV.Inner.dphi_max_dtheta = d_phi_s_sa_dtheta
 */
    __pyx_v_CV->Inner->phi_max = __pyx_v_phi_s_sa;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":226
 *         CV.Inner.phi_0 = geo.phi_oo0
 *         CV.Inner.phi_max = phi_s_sa
 *         CV.Inner.phi_min = geo.phi_fie-pi-theta             # <<<<<<<<<<<<<<
 *         CV.Inner.dphi_max_dtheta = d_phi_s_sa_dtheta
 *         CV.Outer.dphi_max_dtheta = 0
 */
    __pyx_v_CV->Inner->phi_min = ((__pyx_v_geo->__pyx_base.phi_fie - M_PI) - __pyx_v_theta);

    /* "DanfossPDSim/asymm_scroll_geo.pyx":227
 *         CV.Inner.phi_max = phi_s_sa
 *         CV.Inner.phi_min = geo.phi_fie-pi-theta
 *         CV.Inner.dphi_max_dtheta = d_phi_s_sa_dtheta             # <<<<<<<<<<<<<<
 *         CV.Outer.dphi_max_dtheta = 0
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1
 */
    __pyx_v_CV->Inner->dphi_max_dtheta = __pyx_v_d_phi_s_sa_dtheta;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":228
 *         CV.Inner.phi_min = geo.phi_fie-pi-theta
 *         CV.Inner.dphi_max_dtheta = d_phi_s_sa_dtheta
 *         CV.Outer.dphi_max_dtheta = 0             # <<<<<<<<<<<<<<
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1
 *         CV.has_line_1 = True
 */
    __pyx_v_CV->Outer->dphi_max_dtheta = 0.0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":229
 *         CV.Inner.dphi_max_dtheta = d_phi_s_sa_dtheta
 *         CV.Outer.dphi_max_dtheta = 0
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1             # <<<<<<<<<<<<<<
 *         CV.has_line_1 = True
 *         CV.has_line_2 = False
 */
    __pyx_v_CV->Inner->dphi_min_dtheta = -1.0;
    __pyx_v_CV->Outer->dphi_min_dtheta = -1.0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":230
 *         CV.Outer.dphi_max_dtheta = 0
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1
 *         CV.has_line_1 = True             # <<<<<<<<<<<<<<
 *         CV.has_line_2 = False
 * 
 */
    __pyx_v_CV->has_line_1 = 1;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":231
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1
 *         CV.has_line_1 = True
 *         CV.has_line_2 = False             # <<<<<<<<<<<<<<
 * 
 *     elif common.keyIc1_1 <= index <= common.keyIc1_10:
 */
    __pyx_v_CV->has_line_2 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":217
 *         theta_star = theta + 2*pi - theta_break
 * 
 *     if index == common.keyIs1:             # <<<<<<<<<<<<<<
 *         phi_s_sa, d_phi_s_sa_dtheta = phi_s1_sa(theta, geo)
 *         CV.Outer.involute = common.INVOLUTE_FI
 */
    goto __pyx_L4;
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":233
 *         CV.has_line_2 = False
 * 
 *     elif common.keyIc1_1 <= index <= common.keyIc1_10:             # <<<<<<<<<<<<<<
 *         # index 1001 is c1.1, 1002 is c1.2, etc.
 *         # alpha is the index of the compression pocket,
 */
  __pyx_t_2 = (__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_1 <= ((enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices)__pyx_v_index));
  if (__pyx_t_2) {
    __pyx_t_2 = (__pyx_v_index <= __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_10);
  }
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (__pyx_t_7) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":237
 *         # alpha is the index of the compression pocket,
 *         # alpha = 1 is the outermost chamber on the #1 path
 *         alpha = index - 1000             # <<<<<<<<<<<<<<
 * 
 *         if alpha > Nc(theta, geo, 1):
 */
    __pyx_v_alpha = (__pyx_v_index - 0x3E8);

    /* "DanfossPDSim/asymm_scroll_geo.pyx":239
 *         alpha = index - 1000
 * 
 *         if alpha > Nc(theta, geo, 1):             # <<<<<<<<<<<<<<
 *             raise KeyError("Requested alpha [{0:d}] is not possible; N_c_max is {1:d}".format(alpha, Nc(theta, geo, 1)))
 * 
 */
    __pyx_t_7 = ((__pyx_v_alpha > __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Nc(__pyx_v_theta, __pyx_v_geo, 1, 0)) != 0);
    if (unlikely(__pyx_t_7)) {

      /* "DanfossPDSim/asymm_scroll_geo.pyx":240
 * 
 *         if alpha > Nc(theta, geo, 1):
 *             raise KeyError("Requested alpha [{0:d}] is not possible; N_c_max is {1:d}".format(alpha, Nc(theta, geo, 1)))             # <<<<<<<<<<<<<<
 * 
 *         CV.Outer.involute = common.INVOLUTE_FI
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Requested_alpha_0_d_is_not_possi, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_alpha); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 240, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_f_12DanfossPDSim_16asymm_scroll_geo_Nc(__pyx_v_theta, __pyx_v_geo, 1, 0)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 240, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_3, __pyx_t_8};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_3, __pyx_t_8};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 240, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__pyx_t_9) {
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_8);
        __pyx_t_3 = 0;
        __pyx_t_8 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 240, __pyx_L1_error)

      /* "DanfossPDSim/asymm_scroll_geo.pyx":239
 *         alpha = index - 1000
 * 
 *         if alpha > Nc(theta, geo, 1):             # <<<<<<<<<<<<<<
 *             raise KeyError("Requested alpha [{0:d}] is not possible; N_c_max is {1:d}".format(alpha, Nc(theta, geo, 1)))
 * 
 */
    }

    /* "DanfossPDSim/asymm_scroll_geo.pyx":242
 *             raise KeyError("Requested alpha [{0:d}] is not possible; N_c_max is {1:d}".format(alpha, Nc(theta, geo, 1)))
 * 
 *         CV.Outer.involute = common.INVOLUTE_FI             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_0 = geo.phi_fi0
 *         CV.Outer.phi_max = geo.phi_fie-theta-2*pi*(alpha-1)
 */
    __pyx_v_CV->Outer->involute = __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FI;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":243
 * 
 *         CV.Outer.involute = common.INVOLUTE_FI
 *         CV.Outer.phi_0 = geo.phi_fi0             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_max = geo.phi_fie-theta-2*pi*(alpha-1)
 *         CV.Outer.phi_min = geo.phi_fie-theta-2*pi*alpha
 */
    __pyx_t_6 = __pyx_v_geo->__pyx_base.phi_fi0;
    __pyx_v_CV->Outer->phi_0 = __pyx_t_6;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":244
 *         CV.Outer.involute = common.INVOLUTE_FI
 *         CV.Outer.phi_0 = geo.phi_fi0
 *         CV.Outer.phi_max = geo.phi_fie-theta-2*pi*(alpha-1)             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_min = geo.phi_fie-theta-2*pi*alpha
 *         CV.Inner.involute = common.INVOLUTE_OO
 */
    __pyx_v_CV->Outer->phi_max = ((__pyx_v_geo->__pyx_base.phi_fie - __pyx_v_theta) - ((2.0 * M_PI) * (__pyx_v_alpha - 1)));

    /* "DanfossPDSim/asymm_scroll_geo.pyx":245
 *         CV.Outer.phi_0 = geo.phi_fi0
 *         CV.Outer.phi_max = geo.phi_fie-theta-2*pi*(alpha-1)
 *         CV.Outer.phi_min = geo.phi_fie-theta-2*pi*alpha             # <<<<<<<<<<<<<<
 *         CV.Inner.involute = common.INVOLUTE_OO
 *         CV.Inner.phi_0 = geo.phi_oo0
 */
    __pyx_v_CV->Outer->phi_min = ((__pyx_v_geo->__pyx_base.phi_fie - __pyx_v_theta) - ((2.0 * M_PI) * __pyx_v_alpha));

    /* "DanfossPDSim/asymm_scroll_geo.pyx":246
 *         CV.Outer.phi_max = geo.phi_fie-theta-2*pi*(alpha-1)
 *         CV.Outer.phi_min = geo.phi_fie-theta-2*pi*alpha
 *         CV.Inner.involute = common.INVOLUTE_OO             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_0 = geo.phi_oo0
 *         CV.Inner.phi_max = geo.phi_fie-pi-theta-2*pi*(alpha-1)
 */
    __pyx_v_CV->Inner->involute = __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OO;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":247
 *         CV.Outer.phi_min = geo.phi_fie-theta-2*pi*alpha
 *         CV.Inner.involute = common.INVOLUTE_OO
 *         CV.Inner.phi_0 = geo.phi_oo0             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_max = geo.phi_fie-pi-theta-2*pi*(alpha-1)
 *         CV.Inner.phi_min = geo.phi_fie-pi-theta-2*pi*alpha
 */
    __pyx_t_6 = __pyx_v_geo->__pyx_base.phi_oo0;
    __pyx_v_CV->Inner->phi_0 = __pyx_t_6;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":248
 *         CV.Inner.involute = common.INVOLUTE_OO
 *         CV.Inner.phi_0 = geo.phi_oo0
 *         CV.Inner.phi_max = geo.phi_fie-pi-theta-2*pi*(alpha-1)             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_min = geo.phi_fie-pi-theta-2*pi*alpha
 *         CV.Inner.dphi_max_dtheta = CV.Outer.dphi_max_dtheta = -1
 */
    __pyx_v_CV->Inner->phi_max = (((__pyx_v_geo->__pyx_base.phi_fie - M_PI) - __pyx_v_theta) - ((2.0 * M_PI) * (__pyx_v_alpha - 1)));

    /* "DanfossPDSim/asymm_scroll_geo.pyx":249
 *         CV.Inner.phi_0 = geo.phi_oo0
 *         CV.Inner.phi_max = geo.phi_fie-pi-theta-2*pi*(alpha-1)
 *         CV.Inner.phi_min = geo.phi_fie-pi-theta-2*pi*alpha             # <<<<<<<<<<<<<<
 *         CV.Inner.dphi_max_dtheta = CV.Outer.dphi_max_dtheta = -1
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1
 */
    __pyx_v_CV->Inner->phi_min = (((__pyx_v_geo->__pyx_base.phi_fie - M_PI) - __pyx_v_theta) - ((2.0 * M_PI) * __pyx_v_alpha));

    /* "DanfossPDSim/asymm_scroll_geo.pyx":250
 *         CV.Inner.phi_max = geo.phi_fie-pi-theta-2*pi*(alpha-1)
 *         CV.Inner.phi_min = geo.phi_fie-pi-theta-2*pi*alpha
 *         CV.Inner.dphi_max_dtheta = CV.Outer.dphi_max_dtheta = -1             # <<<<<<<<<<<<<<
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1
 *         CV.has_line_1 = False
 */
    __pyx_v_CV->Inner->dphi_max_dtheta = -1.0;
    __pyx_v_CV->Outer->dphi_max_dtheta = -1.0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":251
 *         CV.Inner.phi_min = geo.phi_fie-pi-theta-2*pi*alpha
 *         CV.Inner.dphi_max_dtheta = CV.Outer.dphi_max_dtheta = -1
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1             # <<<<<<<<<<<<<<
 *         CV.has_line_1 = False
 *         CV.has_line_2 = False
 */
    __pyx_v_CV->Inner->dphi_min_dtheta = -1.0;
    __pyx_v_CV->Outer->dphi_min_dtheta = -1.0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":252
 *         CV.Inner.dphi_max_dtheta = CV.Outer.dphi_max_dtheta = -1
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1
 *         CV.has_line_1 = False             # <<<<<<<<<<<<<<
 *         CV.has_line_2 = False
 * 
 */
    __pyx_v_CV->has_line_1 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":253
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1
 *         CV.has_line_1 = False
 *         CV.has_line_2 = False             # <<<<<<<<<<<<<<
 * 
 *     elif index == common.keyId1:
 */
    __pyx_v_CV->has_line_2 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":233
 *         CV.has_line_2 = False
 * 
 *     elif common.keyIc1_1 <= index <= common.keyIc1_10:             # <<<<<<<<<<<<<<
 *         # index 1001 is c1.1, 1002 is c1.2, etc.
 *         # alpha is the index of the compression pocket,
 */
    goto __pyx_L4;
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":255
 *         CV.has_line_2 = False
 * 
 *     elif index == common.keyId1:             # <<<<<<<<<<<<<<
 *         Nc1 = Nc(theta, geo, 1)
 *         CV.Outer.involute = common.INVOLUTE_FI
 */
  __pyx_t_7 = ((__pyx_v_index == __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyId1) != 0);
  if (__pyx_t_7) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":256
 * 
 *     elif index == common.keyId1:
 *         Nc1 = Nc(theta, geo, 1)             # <<<<<<<<<<<<<<
 *         CV.Outer.involute = common.INVOLUTE_FI
 *         CV.Outer.phi_0 = geo.phi_fi0
 */
    __pyx_v_Nc1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Nc(__pyx_v_theta, __pyx_v_geo, 1, 0);

    /* "DanfossPDSim/asymm_scroll_geo.pyx":257
 *     elif index == common.keyId1:
 *         Nc1 = Nc(theta, geo, 1)
 *         CV.Outer.involute = common.INVOLUTE_FI             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_0 = geo.phi_fi0
 *         CV.Outer.phi_max = geo.phi_fie-theta-2.0*pi*Nc1
 */
    __pyx_v_CV->Outer->involute = __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FI;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":258
 *         Nc1 = Nc(theta, geo, 1)
 *         CV.Outer.involute = common.INVOLUTE_FI
 *         CV.Outer.phi_0 = geo.phi_fi0             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_max = geo.phi_fie-theta-2.0*pi*Nc1
 *         CV.Outer.phi_min = geo.phi_oos + pi
 */
    __pyx_t_6 = __pyx_v_geo->__pyx_base.phi_fi0;
    __pyx_v_CV->Outer->phi_0 = __pyx_t_6;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":259
 *         CV.Outer.involute = common.INVOLUTE_FI
 *         CV.Outer.phi_0 = geo.phi_fi0
 *         CV.Outer.phi_max = geo.phi_fie-theta-2.0*pi*Nc1             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_min = geo.phi_oos + pi
 *         CV.Outer.dphi_max_dtheta = -1
 */
    __pyx_v_CV->Outer->phi_max = ((__pyx_v_geo->__pyx_base.phi_fie - __pyx_v_theta) - ((2.0 * M_PI) * __pyx_v_Nc1));

    /* "DanfossPDSim/asymm_scroll_geo.pyx":260
 *         CV.Outer.phi_0 = geo.phi_fi0
 *         CV.Outer.phi_max = geo.phi_fie-theta-2.0*pi*Nc1
 *         CV.Outer.phi_min = geo.phi_oos + pi             # <<<<<<<<<<<<<<
 *         CV.Outer.dphi_max_dtheta = -1
 *         CV.Outer.dphi_min_dtheta = 0
 */
    __pyx_v_CV->Outer->phi_min = (__pyx_v_geo->__pyx_base.phi_oos + M_PI);

    /* "DanfossPDSim/asymm_scroll_geo.pyx":261
 *         CV.Outer.phi_max = geo.phi_fie-theta-2.0*pi*Nc1
 *         CV.Outer.phi_min = geo.phi_oos + pi
 *         CV.Outer.dphi_max_dtheta = -1             # <<<<<<<<<<<<<<
 *         CV.Outer.dphi_min_dtheta = 0
 * 
 */
    __pyx_v_CV->Outer->dphi_max_dtheta = -1.0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":262
 *         CV.Outer.phi_min = geo.phi_oos + pi
 *         CV.Outer.dphi_max_dtheta = -1
 *         CV.Outer.dphi_min_dtheta = 0             # <<<<<<<<<<<<<<
 * 
 *         CV.Inner.involute = common.INVOLUTE_OO
 */
    __pyx_v_CV->Outer->dphi_min_dtheta = 0.0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":264
 *         CV.Outer.dphi_min_dtheta = 0
 * 
 *         CV.Inner.involute = common.INVOLUTE_OO             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_0 = geo.phi_oo0
 *         CV.Inner.phi_max = geo.phi_fie-pi-theta-2.0*pi*Nc1
 */
    __pyx_v_CV->Inner->involute = __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OO;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":265
 * 
 *         CV.Inner.involute = common.INVOLUTE_OO
 *         CV.Inner.phi_0 = geo.phi_oo0             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_max = geo.phi_fie-pi-theta-2.0*pi*Nc1
 *         CV.Inner.phi_min = geo.phi_oos
 */
    __pyx_t_6 = __pyx_v_geo->__pyx_base.phi_oo0;
    __pyx_v_CV->Inner->phi_0 = __pyx_t_6;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":266
 *         CV.Inner.involute = common.INVOLUTE_OO
 *         CV.Inner.phi_0 = geo.phi_oo0
 *         CV.Inner.phi_max = geo.phi_fie-pi-theta-2.0*pi*Nc1             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_min = geo.phi_oos
 *         CV.Inner.dphi_max_dtheta = -1
 */
    __pyx_v_CV->Inner->phi_max = (((__pyx_v_geo->__pyx_base.phi_fie - M_PI) - __pyx_v_theta) - ((2.0 * M_PI) * __pyx_v_Nc1));

    /* "DanfossPDSim/asymm_scroll_geo.pyx":267
 *         CV.Inner.phi_0 = geo.phi_oo0
 *         CV.Inner.phi_max = geo.phi_fie-pi-theta-2.0*pi*Nc1
 *         CV.Inner.phi_min = geo.phi_oos             # <<<<<<<<<<<<<<
 *         CV.Inner.dphi_max_dtheta = -1
 *         CV.Inner.dphi_min_dtheta = 0
 */
    __pyx_t_6 = __pyx_v_geo->__pyx_base.phi_oos;
    __pyx_v_CV->Inner->phi_min = __pyx_t_6;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":268
 *         CV.Inner.phi_max = geo.phi_fie-pi-theta-2.0*pi*Nc1
 *         CV.Inner.phi_min = geo.phi_oos
 *         CV.Inner.dphi_max_dtheta = -1             # <<<<<<<<<<<<<<
 *         CV.Inner.dphi_min_dtheta = 0
 *         CV.has_line_1 = False
 */
    __pyx_v_CV->Inner->dphi_max_dtheta = -1.0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":269
 *         CV.Inner.phi_min = geo.phi_oos
 *         CV.Inner.dphi_max_dtheta = -1
 *         CV.Inner.dphi_min_dtheta = 0             # <<<<<<<<<<<<<<
 *         CV.has_line_1 = False
 *         CV.has_line_2 = True
 */
    __pyx_v_CV->Inner->dphi_min_dtheta = 0.0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":270
 *         CV.Inner.dphi_max_dtheta = -1
 *         CV.Inner.dphi_min_dtheta = 0
 *         CV.has_line_1 = False             # <<<<<<<<<<<<<<
 *         CV.has_line_2 = True
 * 
 */
    __pyx_v_CV->has_line_1 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":271
 *         CV.Inner.dphi_min_dtheta = 0
 *         CV.has_line_1 = False
 *         CV.has_line_2 = True             # <<<<<<<<<<<<<<
 * 
 *     elif index == common.keyIs2:
 */
    __pyx_v_CV->has_line_2 = 1;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":255
 *         CV.has_line_2 = False
 * 
 *     elif index == common.keyId1:             # <<<<<<<<<<<<<<
 *         Nc1 = Nc(theta, geo, 1)
 *         CV.Outer.involute = common.INVOLUTE_FI
 */
    goto __pyx_L4;
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":273
 *         CV.has_line_2 = True
 * 
 *     elif index == common.keyIs2:             # <<<<<<<<<<<<<<
 *         phi_s_sa, d_phi_s_sa_dtheta = phi_s2_sa(theta, geo)
 *         CV.Outer.involute = common.INVOLUTE_OI
 */
  __pyx_t_7 = ((__pyx_v_index == __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIs2) != 0);
  if (__pyx_t_7) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":274
 * 
 *     elif index == common.keyIs2:
 *         phi_s_sa, d_phi_s_sa_dtheta = phi_s2_sa(theta, geo)             # <<<<<<<<<<<<<<
 *         CV.Outer.involute = common.INVOLUTE_OI
 *         CV.Outer.phi_0 = geo.phi_oi0
 */
    __pyx_t_4 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_phi_s2_sa(__pyx_v_theta, __pyx_v_geo, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(__pyx_t_4 != Py_None)) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 274, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_11);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 274, __pyx_L1_error)
    }
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_v_phi_s_sa = __pyx_t_6;
    __pyx_v_d_phi_s_sa_dtheta = __pyx_t_5;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":275
 *     elif index == common.keyIs2:
 *         phi_s_sa, d_phi_s_sa_dtheta = phi_s2_sa(theta, geo)
 *         CV.Outer.involute = common.INVOLUTE_OI             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_0 = geo.phi_oi0
 *         CV.Inner.involute = common.INVOLUTE_FO
 */
    __pyx_v_CV->Outer->involute = __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OI;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":276
 *         phi_s_sa, d_phi_s_sa_dtheta = phi_s2_sa(theta, geo)
 *         CV.Outer.involute = common.INVOLUTE_OI
 *         CV.Outer.phi_0 = geo.phi_oi0             # <<<<<<<<<<<<<<
 *         CV.Inner.involute = common.INVOLUTE_FO
 *         CV.Inner.phi_0 = geo.phi_fo0
 */
    __pyx_t_5 = __pyx_v_geo->__pyx_base.phi_oi0;
    __pyx_v_CV->Outer->phi_0 = __pyx_t_5;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":277
 *         CV.Outer.involute = common.INVOLUTE_OI
 *         CV.Outer.phi_0 = geo.phi_oi0
 *         CV.Inner.involute = common.INVOLUTE_FO             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_0 = geo.phi_fo0
 *         CV.Outer.phi_max = geo.phi_oie
 */
    __pyx_v_CV->Inner->involute = __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FO;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":278
 *         CV.Outer.phi_0 = geo.phi_oi0
 *         CV.Inner.involute = common.INVOLUTE_FO
 *         CV.Inner.phi_0 = geo.phi_fo0             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_max = geo.phi_oie
 *         CV.Inner.phi_max = phi_s_sa #geo.phi_oie - pi # The point on the FO involute that is conjugate at theta_break
 */
    __pyx_t_5 = __pyx_v_geo->__pyx_base.phi_fo0;
    __pyx_v_CV->Inner->phi_0 = __pyx_t_5;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":279
 *         CV.Inner.involute = common.INVOLUTE_FO
 *         CV.Inner.phi_0 = geo.phi_fo0
 *         CV.Outer.phi_max = geo.phi_oie             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_max = phi_s_sa #geo.phi_oie - pi # The point on the FO involute that is conjugate at theta_break
 *         CV.Outer.phi_min = geo.phi_oie - theta_star
 */
    __pyx_t_5 = __pyx_v_geo->__pyx_base.phi_oie;
    __pyx_v_CV->Outer->phi_max = __pyx_t_5;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":280
 *         CV.Inner.phi_0 = geo.phi_fo0
 *         CV.Outer.phi_max = geo.phi_oie
 *         CV.Inner.phi_max = phi_s_sa #geo.phi_oie - pi # The point on the FO involute that is conjugate at theta_break             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_min = geo.phi_oie - theta_star
 *         CV.Inner.phi_min = geo.phi_oie - pi - theta_star
 */
    __pyx_v_CV->Inner->phi_max = __pyx_v_phi_s_sa;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":281
 *         CV.Outer.phi_max = geo.phi_oie
 *         CV.Inner.phi_max = phi_s_sa #geo.phi_oie - pi # The point on the FO involute that is conjugate at theta_break
 *         CV.Outer.phi_min = geo.phi_oie - theta_star             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_min = geo.phi_oie - pi - theta_star
 *         CV.Inner.dphi_max_dtheta = d_phi_s_sa_dtheta
 */
    __pyx_v_CV->Outer->phi_min = (__pyx_v_geo->__pyx_base.phi_oie - __pyx_v_theta_star);

    /* "DanfossPDSim/asymm_scroll_geo.pyx":282
 *         CV.Inner.phi_max = phi_s_sa #geo.phi_oie - pi # The point on the FO involute that is conjugate at theta_break
 *         CV.Outer.phi_min = geo.phi_oie - theta_star
 *         CV.Inner.phi_min = geo.phi_oie - pi - theta_star             # <<<<<<<<<<<<<<
 *         CV.Inner.dphi_max_dtheta = d_phi_s_sa_dtheta
 *         CV.Outer.dphi_max_dtheta = 0
 */
    __pyx_v_CV->Inner->phi_min = ((__pyx_v_geo->__pyx_base.phi_oie - M_PI) - __pyx_v_theta_star);

    /* "DanfossPDSim/asymm_scroll_geo.pyx":283
 *         CV.Outer.phi_min = geo.phi_oie - theta_star
 *         CV.Inner.phi_min = geo.phi_oie - pi - theta_star
 *         CV.Inner.dphi_max_dtheta = d_phi_s_sa_dtheta             # <<<<<<<<<<<<<<
 *         CV.Outer.dphi_max_dtheta = 0
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1
 */
    __pyx_v_CV->Inner->dphi_max_dtheta = __pyx_v_d_phi_s_sa_dtheta;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":284
 *         CV.Inner.phi_min = geo.phi_oie - pi - theta_star
 *         CV.Inner.dphi_max_dtheta = d_phi_s_sa_dtheta
 *         CV.Outer.dphi_max_dtheta = 0             # <<<<<<<<<<<<<<
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1
 *         CV.has_line_1 = True
 */
    __pyx_v_CV->Outer->dphi_max_dtheta = 0.0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":285
 *         CV.Inner.dphi_max_dtheta = d_phi_s_sa_dtheta
 *         CV.Outer.dphi_max_dtheta = 0
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1             # <<<<<<<<<<<<<<
 *         CV.has_line_1 = True
 *         CV.has_line_2 = False
 */
    __pyx_v_CV->Inner->dphi_min_dtheta = -1.0;
    __pyx_v_CV->Outer->dphi_min_dtheta = -1.0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":286
 *         CV.Outer.dphi_max_dtheta = 0
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1
 *         CV.has_line_1 = True             # <<<<<<<<<<<<<<
 *         CV.has_line_2 = False
 * 
 */
    __pyx_v_CV->has_line_1 = 1;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":287
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1
 *         CV.has_line_1 = True
 *         CV.has_line_2 = False             # <<<<<<<<<<<<<<
 * 
 *     elif common.keyIc2_1 <= index <= common.keyIc2_10:
 */
    __pyx_v_CV->has_line_2 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":273
 *         CV.has_line_2 = True
 * 
 *     elif index == common.keyIs2:             # <<<<<<<<<<<<<<
 *         phi_s_sa, d_phi_s_sa_dtheta = phi_s2_sa(theta, geo)
 *         CV.Outer.involute = common.INVOLUTE_OI
 */
    goto __pyx_L4;
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":289
 *         CV.has_line_2 = False
 * 
 *     elif common.keyIc2_1 <= index <= common.keyIc2_10:             # <<<<<<<<<<<<<<
 *         # index 2001 is c2.1, 2002 is c2.2, etc.
 *         # alpha is the index of the compression pocket,
 */
  __pyx_t_7 = (__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_1 <= ((enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices)__pyx_v_index));
  if (__pyx_t_7) {
    __pyx_t_7 = (__pyx_v_index <= __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_10);
  }
  __pyx_t_2 = (__pyx_t_7 != 0);
  if (__pyx_t_2) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":293
 *         # alpha is the index of the compression pocket,
 *         # alpha = 1 is the outermost chamber on the #2 path
 *         alpha = index - 2000             # <<<<<<<<<<<<<<
 * 
 *         if alpha > Nc(theta, geo, 2):
 */
    __pyx_v_alpha = (__pyx_v_index - 0x7D0);

    /* "DanfossPDSim/asymm_scroll_geo.pyx":295
 *         alpha = index - 2000
 * 
 *         if alpha > Nc(theta, geo, 2):             # <<<<<<<<<<<<<<
 *             raise KeyError("Requested alpha [{0:d}] is not possible; N_c_max is {1:d}".format(alpha, Nc(theta, geo, 2)))
 * 
 */
    __pyx_t_2 = ((__pyx_v_alpha > __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Nc(__pyx_v_theta, __pyx_v_geo, 2, 0)) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "DanfossPDSim/asymm_scroll_geo.pyx":296
 * 
 *         if alpha > Nc(theta, geo, 2):
 *             raise KeyError("Requested alpha [{0:d}] is not possible; N_c_max is {1:d}".format(alpha, Nc(theta, geo, 2)))             # <<<<<<<<<<<<<<
 * 
 *         CV.Outer.involute = common.INVOLUTE_OI
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Requested_alpha_0_d_is_not_possi, __pyx_n_s_format); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_alpha); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_f_12DanfossPDSim_16asymm_scroll_geo_Nc(__pyx_v_theta, __pyx_v_geo, 2, 0)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_11)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_1, __pyx_t_8};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 296, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_1, __pyx_t_8};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 296, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 296, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_3) {
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3); __pyx_t_3 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_10, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_10, __pyx_t_8);
        __pyx_t_1 = 0;
        __pyx_t_8 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 296, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_11, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __PYX_ERR(0, 296, __pyx_L1_error)

      /* "DanfossPDSim/asymm_scroll_geo.pyx":295
 *         alpha = index - 2000
 * 
 *         if alpha > Nc(theta, geo, 2):             # <<<<<<<<<<<<<<
 *             raise KeyError("Requested alpha [{0:d}] is not possible; N_c_max is {1:d}".format(alpha, Nc(theta, geo, 2)))
 * 
 */
    }

    /* "DanfossPDSim/asymm_scroll_geo.pyx":298
 *             raise KeyError("Requested alpha [{0:d}] is not possible; N_c_max is {1:d}".format(alpha, Nc(theta, geo, 2)))
 * 
 *         CV.Outer.involute = common.INVOLUTE_OI             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_0 = geo.phi_oi0
 *         CV.Inner.involute = common.INVOLUTE_FO
 */
    __pyx_v_CV->Outer->involute = __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OI;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":299
 * 
 *         CV.Outer.involute = common.INVOLUTE_OI
 *         CV.Outer.phi_0 = geo.phi_oi0             # <<<<<<<<<<<<<<
 *         CV.Inner.involute = common.INVOLUTE_FO
 *         CV.Inner.phi_0 = geo.phi_fo0
 */
    __pyx_t_5 = __pyx_v_geo->__pyx_base.phi_oi0;
    __pyx_v_CV->Outer->phi_0 = __pyx_t_5;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":300
 *         CV.Outer.involute = common.INVOLUTE_OI
 *         CV.Outer.phi_0 = geo.phi_oi0
 *         CV.Inner.involute = common.INVOLUTE_FO             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_0 = geo.phi_fo0
 * 
 */
    __pyx_v_CV->Inner->involute = __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FO;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":301
 *         CV.Outer.phi_0 = geo.phi_oi0
 *         CV.Inner.involute = common.INVOLUTE_FO
 *         CV.Inner.phi_0 = geo.phi_fo0             # <<<<<<<<<<<<<<
 * 
 *         CV.Outer.phi_max = geo.phi_oie - theta_star - 2*pi*(alpha-1)
 */
    __pyx_t_5 = __pyx_v_geo->__pyx_base.phi_fo0;
    __pyx_v_CV->Inner->phi_0 = __pyx_t_5;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":303
 *         CV.Inner.phi_0 = geo.phi_fo0
 * 
 *         CV.Outer.phi_max = geo.phi_oie - theta_star - 2*pi*(alpha-1)             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_max = geo.phi_oie - pi - theta_star - 2*pi*(alpha-1)
 *         CV.Outer.phi_min = CV.Outer.phi_max - 2*pi
 */
    __pyx_v_CV->Outer->phi_max = ((__pyx_v_geo->__pyx_base.phi_oie - __pyx_v_theta_star) - ((2.0 * M_PI) * (__pyx_v_alpha - 1)));

    /* "DanfossPDSim/asymm_scroll_geo.pyx":304
 * 
 *         CV.Outer.phi_max = geo.phi_oie - theta_star - 2*pi*(alpha-1)
 *         CV.Inner.phi_max = geo.phi_oie - pi - theta_star - 2*pi*(alpha-1)             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_min = CV.Outer.phi_max - 2*pi
 *         CV.Inner.phi_min = CV.Inner.phi_max - 2*pi
 */
    __pyx_v_CV->Inner->phi_max = (((__pyx_v_geo->__pyx_base.phi_oie - M_PI) - __pyx_v_theta_star) - ((2.0 * M_PI) * (__pyx_v_alpha - 1)));

    /* "DanfossPDSim/asymm_scroll_geo.pyx":305
 *         CV.Outer.phi_max = geo.phi_oie - theta_star - 2*pi*(alpha-1)
 *         CV.Inner.phi_max = geo.phi_oie - pi - theta_star - 2*pi*(alpha-1)
 *         CV.Outer.phi_min = CV.Outer.phi_max - 2*pi             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_min = CV.Inner.phi_max - 2*pi
 * 
 */
    __pyx_v_CV->Outer->phi_min = (__pyx_v_CV->Outer->phi_max - (2.0 * M_PI));

    /* "DanfossPDSim/asymm_scroll_geo.pyx":306
 *         CV.Inner.phi_max = geo.phi_oie - pi - theta_star - 2*pi*(alpha-1)
 *         CV.Outer.phi_min = CV.Outer.phi_max - 2*pi
 *         CV.Inner.phi_min = CV.Inner.phi_max - 2*pi             # <<<<<<<<<<<<<<
 * 
 *         CV.Inner.dphi_max_dtheta = CV.Outer.dphi_max_dtheta = -1
 */
    __pyx_v_CV->Inner->phi_min = (__pyx_v_CV->Inner->phi_max - (2.0 * M_PI));

    /* "DanfossPDSim/asymm_scroll_geo.pyx":308
 *         CV.Inner.phi_min = CV.Inner.phi_max - 2*pi
 * 
 *         CV.Inner.dphi_max_dtheta = CV.Outer.dphi_max_dtheta = -1             # <<<<<<<<<<<<<<
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1
 *         CV.has_line_1 = False
 */
    __pyx_v_CV->Inner->dphi_max_dtheta = -1.0;
    __pyx_v_CV->Outer->dphi_max_dtheta = -1.0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":309
 * 
 *         CV.Inner.dphi_max_dtheta = CV.Outer.dphi_max_dtheta = -1
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1             # <<<<<<<<<<<<<<
 *         CV.has_line_1 = False
 *         CV.has_line_2 = False
 */
    __pyx_v_CV->Inner->dphi_min_dtheta = -1.0;
    __pyx_v_CV->Outer->dphi_min_dtheta = -1.0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":310
 *         CV.Inner.dphi_max_dtheta = CV.Outer.dphi_max_dtheta = -1
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1
 *         CV.has_line_1 = False             # <<<<<<<<<<<<<<
 *         CV.has_line_2 = False
 * 
 */
    __pyx_v_CV->has_line_1 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":311
 *         CV.Inner.dphi_min_dtheta = CV.Outer.dphi_min_dtheta = -1
 *         CV.has_line_1 = False
 *         CV.has_line_2 = False             # <<<<<<<<<<<<<<
 * 
 *     elif index == common.keyId2:
 */
    __pyx_v_CV->has_line_2 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":289
 *         CV.has_line_2 = False
 * 
 *     elif common.keyIc2_1 <= index <= common.keyIc2_10:             # <<<<<<<<<<<<<<
 *         # index 2001 is c2.1, 2002 is c2.2, etc.
 *         # alpha is the index of the compression pocket,
 */
    goto __pyx_L4;
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":313
 *         CV.has_line_2 = False
 * 
 *     elif index == common.keyId2:             # <<<<<<<<<<<<<<
 *         Nc2 = Nc(theta, geo, 2)
 *         CV.Outer.involute = common.INVOLUTE_OI
 */
  __pyx_t_2 = ((__pyx_v_index == __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyId2) != 0);
  if (likely(__pyx_t_2)) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":314
 * 
 *     elif index == common.keyId2:
 *         Nc2 = Nc(theta, geo, 2)             # <<<<<<<<<<<<<<
 *         CV.Outer.involute = common.INVOLUTE_OI
 *         CV.Outer.phi_0 = geo.phi_oi0
 */
    __pyx_v_Nc2 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Nc(__pyx_v_theta, __pyx_v_geo, 2, 0);

    /* "DanfossPDSim/asymm_scroll_geo.pyx":315
 *     elif index == common.keyId2:
 *         Nc2 = Nc(theta, geo, 2)
 *         CV.Outer.involute = common.INVOLUTE_OI             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_0 = geo.phi_oi0
 *         CV.Outer.phi_max = geo.phi_oie - theta_star - 2*pi*(Nc2)
 */
    __pyx_v_CV->Outer->involute = __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OI;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":316
 *         Nc2 = Nc(theta, geo, 2)
 *         CV.Outer.involute = common.INVOLUTE_OI
 *         CV.Outer.phi_0 = geo.phi_oi0             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_max = geo.phi_oie - theta_star - 2*pi*(Nc2)
 *         CV.Outer.phi_min = geo.phi_fos + pi
 */
    __pyx_t_5 = __pyx_v_geo->__pyx_base.phi_oi0;
    __pyx_v_CV->Outer->phi_0 = __pyx_t_5;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":317
 *         CV.Outer.involute = common.INVOLUTE_OI
 *         CV.Outer.phi_0 = geo.phi_oi0
 *         CV.Outer.phi_max = geo.phi_oie - theta_star - 2*pi*(Nc2)             # <<<<<<<<<<<<<<
 *         CV.Outer.phi_min = geo.phi_fos + pi
 *         CV.Outer.dphi_max_dtheta = -1
 */
    __pyx_v_CV->Outer->phi_max = ((__pyx_v_geo->__pyx_base.phi_oie - __pyx_v_theta_star) - ((2.0 * M_PI) * __pyx_v_Nc2));

    /* "DanfossPDSim/asymm_scroll_geo.pyx":318
 *         CV.Outer.phi_0 = geo.phi_oi0
 *         CV.Outer.phi_max = geo.phi_oie - theta_star - 2*pi*(Nc2)
 *         CV.Outer.phi_min = geo.phi_fos + pi             # <<<<<<<<<<<<<<
 *         CV.Outer.dphi_max_dtheta = -1
 *         CV.Outer.dphi_min_dtheta = 0
 */
    __pyx_v_CV->Outer->phi_min = (__pyx_v_geo->__pyx_base.phi_fos + M_PI);

    /* "DanfossPDSim/asymm_scroll_geo.pyx":319
 *         CV.Outer.phi_max = geo.phi_oie - theta_star - 2*pi*(Nc2)
 *         CV.Outer.phi_min = geo.phi_fos + pi
 *         CV.Outer.dphi_max_dtheta = -1             # <<<<<<<<<<<<<<
 *         CV.Outer.dphi_min_dtheta = 0
 * 
 */
    __pyx_v_CV->Outer->dphi_max_dtheta = -1.0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":320
 *         CV.Outer.phi_min = geo.phi_fos + pi
 *         CV.Outer.dphi_max_dtheta = -1
 *         CV.Outer.dphi_min_dtheta = 0             # <<<<<<<<<<<<<<
 * 
 *         CV.Inner.involute = common.INVOLUTE_FO
 */
    __pyx_v_CV->Outer->dphi_min_dtheta = 0.0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":322
 *         CV.Outer.dphi_min_dtheta = 0
 * 
 *         CV.Inner.involute = common.INVOLUTE_FO             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_0 = geo.phi_fo0
 *         CV.Inner.phi_max = geo.phi_oie - pi - theta_star - 2*pi*(Nc2)
 */
    __pyx_v_CV->Inner->involute = __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FO;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":323
 * 
 *         CV.Inner.involute = common.INVOLUTE_FO
 *         CV.Inner.phi_0 = geo.phi_fo0             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_max = geo.phi_oie - pi - theta_star - 2*pi*(Nc2)
 *         CV.Inner.phi_min = geo.phi_fos
 */
    __pyx_t_5 = __pyx_v_geo->__pyx_base.phi_fo0;
    __pyx_v_CV->Inner->phi_0 = __pyx_t_5;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":324
 *         CV.Inner.involute = common.INVOLUTE_FO
 *         CV.Inner.phi_0 = geo.phi_fo0
 *         CV.Inner.phi_max = geo.phi_oie - pi - theta_star - 2*pi*(Nc2)             # <<<<<<<<<<<<<<
 *         CV.Inner.phi_min = geo.phi_fos
 *         CV.Inner.dphi_max_dtheta = -1
 */
    __pyx_v_CV->Inner->phi_max = (((__pyx_v_geo->__pyx_base.phi_oie - M_PI) - __pyx_v_theta_star) - ((2.0 * M_PI) * __pyx_v_Nc2));

    /* "DanfossPDSim/asymm_scroll_geo.pyx":325
 *         CV.Inner.phi_0 = geo.phi_fo0
 *         CV.Inner.phi_max = geo.phi_oie - pi - theta_star - 2*pi*(Nc2)
 *         CV.Inner.phi_min = geo.phi_fos             # <<<<<<<<<<<<<<
 *         CV.Inner.dphi_max_dtheta = -1
 *         CV.Inner.dphi_min_dtheta = 0
 */
    __pyx_t_5 = __pyx_v_geo->__pyx_base.phi_fos;
    __pyx_v_CV->Inner->phi_min = __pyx_t_5;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":326
 *         CV.Inner.phi_max = geo.phi_oie - pi - theta_star - 2*pi*(Nc2)
 *         CV.Inner.phi_min = geo.phi_fos
 *         CV.Inner.dphi_max_dtheta = -1             # <<<<<<<<<<<<<<
 *         CV.Inner.dphi_min_dtheta = 0
 *         CV.has_line_1 = False
 */
    __pyx_v_CV->Inner->dphi_max_dtheta = -1.0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":327
 *         CV.Inner.phi_min = geo.phi_fos
 *         CV.Inner.dphi_max_dtheta = -1
 *         CV.Inner.dphi_min_dtheta = 0             # <<<<<<<<<<<<<<
 *         CV.has_line_1 = False
 *         CV.has_line_2 = True
 */
    __pyx_v_CV->Inner->dphi_min_dtheta = 0.0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":328
 *         CV.Inner.dphi_max_dtheta = -1
 *         CV.Inner.dphi_min_dtheta = 0
 *         CV.has_line_1 = False             # <<<<<<<<<<<<<<
 *         CV.has_line_2 = True
 * 
 */
    __pyx_v_CV->has_line_1 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":329
 *         CV.Inner.dphi_min_dtheta = 0
 *         CV.has_line_1 = False
 *         CV.has_line_2 = True             # <<<<<<<<<<<<<<
 * 
 *     else:
 */
    __pyx_v_CV->has_line_2 = 1;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":313
 *         CV.has_line_2 = False
 * 
 *     elif index == common.keyId2:             # <<<<<<<<<<<<<<
 *         Nc2 = Nc(theta, geo, 2)
 *         CV.Outer.involute = common.INVOLUTE_OI
 */
    goto __pyx_L4;
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":332
 * 
 *     else:
 *         raise KeyError("index [{s:d}] not valid".format(s=index))             # <<<<<<<<<<<<<<
 * 
 *     return CV
 */
  /*else*/ {
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_index_s_d_not_valid, __pyx_n_s_format); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_index); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_s, __pyx_t_9) < 0) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 332, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":334
 *         raise KeyError("index [{s:d}] not valid".format(s=index))
 * 
 *     return CV             # <<<<<<<<<<<<<<
 * 
 * cpdef double theta_d(DanfossGeoVals geo, int path) except *:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_CV));
  __pyx_r = __pyx_v_CV;
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":191
 *         raise ValueError
 * 
 * cpdef CVInvolutes CVangles(double theta, DanfossGeoVals geo, int index):             # <<<<<<<<<<<<<<
 *     """
 *     Get the involute angles for the inner and outer involutes which form the given control volume
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.CVangles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_CV);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_11CVangles(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_10CVangles[] = "CVangles(double theta, DanfossGeoVals geo, int index) -> CVInvolutes\n\n    Get the involute angles for the inner and outer involutes which form the given control volume\n\n    Returns\n    -------\n    CVInvolutes : a :class:`PDSim.scroll.common_scroll_geo.CVInvolutes` class instance\n    ";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_11CVangles(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_theta;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CVangles (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_geo,&__pyx_n_s_index,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CVangles", 1, 3, 3, 1); __PYX_ERR(0, 191, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CVangles", 1, 3, 3, 2); __PYX_ERR(0, 191, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "CVangles") < 0)) __PYX_ERR(0, 191, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 191, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[1]);
    __pyx_v_index = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 191, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CVangles", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 191, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.CVangles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 191, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_10CVangles(__pyx_self, __pyx_v_theta, __pyx_v_geo, __pyx_v_index);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_10CVangles(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CVangles", 0);
  __Pyx_TraceCall("CVangles (wrapper)", __pyx_f[0], 191, 0, __PYX_ERR(0, 191, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta, __pyx_v_geo, __pyx_v_index, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.CVangles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":336
 *     return CV
 * 
 * cpdef double theta_d(DanfossGeoVals geo, int path) except *:             # <<<<<<<<<<<<<<
 *     """
 *     Discharge angle for the first path, s1, c1.x, d1 in the range 0,2*pi
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_13theta_d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_12DanfossPDSim_16asymm_scroll_geo_theta_d(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, int __pyx_v_path, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_N_c_max;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("theta_d", 0);
  __Pyx_TraceCall("theta_d", __pyx_f[0], 336, 0, __PYX_ERR(0, 336, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":349
 *     """
 *     cdef CVInvolutes angles
 *     if path == 1 or path == 2:             # <<<<<<<<<<<<<<
 *         # Determine the "ending" angle on the orbiting scroll that is in
 *         # contact with the ending angle of the fixed scroll at theta=0
 */
  switch (__pyx_v_path) {
    case 1:
    case 2:

    /* "DanfossPDSim/asymm_scroll_geo.pyx":352
 *         # Determine the "ending" angle on the orbiting scroll that is in
 *         # contact with the ending angle of the fixed scroll at theta=0
 *         N_c_max = floor((geo.phi_fie-(geo.phi_oos+pi))/(2*pi)) # At theta = 0             # <<<<<<<<<<<<<<
 *         return geo.phi_fie - pi - 2*pi*N_c_max - geo.phi_oos
 *     else:
 */
    __pyx_t_1 = (__pyx_v_geo->__pyx_base.phi_fie - (__pyx_v_geo->__pyx_base.phi_oos + M_PI));
    __pyx_t_2 = (2.0 * M_PI);
    if (unlikely(__pyx_t_2 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 352, __pyx_L1_error)
    }
    __pyx_v_N_c_max = floor((__pyx_t_1 / __pyx_t_2));

    /* "DanfossPDSim/asymm_scroll_geo.pyx":353
 *         # contact with the ending angle of the fixed scroll at theta=0
 *         N_c_max = floor((geo.phi_fie-(geo.phi_oos+pi))/(2*pi)) # At theta = 0
 *         return geo.phi_fie - pi - 2*pi*N_c_max - geo.phi_oos             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError
 */
    __pyx_r = (((__pyx_v_geo->__pyx_base.phi_fie - M_PI) - ((2.0 * M_PI) * __pyx_v_N_c_max)) - __pyx_v_geo->__pyx_base.phi_oos);
    goto __pyx_L0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":349
 *     """
 *     cdef CVInvolutes angles
 *     if path == 1 or path == 2:             # <<<<<<<<<<<<<<
 *         # Determine the "ending" angle on the orbiting scroll that is in
 *         # contact with the ending angle of the fixed scroll at theta=0
 */
    break;
    default:

    /* "DanfossPDSim/asymm_scroll_geo.pyx":355
 *         return geo.phi_fie - pi - 2*pi*N_c_max - geo.phi_oos
 *     else:
 *         raise ValueError             # <<<<<<<<<<<<<<
 * 
 * cpdef int Nc(double theta, DanfossGeoVals geo, int path):
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(0, 355, __pyx_L1_error)
    break;
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":336
 *     return CV
 * 
 * cpdef double theta_d(DanfossGeoVals geo, int path) except *:             # <<<<<<<<<<<<<<
 *     """
 *     Discharge angle for the first path, s1, c1.x, d1 in the range 0,2*pi
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.theta_d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_13theta_d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_12theta_d[] = "theta_d(DanfossGeoVals geo, int path) -> double\n\n    Discharge angle for the first path, s1, c1.x, d1 in the range 0,2*pi\n\n    Condition for discharge angle is:\n\n    geo.phi_ooe - theta - alpha*2*pi  = geo.phi_oos\n\n    NOTE:\n    For externally asymmetric scroll wrap, theta_d is the same for both paths.  You can\n    see this clearly from looking at a plot of the scroll wraps and their control volumes\n    ";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_13theta_d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  int __pyx_v_path;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("theta_d (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_geo,&__pyx_n_s_path,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("theta_d", 1, 2, 2, 1); __PYX_ERR(0, 336, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "theta_d") < 0)) __PYX_ERR(0, 336, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[0]);
    __pyx_v_path = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_path == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("theta_d", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 336, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.theta_d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 336, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_12theta_d(__pyx_self, __pyx_v_geo, __pyx_v_path);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_12theta_d(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, int __pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("theta_d", 0);
  __Pyx_TraceCall("theta_d (wrapper)", __pyx_f[0], 336, 0, __PYX_ERR(0, 336, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_theta_d(__pyx_v_geo, __pyx_v_path, 0); if (unlikely(__pyx_t_1 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.theta_d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":357
 *         raise ValueError
 * 
 * cpdef int Nc(double theta, DanfossGeoVals geo, int path):             # <<<<<<<<<<<<<<
 *     """
 *     The number of pairs of compression chambers in existence at a given
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_15Nc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Nc(double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, int __pyx_v_path, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_angles = 0;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Nc", 0);
  __Pyx_TraceCall("Nc", __pyx_f[0], 357, 0, __PYX_ERR(0, 357, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":379
 *     """
 *     cdef CVInvolutes angles
 *     if path == 1:             # <<<<<<<<<<<<<<
 *         angles = CVangles(theta, geo, common.keyIs1)
 *         return int(floor((angles.Inner.phi_min-geo.phi_oos)/(2*pi)))
 */
  switch (__pyx_v_path) {
    case 1:

    /* "DanfossPDSim/asymm_scroll_geo.pyx":380
 *     cdef CVInvolutes angles
 *     if path == 1:
 *         angles = CVangles(theta, geo, common.keyIs1)             # <<<<<<<<<<<<<<
 *         return int(floor((angles.Inner.phi_min-geo.phi_oos)/(2*pi)))
 *     elif path == 2:
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta, __pyx_v_geo, __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIs1, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_angles = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":381
 *     if path == 1:
 *         angles = CVangles(theta, geo, common.keyIs1)
 *         return int(floor((angles.Inner.phi_min-geo.phi_oos)/(2*pi)))             # <<<<<<<<<<<<<<
 *     elif path == 2:
 *         angles = CVangles(theta, geo, common.keyIs2)
 */
    __pyx_t_2 = (__pyx_v_angles->Inner->phi_min - __pyx_v_geo->__pyx_base.phi_oos);
    __pyx_t_3 = (2.0 * M_PI);
    if (unlikely(__pyx_t_3 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 381, __pyx_L1_error)
    }
    __pyx_r = ((int)floor((__pyx_t_2 / __pyx_t_3)));
    goto __pyx_L0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":379
 *     """
 *     cdef CVInvolutes angles
 *     if path == 1:             # <<<<<<<<<<<<<<
 *         angles = CVangles(theta, geo, common.keyIs1)
 *         return int(floor((angles.Inner.phi_min-geo.phi_oos)/(2*pi)))
 */
    break;
    case 2:

    /* "DanfossPDSim/asymm_scroll_geo.pyx":383
 *         return int(floor((angles.Inner.phi_min-geo.phi_oos)/(2*pi)))
 *     elif path == 2:
 *         angles = CVangles(theta, geo, common.keyIs2)             # <<<<<<<<<<<<<<
 *         return int(floor((angles.Inner.phi_min-geo.phi_fos)/(2*pi)))
 *     else:
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta, __pyx_v_geo, __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIs2, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_angles = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":384
 *     elif path == 2:
 *         angles = CVangles(theta, geo, common.keyIs2)
 *         return int(floor((angles.Inner.phi_min-geo.phi_fos)/(2*pi)))             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError("path is invalid: "+str(path))
 */
    __pyx_t_3 = (__pyx_v_angles->Inner->phi_min - __pyx_v_geo->__pyx_base.phi_fos);
    __pyx_t_2 = (2.0 * M_PI);
    if (unlikely(__pyx_t_2 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 384, __pyx_L1_error)
    }
    __pyx_r = ((int)floor((__pyx_t_3 / __pyx_t_2)));
    goto __pyx_L0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":382
 *         angles = CVangles(theta, geo, common.keyIs1)
 *         return int(floor((angles.Inner.phi_min-geo.phi_oos)/(2*pi)))
 *     elif path == 2:             # <<<<<<<<<<<<<<
 *         angles = CVangles(theta, geo, common.keyIs2)
 *         return int(floor((angles.Inner.phi_min-geo.phi_fos)/(2*pi)))
 */
    break;
    default:

    /* "DanfossPDSim/asymm_scroll_geo.pyx":386
 *         return int(floor((angles.Inner.phi_min-geo.phi_fos)/(2*pi)))
 *     else:
 *         raise ValueError("path is invalid: "+str(path))             # <<<<<<<<<<<<<<
 * 
 * cpdef int getNc(double theta, DanfossGeoVals geo, int path):
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_kp_s_path_is_invalid, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 386, __pyx_L1_error)
    break;
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":357
 *         raise ValueError
 * 
 * cpdef int Nc(double theta, DanfossGeoVals geo, int path):             # <<<<<<<<<<<<<<
 *     """
 *     The number of pairs of compression chambers in existence at a given
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("DanfossPDSim.asymm_scroll_geo.Nc", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_angles);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_15Nc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_14Nc[] = "Nc(double theta, DanfossGeoVals geo, int path) -> int\n\n    The number of pairs of compression chambers in existence at a given\n    crank angle\n\n    Arguments:\n        theta : float\n            The crank angle in radians.\n        geo : DanfossGeoVals instance\n        path : int\n            The path index; 1 for s1, c1.x, d1\n\n    Returns:\n        Nc : int\n            Number of pairs of compressions chambers\n\n    NOTE:\n    For externally asymmetric scroll wrap, theta_d is the same for both paths.  You can\n    see this clearly from looking at a plot of the scroll wraps and their control volumes\n\n    ";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_15Nc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_theta;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  int __pyx_v_path;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Nc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_geo,&__pyx_n_s_path,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Nc", 1, 3, 3, 1); __PYX_ERR(0, 357, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Nc", 1, 3, 3, 2); __PYX_ERR(0, 357, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Nc") < 0)) __PYX_ERR(0, 357, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[1]);
    __pyx_v_path = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_path == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Nc", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 357, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.Nc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 357, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14Nc(__pyx_self, __pyx_v_theta, __pyx_v_geo, __pyx_v_path);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_14Nc(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, int __pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Nc", 0);
  __Pyx_TraceCall("Nc (wrapper)", __pyx_f[0], 357, 0, __PYX_ERR(0, 357, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_12DanfossPDSim_16asymm_scroll_geo_Nc(__pyx_v_theta, __pyx_v_geo, __pyx_v_path, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.Nc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":388
 *         raise ValueError("path is invalid: "+str(path))
 * 
 * cpdef int getNc(double theta, DanfossGeoVals geo, int path):             # <<<<<<<<<<<<<<
 *     """
 *     A passthrough alias to be the same as the symmetric geometry module
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_17getNc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_12DanfossPDSim_16asymm_scroll_geo_getNc(double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, int __pyx_v_path, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNc", 0);
  __Pyx_TraceCall("getNc", __pyx_f[0], 388, 0, __PYX_ERR(0, 388, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":394
 *     See Nc()
 *     """
 *     return Nc(theta, geo, path)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Nc(__pyx_v_theta, __pyx_v_geo, __pyx_v_path, 0);
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":388
 *         raise ValueError("path is invalid: "+str(path))
 * 
 * cpdef int getNc(double theta, DanfossGeoVals geo, int path):             # <<<<<<<<<<<<<<
 *     """
 *     A passthrough alias to be the same as the symmetric geometry module
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("DanfossPDSim.asymm_scroll_geo.getNc", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_17getNc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_16getNc[] = "getNc(double theta, DanfossGeoVals geo, int path) -> int\n\n    A passthrough alias to be the same as the symmetric geometry module\n\n    See Nc()\n    ";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_17getNc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_theta;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  int __pyx_v_path;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_geo,&__pyx_n_s_path,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNc", 1, 3, 3, 1); __PYX_ERR(0, 388, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNc", 1, 3, 3, 2); __PYX_ERR(0, 388, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNc") < 0)) __PYX_ERR(0, 388, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 388, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[1]);
    __pyx_v_path = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_path == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 388, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNc", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 388, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.getNc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 388, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_16getNc(__pyx_self, __pyx_v_theta, __pyx_v_geo, __pyx_v_path);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_16getNc(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, int __pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNc", 0);
  __Pyx_TraceCall("getNc (wrapper)", __pyx_f[0], 388, 0, __PYX_ERR(0, 388, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_12DanfossPDSim_16asymm_scroll_geo_getNc(__pyx_v_theta, __pyx_v_geo, __pyx_v_path, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.getNc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":397
 * 
 * 
 * cpdef double Green_circle(double t, double r, double x0, double y0):             # <<<<<<<<<<<<<<
 *     """ Anti-derivative for arc segment on fixed scroll """
 *     return r*(r*t + x0*sin(t) - y0*cos(t))
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_19Green_circle(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle(double __pyx_v_t, double __pyx_v_r, double __pyx_v_x0, double __pyx_v_y0, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Green_circle", 0);
  __Pyx_TraceCall("Green_circle", __pyx_f[0], 397, 0, __PYX_ERR(0, 397, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":399
 * cpdef double Green_circle(double t, double r, double x0, double y0):
 *     """ Anti-derivative for arc segment on fixed scroll """
 *     return r*(r*t + x0*sin(t) - y0*cos(t))             # <<<<<<<<<<<<<<
 * 
 * cdef double Green_circle_orb(double t, double r, double x0, double y0, double r_o, double Theta):
 */
  __pyx_r = (__pyx_v_r * (((__pyx_v_r * __pyx_v_t) + (__pyx_v_x0 * sin(__pyx_v_t))) - (__pyx_v_y0 * cos(__pyx_v_t))));
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":397
 * 
 * 
 * cpdef double Green_circle(double t, double r, double x0, double y0):             # <<<<<<<<<<<<<<
 *     """ Anti-derivative for arc segment on fixed scroll """
 *     return r*(r*t + x0*sin(t) - y0*cos(t))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("DanfossPDSim.asymm_scroll_geo.Green_circle", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_19Green_circle(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_18Green_circle[] = "Green_circle(double t, double r, double x0, double y0) -> double\n Anti-derivative for arc segment on fixed scroll ";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_19Green_circle(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_t;
  double __pyx_v_r;
  double __pyx_v_x0;
  double __pyx_v_y0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Green_circle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_r,&__pyx_n_s_x0,&__pyx_n_s_y0,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Green_circle", 1, 4, 4, 1); __PYX_ERR(0, 397, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Green_circle", 1, 4, 4, 2); __PYX_ERR(0, 397, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Green_circle", 1, 4, 4, 3); __PYX_ERR(0, 397, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Green_circle") < 0)) __PYX_ERR(0, 397, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 397, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_r == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 397, __pyx_L3_error)
    __pyx_v_x0 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_x0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 397, __pyx_L3_error)
    __pyx_v_y0 = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_y0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 397, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Green_circle", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 397, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.Green_circle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_18Green_circle(__pyx_self, __pyx_v_t, __pyx_v_r, __pyx_v_x0, __pyx_v_y0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_18Green_circle(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_t, double __pyx_v_r, double __pyx_v_x0, double __pyx_v_y0) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Green_circle", 0);
  __Pyx_TraceCall("Green_circle (wrapper)", __pyx_f[0], 397, 0, __PYX_ERR(0, 397, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle(__pyx_v_t, __pyx_v_r, __pyx_v_x0, __pyx_v_y0, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.Green_circle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":401
 *     return r*(r*t + x0*sin(t) - y0*cos(t))
 * 
 * cdef double Green_circle_orb(double t, double r, double x0, double y0, double r_o, double Theta):             # <<<<<<<<<<<<<<
 *     """ Anti-derivative for arc segment on orbiting scroll """
 *     return r*(r*t - r_o*sin(t - Theta) + x0*sin(t) - y0*cos(t))
 */

static double __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle_orb(double __pyx_v_t, double __pyx_v_r, double __pyx_v_x0, double __pyx_v_y0, double __pyx_v_r_o, double __pyx_v_Theta) {
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Green_circle_orb", 0);
  __Pyx_TraceCall("Green_circle_orb", __pyx_f[0], 401, 0, __PYX_ERR(0, 401, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":403
 * cdef double Green_circle_orb(double t, double r, double x0, double y0, double r_o, double Theta):
 *     """ Anti-derivative for arc segment on orbiting scroll """
 *     return r*(r*t - r_o*sin(t - Theta) + x0*sin(t) - y0*cos(t))             # <<<<<<<<<<<<<<
 * 
 * cdef double dGreen_circle_orb_dtheta(double t, double r, double x0, double y0, double r_o, double Theta):
 */
  __pyx_r = (__pyx_v_r * ((((__pyx_v_r * __pyx_v_t) - (__pyx_v_r_o * sin((__pyx_v_t - __pyx_v_Theta)))) + (__pyx_v_x0 * sin(__pyx_v_t))) - (__pyx_v_y0 * cos(__pyx_v_t))));
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":401
 *     return r*(r*t + x0*sin(t) - y0*cos(t))
 * 
 * cdef double Green_circle_orb(double t, double r, double x0, double y0, double r_o, double Theta):             # <<<<<<<<<<<<<<
 *     """ Anti-derivative for arc segment on orbiting scroll """
 *     return r*(r*t - r_o*sin(t - Theta) + x0*sin(t) - y0*cos(t))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("DanfossPDSim.asymm_scroll_geo.Green_circle_orb", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":405
 *     return r*(r*t - r_o*sin(t - Theta) + x0*sin(t) - y0*cos(t))
 * 
 * cdef double dGreen_circle_orb_dtheta(double t, double r, double x0, double y0, double r_o, double Theta):             # <<<<<<<<<<<<<<
 *     """ Derivative of anti-derivative for arc segment on fixed scroll with respect to crank angle """
 *     return -r*r_o*cos(t-Theta)
 */

static double __pyx_f_12DanfossPDSim_16asymm_scroll_geo_dGreen_circle_orb_dtheta(double __pyx_v_t, double __pyx_v_r, CYTHON_UNUSED double __pyx_v_x0, CYTHON_UNUSED double __pyx_v_y0, double __pyx_v_r_o, double __pyx_v_Theta) {
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dGreen_circle_orb_dtheta", 0);
  __Pyx_TraceCall("dGreen_circle_orb_dtheta", __pyx_f[0], 405, 0, __PYX_ERR(0, 405, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":407
 * cdef double dGreen_circle_orb_dtheta(double t, double r, double x0, double y0, double r_o, double Theta):
 *     """ Derivative of anti-derivative for arc segment on fixed scroll with respect to crank angle """
 *     return -r*r_o*cos(t-Theta)             # <<<<<<<<<<<<<<
 * 
 * cpdef VdVstruct SA(double theta, DanfossGeoVals geo):
 */
  __pyx_r = (((-__pyx_v_r) * __pyx_v_r_o) * cos((__pyx_v_t - __pyx_v_Theta)));
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":405
 *     return r*(r*t - r_o*sin(t - Theta) + x0*sin(t) - y0*cos(t))
 * 
 * cdef double dGreen_circle_orb_dtheta(double t, double r, double x0, double y0, double r_o, double Theta):             # <<<<<<<<<<<<<<
 *     """ Derivative of anti-derivative for arc segment on fixed scroll with respect to crank angle """
 *     return -r*r_o*cos(t-Theta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("DanfossPDSim.asymm_scroll_geo.dGreen_circle_orb_dtheta", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":409
 *     return -r*r_o*cos(t-Theta)
 * 
 * cpdef VdVstruct SA(double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 *     r = (2*pi*geo.rb-geo.t)/2.0
 * 
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_21SA(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_SA(double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_r;
  double __pyx_v_xee;
  double __pyx_v_yee;
  double __pyx_v_xse;
  double __pyx_v_yse;
  double __pyx_v_xoie;
  double __pyx_v_yoie;
  double __pyx_v_xooe;
  double __pyx_v_yooe;
  double __pyx_v_xfie;
  double __pyx_v_yfie;
  double __pyx_v_xssa;
  double __pyx_v_yssa;
  double __pyx_v_dx_2_dtheta;
  double __pyx_v_dy_2_dtheta;
  double __pyx_v_dx_3_dtheta;
  double __pyx_v_dy_3_dtheta;
  double __pyx_v_dxssa_dphi;
  double __pyx_v_dyssa_dphi;
  double __pyx_v_dxssa_dtheta;
  double __pyx_v_dyssa_dtheta;
  double __pyx_v_dxfie_dtheta;
  double __pyx_v_dyfie_dtheta;
  PyObject *__pyx_v_phi_s_sa = NULL;
  PyObject *__pyx_v_d_phi_s_sa_dtheta = NULL;
  double __pyx_v_x0;
  double __pyx_v_y0;
  double __pyx_v_x_1;
  double __pyx_v_y_1;
  double __pyx_v_x_2;
  double __pyx_v_y_2;
  double __pyx_v_x_3;
  double __pyx_v_y_3;
  CYTHON_UNUSED double __pyx_v_x_4;
  CYTHON_UNUSED double __pyx_v_y_4;
  double __pyx_v_beta;
  double __pyx_v_A_wall;
  double __pyx_v_A_circle;
  double __pyx_v_A_line1;
  double __pyx_v_A_line2;
  double __pyx_v_A_oo;
  double __pyx_v_A_line3;
  double __pyx_v_V;
  double __pyx_v_dx_1_dtheta;
  double __pyx_v_dy_1_dtheta;
  CYTHON_UNUSED double __pyx_v_dx_4_dtheta;
  CYTHON_UNUSED double __pyx_v_dy_4_dtheta;
  PyObject *__pyx_v_dA_wall_dtheta = NULL;
  double __pyx_v_dA_circle_dtheta;
  double __pyx_v_dA_line1_dtheta;
  double __pyx_v_dA_line2_dtheta;
  PyObject *__pyx_v_dA_oo_dtheta = NULL;
  double __pyx_v_dA_line3_dtheta;
  PyObject *__pyx_v_dV = NULL;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_v_VdV = 0;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  double __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SA", 0);
  __Pyx_TraceCall("SA", __pyx_f[0], 409, 0, __PYX_ERR(0, 409, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":410
 * 
 * cpdef VdVstruct SA(double theta, DanfossGeoVals geo):
 *     r = (2*pi*geo.rb-geo.t)/2.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double xee,yee,xse,yse,xoie,yoie,xooe,yooe,xfie,yfie,xssa,yssa
 */
  __pyx_v_r = ((((2.0 * M_PI) * __pyx_v_geo->__pyx_base.rb) - __pyx_v_geo->__pyx_base.t) / 2.0);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":413
 * 
 *     cdef double xee,yee,xse,yse,xoie,yoie,xooe,yooe,xfie,yfie,xssa,yssa
 *     cdef double dx_2_dtheta, dy_2_dtheta, dx_3_dtheta, dy_3_dtheta, dxssa_dphi=0, dyssa_dphi=0, dxssa_dtheta=0, dyssa_dtheta=0, dxfie_dtheta=0, dyfie_dtheta=0             # <<<<<<<<<<<<<<
 * 
 *     phi_s_sa, d_phi_s_sa_dtheta = phi_s1_sa(theta, geo)
 */
  __pyx_v_dxssa_dphi = 0.0;
  __pyx_v_dyssa_dphi = 0.0;
  __pyx_v_dxssa_dtheta = 0.0;
  __pyx_v_dyssa_dtheta = 0.0;
  __pyx_v_dxfie_dtheta = 0.0;
  __pyx_v_dyfie_dtheta = 0.0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":415
 *     cdef double dx_2_dtheta, dy_2_dtheta, dx_3_dtheta, dy_3_dtheta, dxssa_dphi=0, dyssa_dphi=0, dxssa_dtheta=0, dyssa_dtheta=0, dxfie_dtheta=0, dyfie_dtheta=0
 * 
 *     phi_s_sa, d_phi_s_sa_dtheta = phi_s1_sa(theta, geo)             # <<<<<<<<<<<<<<
 * 
 *     common._coords_inv_d_int(geo.phi_oie + pi,geo,0.0,common.INVOLUTE_FI, &xee, &yee)
 */
  __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_phi_s1_sa(__pyx_v_theta, __pyx_v_geo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 415, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 415, __pyx_L1_error)
  }
  __pyx_v_phi_s_sa = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_d_phi_s_sa_dtheta = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":417
 *     phi_s_sa, d_phi_s_sa_dtheta = phi_s1_sa(theta, geo)
 * 
 *     common._coords_inv_d_int(geo.phi_oie + pi,geo,0.0,common.INVOLUTE_FI, &xee, &yee)             # <<<<<<<<<<<<<<
 *     common._coords_inv_d_int(geo.phi_oie - pi,geo,0.0,common.INVOLUTE_FO, &xse, &yse)
 *     common._coords_inv_d_int(geo.phi_oie,geo,theta,common.INVOLUTE_OI, &xoie, &yoie)
 */
  __pyx_t_1 = __pyx_f_5PDSim_6scroll_17common_scroll_geo__coords_inv_d_int((__pyx_v_geo->__pyx_base.phi_oie + M_PI), ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), 0.0, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FI, (&__pyx_v_xee), (&__pyx_v_yee)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":418
 * 
 *     common._coords_inv_d_int(geo.phi_oie + pi,geo,0.0,common.INVOLUTE_FI, &xee, &yee)
 *     common._coords_inv_d_int(geo.phi_oie - pi,geo,0.0,common.INVOLUTE_FO, &xse, &yse)             # <<<<<<<<<<<<<<
 *     common._coords_inv_d_int(geo.phi_oie,geo,theta,common.INVOLUTE_OI, &xoie, &yoie)
 *     common._coords_inv_d_int(geo.phi_ooe,geo,theta,common.INVOLUTE_OO, &xooe, &yooe)
 */
  __pyx_t_1 = __pyx_f_5PDSim_6scroll_17common_scroll_geo__coords_inv_d_int((__pyx_v_geo->__pyx_base.phi_oie - M_PI), ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), 0.0, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FO, (&__pyx_v_xse), (&__pyx_v_yse)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":419
 *     common._coords_inv_d_int(geo.phi_oie + pi,geo,0.0,common.INVOLUTE_FI, &xee, &yee)
 *     common._coords_inv_d_int(geo.phi_oie - pi,geo,0.0,common.INVOLUTE_FO, &xse, &yse)
 *     common._coords_inv_d_int(geo.phi_oie,geo,theta,common.INVOLUTE_OI, &xoie, &yoie)             # <<<<<<<<<<<<<<
 *     common._coords_inv_d_int(geo.phi_ooe,geo,theta,common.INVOLUTE_OO, &xooe, &yooe)
 *     common._coords_inv_d_int(geo.phi_fie,geo,theta,common.INVOLUTE_FI, &xfie, &yfie)
 */
  __pyx_t_1 = __pyx_f_5PDSim_6scroll_17common_scroll_geo__coords_inv_d_int(__pyx_v_geo->__pyx_base.phi_oie, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OI, (&__pyx_v_xoie), (&__pyx_v_yoie)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":420
 *     common._coords_inv_d_int(geo.phi_oie - pi,geo,0.0,common.INVOLUTE_FO, &xse, &yse)
 *     common._coords_inv_d_int(geo.phi_oie,geo,theta,common.INVOLUTE_OI, &xoie, &yoie)
 *     common._coords_inv_d_int(geo.phi_ooe,geo,theta,common.INVOLUTE_OO, &xooe, &yooe)             # <<<<<<<<<<<<<<
 *     common._coords_inv_d_int(geo.phi_fie,geo,theta,common.INVOLUTE_FI, &xfie, &yfie)
 *     common._coords_inv_d_int(phi_s_sa,geo,theta,common.INVOLUTE_OO, &xssa, &yssa)
 */
  __pyx_t_1 = __pyx_f_5PDSim_6scroll_17common_scroll_geo__coords_inv_d_int(__pyx_v_geo->__pyx_base.phi_ooe, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OO, (&__pyx_v_xooe), (&__pyx_v_yooe)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":421
 *     common._coords_inv_d_int(geo.phi_oie,geo,theta,common.INVOLUTE_OI, &xoie, &yoie)
 *     common._coords_inv_d_int(geo.phi_ooe,geo,theta,common.INVOLUTE_OO, &xooe, &yooe)
 *     common._coords_inv_d_int(geo.phi_fie,geo,theta,common.INVOLUTE_FI, &xfie, &yfie)             # <<<<<<<<<<<<<<
 *     common._coords_inv_d_int(phi_s_sa,geo,theta,common.INVOLUTE_OO, &xssa, &yssa)
 *     x0, y0 = (xee+xse)/2, (yee+yse)/2
 */
  __pyx_t_1 = __pyx_f_5PDSim_6scroll_17common_scroll_geo__coords_inv_d_int(__pyx_v_geo->__pyx_base.phi_fie, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FI, (&__pyx_v_xfie), (&__pyx_v_yfie)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":422
 *     common._coords_inv_d_int(geo.phi_ooe,geo,theta,common.INVOLUTE_OO, &xooe, &yooe)
 *     common._coords_inv_d_int(geo.phi_fie,geo,theta,common.INVOLUTE_FI, &xfie, &yfie)
 *     common._coords_inv_d_int(phi_s_sa,geo,theta,common.INVOLUTE_OO, &xssa, &yssa)             # <<<<<<<<<<<<<<
 *     x0, y0 = (xee+xse)/2, (yee+yse)/2
 * 
 */
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_phi_s_sa); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 422, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_5PDSim_6scroll_17common_scroll_geo__coords_inv_d_int(__pyx_t_4, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OO, (&__pyx_v_xssa), (&__pyx_v_yssa)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":423
 *     common._coords_inv_d_int(geo.phi_fie,geo,theta,common.INVOLUTE_FI, &xfie, &yfie)
 *     common._coords_inv_d_int(phi_s_sa,geo,theta,common.INVOLUTE_OO, &xssa, &yssa)
 *     x0, y0 = (xee+xse)/2, (yee+yse)/2             # <<<<<<<<<<<<<<
 * 
 *     x_1 = xse; y_1 = yse
 */
  __pyx_t_4 = ((__pyx_v_xee + __pyx_v_xse) / 2.0);
  __pyx_t_5 = ((__pyx_v_yee + __pyx_v_yse) / 2.0);
  __pyx_v_x0 = __pyx_t_4;
  __pyx_v_y0 = __pyx_t_5;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":425
 *     x0, y0 = (xee+xse)/2, (yee+yse)/2
 * 
 *     x_1 = xse; y_1 = yse             # <<<<<<<<<<<<<<
 *     x_2 = xoie; y_2 = yoie
 *     x_3 = xooe; y_3 = yooe
 */
  __pyx_v_x_1 = __pyx_v_xse;
  __pyx_v_y_1 = __pyx_v_yse;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":426
 * 
 *     x_1 = xse; y_1 = yse
 *     x_2 = xoie; y_2 = yoie             # <<<<<<<<<<<<<<
 *     x_3 = xooe; y_3 = yooe
 *     x_4 = xee; y_4 = yee
 */
  __pyx_v_x_2 = __pyx_v_xoie;
  __pyx_v_y_2 = __pyx_v_yoie;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":427
 *     x_1 = xse; y_1 = yse
 *     x_2 = xoie; y_2 = yoie
 *     x_3 = xooe; y_3 = yooe             # <<<<<<<<<<<<<<
 *     x_4 = xee; y_4 = yee
 * 
 */
  __pyx_v_x_3 = __pyx_v_xooe;
  __pyx_v_y_3 = __pyx_v_yooe;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":428
 *     x_2 = xoie; y_2 = yoie
 *     x_3 = xooe; y_3 = yooe
 *     x_4 = xee; y_4 = yee             # <<<<<<<<<<<<<<
 * 
 *     beta = atan2(yee-y0,xee-x0)
 */
  __pyx_v_x_4 = __pyx_v_xee;
  __pyx_v_y_4 = __pyx_v_yee;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":430
 *     x_4 = xee; y_4 = yee
 * 
 *     beta = atan2(yee-y0,xee-x0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_beta = atan2((__pyx_v_yee - __pyx_v_y0), (__pyx_v_xee - __pyx_v_x0));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":434
 * 
 *     ## ------------------------ VOLUME -------------------------------
 *     A_wall = 0.5*(Gr(geo.phi_oie + pi, geo, theta, INVOLUTE_FI) - Gr(geo.phi_fie, geo, theta, INVOLUTE_FI))             # <<<<<<<<<<<<<<
 *     A_circle = 0.5*(Green_circle(beta+pi, r, x0, y0) - Green_circle(beta, r, x0, y0))
 *     A_line1 = 0.5*(x_1*y_2 - x_2*y_1)
 */
  __pyx_v_A_wall = (0.5 * (__pyx_f_5PDSim_6scroll_17common_scroll_geo_Gr((__pyx_v_geo->__pyx_base.phi_oie + M_PI), ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FI, 0) - __pyx_f_5PDSim_6scroll_17common_scroll_geo_Gr(__pyx_v_geo->__pyx_base.phi_fie, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FI, 0)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":435
 *     ## ------------------------ VOLUME -------------------------------
 *     A_wall = 0.5*(Gr(geo.phi_oie + pi, geo, theta, INVOLUTE_FI) - Gr(geo.phi_fie, geo, theta, INVOLUTE_FI))
 *     A_circle = 0.5*(Green_circle(beta+pi, r, x0, y0) - Green_circle(beta, r, x0, y0))             # <<<<<<<<<<<<<<
 *     A_line1 = 0.5*(x_1*y_2 - x_2*y_1)
 *     A_line2 = 0.5*(x_2*y_3 - x_3*y_2)
 */
  __pyx_v_A_circle = (0.5 * (__pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle((__pyx_v_beta + M_PI), __pyx_v_r, __pyx_v_x0, __pyx_v_y0, 0) - __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle(__pyx_v_beta, __pyx_v_r, __pyx_v_x0, __pyx_v_y0, 0)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":436
 *     A_wall = 0.5*(Gr(geo.phi_oie + pi, geo, theta, INVOLUTE_FI) - Gr(geo.phi_fie, geo, theta, INVOLUTE_FI))
 *     A_circle = 0.5*(Green_circle(beta+pi, r, x0, y0) - Green_circle(beta, r, x0, y0))
 *     A_line1 = 0.5*(x_1*y_2 - x_2*y_1)             # <<<<<<<<<<<<<<
 *     A_line2 = 0.5*(x_2*y_3 - x_3*y_2)
 *     A_oo = 0.5*(Gr(geo.phi_oie, geo, theta, INVOLUTE_OO) - Gr(phi_s_sa, geo, theta, INVOLUTE_OO))
 */
  __pyx_v_A_line1 = (0.5 * ((__pyx_v_x_1 * __pyx_v_y_2) - (__pyx_v_x_2 * __pyx_v_y_1)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":437
 *     A_circle = 0.5*(Green_circle(beta+pi, r, x0, y0) - Green_circle(beta, r, x0, y0))
 *     A_line1 = 0.5*(x_1*y_2 - x_2*y_1)
 *     A_line2 = 0.5*(x_2*y_3 - x_3*y_2)             # <<<<<<<<<<<<<<
 *     A_oo = 0.5*(Gr(geo.phi_oie, geo, theta, INVOLUTE_OO) - Gr(phi_s_sa, geo, theta, INVOLUTE_OO))
 *     A_line3 = 0.5*(xssa*yfie - yssa*xfie)
 */
  __pyx_v_A_line2 = (0.5 * ((__pyx_v_x_2 * __pyx_v_y_3) - (__pyx_v_x_3 * __pyx_v_y_2)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":438
 *     A_line1 = 0.5*(x_1*y_2 - x_2*y_1)
 *     A_line2 = 0.5*(x_2*y_3 - x_3*y_2)
 *     A_oo = 0.5*(Gr(geo.phi_oie, geo, theta, INVOLUTE_OO) - Gr(phi_s_sa, geo, theta, INVOLUTE_OO))             # <<<<<<<<<<<<<<
 *     A_line3 = 0.5*(xssa*yfie - yssa*xfie)
 * 
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_phi_s_sa); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 438, __pyx_L1_error)
  __pyx_v_A_oo = (0.5 * (__pyx_f_5PDSim_6scroll_17common_scroll_geo_Gr(__pyx_v_geo->__pyx_base.phi_oie, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OO, 0) - __pyx_f_5PDSim_6scroll_17common_scroll_geo_Gr(__pyx_t_5, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OO, 0)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":439
 *     A_line2 = 0.5*(x_2*y_3 - x_3*y_2)
 *     A_oo = 0.5*(Gr(geo.phi_oie, geo, theta, INVOLUTE_OO) - Gr(phi_s_sa, geo, theta, INVOLUTE_OO))
 *     A_line3 = 0.5*(xssa*yfie - yssa*xfie)             # <<<<<<<<<<<<<<
 * 
 *     V = geo.h*(A_wall + A_circle + A_line1 + A_line2 + A_oo + A_line3)
 */
  __pyx_v_A_line3 = (0.5 * ((__pyx_v_xssa * __pyx_v_yfie) - (__pyx_v_yssa * __pyx_v_xfie)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":441
 *     A_line3 = 0.5*(xssa*yfie - yssa*xfie)
 * 
 *     V = geo.h*(A_wall + A_circle + A_line1 + A_line2 + A_oo + A_line3)             # <<<<<<<<<<<<<<
 * 
 *     dx_1_dtheta, dy_1_dtheta = 0.0, 0.0
 */
  __pyx_v_V = (__pyx_v_geo->__pyx_base.h * (((((__pyx_v_A_wall + __pyx_v_A_circle) + __pyx_v_A_line1) + __pyx_v_A_line2) + __pyx_v_A_oo) + __pyx_v_A_line3));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":443
 *     V = geo.h*(A_wall + A_circle + A_line1 + A_line2 + A_oo + A_line3)
 * 
 *     dx_1_dtheta, dy_1_dtheta = 0.0, 0.0             # <<<<<<<<<<<<<<
 *     common.coords_inv_dtheta(geo.phi_oie, geo, theta, INVOLUTE_OI, &dx_2_dtheta, &dy_2_dtheta)
 *     common.coords_inv_dtheta(geo.phi_ooe, geo, theta, INVOLUTE_OO, &dx_3_dtheta, &dy_3_dtheta)
 */
  __pyx_t_5 = 0.0;
  __pyx_t_4 = 0.0;
  __pyx_v_dx_1_dtheta = __pyx_t_5;
  __pyx_v_dy_1_dtheta = __pyx_t_4;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":444
 * 
 *     dx_1_dtheta, dy_1_dtheta = 0.0, 0.0
 *     common.coords_inv_dtheta(geo.phi_oie, geo, theta, INVOLUTE_OI, &dx_2_dtheta, &dy_2_dtheta)             # <<<<<<<<<<<<<<
 *     common.coords_inv_dtheta(geo.phi_ooe, geo, theta, INVOLUTE_OO, &dx_3_dtheta, &dy_3_dtheta)
 *     dx_4_dtheta, dy_4_dtheta = 0.0, 0.0
 */
  __pyx_t_1 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv_dtheta(__pyx_v_geo->__pyx_base.phi_oie, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OI, (&__pyx_v_dx_2_dtheta), (&__pyx_v_dy_2_dtheta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":445
 *     dx_1_dtheta, dy_1_dtheta = 0.0, 0.0
 *     common.coords_inv_dtheta(geo.phi_oie, geo, theta, INVOLUTE_OI, &dx_2_dtheta, &dy_2_dtheta)
 *     common.coords_inv_dtheta(geo.phi_ooe, geo, theta, INVOLUTE_OO, &dx_3_dtheta, &dy_3_dtheta)             # <<<<<<<<<<<<<<
 *     dx_4_dtheta, dy_4_dtheta = 0.0, 0.0
 * 
 */
  __pyx_t_1 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv_dtheta(__pyx_v_geo->__pyx_base.phi_ooe, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OO, (&__pyx_v_dx_3_dtheta), (&__pyx_v_dy_3_dtheta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":446
 *     common.coords_inv_dtheta(geo.phi_oie, geo, theta, INVOLUTE_OI, &dx_2_dtheta, &dy_2_dtheta)
 *     common.coords_inv_dtheta(geo.phi_ooe, geo, theta, INVOLUTE_OO, &dx_3_dtheta, &dy_3_dtheta)
 *     dx_4_dtheta, dy_4_dtheta = 0.0, 0.0             # <<<<<<<<<<<<<<
 * 
 *     dA_wall_dtheta = 0
 */
  __pyx_t_4 = 0.0;
  __pyx_t_5 = 0.0;
  __pyx_v_dx_4_dtheta = __pyx_t_4;
  __pyx_v_dy_4_dtheta = __pyx_t_5;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":448
 *     dx_4_dtheta, dy_4_dtheta = 0.0, 0.0
 * 
 *     dA_wall_dtheta = 0             # <<<<<<<<<<<<<<
 *     dA_circle_dtheta = 0.0
 *     dA_line1_dtheta = 0.5*(x_1*dy_2_dtheta + y_2*dx_1_dtheta - x_2*dy_1_dtheta - y_1*dx_2_dtheta)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_dA_wall_dtheta = __pyx_int_0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":449
 * 
 *     dA_wall_dtheta = 0
 *     dA_circle_dtheta = 0.0             # <<<<<<<<<<<<<<
 *     dA_line1_dtheta = 0.5*(x_1*dy_2_dtheta + y_2*dx_1_dtheta - x_2*dy_1_dtheta - y_1*dx_2_dtheta)
 *     dA_line2_dtheta = 0.5*(x_2*dy_3_dtheta + y_3*dx_2_dtheta - x_3*dy_2_dtheta - y_2*dx_3_dtheta)
 */
  __pyx_v_dA_circle_dtheta = 0.0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":450
 *     dA_wall_dtheta = 0
 *     dA_circle_dtheta = 0.0
 *     dA_line1_dtheta = 0.5*(x_1*dy_2_dtheta + y_2*dx_1_dtheta - x_2*dy_1_dtheta - y_1*dx_2_dtheta)             # <<<<<<<<<<<<<<
 *     dA_line2_dtheta = 0.5*(x_2*dy_3_dtheta + y_3*dx_2_dtheta - x_3*dy_2_dtheta - y_2*dx_3_dtheta)
 *     dA_oo_dtheta = 0.5*(0
 */
  __pyx_v_dA_line1_dtheta = (0.5 * ((((__pyx_v_x_1 * __pyx_v_dy_2_dtheta) + (__pyx_v_y_2 * __pyx_v_dx_1_dtheta)) - (__pyx_v_x_2 * __pyx_v_dy_1_dtheta)) - (__pyx_v_y_1 * __pyx_v_dx_2_dtheta)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":451
 *     dA_circle_dtheta = 0.0
 *     dA_line1_dtheta = 0.5*(x_1*dy_2_dtheta + y_2*dx_1_dtheta - x_2*dy_1_dtheta - y_1*dx_2_dtheta)
 *     dA_line2_dtheta = 0.5*(x_2*dy_3_dtheta + y_3*dx_2_dtheta - x_3*dy_2_dtheta - y_2*dx_3_dtheta)             # <<<<<<<<<<<<<<
 *     dA_oo_dtheta = 0.5*(0
 *                       +dGr_dtheta(geo.phi_oie, geo, theta, INVOLUTE_OO)
 */
  __pyx_v_dA_line2_dtheta = (0.5 * ((((__pyx_v_x_2 * __pyx_v_dy_3_dtheta) + (__pyx_v_y_3 * __pyx_v_dx_2_dtheta)) - (__pyx_v_x_3 * __pyx_v_dy_2_dtheta)) - (__pyx_v_y_2 * __pyx_v_dx_3_dtheta)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":453
 *     dA_line2_dtheta = 0.5*(x_2*dy_3_dtheta + y_3*dx_2_dtheta - x_3*dy_2_dtheta - y_2*dx_3_dtheta)
 *     dA_oo_dtheta = 0.5*(0
 *                       +dGr_dtheta(geo.phi_oie, geo, theta, INVOLUTE_OO)             # <<<<<<<<<<<<<<
 *                       -dGr_dphi(phi_s_sa, geo, theta, INVOLUTE_OO)*d_phi_s_sa_dtheta
 *                       -dGr_dtheta(phi_s_sa, geo, theta, INVOLUTE_OO)
 */
  __pyx_t_1 = PyFloat_FromDouble((0.0 + __pyx_f_5PDSim_6scroll_17common_scroll_geo_dGr_dtheta(__pyx_v_geo->__pyx_base.phi_oie, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OO, 0))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":454
 *     dA_oo_dtheta = 0.5*(0
 *                       +dGr_dtheta(geo.phi_oie, geo, theta, INVOLUTE_OO)
 *                       -dGr_dphi(phi_s_sa, geo, theta, INVOLUTE_OO)*d_phi_s_sa_dtheta             # <<<<<<<<<<<<<<
 *                       -dGr_dtheta(phi_s_sa, geo, theta, INVOLUTE_OO)
 *                       )
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_phi_s_sa); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 454, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_f_5PDSim_6scroll_17common_scroll_geo_dGr_dphi(__pyx_t_5, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OO, 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_3, __pyx_v_d_phi_s_sa_dtheta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":455
 *                       +dGr_dtheta(geo.phi_oie, geo, theta, INVOLUTE_OO)
 *                       -dGr_dphi(phi_s_sa, geo, theta, INVOLUTE_OO)*d_phi_s_sa_dtheta
 *                       -dGr_dtheta(phi_s_sa, geo, theta, INVOLUTE_OO)             # <<<<<<<<<<<<<<
 *                       )
 *     dxfie_dtheta = 0
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_phi_s_sa); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 455, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_f_5PDSim_6scroll_17common_scroll_geo_dGr_dtheta(__pyx_t_5, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OO, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":452
 *     dA_line1_dtheta = 0.5*(x_1*dy_2_dtheta + y_2*dx_1_dtheta - x_2*dy_1_dtheta - y_1*dx_2_dtheta)
 *     dA_line2_dtheta = 0.5*(x_2*dy_3_dtheta + y_3*dx_2_dtheta - x_3*dy_2_dtheta - y_2*dx_3_dtheta)
 *     dA_oo_dtheta = 0.5*(0             # <<<<<<<<<<<<<<
 *                       +dGr_dtheta(geo.phi_oie, geo, theta, INVOLUTE_OO)
 *                       -dGr_dphi(phi_s_sa, geo, theta, INVOLUTE_OO)*d_phi_s_sa_dtheta
 */
  __pyx_t_2 = PyNumber_Multiply(__pyx_float_0_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dA_oo_dtheta = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":457
 *                       -dGr_dtheta(phi_s_sa, geo, theta, INVOLUTE_OO)
 *                       )
 *     dxfie_dtheta = 0             # <<<<<<<<<<<<<<
 *     dyfie_dtheta = 0
 *     coords_inv_dtheta(phi_s_sa, geo, theta, INVOLUTE_OO, &dxssa_dtheta, &dyssa_dtheta)
 */
  __pyx_v_dxfie_dtheta = 0.0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":458
 *                       )
 *     dxfie_dtheta = 0
 *     dyfie_dtheta = 0             # <<<<<<<<<<<<<<
 *     coords_inv_dtheta(phi_s_sa, geo, theta, INVOLUTE_OO, &dxssa_dtheta, &dyssa_dtheta)
 *     _dcoords_inv_dphi_int(phi_s_sa, geo, theta, INVOLUTE_OO, &dxssa_dphi, &dyssa_dphi)
 */
  __pyx_v_dyfie_dtheta = 0.0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":459
 *     dxfie_dtheta = 0
 *     dyfie_dtheta = 0
 *     coords_inv_dtheta(phi_s_sa, geo, theta, INVOLUTE_OO, &dxssa_dtheta, &dyssa_dtheta)             # <<<<<<<<<<<<<<
 *     _dcoords_inv_dphi_int(phi_s_sa, geo, theta, INVOLUTE_OO, &dxssa_dphi, &dyssa_dphi)
 *     dxssa_dtheta += dxssa_dphi*d_phi_s_sa_dtheta
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_phi_s_sa); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 459, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv_dtheta(__pyx_t_5, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OO, (&__pyx_v_dxssa_dtheta), (&__pyx_v_dyssa_dtheta)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":460
 *     dyfie_dtheta = 0
 *     coords_inv_dtheta(phi_s_sa, geo, theta, INVOLUTE_OO, &dxssa_dtheta, &dyssa_dtheta)
 *     _dcoords_inv_dphi_int(phi_s_sa, geo, theta, INVOLUTE_OO, &dxssa_dphi, &dyssa_dphi)             # <<<<<<<<<<<<<<
 *     dxssa_dtheta += dxssa_dphi*d_phi_s_sa_dtheta
 *     dyssa_dtheta += dyssa_dphi*d_phi_s_sa_dtheta
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_phi_s_sa); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 460, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_5PDSim_6scroll_17common_scroll_geo__dcoords_inv_dphi_int(__pyx_t_5, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OO, (&__pyx_v_dxssa_dphi), (&__pyx_v_dyssa_dphi)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":461
 *     coords_inv_dtheta(phi_s_sa, geo, theta, INVOLUTE_OO, &dxssa_dtheta, &dyssa_dtheta)
 *     _dcoords_inv_dphi_int(phi_s_sa, geo, theta, INVOLUTE_OO, &dxssa_dphi, &dyssa_dphi)
 *     dxssa_dtheta += dxssa_dphi*d_phi_s_sa_dtheta             # <<<<<<<<<<<<<<
 *     dyssa_dtheta += dyssa_dphi*d_phi_s_sa_dtheta
 *     dA_line3_dtheta = 0.5*(xssa*dyfie_dtheta + yfie*dxssa_dtheta - xfie*dyssa_dtheta - yssa*dxfie_dtheta)
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_dxssa_dtheta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_dxssa_dphi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_v_d_phi_s_sa_dtheta); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dxssa_dtheta = __pyx_t_5;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":462
 *     _dcoords_inv_dphi_int(phi_s_sa, geo, theta, INVOLUTE_OO, &dxssa_dphi, &dyssa_dphi)
 *     dxssa_dtheta += dxssa_dphi*d_phi_s_sa_dtheta
 *     dyssa_dtheta += dyssa_dphi*d_phi_s_sa_dtheta             # <<<<<<<<<<<<<<
 *     dA_line3_dtheta = 0.5*(xssa*dyfie_dtheta + yfie*dxssa_dtheta - xfie*dyssa_dtheta - yssa*dxfie_dtheta)
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_dyssa_dtheta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_dyssa_dphi); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_3, __pyx_v_d_phi_s_sa_dtheta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dyssa_dtheta = __pyx_t_5;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":463
 *     dxssa_dtheta += dxssa_dphi*d_phi_s_sa_dtheta
 *     dyssa_dtheta += dyssa_dphi*d_phi_s_sa_dtheta
 *     dA_line3_dtheta = 0.5*(xssa*dyfie_dtheta + yfie*dxssa_dtheta - xfie*dyssa_dtheta - yssa*dxfie_dtheta)             # <<<<<<<<<<<<<<
 * 
 *     dV = geo.h*(dA_wall_dtheta + dA_circle_dtheta + dA_line1_dtheta + dA_line2_dtheta + dA_oo_dtheta + dA_line3_dtheta)
 */
  __pyx_v_dA_line3_dtheta = (0.5 * ((((__pyx_v_xssa * __pyx_v_dyfie_dtheta) + (__pyx_v_yfie * __pyx_v_dxssa_dtheta)) - (__pyx_v_xfie * __pyx_v_dyssa_dtheta)) - (__pyx_v_yssa * __pyx_v_dxfie_dtheta)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":465
 *     dA_line3_dtheta = 0.5*(xssa*dyfie_dtheta + yfie*dxssa_dtheta - xfie*dyssa_dtheta - yssa*dxfie_dtheta)
 * 
 *     dV = geo.h*(dA_wall_dtheta + dA_circle_dtheta + dA_line1_dtheta + dA_line2_dtheta + dA_oo_dtheta + dA_line3_dtheta)             # <<<<<<<<<<<<<<
 * 
 *     cdef VdVstruct VdV = VdVstruct.__new__(VdVstruct)
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.h); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_dA_circle_dtheta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Add(__pyx_v_dA_wall_dtheta, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_dA_line1_dtheta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_dA_line2_dtheta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Add(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_dA_oo_dtheta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_dA_line3_dtheta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_dV = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":467
 *     dV = geo.h*(dA_wall_dtheta + dA_circle_dtheta + dA_line1_dtheta + dA_line2_dtheta + dA_oo_dtheta + dA_line3_dtheta)
 * 
 *     cdef VdVstruct VdV = VdVstruct.__new__(VdVstruct)             # <<<<<<<<<<<<<<
 *     VdV.V = V
 *     VdV.dV = dV
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_VdVstruct), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_6scroll_17common_scroll_geo_VdVstruct)))) __PYX_ERR(0, 467, __pyx_L1_error)
  __pyx_v_VdV = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":468
 * 
 *     cdef VdVstruct VdV = VdVstruct.__new__(VdVstruct)
 *     VdV.V = V             # <<<<<<<<<<<<<<
 *     VdV.dV = dV
 *     return VdV
 */
  __pyx_v_VdV->V = __pyx_v_V;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":469
 *     cdef VdVstruct VdV = VdVstruct.__new__(VdVstruct)
 *     VdV.V = V
 *     VdV.dV = dV             # <<<<<<<<<<<<<<
 *     return VdV
 * 
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_dV); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L1_error)
  __pyx_v_VdV->dV = __pyx_t_5;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":470
 *     VdV.V = V
 *     VdV.dV = dV
 *     return VdV             # <<<<<<<<<<<<<<
 * 
 * cpdef dict SA_forces(double theta, DanfossGeoVals geo):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_VdV));
  __pyx_r = __pyx_v_VdV;
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":409
 *     return -r*r_o*cos(t-Theta)
 * 
 * cpdef VdVstruct SA(double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 *     r = (2*pi*geo.rb-geo.t)/2.0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.SA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_phi_s_sa);
  __Pyx_XDECREF(__pyx_v_d_phi_s_sa_dtheta);
  __Pyx_XDECREF(__pyx_v_dA_wall_dtheta);
  __Pyx_XDECREF(__pyx_v_dA_oo_dtheta);
  __Pyx_XDECREF(__pyx_v_dV);
  __Pyx_XDECREF((PyObject *)__pyx_v_VdV);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_21SA(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_20SA[] = "SA(double theta, DanfossGeoVals geo) -> VdVstruct";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_21SA(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_theta;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SA (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_geo,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("SA", 1, 2, 2, 1); __PYX_ERR(0, 409, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "SA") < 0)) __PYX_ERR(0, 409, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 409, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SA", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 409, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.SA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 409, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_20SA(__pyx_self, __pyx_v_theta, __pyx_v_geo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_20SA(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SA", 0);
  __Pyx_TraceCall("SA (wrapper)", __pyx_f[0], 409, 0, __PYX_ERR(0, 409, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_SA(__pyx_v_theta, __pyx_v_geo, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.SA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":472
 *     return VdV
 * 
 * cpdef dict SA_forces(double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 *     cdef CVInvolutes angles = CVangles(theta, geo, keyIs1)
 *     r = (2*pi*geo.rb-geo.t)/2.0
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_23SA_forces(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_SA_forces(double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_angles = 0;
  CYTHON_UNUSED double __pyx_v_r;
  PyObject *__pyx_v_xee = NULL;
  PyObject *__pyx_v_yee = NULL;
  PyObject *__pyx_v_xse = NULL;
  PyObject *__pyx_v_yse = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_xoie = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_yoie = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_xooe = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_yooe = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_x0 = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_y0 = NULL;
  PyObject *__pyx_v_fx_p = NULL;
  PyObject *__pyx_v_fy_p = NULL;
  PyObject *__pyx_v_M_O_p = NULL;
  PyObject *__pyx_v_x1 = NULL;
  PyObject *__pyx_v_y1 = NULL;
  PyObject *__pyx_v_x2 = NULL;
  PyObject *__pyx_v_y2 = NULL;
  PyObject *__pyx_v_xmid = NULL;
  PyObject *__pyx_v_ymid = NULL;
  PyObject *__pyx_v_nx1 = NULL;
  PyObject *__pyx_v_ny1 = NULL;
  double __pyx_v_A_line;
  PyObject *__pyx_v_fO_p_line = NULL;
  double __pyx_v_THETA;
  PyObject *__pyx_v_r_line = NULL;
  PyObject *__pyx_v_cross = NULL;
  long __pyx_v_cx;
  long __pyx_v_cy;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo_coords_inv __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo_coords_norm __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SA_forces", 0);
  __Pyx_TraceCall("SA_forces", __pyx_f[0], 472, 0, __PYX_ERR(0, 472, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":473
 * 
 * cpdef dict SA_forces(double theta, DanfossGeoVals geo):
 *     cdef CVInvolutes angles = CVangles(theta, geo, keyIs1)             # <<<<<<<<<<<<<<
 *     r = (2*pi*geo.rb-geo.t)/2.0
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_keyIs1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta, __pyx_v_geo, __pyx_t_2, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_angles = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":474
 * cpdef dict SA_forces(double theta, DanfossGeoVals geo):
 *     cdef CVInvolutes angles = CVangles(theta, geo, keyIs1)
 *     r = (2*pi*geo.rb-geo.t)/2.0             # <<<<<<<<<<<<<<
 * 
 *     xee,yee = coords_inv(geo.phi_fie,geo,0.0,'fi')
 */
  __pyx_v_r = ((((2.0 * M_PI) * __pyx_v_geo->__pyx_base.rb) - __pyx_v_geo->__pyx_base.t) / 2.0);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":476
 *     r = (2*pi*geo.rb-geo.t)/2.0
 * 
 *     xee,yee = coords_inv(geo.phi_fie,geo,0.0,'fi')             # <<<<<<<<<<<<<<
 *     xse,yse = coords_inv(geo.phi_foe-2*pi,geo,0.0,'fo')
 *     xoie,yoie = coords_inv(geo.phi_oie,geo,theta,'oi')
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.phi_fie); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4.__pyx_n = 1;
  __pyx_t_4.flag = __pyx_n_s_fi;
  __pyx_t_3 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_t_1, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), 0.0, 0, &__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 476, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 476, __pyx_L1_error)
  }
  __pyx_v_xee = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_yee = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":477
 * 
 *     xee,yee = coords_inv(geo.phi_fie,geo,0.0,'fi')
 *     xse,yse = coords_inv(geo.phi_foe-2*pi,geo,0.0,'fo')             # <<<<<<<<<<<<<<
 *     xoie,yoie = coords_inv(geo.phi_oie,geo,theta,'oi')
 *     xooe,yooe = coords_inv(geo.phi_ooe,geo,theta,'oo')
 */
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_geo->__pyx_base.phi_foe - (2.0 * M_PI))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4.__pyx_n = 1;
  __pyx_t_4.flag = __pyx_n_s_fo;
  __pyx_t_5 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_t_3, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), 0.0, 0, &__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(__pyx_t_5 != Py_None)) {
    PyObject* sequence = __pyx_t_5;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 477, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 477, __pyx_L1_error)
  }
  __pyx_v_xse = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_yse = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":478
 *     xee,yee = coords_inv(geo.phi_fie,geo,0.0,'fi')
 *     xse,yse = coords_inv(geo.phi_foe-2*pi,geo,0.0,'fo')
 *     xoie,yoie = coords_inv(geo.phi_oie,geo,theta,'oi')             # <<<<<<<<<<<<<<
 *     xooe,yooe = coords_inv(geo.phi_ooe,geo,theta,'oo')
 *     x0, y0 = (xee+xse)/2, (yee+yse)/2
 */
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.phi_oie); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4.__pyx_n = 1;
  __pyx_t_4.flag = __pyx_n_s_oi;
  __pyx_t_1 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_t_5, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, 0, &__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 478, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 478, __pyx_L1_error)
  }
  __pyx_v_xoie = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_yoie = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":479
 *     xse,yse = coords_inv(geo.phi_foe-2*pi,geo,0.0,'fo')
 *     xoie,yoie = coords_inv(geo.phi_oie,geo,theta,'oi')
 *     xooe,yooe = coords_inv(geo.phi_ooe,geo,theta,'oo')             # <<<<<<<<<<<<<<
 *     x0, y0 = (xee+xse)/2, (yee+yse)/2
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.phi_ooe); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4.__pyx_n = 1;
  __pyx_t_4.flag = __pyx_n_s_oo;
  __pyx_t_3 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_t_1, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, 0, &__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 479, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 479, __pyx_L1_error)
  }
  __pyx_v_xooe = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_yooe = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":480
 *     xoie,yoie = coords_inv(geo.phi_oie,geo,theta,'oi')
 *     xooe,yooe = coords_inv(geo.phi_ooe,geo,theta,'oo')
 *     x0, y0 = (xee+xse)/2, (yee+yse)/2             # <<<<<<<<<<<<<<
 * 
 *     # Calculate the force terms divided by the pressure acting on the outer edge of the orbiting scroll
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_xee, __pyx_v_xse); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_int_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_v_yee, __pyx_v_yse); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_int_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_x0 = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_y0 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":483
 * 
 *     # Calculate the force terms divided by the pressure acting on the outer edge of the orbiting scroll
 *     fx_p = fFx_p(geo.phi_ooe, geo, theta, angles.Inner.involute) - fFx_p(angles.Inner.phi_max, geo, theta, angles.Inner.involute)             # <<<<<<<<<<<<<<
 *     fy_p = fFy_p(geo.phi_ooe, geo, theta, angles.Inner.involute) - fFy_p(angles.Inner.phi_max, geo, theta, angles.Inner.involute)
 *     M_O_p = fMO_p(geo.phi_ooe, geo, theta, angles.Inner.involute) - fMO_p(angles.Inner.phi_max, geo, theta, angles.Inner.involute)
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_f_5PDSim_6scroll_17common_scroll_geo_fFx_p(__pyx_v_geo->__pyx_base.phi_ooe, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_v_angles->Inner->involute, 0) - __pyx_f_5PDSim_6scroll_17common_scroll_geo_fFx_p(__pyx_v_angles->Inner->phi_max, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_v_angles->Inner->involute, 0))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fx_p = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":484
 *     # Calculate the force terms divided by the pressure acting on the outer edge of the orbiting scroll
 *     fx_p = fFx_p(geo.phi_ooe, geo, theta, angles.Inner.involute) - fFx_p(angles.Inner.phi_max, geo, theta, angles.Inner.involute)
 *     fy_p = fFy_p(geo.phi_ooe, geo, theta, angles.Inner.involute) - fFy_p(angles.Inner.phi_max, geo, theta, angles.Inner.involute)             # <<<<<<<<<<<<<<
 *     M_O_p = fMO_p(geo.phi_ooe, geo, theta, angles.Inner.involute) - fMO_p(angles.Inner.phi_max, geo, theta, angles.Inner.involute)
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_f_5PDSim_6scroll_17common_scroll_geo_fFy_p(__pyx_v_geo->__pyx_base.phi_ooe, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_v_angles->Inner->involute, 0) - __pyx_f_5PDSim_6scroll_17common_scroll_geo_fFy_p(__pyx_v_angles->Inner->phi_max, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_v_angles->Inner->involute, 0))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fy_p = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":485
 *     fx_p = fFx_p(geo.phi_ooe, geo, theta, angles.Inner.involute) - fFx_p(angles.Inner.phi_max, geo, theta, angles.Inner.involute)
 *     fy_p = fFy_p(geo.phi_ooe, geo, theta, angles.Inner.involute) - fFy_p(angles.Inner.phi_max, geo, theta, angles.Inner.involute)
 *     M_O_p = fMO_p(geo.phi_ooe, geo, theta, angles.Inner.involute) - fMO_p(angles.Inner.phi_max, geo, theta, angles.Inner.involute)             # <<<<<<<<<<<<<<
 * 
 *     # Add contribution from the end of the scroll, connecting the inner and outer involutes
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_f_5PDSim_6scroll_17common_scroll_geo_fMO_p(__pyx_v_geo->__pyx_base.phi_ooe, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_v_angles->Inner->involute, 0) - __pyx_f_5PDSim_6scroll_17common_scroll_geo_fMO_p(__pyx_v_angles->Inner->phi_max, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_v_angles->Inner->involute, 0))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_M_O_p = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":488
 * 
 *     # Add contribution from the end of the scroll, connecting the inner and outer involutes
 *     x1, y1 = coords_inv(geo.phi_ooe, geo, theta, 'oo')             # <<<<<<<<<<<<<<
 *     x2, y2 = coords_inv(geo.phi_oie, geo, theta, 'oi')
 *     xmid = (x1+x2)/2; ymid = (y1+y2)/2
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.phi_ooe); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4.__pyx_n = 1;
  __pyx_t_4.flag = __pyx_n_s_oo;
  __pyx_t_5 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_t_1, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, 0, &__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_5 != Py_None)) {
    PyObject* sequence = __pyx_t_5;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 488, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 488, __pyx_L1_error)
  }
  __pyx_v_x1 = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y1 = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":489
 *     # Add contribution from the end of the scroll, connecting the inner and outer involutes
 *     x1, y1 = coords_inv(geo.phi_ooe, geo, theta, 'oo')
 *     x2, y2 = coords_inv(geo.phi_oie, geo, theta, 'oi')             # <<<<<<<<<<<<<<
 *     xmid = (x1+x2)/2; ymid = (y1+y2)/2
 *     nx1, ny1 = coords_norm(geo.phi_ooe, geo, theta, 'oo')
 */
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.phi_oie); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4.__pyx_n = 1;
  __pyx_t_4.flag = __pyx_n_s_oi;
  __pyx_t_3 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_t_5, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, 0, &__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 489, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 489, __pyx_L1_error)
  }
  __pyx_v_x2 = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_y2 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":490
 *     x1, y1 = coords_inv(geo.phi_ooe, geo, theta, 'oo')
 *     x2, y2 = coords_inv(geo.phi_oie, geo, theta, 'oi')
 *     xmid = (x1+x2)/2; ymid = (y1+y2)/2             # <<<<<<<<<<<<<<
 *     nx1, ny1 = coords_norm(geo.phi_ooe, geo, theta, 'oo')
 *     ny1, nx1 = -nx1[0], ny1[0]
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_x1, __pyx_v_x2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_int_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_xmid = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_v_y1, __pyx_v_y2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_int_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ymid = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":491
 *     x2, y2 = coords_inv(geo.phi_oie, geo, theta, 'oi')
 *     xmid = (x1+x2)/2; ymid = (y1+y2)/2
 *     nx1, ny1 = coords_norm(geo.phi_ooe, geo, theta, 'oo')             # <<<<<<<<<<<<<<
 *     ny1, nx1 = -nx1[0], ny1[0]
 *     # Make sure you get the normal pointing towards the orbiting scroll!
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.phi_ooe); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6.__pyx_n = 1;
  __pyx_t_6.flag = __pyx_n_s_oo;
  __pyx_t_1 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_norm(__pyx_t_3, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, 0, &__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 491, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 491, __pyx_L1_error)
  }
  __pyx_v_nx1 = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_ny1 = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":492
 *     xmid = (x1+x2)/2; ymid = (y1+y2)/2
 *     nx1, ny1 = coords_norm(geo.phi_ooe, geo, theta, 'oo')
 *     ny1, nx1 = -nx1[0], ny1[0]             # <<<<<<<<<<<<<<
 *     # Make sure you get the normal pointing towards the orbiting scroll!
 *     # The cross product of line going from inner to outer scroll wrap ends
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_nx1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyNumber_Negative(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_ny1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_ny1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_nx1, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":496
 *     # The cross product of line going from inner to outer scroll wrap ends
 *     # with normal should be negative
 *     if np.cross([x1-x2,y1-y2,0],[nx1, ny1, 0])[2] > 0:             # <<<<<<<<<<<<<<
 *         nx1 *= -1
 *         ny1 *= -1
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_cross); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Subtract(__pyx_v_x1, __pyx_v_x2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyNumber_Subtract(__pyx_v_y1, __pyx_v_y2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyList_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_int_0);
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_v_nx1);
  __Pyx_GIVEREF(__pyx_v_nx1);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_v_nx1);
  __Pyx_INCREF(__pyx_v_ny1);
  __Pyx_GIVEREF(__pyx_v_ny1);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_v_ny1);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_int_0);
  __pyx_t_5 = NULL;
  __pyx_t_2 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_2 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_8, __pyx_t_7};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_2, 2+__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_8, __pyx_t_7};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_2, 2+__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_2, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_2, __pyx_t_7);
    __pyx_t_8 = 0;
    __pyx_t_7 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_10) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":497
 *     # with normal should be negative
 *     if np.cross([x1-x2,y1-y2,0],[nx1, ny1, 0])[2] > 0:
 *         nx1 *= -1             # <<<<<<<<<<<<<<
 *         ny1 *= -1
 *     # Length is the thickness of scroll, height is scroll height
 */
    __pyx_t_1 = PyNumber_InPlaceMultiply(__pyx_v_nx1, __pyx_int_neg_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_nx1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":498
 *     if np.cross([x1-x2,y1-y2,0],[nx1, ny1, 0])[2] > 0:
 *         nx1 *= -1
 *         ny1 *= -1             # <<<<<<<<<<<<<<
 *     # Length is the thickness of scroll, height is scroll height
 *     A_line = geo.t*geo.h
 */
    __pyx_t_1 = PyNumber_InPlaceMultiply(__pyx_v_ny1, __pyx_int_neg_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_ny1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":496
 *     # The cross product of line going from inner to outer scroll wrap ends
 *     # with normal should be negative
 *     if np.cross([x1-x2,y1-y2,0],[nx1, ny1, 0])[2] > 0:             # <<<<<<<<<<<<<<
 *         nx1 *= -1
 *         ny1 *= -1
 */
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":500
 *         ny1 *= -1
 *     # Length is the thickness of scroll, height is scroll height
 *     A_line = geo.t*geo.h             # <<<<<<<<<<<<<<
 *     fx_p += A_line*nx1
 *     fy_p += A_line*ny1
 */
  __pyx_v_A_line = (__pyx_v_geo->__pyx_base.t * __pyx_v_geo->__pyx_base.h);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":501
 *     # Length is the thickness of scroll, height is scroll height
 *     A_line = geo.t*geo.h
 *     fx_p += A_line*nx1             # <<<<<<<<<<<<<<
 *     fy_p += A_line*ny1
 *     fO_p_line = [A_line*nx1, A_line*ny1, 0.0]
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_A_line); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_v_nx1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_fx_p, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_fx_p, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":502
 *     A_line = geo.t*geo.h
 *     fx_p += A_line*nx1
 *     fy_p += A_line*ny1             # <<<<<<<<<<<<<<
 *     fO_p_line = [A_line*nx1, A_line*ny1, 0.0]
 *     THETA = geo.phi_fie-theta-pi/2
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_A_line); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_v_ny1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_fy_p, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_fy_p, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":503
 *     fx_p += A_line*nx1
 *     fy_p += A_line*ny1
 *     fO_p_line = [A_line*nx1, A_line*ny1, 0.0]             # <<<<<<<<<<<<<<
 *     THETA = geo.phi_fie-theta-pi/2
 *     r_line = [xmid - geo.ro*cos(THETA), ymid - geo.ro*sin(THETA), 0.0]
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_A_line); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_v_nx1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_A_line); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = PyNumber_Multiply(__pyx_t_1, __pyx_v_ny1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_9);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_float_0_0);
  __pyx_t_3 = 0;
  __pyx_t_9 = 0;
  __pyx_v_fO_p_line = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":504
 *     fy_p += A_line*ny1
 *     fO_p_line = [A_line*nx1, A_line*ny1, 0.0]
 *     THETA = geo.phi_fie-theta-pi/2             # <<<<<<<<<<<<<<
 *     r_line = [xmid - geo.ro*cos(THETA), ymid - geo.ro*sin(THETA), 0.0]
 *     cross = np.cross(r_line, fO_p_line)
 */
  __pyx_v_THETA = ((__pyx_v_geo->__pyx_base.phi_fie - __pyx_v_theta) - (M_PI / 2.0));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":505
 *     fO_p_line = [A_line*nx1, A_line*ny1, 0.0]
 *     THETA = geo.phi_fie-theta-pi/2
 *     r_line = [xmid - geo.ro*cos(THETA), ymid - geo.ro*sin(THETA), 0.0]             # <<<<<<<<<<<<<<
 *     cross = np.cross(r_line, fO_p_line)
 *     M_O_p += cross[2]
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_geo->__pyx_base.ro * cos(__pyx_v_THETA))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = PyNumber_Subtract(__pyx_v_xmid, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_geo->__pyx_base.ro * sin(__pyx_v_THETA))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Subtract(__pyx_v_ymid, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_float_0_0);
  __pyx_t_9 = 0;
  __pyx_t_3 = 0;
  __pyx_v_r_line = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":506
 *     THETA = geo.phi_fie-theta-pi/2
 *     r_line = [xmid - geo.ro*cos(THETA), ymid - geo.ro*sin(THETA), 0.0]
 *     cross = np.cross(r_line, fO_p_line)             # <<<<<<<<<<<<<<
 *     M_O_p += cross[2]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_cross); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_2 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_2 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_r_line, __pyx_v_fO_p_line};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_2, 2+__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_r_line, __pyx_v_fO_p_line};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_2, 2+__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_r_line);
    __Pyx_GIVEREF(__pyx_v_r_line);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_2, __pyx_v_r_line);
    __Pyx_INCREF(__pyx_v_fO_p_line);
    __Pyx_GIVEREF(__pyx_v_fO_p_line);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_2, __pyx_v_fO_p_line);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_cross = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":507
 *     r_line = [xmid - geo.ro*cos(THETA), ymid - geo.ro*sin(THETA), 0.0]
 *     cross = np.cross(r_line, fO_p_line)
 *     M_O_p += cross[2]             # <<<<<<<<<<<<<<
 * 
 *     cx = 0
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_cross, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = PyNumber_InPlaceAdd(__pyx_v_M_O_p, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_M_O_p, __pyx_t_9);
  __pyx_t_9 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":509
 *     M_O_p += cross[2]
 * 
 *     cx = 0             # <<<<<<<<<<<<<<
 *     cy = 0
 * 
 */
  __pyx_v_cx = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":510
 * 
 *     cx = 0
 *     cy = 0             # <<<<<<<<<<<<<<
 * 
 *     return dict(cx = cx,
 */
  __pyx_v_cy = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":512
 *     cy = 0
 * 
 *     return dict(cx = cx,             # <<<<<<<<<<<<<<
 *                 cy = cy,
 *                 fz_p = SA(theta,geo).V/geo.h,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_9 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_cx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_cx, __pyx_t_1) < 0) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":513
 * 
 *     return dict(cx = cx,
 *                 cy = cy,             # <<<<<<<<<<<<<<
 *                 fz_p = SA(theta,geo).V/geo.h,
 *                 fx_p = fx_p,
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_cy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_cy, __pyx_t_1) < 0) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":514
 *     return dict(cx = cx,
 *                 cy = cy,
 *                 fz_p = SA(theta,geo).V/geo.h,             # <<<<<<<<<<<<<<
 *                 fx_p = fx_p,
 *                 fy_p = fy_p,
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_SA(__pyx_v_theta, __pyx_v_geo, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *)__pyx_t_1)->V;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_geo->__pyx_base.h == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 514, __pyx_L1_error)
  }
  __pyx_t_1 = PyFloat_FromDouble((__pyx_t_11 / __pyx_v_geo->__pyx_base.h)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_fz_p, __pyx_t_1) < 0) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":515
 *                 cy = cy,
 *                 fz_p = SA(theta,geo).V/geo.h,
 *                 fx_p = fx_p,             # <<<<<<<<<<<<<<
 *                 fy_p = fy_p,
 *                 M_O_p = M_O_p
 */
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_fx_p, __pyx_v_fx_p) < 0) __PYX_ERR(0, 512, __pyx_L1_error)

  /* "DanfossPDSim/asymm_scroll_geo.pyx":516
 *                 fz_p = SA(theta,geo).V/geo.h,
 *                 fx_p = fx_p,
 *                 fy_p = fy_p,             # <<<<<<<<<<<<<<
 *                 M_O_p = M_O_p
 *                 )
 */
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_fy_p, __pyx_v_fy_p) < 0) __PYX_ERR(0, 512, __pyx_L1_error)

  /* "DanfossPDSim/asymm_scroll_geo.pyx":517
 *                 fx_p = fx_p,
 *                 fy_p = fy_p,
 *                 M_O_p = M_O_p             # <<<<<<<<<<<<<<
 *                 )
 * 
 */
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_M_O_p, __pyx_v_M_O_p) < 0) __PYX_ERR(0, 512, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_9);
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":472
 *     return VdV
 * 
 * cpdef dict SA_forces(double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 *     cdef CVInvolutes angles = CVangles(theta, geo, keyIs1)
 *     r = (2*pi*geo.rb-geo.t)/2.0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.SA_forces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_angles);
  __Pyx_XDECREF(__pyx_v_xee);
  __Pyx_XDECREF(__pyx_v_yee);
  __Pyx_XDECREF(__pyx_v_xse);
  __Pyx_XDECREF(__pyx_v_yse);
  __Pyx_XDECREF(__pyx_v_xoie);
  __Pyx_XDECREF(__pyx_v_yoie);
  __Pyx_XDECREF(__pyx_v_xooe);
  __Pyx_XDECREF(__pyx_v_yooe);
  __Pyx_XDECREF(__pyx_v_x0);
  __Pyx_XDECREF(__pyx_v_y0);
  __Pyx_XDECREF(__pyx_v_fx_p);
  __Pyx_XDECREF(__pyx_v_fy_p);
  __Pyx_XDECREF(__pyx_v_M_O_p);
  __Pyx_XDECREF(__pyx_v_x1);
  __Pyx_XDECREF(__pyx_v_y1);
  __Pyx_XDECREF(__pyx_v_x2);
  __Pyx_XDECREF(__pyx_v_y2);
  __Pyx_XDECREF(__pyx_v_xmid);
  __Pyx_XDECREF(__pyx_v_ymid);
  __Pyx_XDECREF(__pyx_v_nx1);
  __Pyx_XDECREF(__pyx_v_ny1);
  __Pyx_XDECREF(__pyx_v_fO_p_line);
  __Pyx_XDECREF(__pyx_v_r_line);
  __Pyx_XDECREF(__pyx_v_cross);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_23SA_forces(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_22SA_forces[] = "SA_forces(double theta, DanfossGeoVals geo) -> dict";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_23SA_forces(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_theta;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SA_forces (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_geo,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("SA_forces", 1, 2, 2, 1); __PYX_ERR(0, 472, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "SA_forces") < 0)) __PYX_ERR(0, 472, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 472, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SA_forces", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 472, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.SA_forces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 472, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_22SA_forces(__pyx_self, __pyx_v_theta, __pyx_v_geo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_22SA_forces(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SA_forces", 0);
  __Pyx_TraceCall("SA_forces (wrapper)", __pyx_f[0], 472, 0, __PYX_ERR(0, 472, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_SA_forces(__pyx_v_theta, __pyx_v_geo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.SA_forces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":520
 *                 )
 * 
 * cpdef VdVstruct DD(double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 * 
 *     theta_m = geo.phi_fie - theta - pi/2
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_25DD(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_DD(double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_theta_m;
  double __pyx_v_Ainv_fi;
  double __pyx_v_A_farc2;
  double __pyx_v_x_1;
  double __pyx_v_y_1;
  double __pyx_v_x_2;
  double __pyx_v_y_2;
  double __pyx_v_A_line1;
  double __pyx_v_A_farc3;
  double __pyx_v_A_farc1;
  PyObject *__pyx_v_x1_fixorb = NULL;
  PyObject *__pyx_v_y1_fixorb = NULL;
  PyObject *__pyx_v_x2_fixorb = NULL;
  PyObject *__pyx_v_y2_fixorb = NULL;
  PyObject *__pyx_v_A_line_fixorb = NULL;
  double __pyx_v_A_oarc2;
  double __pyx_v_x_5;
  double __pyx_v_y_5;
  double __pyx_v_x_6;
  double __pyx_v_y_6;
  double __pyx_v_A_line3;
  double __pyx_v_A_oarc3;
  double __pyx_v_A_oarc1;
  PyObject *__pyx_v_x1_orbfix = NULL;
  PyObject *__pyx_v_y1_orbfix = NULL;
  PyObject *__pyx_v_x2_orbfix = NULL;
  PyObject *__pyx_v_y2_orbfix = NULL;
  PyObject *__pyx_v_A_line_orbfix = NULL;
  double __pyx_v_Ainv_oi;
  PyObject *__pyx_v_V = NULL;
  double __pyx_v_dAinv_fi_dtheta;
  double __pyx_v_dA_farc2_dtheta;
  double __pyx_v_dA_line1_dtheta;
  double __pyx_v_dA_farc1_dtheta;
  double __pyx_v_dA_farc3_dtheta;
  double __pyx_v_dx1_fixorb_dtheta;
  double __pyx_v_dy1_fixorb_dtheta;
  double __pyx_v_dx2_orbfix_dtheta;
  double __pyx_v_dy2_orbfix_dtheta;
  double __pyx_v_dx2_fixorb_dtheta;
  double __pyx_v_dx_5_dtheta;
  double __pyx_v_dx_6_dtheta;
  double __pyx_v_dx1_orbfix_dtheta;
  double __pyx_v_dy2_fixorb_dtheta;
  double __pyx_v_dy_5_dtheta;
  double __pyx_v_dy_6_dtheta;
  double __pyx_v_dy1_orbfix_dtheta;
  PyObject *__pyx_v_dA_line_fixorb_dtheta = NULL;
  double __pyx_v_dA_oarc2_dtheta;
  double __pyx_v_dA_line3_dtheta;
  double __pyx_v_dA_oarc3_dtheta;
  double __pyx_v_dA_oarc1_dtheta;
  PyObject *__pyx_v_dA_line_orbfix_dtheta = NULL;
  double __pyx_v_dAinv_oi_dtheta;
  PyObject *__pyx_v_dV = NULL;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_v_VdV = 0;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo_coords_inv __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("DD", 0);
  __Pyx_TraceCall("DD", __pyx_f[0], 520, 0, __PYX_ERR(0, 520, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":522
 * cpdef VdVstruct DD(double theta, DanfossGeoVals geo):
 * 
 *     theta_m = geo.phi_fie - theta - pi/2             # <<<<<<<<<<<<<<
 * 
 *     Ainv_fi = 0.5*(Gr(geo.phi_oos + pi, geo, theta, common.INVOLUTE_FI)
 */
  __pyx_v_theta_m = ((__pyx_v_geo->__pyx_base.phi_fie - __pyx_v_theta) - (M_PI / 2.0));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":524
 *     theta_m = geo.phi_fie - theta - pi/2
 * 
 *     Ainv_fi = 0.5*(Gr(geo.phi_oos + pi, geo, theta, common.INVOLUTE_FI)             # <<<<<<<<<<<<<<
 *                   -Gr(geo.phi_fis, geo, theta, common.INVOLUTE_FI))
 *     A_farc2 = 0.5*(Green_circle(geo.t1_arc2,geo.ra_arc2,geo.xa_arc2,geo.ya_arc2)
 */
  __pyx_v_Ainv_fi = (0.5 * (__pyx_f_5PDSim_6scroll_17common_scroll_geo_Gr((__pyx_v_geo->__pyx_base.phi_oos + M_PI), ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FI, 0) - __pyx_f_5PDSim_6scroll_17common_scroll_geo_Gr(__pyx_v_geo->__pyx_base.phi_fis, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FI, 0)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":526
 *     Ainv_fi = 0.5*(Gr(geo.phi_oos + pi, geo, theta, common.INVOLUTE_FI)
 *                   -Gr(geo.phi_fis, geo, theta, common.INVOLUTE_FI))
 *     A_farc2 = 0.5*(Green_circle(geo.t1_arc2,geo.ra_arc2,geo.xa_arc2,geo.ya_arc2)             # <<<<<<<<<<<<<<
 *                   -Green_circle(geo.t2_arc2,geo.ra_arc2,geo.xa_arc2,geo.ya_arc2)
 *                   )
 */
  __pyx_v_A_farc2 = (0.5 * (__pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle(__pyx_v_geo->__pyx_base.t1_arc2, __pyx_v_geo->__pyx_base.ra_arc2, __pyx_v_geo->__pyx_base.xa_arc2, __pyx_v_geo->__pyx_base.ya_arc2, 0) - __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle(__pyx_v_geo->__pyx_base.t2_arc2, __pyx_v_geo->__pyx_base.ra_arc2, __pyx_v_geo->__pyx_base.xa_arc2, __pyx_v_geo->__pyx_base.ya_arc2, 0)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":529
 *                   -Green_circle(geo.t2_arc2,geo.ra_arc2,geo.xa_arc2,geo.ya_arc2)
 *                   )
 *     x_1 = geo.xa_arc2 + geo.ra_arc2*cos(geo.t1_arc2)             # <<<<<<<<<<<<<<
 *     y_1 = geo.ya_arc2 + geo.ra_arc2*sin(geo.t1_arc2)
 *     x_2 = geo.xa_arc1 + geo.ra_arc1*cos(geo.t1_arc1)
 */
  __pyx_v_x_1 = (__pyx_v_geo->__pyx_base.xa_arc2 + (__pyx_v_geo->__pyx_base.ra_arc2 * cos(__pyx_v_geo->__pyx_base.t1_arc2)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":530
 *                   )
 *     x_1 = geo.xa_arc2 + geo.ra_arc2*cos(geo.t1_arc2)
 *     y_1 = geo.ya_arc2 + geo.ra_arc2*sin(geo.t1_arc2)             # <<<<<<<<<<<<<<
 *     x_2 = geo.xa_arc1 + geo.ra_arc1*cos(geo.t1_arc1)
 *     y_2 = geo.ya_arc1 + geo.ra_arc1*sin(geo.t1_arc1)
 */
  __pyx_v_y_1 = (__pyx_v_geo->__pyx_base.ya_arc2 + (__pyx_v_geo->__pyx_base.ra_arc2 * sin(__pyx_v_geo->__pyx_base.t1_arc2)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":531
 *     x_1 = geo.xa_arc2 + geo.ra_arc2*cos(geo.t1_arc2)
 *     y_1 = geo.ya_arc2 + geo.ra_arc2*sin(geo.t1_arc2)
 *     x_2 = geo.xa_arc1 + geo.ra_arc1*cos(geo.t1_arc1)             # <<<<<<<<<<<<<<
 *     y_2 = geo.ya_arc1 + geo.ra_arc1*sin(geo.t1_arc1)
 *     A_line1 = 0.5*(x_1*y_2 - x_2*y_1)
 */
  __pyx_v_x_2 = (__pyx_v_geo->__pyx_base.xa_arc1 + (__pyx_v_geo->__pyx_base.ra_arc1 * cos(__pyx_v_geo->__pyx_base.t1_arc1)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":532
 *     y_1 = geo.ya_arc2 + geo.ra_arc2*sin(geo.t1_arc2)
 *     x_2 = geo.xa_arc1 + geo.ra_arc1*cos(geo.t1_arc1)
 *     y_2 = geo.ya_arc1 + geo.ra_arc1*sin(geo.t1_arc1)             # <<<<<<<<<<<<<<
 *     A_line1 = 0.5*(x_1*y_2 - x_2*y_1)
 * 
 */
  __pyx_v_y_2 = (__pyx_v_geo->__pyx_base.ya_arc1 + (__pyx_v_geo->__pyx_base.ra_arc1 * sin(__pyx_v_geo->__pyx_base.t1_arc1)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":533
 *     x_2 = geo.xa_arc1 + geo.ra_arc1*cos(geo.t1_arc1)
 *     y_2 = geo.ya_arc1 + geo.ra_arc1*sin(geo.t1_arc1)
 *     A_line1 = 0.5*(x_1*y_2 - x_2*y_1)             # <<<<<<<<<<<<<<
 * 
 *     A_farc3 = 0.5*(Green_circle(geo.t2_arc3,geo.ra_arc3,geo.xa_arc3,geo.ya_arc3)
 */
  __pyx_v_A_line1 = (0.5 * ((__pyx_v_x_1 * __pyx_v_y_2) - (__pyx_v_x_2 * __pyx_v_y_1)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":535
 *     A_line1 = 0.5*(x_1*y_2 - x_2*y_1)
 * 
 *     A_farc3 = 0.5*(Green_circle(geo.t2_arc3,geo.ra_arc3,geo.xa_arc3,geo.ya_arc3)             # <<<<<<<<<<<<<<
 *                   -Green_circle(geo.t1_arc3,geo.ra_arc3,geo.xa_arc3,geo.ya_arc3)
 *                   )
 */
  __pyx_v_A_farc3 = (0.5 * (__pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle(__pyx_v_geo->t2_arc3, __pyx_v_geo->ra_arc3, __pyx_v_geo->xa_arc3, __pyx_v_geo->ya_arc3, 0) - __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle(__pyx_v_geo->t1_arc3, __pyx_v_geo->ra_arc3, __pyx_v_geo->xa_arc3, __pyx_v_geo->ya_arc3, 0)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":539
 *                   )
 * 
 *     A_farc1 = 0.5*(Green_circle(geo.t2_arc1,geo.ra_arc1,geo.xa_arc1,geo.ya_arc1)             # <<<<<<<<<<<<<<
 *                   -Green_circle(geo.t1_arc1,geo.ra_arc1,geo.xa_arc1,geo.ya_arc1)
 *                   )
 */
  __pyx_v_A_farc1 = (0.5 * (__pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle(__pyx_v_geo->__pyx_base.t2_arc1, __pyx_v_geo->__pyx_base.ra_arc1, __pyx_v_geo->__pyx_base.xa_arc1, __pyx_v_geo->__pyx_base.ya_arc1, 0) - __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle(__pyx_v_geo->__pyx_base.t1_arc1, __pyx_v_geo->__pyx_base.ra_arc1, __pyx_v_geo->__pyx_base.xa_arc1, __pyx_v_geo->__pyx_base.ya_arc1, 0)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":544
 * 
 *     # Line from fixed scroll to orbiting scroll
 *     x1_fixorb, y1_fixorb = coords_inv(geo.phi_oos+pi, geo, theta, 'fi')             # <<<<<<<<<<<<<<
 *     x2_fixorb, y2_fixorb = coords_inv(geo.phi_oos, geo, theta, 'oo')
 *     A_line_fixorb = 0.5*(x1_fixorb*y2_fixorb - x2_fixorb*y1_fixorb)
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_geo->__pyx_base.phi_oos + M_PI)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.flag = __pyx_n_s_fi;
  __pyx_t_2 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_t_1, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, 0, &__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 544, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 544, __pyx_L1_error)
  }
  __pyx_v_x1_fixorb = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y1_fixorb = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":545
 *     # Line from fixed scroll to orbiting scroll
 *     x1_fixorb, y1_fixorb = coords_inv(geo.phi_oos+pi, geo, theta, 'fi')
 *     x2_fixorb, y2_fixorb = coords_inv(geo.phi_oos, geo, theta, 'oo')             # <<<<<<<<<<<<<<
 *     A_line_fixorb = 0.5*(x1_fixorb*y2_fixorb - x2_fixorb*y1_fixorb)
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.phi_oos); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.flag = __pyx_n_s_oo;
  __pyx_t_4 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_t_2, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, 0, &__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(__pyx_t_4 != Py_None)) {
    PyObject* sequence = __pyx_t_4;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 545, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 545, __pyx_L1_error)
  }
  __pyx_v_x2_fixorb = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_y2_fixorb = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":546
 *     x1_fixorb, y1_fixorb = coords_inv(geo.phi_oos+pi, geo, theta, 'fi')
 *     x2_fixorb, y2_fixorb = coords_inv(geo.phi_oos, geo, theta, 'oo')
 *     A_line_fixorb = 0.5*(x1_fixorb*y2_fixorb - x2_fixorb*y1_fixorb)             # <<<<<<<<<<<<<<
 * 
 *     A_oarc2 = 0.5*(Green_circle_orb(geo.t1_arc2,geo.ra_arc2,geo.xa_arc2,geo.ya_arc2, geo.ro, theta_m)
 */
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_x1_fixorb, __pyx_v_y2_fixorb); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_x2_fixorb, __pyx_v_y1_fixorb); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_float_0_5, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_A_line_fixorb = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":548
 *     A_line_fixorb = 0.5*(x1_fixorb*y2_fixorb - x2_fixorb*y1_fixorb)
 * 
 *     A_oarc2 = 0.5*(Green_circle_orb(geo.t1_arc2,geo.ra_arc2,geo.xa_arc2,geo.ya_arc2, geo.ro, theta_m)             # <<<<<<<<<<<<<<
 *                   -Green_circle_orb(geo.t2_arc2,geo.ra_arc2,geo.xa_arc2,geo.ya_arc2, geo.ro, theta_m)
 *                   )
 */
  __pyx_v_A_oarc2 = (0.5 * (__pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle_orb(__pyx_v_geo->__pyx_base.t1_arc2, __pyx_v_geo->__pyx_base.ra_arc2, __pyx_v_geo->__pyx_base.xa_arc2, __pyx_v_geo->__pyx_base.ya_arc2, __pyx_v_geo->__pyx_base.ro, __pyx_v_theta_m) - __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle_orb(__pyx_v_geo->__pyx_base.t2_arc2, __pyx_v_geo->__pyx_base.ra_arc2, __pyx_v_geo->__pyx_base.xa_arc2, __pyx_v_geo->__pyx_base.ya_arc2, __pyx_v_geo->__pyx_base.ro, __pyx_v_theta_m)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":551
 *                   -Green_circle_orb(geo.t2_arc2,geo.ra_arc2,geo.xa_arc2,geo.ya_arc2, geo.ro, theta_m)
 *                   )
 *     x_5 = -geo.xa_arc2 - geo.ra_arc2*cos(geo.t1_arc2) + geo.ro*cos(theta_m)             # <<<<<<<<<<<<<<
 *     y_5 = -geo.ya_arc2 - geo.ra_arc2*sin(geo.t1_arc2) + geo.ro*sin(theta_m)
 *     x_6 = -geo.xa_arc1 - geo.ra_arc1*cos(geo.t1_arc1) + geo.ro*cos(theta_m)
 */
  __pyx_v_x_5 = (((-__pyx_v_geo->__pyx_base.xa_arc2) - (__pyx_v_geo->__pyx_base.ra_arc2 * cos(__pyx_v_geo->__pyx_base.t1_arc2))) + (__pyx_v_geo->__pyx_base.ro * cos(__pyx_v_theta_m)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":552
 *                   )
 *     x_5 = -geo.xa_arc2 - geo.ra_arc2*cos(geo.t1_arc2) + geo.ro*cos(theta_m)
 *     y_5 = -geo.ya_arc2 - geo.ra_arc2*sin(geo.t1_arc2) + geo.ro*sin(theta_m)             # <<<<<<<<<<<<<<
 *     x_6 = -geo.xa_arc1 - geo.ra_arc1*cos(geo.t1_arc1) + geo.ro*cos(theta_m)
 *     y_6 = -geo.ya_arc1 - geo.ra_arc1*sin(geo.t1_arc1) + geo.ro*sin(theta_m)
 */
  __pyx_v_y_5 = (((-__pyx_v_geo->__pyx_base.ya_arc2) - (__pyx_v_geo->__pyx_base.ra_arc2 * sin(__pyx_v_geo->__pyx_base.t1_arc2))) + (__pyx_v_geo->__pyx_base.ro * sin(__pyx_v_theta_m)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":553
 *     x_5 = -geo.xa_arc2 - geo.ra_arc2*cos(geo.t1_arc2) + geo.ro*cos(theta_m)
 *     y_5 = -geo.ya_arc2 - geo.ra_arc2*sin(geo.t1_arc2) + geo.ro*sin(theta_m)
 *     x_6 = -geo.xa_arc1 - geo.ra_arc1*cos(geo.t1_arc1) + geo.ro*cos(theta_m)             # <<<<<<<<<<<<<<
 *     y_6 = -geo.ya_arc1 - geo.ra_arc1*sin(geo.t1_arc1) + geo.ro*sin(theta_m)
 *     A_line3 = 0.5*(x_5*y_6 - x_6*y_5)
 */
  __pyx_v_x_6 = (((-__pyx_v_geo->__pyx_base.xa_arc1) - (__pyx_v_geo->__pyx_base.ra_arc1 * cos(__pyx_v_geo->__pyx_base.t1_arc1))) + (__pyx_v_geo->__pyx_base.ro * cos(__pyx_v_theta_m)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":554
 *     y_5 = -geo.ya_arc2 - geo.ra_arc2*sin(geo.t1_arc2) + geo.ro*sin(theta_m)
 *     x_6 = -geo.xa_arc1 - geo.ra_arc1*cos(geo.t1_arc1) + geo.ro*cos(theta_m)
 *     y_6 = -geo.ya_arc1 - geo.ra_arc1*sin(geo.t1_arc1) + geo.ro*sin(theta_m)             # <<<<<<<<<<<<<<
 *     A_line3 = 0.5*(x_5*y_6 - x_6*y_5)
 * 
 */
  __pyx_v_y_6 = (((-__pyx_v_geo->__pyx_base.ya_arc1) - (__pyx_v_geo->__pyx_base.ra_arc1 * sin(__pyx_v_geo->__pyx_base.t1_arc1))) + (__pyx_v_geo->__pyx_base.ro * sin(__pyx_v_theta_m)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":555
 *     x_6 = -geo.xa_arc1 - geo.ra_arc1*cos(geo.t1_arc1) + geo.ro*cos(theta_m)
 *     y_6 = -geo.ya_arc1 - geo.ra_arc1*sin(geo.t1_arc1) + geo.ro*sin(theta_m)
 *     A_line3 = 0.5*(x_5*y_6 - x_6*y_5)             # <<<<<<<<<<<<<<
 * 
 *     A_oarc3 = 0.5*(Green_circle_orb(geo.t2_arc3,geo.ra_arc3,geo.xa_arc3,geo.ya_arc3, geo.ro, theta_m)
 */
  __pyx_v_A_line3 = (0.5 * ((__pyx_v_x_5 * __pyx_v_y_6) - (__pyx_v_x_6 * __pyx_v_y_5)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":557
 *     A_line3 = 0.5*(x_5*y_6 - x_6*y_5)
 * 
 *     A_oarc3 = 0.5*(Green_circle_orb(geo.t2_arc3,geo.ra_arc3,geo.xa_arc3,geo.ya_arc3, geo.ro, theta_m)             # <<<<<<<<<<<<<<
 *                   -Green_circle_orb(geo.t1_arc3,geo.ra_arc3,geo.xa_arc3,geo.ya_arc3, geo.ro, theta_m)
 *                  )
 */
  __pyx_v_A_oarc3 = (0.5 * (__pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle_orb(__pyx_v_geo->t2_arc3, __pyx_v_geo->ra_arc3, __pyx_v_geo->xa_arc3, __pyx_v_geo->ya_arc3, __pyx_v_geo->__pyx_base.ro, __pyx_v_theta_m) - __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle_orb(__pyx_v_geo->t1_arc3, __pyx_v_geo->ra_arc3, __pyx_v_geo->xa_arc3, __pyx_v_geo->ya_arc3, __pyx_v_geo->__pyx_base.ro, __pyx_v_theta_m)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":561
 *                  )
 * 
 *     A_oarc1 = 0.5*(Green_circle_orb(geo.t2_arc1,geo.ra_arc1,geo.xa_arc1,geo.ya_arc1, geo.ro, theta_m)             # <<<<<<<<<<<<<<
 *                   -Green_circle_orb(geo.t1_arc1,geo.ra_arc1,geo.xa_arc1,geo.ya_arc1, geo.ro, theta_m)
 *                  )
 */
  __pyx_v_A_oarc1 = (0.5 * (__pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle_orb(__pyx_v_geo->__pyx_base.t2_arc1, __pyx_v_geo->__pyx_base.ra_arc1, __pyx_v_geo->__pyx_base.xa_arc1, __pyx_v_geo->__pyx_base.ya_arc1, __pyx_v_geo->__pyx_base.ro, __pyx_v_theta_m) - __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Green_circle_orb(__pyx_v_geo->__pyx_base.t1_arc1, __pyx_v_geo->__pyx_base.ra_arc1, __pyx_v_geo->__pyx_base.xa_arc1, __pyx_v_geo->__pyx_base.ya_arc1, __pyx_v_geo->__pyx_base.ro, __pyx_v_theta_m)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":566
 * 
 *     # Line from orbiting scroll to fixed scroll
 *     x1_orbfix, y1_orbfix = coords_inv(geo.phi_fos+pi, geo, theta, 'oi')             # <<<<<<<<<<<<<<
 *     x2_orbfix, y2_orbfix = coords_inv(geo.phi_fos, geo, theta, 'fo')
 *     A_line_orbfix = 0.5*(x1_orbfix*y2_orbfix - x2_orbfix*y1_orbfix)
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_geo->__pyx_base.phi_fos + M_PI)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.flag = __pyx_n_s_oi;
  __pyx_t_2 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_t_1, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, 0, &__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 566, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 566, __pyx_L1_error)
  }
  __pyx_v_x1_orbfix = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y1_orbfix = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":567
 *     # Line from orbiting scroll to fixed scroll
 *     x1_orbfix, y1_orbfix = coords_inv(geo.phi_fos+pi, geo, theta, 'oi')
 *     x2_orbfix, y2_orbfix = coords_inv(geo.phi_fos, geo, theta, 'fo')             # <<<<<<<<<<<<<<
 *     A_line_orbfix = 0.5*(x1_orbfix*y2_orbfix - x2_orbfix*y1_orbfix)
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.phi_fos); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.flag = __pyx_n_s_fo;
  __pyx_t_4 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_t_2, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, 0, &__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(__pyx_t_4 != Py_None)) {
    PyObject* sequence = __pyx_t_4;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 567, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 567, __pyx_L1_error)
  }
  __pyx_v_x2_orbfix = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_y2_orbfix = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":568
 *     x1_orbfix, y1_orbfix = coords_inv(geo.phi_fos+pi, geo, theta, 'oi')
 *     x2_orbfix, y2_orbfix = coords_inv(geo.phi_fos, geo, theta, 'fo')
 *     A_line_orbfix = 0.5*(x1_orbfix*y2_orbfix - x2_orbfix*y1_orbfix)             # <<<<<<<<<<<<<<
 * 
 *     Ainv_oi = 0.5*(Gr(geo.phi_fos + pi, geo, theta, common.INVOLUTE_OI)
 */
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_x1_orbfix, __pyx_v_y2_orbfix); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_x2_orbfix, __pyx_v_y1_orbfix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_float_0_5, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_A_line_orbfix = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":570
 *     A_line_orbfix = 0.5*(x1_orbfix*y2_orbfix - x2_orbfix*y1_orbfix)
 * 
 *     Ainv_oi = 0.5*(Gr(geo.phi_fos + pi, geo, theta, common.INVOLUTE_OI)             # <<<<<<<<<<<<<<
 *                   -Gr(geo.phi_ois, geo, theta, common.INVOLUTE_OI))
 * 
 */
  __pyx_v_Ainv_oi = (0.5 * (__pyx_f_5PDSim_6scroll_17common_scroll_geo_Gr((__pyx_v_geo->__pyx_base.phi_fos + M_PI), ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OI, 0) - __pyx_f_5PDSim_6scroll_17common_scroll_geo_Gr(__pyx_v_geo->__pyx_base.phi_ois, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OI, 0)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":573
 *                   -Gr(geo.phi_ois, geo, theta, common.INVOLUTE_OI))
 * 
 *     V = geo.h*(Ainv_fi + A_farc2 + A_line1 + A_farc3 + A_farc1 + A_line_fixorb             # <<<<<<<<<<<<<<
 *              + A_oarc2 + A_line3 + A_oarc3 + A_oarc1 + A_line_orbfix + Ainv_oi)
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.h); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(((((__pyx_v_Ainv_fi + __pyx_v_A_farc2) + __pyx_v_A_line1) + __pyx_v_A_farc3) + __pyx_v_A_farc1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_v_A_line_fixorb); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":574
 * 
 *     V = geo.h*(Ainv_fi + A_farc2 + A_line1 + A_farc3 + A_farc1 + A_line_fixorb
 *              + A_oarc2 + A_line3 + A_oarc3 + A_oarc1 + A_line_orbfix + Ainv_oi)             # <<<<<<<<<<<<<<
 * 
 *     ## ------------------------ DERIVATIVE -------------------------------
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_A_oarc2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_A_line3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_A_oarc3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_A_oarc1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_v_A_line_orbfix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_Ainv_oi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":573
 *                   -Gr(geo.phi_ois, geo, theta, common.INVOLUTE_OI))
 * 
 *     V = geo.h*(Ainv_fi + A_farc2 + A_line1 + A_farc3 + A_farc1 + A_line_fixorb             # <<<<<<<<<<<<<<
 *              + A_oarc2 + A_line3 + A_oarc3 + A_oarc1 + A_line_orbfix + Ainv_oi)
 * 
 */
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_V = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":577
 * 
 *     ## ------------------------ DERIVATIVE -------------------------------
 *     dAinv_fi_dtheta = 0.5*(dGr_dtheta(geo.phi_oos+pi, geo, theta, common.INVOLUTE_FI)             # <<<<<<<<<<<<<<
 *                           -dGr_dtheta(geo.phi_fis, geo, theta, common.INVOLUTE_FI)
 *                        )
 */
  __pyx_v_dAinv_fi_dtheta = (0.5 * (__pyx_f_5PDSim_6scroll_17common_scroll_geo_dGr_dtheta((__pyx_v_geo->__pyx_base.phi_oos + M_PI), ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FI, 0) - __pyx_f_5PDSim_6scroll_17common_scroll_geo_dGr_dtheta(__pyx_v_geo->__pyx_base.phi_fis, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_FI, 0)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":580
 *                           -dGr_dtheta(geo.phi_fis, geo, theta, common.INVOLUTE_FI)
 *                        )
 *     dA_farc2_dtheta = 0.0             # <<<<<<<<<<<<<<
 *     dA_line1_dtheta = 0.0
 *     dA_farc1_dtheta = 0.0
 */
  __pyx_v_dA_farc2_dtheta = 0.0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":581
 *                        )
 *     dA_farc2_dtheta = 0.0
 *     dA_line1_dtheta = 0.0             # <<<<<<<<<<<<<<
 *     dA_farc1_dtheta = 0.0
 *     dA_farc3_dtheta = 0.0
 */
  __pyx_v_dA_line1_dtheta = 0.0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":582
 *     dA_farc2_dtheta = 0.0
 *     dA_line1_dtheta = 0.0
 *     dA_farc1_dtheta = 0.0             # <<<<<<<<<<<<<<
 *     dA_farc3_dtheta = 0.0
 *     dx1_fixorb_dtheta, dy1_fixorb_dtheta, dx2_orbfix_dtheta, dy2_orbfix_dtheta = 0.0, 0.0, 0.0, 0.0
 */
  __pyx_v_dA_farc1_dtheta = 0.0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":583
 *     dA_line1_dtheta = 0.0
 *     dA_farc1_dtheta = 0.0
 *     dA_farc3_dtheta = 0.0             # <<<<<<<<<<<<<<
 *     dx1_fixorb_dtheta, dy1_fixorb_dtheta, dx2_orbfix_dtheta, dy2_orbfix_dtheta = 0.0, 0.0, 0.0, 0.0
 *     dx2_fixorb_dtheta = dx_5_dtheta = dx_6_dtheta = dx1_orbfix_dtheta = -geo.ro*sin(theta_m)*(-1)
 */
  __pyx_v_dA_farc3_dtheta = 0.0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":584
 *     dA_farc1_dtheta = 0.0
 *     dA_farc3_dtheta = 0.0
 *     dx1_fixorb_dtheta, dy1_fixorb_dtheta, dx2_orbfix_dtheta, dy2_orbfix_dtheta = 0.0, 0.0, 0.0, 0.0             # <<<<<<<<<<<<<<
 *     dx2_fixorb_dtheta = dx_5_dtheta = dx_6_dtheta = dx1_orbfix_dtheta = -geo.ro*sin(theta_m)*(-1)
 *     dy2_fixorb_dtheta = dy_5_dtheta = dy_6_dtheta = dy1_orbfix_dtheta = geo.ro*cos(theta_m)*(-1)
 */
  __pyx_t_6 = 0.0;
  __pyx_t_7 = 0.0;
  __pyx_t_8 = 0.0;
  __pyx_t_9 = 0.0;
  __pyx_v_dx1_fixorb_dtheta = __pyx_t_6;
  __pyx_v_dy1_fixorb_dtheta = __pyx_t_7;
  __pyx_v_dx2_orbfix_dtheta = __pyx_t_8;
  __pyx_v_dy2_orbfix_dtheta = __pyx_t_9;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":585
 *     dA_farc3_dtheta = 0.0
 *     dx1_fixorb_dtheta, dy1_fixorb_dtheta, dx2_orbfix_dtheta, dy2_orbfix_dtheta = 0.0, 0.0, 0.0, 0.0
 *     dx2_fixorb_dtheta = dx_5_dtheta = dx_6_dtheta = dx1_orbfix_dtheta = -geo.ro*sin(theta_m)*(-1)             # <<<<<<<<<<<<<<
 *     dy2_fixorb_dtheta = dy_5_dtheta = dy_6_dtheta = dy1_orbfix_dtheta = geo.ro*cos(theta_m)*(-1)
 *     dA_line_fixorb_dtheta = 0.5*(x1_fixorb*dy2_fixorb_dtheta + y2_fixorb*dx1_fixorb_dtheta - x2_fixorb*dy1_fixorb_dtheta - y1_fixorb*dx2_fixorb_dtheta)
 */
  __pyx_t_9 = (((-__pyx_v_geo->__pyx_base.ro) * sin(__pyx_v_theta_m)) * -1.0);
  __pyx_v_dx2_fixorb_dtheta = __pyx_t_9;
  __pyx_v_dx_5_dtheta = __pyx_t_9;
  __pyx_v_dx_6_dtheta = __pyx_t_9;
  __pyx_v_dx1_orbfix_dtheta = __pyx_t_9;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":586
 *     dx1_fixorb_dtheta, dy1_fixorb_dtheta, dx2_orbfix_dtheta, dy2_orbfix_dtheta = 0.0, 0.0, 0.0, 0.0
 *     dx2_fixorb_dtheta = dx_5_dtheta = dx_6_dtheta = dx1_orbfix_dtheta = -geo.ro*sin(theta_m)*(-1)
 *     dy2_fixorb_dtheta = dy_5_dtheta = dy_6_dtheta = dy1_orbfix_dtheta = geo.ro*cos(theta_m)*(-1)             # <<<<<<<<<<<<<<
 *     dA_line_fixorb_dtheta = 0.5*(x1_fixorb*dy2_fixorb_dtheta + y2_fixorb*dx1_fixorb_dtheta - x2_fixorb*dy1_fixorb_dtheta - y1_fixorb*dx2_fixorb_dtheta)
 *     dA_oarc2_dtheta = 0.5*(dGreen_circle_orb_dtheta(geo.t1_arc2,geo.ra_arc2,geo.xa_arc2,geo.ya_arc2, geo.ro, theta_m)
 */
  __pyx_t_9 = ((__pyx_v_geo->__pyx_base.ro * cos(__pyx_v_theta_m)) * -1.0);
  __pyx_v_dy2_fixorb_dtheta = __pyx_t_9;
  __pyx_v_dy_5_dtheta = __pyx_t_9;
  __pyx_v_dy_6_dtheta = __pyx_t_9;
  __pyx_v_dy1_orbfix_dtheta = __pyx_t_9;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":587
 *     dx2_fixorb_dtheta = dx_5_dtheta = dx_6_dtheta = dx1_orbfix_dtheta = -geo.ro*sin(theta_m)*(-1)
 *     dy2_fixorb_dtheta = dy_5_dtheta = dy_6_dtheta = dy1_orbfix_dtheta = geo.ro*cos(theta_m)*(-1)
 *     dA_line_fixorb_dtheta = 0.5*(x1_fixorb*dy2_fixorb_dtheta + y2_fixorb*dx1_fixorb_dtheta - x2_fixorb*dy1_fixorb_dtheta - y1_fixorb*dx2_fixorb_dtheta)             # <<<<<<<<<<<<<<
 *     dA_oarc2_dtheta = 0.5*(dGreen_circle_orb_dtheta(geo.t1_arc2,geo.ra_arc2,geo.xa_arc2,geo.ya_arc2, geo.ro, theta_m)
 *                           -dGreen_circle_orb_dtheta(geo.t2_arc2,geo.ra_arc2,geo.xa_arc2,geo.ya_arc2, geo.ro, theta_m)
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_dy2_fixorb_dtheta); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_v_x1_fixorb, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_dx1_fixorb_dtheta); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_y2_fixorb, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_dy1_fixorb_dtheta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyNumber_Multiply(__pyx_v_x2_fixorb, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_dx2_fixorb_dtheta); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_y1_fixorb, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Subtract(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_float_0_5, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_dA_line_fixorb_dtheta = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":588
 *     dy2_fixorb_dtheta = dy_5_dtheta = dy_6_dtheta = dy1_orbfix_dtheta = geo.ro*cos(theta_m)*(-1)
 *     dA_line_fixorb_dtheta = 0.5*(x1_fixorb*dy2_fixorb_dtheta + y2_fixorb*dx1_fixorb_dtheta - x2_fixorb*dy1_fixorb_dtheta - y1_fixorb*dx2_fixorb_dtheta)
 *     dA_oarc2_dtheta = 0.5*(dGreen_circle_orb_dtheta(geo.t1_arc2,geo.ra_arc2,geo.xa_arc2,geo.ya_arc2, geo.ro, theta_m)             # <<<<<<<<<<<<<<
 *                           -dGreen_circle_orb_dtheta(geo.t2_arc2,geo.ra_arc2,geo.xa_arc2,geo.ya_arc2, geo.ro, theta_m)
 *                            )
 */
  __pyx_v_dA_oarc2_dtheta = (0.5 * (__pyx_f_12DanfossPDSim_16asymm_scroll_geo_dGreen_circle_orb_dtheta(__pyx_v_geo->__pyx_base.t1_arc2, __pyx_v_geo->__pyx_base.ra_arc2, __pyx_v_geo->__pyx_base.xa_arc2, __pyx_v_geo->__pyx_base.ya_arc2, __pyx_v_geo->__pyx_base.ro, __pyx_v_theta_m) - __pyx_f_12DanfossPDSim_16asymm_scroll_geo_dGreen_circle_orb_dtheta(__pyx_v_geo->__pyx_base.t2_arc2, __pyx_v_geo->__pyx_base.ra_arc2, __pyx_v_geo->__pyx_base.xa_arc2, __pyx_v_geo->__pyx_base.ya_arc2, __pyx_v_geo->__pyx_base.ro, __pyx_v_theta_m)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":591
 *                           -dGreen_circle_orb_dtheta(geo.t2_arc2,geo.ra_arc2,geo.xa_arc2,geo.ya_arc2, geo.ro, theta_m)
 *                            )
 *     dA_line3_dtheta = 0.5*(x_5*dy_6_dtheta + y_6*dx_5_dtheta - x_6*dy_5_dtheta - y_5*dx_6_dtheta)             # <<<<<<<<<<<<<<
 *     dA_oarc3_dtheta = 0.5*(dGreen_circle_orb_dtheta(geo.t2_arc3,geo.ra_arc3,geo.xa_arc3,geo.ya_arc3, geo.ro, theta_m)
 *                           -dGreen_circle_orb_dtheta(geo.t1_arc3,geo.ra_arc3,geo.xa_arc3,geo.ya_arc3, geo.ro, theta_m)
 */
  __pyx_v_dA_line3_dtheta = (0.5 * ((((__pyx_v_x_5 * __pyx_v_dy_6_dtheta) + (__pyx_v_y_6 * __pyx_v_dx_5_dtheta)) - (__pyx_v_x_6 * __pyx_v_dy_5_dtheta)) - (__pyx_v_y_5 * __pyx_v_dx_6_dtheta)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":592
 *                            )
 *     dA_line3_dtheta = 0.5*(x_5*dy_6_dtheta + y_6*dx_5_dtheta - x_6*dy_5_dtheta - y_5*dx_6_dtheta)
 *     dA_oarc3_dtheta = 0.5*(dGreen_circle_orb_dtheta(geo.t2_arc3,geo.ra_arc3,geo.xa_arc3,geo.ya_arc3, geo.ro, theta_m)             # <<<<<<<<<<<<<<
 *                           -dGreen_circle_orb_dtheta(geo.t1_arc3,geo.ra_arc3,geo.xa_arc3,geo.ya_arc3, geo.ro, theta_m)
 *                            )
 */
  __pyx_v_dA_oarc3_dtheta = (0.5 * (__pyx_f_12DanfossPDSim_16asymm_scroll_geo_dGreen_circle_orb_dtheta(__pyx_v_geo->t2_arc3, __pyx_v_geo->ra_arc3, __pyx_v_geo->xa_arc3, __pyx_v_geo->ya_arc3, __pyx_v_geo->__pyx_base.ro, __pyx_v_theta_m) - __pyx_f_12DanfossPDSim_16asymm_scroll_geo_dGreen_circle_orb_dtheta(__pyx_v_geo->t1_arc3, __pyx_v_geo->ra_arc3, __pyx_v_geo->xa_arc3, __pyx_v_geo->ya_arc3, __pyx_v_geo->__pyx_base.ro, __pyx_v_theta_m)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":595
 *                           -dGreen_circle_orb_dtheta(geo.t1_arc3,geo.ra_arc3,geo.xa_arc3,geo.ya_arc3, geo.ro, theta_m)
 *                            )
 *     dA_oarc1_dtheta = 0.5*(dGreen_circle_orb_dtheta(geo.t2_arc1,geo.ra_arc1,geo.xa_arc1,geo.ya_arc1, geo.ro, theta_m)             # <<<<<<<<<<<<<<
 *                           -dGreen_circle_orb_dtheta(geo.t1_arc1,geo.ra_arc1,geo.xa_arc1,geo.ya_arc1, geo.ro, theta_m)
 *                            )
 */
  __pyx_v_dA_oarc1_dtheta = (0.5 * (__pyx_f_12DanfossPDSim_16asymm_scroll_geo_dGreen_circle_orb_dtheta(__pyx_v_geo->__pyx_base.t2_arc1, __pyx_v_geo->__pyx_base.ra_arc1, __pyx_v_geo->__pyx_base.xa_arc1, __pyx_v_geo->__pyx_base.ya_arc1, __pyx_v_geo->__pyx_base.ro, __pyx_v_theta_m) - __pyx_f_12DanfossPDSim_16asymm_scroll_geo_dGreen_circle_orb_dtheta(__pyx_v_geo->__pyx_base.t1_arc1, __pyx_v_geo->__pyx_base.ra_arc1, __pyx_v_geo->__pyx_base.xa_arc1, __pyx_v_geo->__pyx_base.ya_arc1, __pyx_v_geo->__pyx_base.ro, __pyx_v_theta_m)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":598
 *                           -dGreen_circle_orb_dtheta(geo.t1_arc1,geo.ra_arc1,geo.xa_arc1,geo.ya_arc1, geo.ro, theta_m)
 *                            )
 *     dA_line_orbfix_dtheta = 0.5*(x1_orbfix*dy2_orbfix_dtheta + y2_orbfix*dx1_orbfix_dtheta - x2_orbfix*dy1_orbfix_dtheta - y1_orbfix*dx2_orbfix_dtheta)             # <<<<<<<<<<<<<<
 *     dAinv_oi_dtheta = 0.5*(dGr_dtheta(geo.phi_fos+pi, geo, theta, common.INVOLUTE_OI)
 *                           -dGr_dtheta(geo.phi_ois, geo, theta, common.INVOLUTE_OI)
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_dy2_orbfix_dtheta); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_v_x1_orbfix, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_dx1_orbfix_dtheta); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_y2_orbfix, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_dy1_orbfix_dtheta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyNumber_Multiply(__pyx_v_x2_orbfix, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_dx2_orbfix_dtheta); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_y1_orbfix, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Subtract(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_float_0_5, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_dA_line_orbfix_dtheta = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":599
 *                            )
 *     dA_line_orbfix_dtheta = 0.5*(x1_orbfix*dy2_orbfix_dtheta + y2_orbfix*dx1_orbfix_dtheta - x2_orbfix*dy1_orbfix_dtheta - y1_orbfix*dx2_orbfix_dtheta)
 *     dAinv_oi_dtheta = 0.5*(dGr_dtheta(geo.phi_fos+pi, geo, theta, common.INVOLUTE_OI)             # <<<<<<<<<<<<<<
 *                           -dGr_dtheta(geo.phi_ois, geo, theta, common.INVOLUTE_OI)
 *                        )
 */
  __pyx_v_dAinv_oi_dtheta = (0.5 * (__pyx_f_5PDSim_6scroll_17common_scroll_geo_dGr_dtheta((__pyx_v_geo->__pyx_base.phi_fos + M_PI), ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OI, 0) - __pyx_f_5PDSim_6scroll_17common_scroll_geo_dGr_dtheta(__pyx_v_geo->__pyx_base.phi_ois, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, __pyx_e_5PDSim_6scroll_17common_scroll_geo_INVOLUTE_OI, 0)));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":603
 *                        )
 * 
 *     dV = geo.h*(dAinv_fi_dtheta + dA_farc2_dtheta + dA_line1_dtheta + dA_farc3_dtheta + dA_farc1_dtheta + dA_line_fixorb_dtheta             # <<<<<<<<<<<<<<
 *               + dA_oarc2_dtheta + dA_line3_dtheta + dA_oarc1_dtheta + dA_oarc3_dtheta + dA_line_orbfix_dtheta + dAinv_oi_dtheta)
 * 
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.h); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(((((__pyx_v_dAinv_fi_dtheta + __pyx_v_dA_farc2_dtheta) + __pyx_v_dA_line1_dtheta) + __pyx_v_dA_farc3_dtheta) + __pyx_v_dA_farc1_dtheta)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_v_dA_line_fixorb_dtheta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":604
 * 
 *     dV = geo.h*(dAinv_fi_dtheta + dA_farc2_dtheta + dA_line1_dtheta + dA_farc3_dtheta + dA_farc1_dtheta + dA_line_fixorb_dtheta
 *               + dA_oarc2_dtheta + dA_line3_dtheta + dA_oarc1_dtheta + dA_oarc3_dtheta + dA_line_orbfix_dtheta + dAinv_oi_dtheta)             # <<<<<<<<<<<<<<
 * 
 *     cdef VdVstruct VdV = VdVstruct.__new__(VdVstruct)
 */
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_dA_oarc2_dtheta); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_dA_line3_dtheta); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_dA_oarc1_dtheta); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_dA_oarc3_dtheta); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_v_dA_line_orbfix_dtheta); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_dAinv_oi_dtheta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":603
 *                        )
 * 
 *     dV = geo.h*(dAinv_fi_dtheta + dA_farc2_dtheta + dA_line1_dtheta + dA_farc3_dtheta + dA_farc1_dtheta + dA_line_fixorb_dtheta             # <<<<<<<<<<<<<<
 *               + dA_oarc2_dtheta + dA_line3_dtheta + dA_oarc1_dtheta + dA_oarc3_dtheta + dA_line_orbfix_dtheta + dAinv_oi_dtheta)
 * 
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dV = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":606
 *               + dA_oarc2_dtheta + dA_line3_dtheta + dA_oarc1_dtheta + dA_oarc3_dtheta + dA_line_orbfix_dtheta + dAinv_oi_dtheta)
 * 
 *     cdef VdVstruct VdV = VdVstruct.__new__(VdVstruct)             # <<<<<<<<<<<<<<
 *     VdV.V = V
 *     VdV.dV = dV
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_VdVstruct), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_6scroll_17common_scroll_geo_VdVstruct)))) __PYX_ERR(0, 606, __pyx_L1_error)
  __pyx_v_VdV = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":607
 * 
 *     cdef VdVstruct VdV = VdVstruct.__new__(VdVstruct)
 *     VdV.V = V             # <<<<<<<<<<<<<<
 *     VdV.dV = dV
 *     return VdV
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_V); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 607, __pyx_L1_error)
  __pyx_v_VdV->V = __pyx_t_9;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":608
 *     cdef VdVstruct VdV = VdVstruct.__new__(VdVstruct)
 *     VdV.V = V
 *     VdV.dV = dV             # <<<<<<<<<<<<<<
 *     return VdV
 * 
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_dV); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 608, __pyx_L1_error)
  __pyx_v_VdV->dV = __pyx_t_9;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":609
 *     VdV.V = V
 *     VdV.dV = dV
 *     return VdV             # <<<<<<<<<<<<<<
 * 
 * cpdef dict DD_forces(double theta, DanfossGeoVals geo):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_VdV));
  __pyx_r = __pyx_v_VdV;
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":520
 *                 )
 * 
 * cpdef VdVstruct DD(double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 * 
 *     theta_m = geo.phi_fie - theta - pi/2
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x1_fixorb);
  __Pyx_XDECREF(__pyx_v_y1_fixorb);
  __Pyx_XDECREF(__pyx_v_x2_fixorb);
  __Pyx_XDECREF(__pyx_v_y2_fixorb);
  __Pyx_XDECREF(__pyx_v_A_line_fixorb);
  __Pyx_XDECREF(__pyx_v_x1_orbfix);
  __Pyx_XDECREF(__pyx_v_y1_orbfix);
  __Pyx_XDECREF(__pyx_v_x2_orbfix);
  __Pyx_XDECREF(__pyx_v_y2_orbfix);
  __Pyx_XDECREF(__pyx_v_A_line_orbfix);
  __Pyx_XDECREF(__pyx_v_V);
  __Pyx_XDECREF(__pyx_v_dA_line_fixorb_dtheta);
  __Pyx_XDECREF(__pyx_v_dA_line_orbfix_dtheta);
  __Pyx_XDECREF(__pyx_v_dV);
  __Pyx_XDECREF((PyObject *)__pyx_v_VdV);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_25DD(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_24DD[] = "DD(double theta, DanfossGeoVals geo) -> VdVstruct";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_25DD(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_theta;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("DD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_geo,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("DD", 1, 2, 2, 1); __PYX_ERR(0, 520, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "DD") < 0)) __PYX_ERR(0, 520, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("DD", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 520, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 520, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_24DD(__pyx_self, __pyx_v_theta, __pyx_v_geo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_24DD(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("DD", 0);
  __Pyx_TraceCall("DD (wrapper)", __pyx_f[0], 520, 0, __PYX_ERR(0, 520, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_DD(__pyx_v_theta, __pyx_v_geo, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":611
 *     return VdV
 * 
 * cpdef dict DD_forces(double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 *     """
 *     Call the symmetric one, since for internal symmetry, the DD chamber is the same
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_27DD_forces(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_DD_forces(double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("DD_forces", 0);
  __Pyx_TraceCall("DD_forces", __pyx_f[0], 611, 0, __PYX_ERR(0, 611, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":616
 *     TODO: update when we have internal asymmetry
 *     """
 *     return symm_scroll_geo.DD_forces(theta, geo)             # <<<<<<<<<<<<<<
 * 
 * cpdef VdVstruct DDD(double theta, DanfossGeoVals geo):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5PDSim_6scroll_15symm_scroll_geo_DD_forces(__pyx_v_theta, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), 0, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":611
 *     return VdV
 * 
 * cpdef dict DD_forces(double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 *     """
 *     Call the symmetric one, since for internal symmetry, the DD chamber is the same
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DD_forces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_27DD_forces(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_26DD_forces[] = "DD_forces(double theta, DanfossGeoVals geo) -> dict\n\n    Call the symmetric one, since for internal symmetry, the DD chamber is the same\n    TODO: update when we have internal asymmetry\n    ";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_27DD_forces(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_theta;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("DD_forces (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_geo,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("DD_forces", 1, 2, 2, 1); __PYX_ERR(0, 611, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "DD_forces") < 0)) __PYX_ERR(0, 611, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 611, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("DD_forces", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 611, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DD_forces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 611, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_26DD_forces(__pyx_self, __pyx_v_theta, __pyx_v_geo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_26DD_forces(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("DD_forces", 0);
  __Pyx_TraceCall("DD_forces (wrapper)", __pyx_f[0], 611, 0, __PYX_ERR(0, 611, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_DD_forces(__pyx_v_theta, __pyx_v_geo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DD_forces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":618
 *     return symm_scroll_geo.DD_forces(theta, geo)
 * 
 * cpdef VdVstruct DDD(double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 *     cdef VdVstruct Vd1 = common.VdV(theta, geo, CVangles(theta, geo, common.keyId1))
 *     cdef VdVstruct Vd2 = common.VdV(theta, geo, CVangles(theta, geo, common.keyId2))
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_29DDD(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_DDD(double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_v_Vd1 = 0;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_v_Vd2 = 0;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_v_Vdd = 0;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_v_VdV = 0;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("DDD", 0);
  __Pyx_TraceCall("DDD", __pyx_f[0], 618, 0, __PYX_ERR(0, 618, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":619
 * 
 * cpdef VdVstruct DDD(double theta, DanfossGeoVals geo):
 *     cdef VdVstruct Vd1 = common.VdV(theta, geo, CVangles(theta, geo, common.keyId1))             # <<<<<<<<<<<<<<
 *     cdef VdVstruct Vd2 = common.VdV(theta, geo, CVangles(theta, geo, common.keyId2))
 *     cdef VdVstruct Vdd = DD(theta, geo)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta, __pyx_v_geo, __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyId1, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_f_5PDSim_6scroll_17common_scroll_geo_VdV(__pyx_v_theta, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_1), 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_Vd1 = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":620
 * cpdef VdVstruct DDD(double theta, DanfossGeoVals geo):
 *     cdef VdVstruct Vd1 = common.VdV(theta, geo, CVangles(theta, geo, common.keyId1))
 *     cdef VdVstruct Vd2 = common.VdV(theta, geo, CVangles(theta, geo, common.keyId2))             # <<<<<<<<<<<<<<
 *     cdef VdVstruct Vdd = DD(theta, geo)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta, __pyx_v_geo, __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyId2, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_6scroll_17common_scroll_geo_VdV(__pyx_v_theta, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_2), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_Vd2 = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":621
 *     cdef VdVstruct Vd1 = common.VdV(theta, geo, CVangles(theta, geo, common.keyId1))
 *     cdef VdVstruct Vd2 = common.VdV(theta, geo, CVangles(theta, geo, common.keyId2))
 *     cdef VdVstruct Vdd = DD(theta, geo)             # <<<<<<<<<<<<<<
 * 
 *     cdef VdVstruct VdV = VdVstruct.__new__(VdVstruct)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_DD(__pyx_v_theta, __pyx_v_geo, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Vdd = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":623
 *     cdef VdVstruct Vdd = DD(theta, geo)
 * 
 *     cdef VdVstruct VdV = VdVstruct.__new__(VdVstruct)             # <<<<<<<<<<<<<<
 *     VdV.V = Vd1.V + Vd2.V + Vdd.V
 *     VdV.dV = Vd1.dV + Vd2.dV + Vdd.dV
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_VdVstruct), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_6scroll_17common_scroll_geo_VdVstruct)))) __PYX_ERR(0, 623, __pyx_L1_error)
  __pyx_v_VdV = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":624
 * 
 *     cdef VdVstruct VdV = VdVstruct.__new__(VdVstruct)
 *     VdV.V = Vd1.V + Vd2.V + Vdd.V             # <<<<<<<<<<<<<<
 *     VdV.dV = Vd1.dV + Vd2.dV + Vdd.dV
 *     return VdV
 */
  __pyx_v_VdV->V = ((__pyx_v_Vd1->V + __pyx_v_Vd2->V) + __pyx_v_Vdd->V);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":625
 *     cdef VdVstruct VdV = VdVstruct.__new__(VdVstruct)
 *     VdV.V = Vd1.V + Vd2.V + Vdd.V
 *     VdV.dV = Vd1.dV + Vd2.dV + Vdd.dV             # <<<<<<<<<<<<<<
 *     return VdV
 * 
 */
  __pyx_v_VdV->dV = ((__pyx_v_Vd1->dV + __pyx_v_Vd2->dV) + __pyx_v_Vdd->dV);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":626
 *     VdV.V = Vd1.V + Vd2.V + Vdd.V
 *     VdV.dV = Vd1.dV + Vd2.dV + Vdd.dV
 *     return VdV             # <<<<<<<<<<<<<<
 * 
 * cpdef dict DDD_forces(double theta, DanfossGeoVals geo):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_VdV));
  __pyx_r = __pyx_v_VdV;
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":618
 *     return symm_scroll_geo.DD_forces(theta, geo)
 * 
 * cpdef VdVstruct DDD(double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 *     cdef VdVstruct Vd1 = common.VdV(theta, geo, CVangles(theta, geo, common.keyId1))
 *     cdef VdVstruct Vd2 = common.VdV(theta, geo, CVangles(theta, geo, common.keyId2))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DDD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_Vd1);
  __Pyx_XDECREF((PyObject *)__pyx_v_Vd2);
  __Pyx_XDECREF((PyObject *)__pyx_v_Vdd);
  __Pyx_XDECREF((PyObject *)__pyx_v_VdV);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_29DDD(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_28DDD[] = "DDD(double theta, DanfossGeoVals geo) -> VdVstruct";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_29DDD(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_theta;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("DDD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_geo,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("DDD", 1, 2, 2, 1); __PYX_ERR(0, 618, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "DDD") < 0)) __PYX_ERR(0, 618, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("DDD", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 618, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DDD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 618, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_28DDD(__pyx_self, __pyx_v_theta, __pyx_v_geo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_28DDD(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("DDD", 0);
  __Pyx_TraceCall("DDD (wrapper)", __pyx_f[0], 618, 0, __PYX_ERR(0, 618, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_DDD(__pyx_v_theta, __pyx_v_geo, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DDD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":628
 *     return VdV
 * 
 * cpdef dict DDD_forces(double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 * 
 *     theta_m = geo.phi_fie - theta - pi/2
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_31DDD_forces(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_DDD_forces(double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_theta_m;
  PyObject *__pyx_v_exact_dict = NULL;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_anglesd1 = NULL;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_anglesd2 = NULL;
  double __pyx_v_Ad1;
  double __pyx_v_Ad2;
  PyObject *__pyx_v__D1_forces = NULL;
  PyObject *__pyx_v__D2_forces = NULL;
  PyObject *__pyx_v__DD_forces = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("DDD_forces", 0);
  __Pyx_TraceCall("DDD_forces", __pyx_f[0], 628, 0, __PYX_ERR(0, 628, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":630
 * cpdef dict DDD_forces(double theta, DanfossGeoVals geo):
 * 
 *     theta_m = geo.phi_fie - theta - pi/2             # <<<<<<<<<<<<<<
 * 
 *     exact_dict = {}
 */
  __pyx_v_theta_m = ((__pyx_v_geo->__pyx_base.phi_fie - __pyx_v_theta) - (M_PI / 2.0));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":632
 *     theta_m = geo.phi_fie - theta - pi/2
 * 
 *     exact_dict = {}             # <<<<<<<<<<<<<<
 *     anglesd1 = CVangles(theta, geo, common.keyId1)
 *     anglesd2 = CVangles(theta, geo, common.keyId2)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_exact_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":633
 * 
 *     exact_dict = {}
 *     anglesd1 = CVangles(theta, geo, common.keyId1)             # <<<<<<<<<<<<<<
 *     anglesd2 = CVangles(theta, geo, common.keyId2)
 *     Ad1 = common.VdV(theta, geo, anglesd1).V/geo.h
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta, __pyx_v_geo, __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyId1, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_anglesd1 = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":634
 *     exact_dict = {}
 *     anglesd1 = CVangles(theta, geo, common.keyId1)
 *     anglesd2 = CVangles(theta, geo, common.keyId2)             # <<<<<<<<<<<<<<
 *     Ad1 = common.VdV(theta, geo, anglesd1).V/geo.h
 *     Ad2 = common.VdV(theta, geo, anglesd2).V/geo.h
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta, __pyx_v_geo, __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyId2, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_anglesd2 = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":635
 *     anglesd1 = CVangles(theta, geo, common.keyId1)
 *     anglesd2 = CVangles(theta, geo, common.keyId2)
 *     Ad1 = common.VdV(theta, geo, anglesd1).V/geo.h             # <<<<<<<<<<<<<<
 *     Ad2 = common.VdV(theta, geo, anglesd2).V/geo.h
 *     _D1_forces = common.forces(theta,geo,anglesd1,Ad1)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_6scroll_17common_scroll_geo_VdV(__pyx_v_theta, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_anglesd1, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *)__pyx_t_1)->V;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_geo->__pyx_base.h == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 635, __pyx_L1_error)
  }
  __pyx_v_Ad1 = (__pyx_t_2 / __pyx_v_geo->__pyx_base.h);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":636
 *     anglesd2 = CVangles(theta, geo, common.keyId2)
 *     Ad1 = common.VdV(theta, geo, anglesd1).V/geo.h
 *     Ad2 = common.VdV(theta, geo, anglesd2).V/geo.h             # <<<<<<<<<<<<<<
 *     _D1_forces = common.forces(theta,geo,anglesd1,Ad1)
 *     _D2_forces = common.forces(theta,geo,anglesd2,Ad2)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_6scroll_17common_scroll_geo_VdV(__pyx_v_theta, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_anglesd2, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *)__pyx_t_1)->V;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_geo->__pyx_base.h == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 636, __pyx_L1_error)
  }
  __pyx_v_Ad2 = (__pyx_t_2 / __pyx_v_geo->__pyx_base.h);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":637
 *     Ad1 = common.VdV(theta, geo, anglesd1).V/geo.h
 *     Ad2 = common.VdV(theta, geo, anglesd2).V/geo.h
 *     _D1_forces = common.forces(theta,geo,anglesd1,Ad1)             # <<<<<<<<<<<<<<
 *     _D2_forces = common.forces(theta,geo,anglesd2,Ad2)
 *     _DD_forces = DD_forces(theta,geo)
 */
  __pyx_t_1 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_forces(__pyx_v_theta, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_anglesd1, __pyx_v_Ad1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__D1_forces = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":638
 *     Ad2 = common.VdV(theta, geo, anglesd2).V/geo.h
 *     _D1_forces = common.forces(theta,geo,anglesd1,Ad1)
 *     _D2_forces = common.forces(theta,geo,anglesd2,Ad2)             # <<<<<<<<<<<<<<
 *     _DD_forces = DD_forces(theta,geo)
 *     for key in _D1_forces:
 */
  __pyx_t_1 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_forces(__pyx_v_theta, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_anglesd2, __pyx_v_Ad2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__D2_forces = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":639
 *     _D1_forces = common.forces(theta,geo,anglesd1,Ad1)
 *     _D2_forces = common.forces(theta,geo,anglesd2,Ad2)
 *     _DD_forces = DD_forces(theta,geo)             # <<<<<<<<<<<<<<
 *     for key in _D1_forces:
 *         exact_dict[key] = _D1_forces[key]+_D2_forces[key]+_DD_forces[key]
 */
  __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_DD_forces(__pyx_v_theta, __pyx_v_geo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__DD_forces = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":640
 *     _D2_forces = common.forces(theta,geo,anglesd2,Ad2)
 *     _DD_forces = DD_forces(theta,geo)
 *     for key in _D1_forces:             # <<<<<<<<<<<<<<
 *         exact_dict[key] = _D1_forces[key]+_D2_forces[key]+_DD_forces[key]
 *     exact_dict['cx'] = geo.ro*cos(theta_m)/2.0
 */
  __pyx_t_3 = 0;
  if (unlikely(__pyx_v__D1_forces == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 640, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_dict_iterator(__pyx_v__D1_forces, 1, ((PyObject *)NULL), (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_6;
  __pyx_t_6 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_4, &__pyx_t_3, &__pyx_t_6, NULL, NULL, __pyx_t_5);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":641
 *     _DD_forces = DD_forces(theta,geo)
 *     for key in _D1_forces:
 *         exact_dict[key] = _D1_forces[key]+_D2_forces[key]+_DD_forces[key]             # <<<<<<<<<<<<<<
 *     exact_dict['cx'] = geo.ro*cos(theta_m)/2.0
 *     exact_dict['cy'] = geo.ro*sin(theta_m)/2.0
 */
    if (unlikely(__pyx_v__D1_forces == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 641, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v__D1_forces, __pyx_v_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__pyx_v__D2_forces == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 641, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyDict_GetItem(__pyx_v__D2_forces, __pyx_v_key); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyNumber_Add(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v__DD_forces == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 641, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyDict_GetItem(__pyx_v__DD_forces, __pyx_v_key); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = PyNumber_Add(__pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(PyDict_SetItem(__pyx_v_exact_dict, __pyx_v_key, __pyx_t_6) < 0)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":642
 *     for key in _D1_forces:
 *         exact_dict[key] = _D1_forces[key]+_D2_forces[key]+_DD_forces[key]
 *     exact_dict['cx'] = geo.ro*cos(theta_m)/2.0             # <<<<<<<<<<<<<<
 *     exact_dict['cy'] = geo.ro*sin(theta_m)/2.0
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_geo->__pyx_base.ro * cos(__pyx_v_theta_m)) / 2.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_exact_dict, __pyx_n_s_cx, __pyx_t_1) < 0)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":643
 *         exact_dict[key] = _D1_forces[key]+_D2_forces[key]+_DD_forces[key]
 *     exact_dict['cx'] = geo.ro*cos(theta_m)/2.0
 *     exact_dict['cy'] = geo.ro*sin(theta_m)/2.0             # <<<<<<<<<<<<<<
 * 
 *     return exact_dict
 */
  __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_geo->__pyx_base.ro * sin(__pyx_v_theta_m)) / 2.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_exact_dict, __pyx_n_s_cy, __pyx_t_1) < 0)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":645
 *     exact_dict['cy'] = geo.ro*sin(theta_m)/2.0
 * 
 *     return exact_dict             # <<<<<<<<<<<<<<
 * 
 * cpdef VdVstruct VdV(int index, double theta, DanfossGeoVals geo):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_exact_dict);
  __pyx_r = __pyx_v_exact_dict;
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":628
 *     return VdV
 * 
 * cpdef dict DDD_forces(double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 * 
 *     theta_m = geo.phi_fie - theta - pi/2
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DDD_forces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_exact_dict);
  __Pyx_XDECREF((PyObject *)__pyx_v_anglesd1);
  __Pyx_XDECREF((PyObject *)__pyx_v_anglesd2);
  __Pyx_XDECREF(__pyx_v__D1_forces);
  __Pyx_XDECREF(__pyx_v__D2_forces);
  __Pyx_XDECREF(__pyx_v__DD_forces);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_31DDD_forces(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_30DDD_forces[] = "DDD_forces(double theta, DanfossGeoVals geo) -> dict";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_31DDD_forces(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_theta;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("DDD_forces (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_geo,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("DDD_forces", 1, 2, 2, 1); __PYX_ERR(0, 628, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "DDD_forces") < 0)) __PYX_ERR(0, 628, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("DDD_forces", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 628, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DDD_forces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 628, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_30DDD_forces(__pyx_self, __pyx_v_theta, __pyx_v_geo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_30DDD_forces(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("DDD_forces", 0);
  __Pyx_TraceCall("DDD_forces (wrapper)", __pyx_f[0], 628, 0, __PYX_ERR(0, 628, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_DDD_forces(__pyx_v_theta, __pyx_v_geo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.DDD_forces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":647
 *     return exact_dict
 * 
 * cpdef VdVstruct VdV(int index, double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 *     # Map the angle into [0, 2*pi], so long as it is not less than -20*pi
 *     cdef double theta_02PI = (theta + 20*pi) % (2*pi)
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_33VdV(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_VdV(int __pyx_v_index, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_theta_02PI;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_angles = 0;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("VdV", 0);
  __Pyx_TraceCall("VdV", __pyx_f[0], 647, 0, __PYX_ERR(0, 647, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":649
 * cpdef VdVstruct VdV(int index, double theta, DanfossGeoVals geo):
 *     # Map the angle into [0, 2*pi], so long as it is not less than -20*pi
 *     cdef double theta_02PI = (theta + 20*pi) % (2*pi)             # <<<<<<<<<<<<<<
 *     cdef CVInvolutes angles = CVangles(theta_02PI, geo, index)
 *     return common.VdV(theta_02PI, geo, angles)
 */
  __pyx_t_1 = (__pyx_v_theta + (20.0 * M_PI));
  __pyx_t_2 = (2.0 * M_PI);
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
    __PYX_ERR(0, 649, __pyx_L1_error)
  }
  __pyx_v_theta_02PI = __Pyx_mod_double(__pyx_t_1, __pyx_t_2);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":650
 *     # Map the angle into [0, 2*pi], so long as it is not less than -20*pi
 *     cdef double theta_02PI = (theta + 20*pi) % (2*pi)
 *     cdef CVInvolutes angles = CVangles(theta_02PI, geo, index)             # <<<<<<<<<<<<<<
 *     return common.VdV(theta_02PI, geo, angles)
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta_02PI, __pyx_v_geo, __pyx_v_index, 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_angles = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":651
 *     cdef double theta_02PI = (theta + 20*pi) % (2*pi)
 *     cdef CVInvolutes angles = CVangles(theta_02PI, geo, index)
 *     return common.VdV(theta_02PI, geo, angles)             # <<<<<<<<<<<<<<
 * 
 * cdef int D_as_C_index(int index, double theta, DanfossGeoVals geo):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_3 = ((PyObject *)__pyx_f_5PDSim_6scroll_17common_scroll_geo_VdV(__pyx_v_theta_02PI, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_angles, 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":647
 *     return exact_dict
 * 
 * cpdef VdVstruct VdV(int index, double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 *     # Map the angle into [0, 2*pi], so long as it is not less than -20*pi
 *     cdef double theta_02PI = (theta + 20*pi) % (2*pi)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.VdV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_angles);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_33VdV(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_32VdV[] = "VdV(int index, double theta, DanfossGeoVals geo) -> VdVstruct";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_33VdV(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index;
  double __pyx_v_theta;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("VdV (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_theta,&__pyx_n_s_geo,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("VdV", 1, 3, 3, 1); __PYX_ERR(0, 647, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("VdV", 1, 3, 3, 2); __PYX_ERR(0, 647, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "VdV") < 0)) __PYX_ERR(0, 647, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 647, __pyx_L3_error)
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 647, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("VdV", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 647, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.VdV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 647, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_32VdV(__pyx_self, __pyx_v_index, __pyx_v_theta, __pyx_v_geo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_32VdV(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("VdV", 0);
  __Pyx_TraceCall("VdV (wrapper)", __pyx_f[0], 647, 0, __PYX_ERR(0, 647, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_VdV(__pyx_v_index, __pyx_v_theta, __pyx_v_geo, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.VdV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":653
 *     return common.VdV(theta_02PI, geo, angles)
 * 
 * cdef int D_as_C_index(int index, double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 *     """
 *     This function determines whether the conditions are such that
 */

static int __pyx_f_12DanfossPDSim_16asymm_scroll_geo_D_as_C_index(int __pyx_v_index, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo) {
  int __pyx_v_before_discharge;
  double __pyx_v_angle1;
  double __pyx_v_angle2;
  double __pyx_v_anglediff;
  long __pyx_v_path;
  double __pyx_v_t2;
  int __pyx_v_alpha;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("D_as_C_index", 0);
  __Pyx_TraceCall("D_as_C_index", __pyx_f[0], 653, 0, __PYX_ERR(0, 653, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":669
 *     # on the unit circle (cos(t1), sin(t1)) and (cos(t2), sin(t2))
 *     # are negative, then then the angles are sorted in a clockwise sense
 *     path = 1 if index == keyId1 else 2             # <<<<<<<<<<<<<<
 *     t2 = theta_d(geo, path)
 *     before_discharge = (cos(theta)*sin(t2)-sin(theta)*cos(t2)>0)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_keyId1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {
    __pyx_t_1 = 1;
  } else {
    __pyx_t_1 = 2;
  }
  __pyx_v_path = __pyx_t_1;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":670
 *     # are negative, then then the angles are sorted in a clockwise sense
 *     path = 1 if index == keyId1 else 2
 *     t2 = theta_d(geo, path)             # <<<<<<<<<<<<<<
 *     before_discharge = (cos(theta)*sin(t2)-sin(theta)*cos(t2)>0)
 *     angle1, angle2 = sortAnglesCCW(theta, t2)
 */
  __pyx_t_6 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_theta_d(__pyx_v_geo, __pyx_v_path, 0); if (unlikely(__pyx_t_6 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L1_error)
  __pyx_v_t2 = __pyx_t_6;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":671
 *     path = 1 if index == keyId1 else 2
 *     t2 = theta_d(geo, path)
 *     before_discharge = (cos(theta)*sin(t2)-sin(theta)*cos(t2)>0)             # <<<<<<<<<<<<<<
 *     angle1, angle2 = sortAnglesCCW(theta, t2)
 *     anglediff = angle2-angle1
 */
  __pyx_v_before_discharge = (((cos(__pyx_v_theta) * sin(__pyx_v_t2)) - (sin(__pyx_v_theta) * cos(__pyx_v_t2))) > 0.0);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":672
 *     t2 = theta_d(geo, path)
 *     before_discharge = (cos(theta)*sin(t2)-sin(theta)*cos(t2)>0)
 *     angle1, angle2 = sortAnglesCCW(theta, t2)             # <<<<<<<<<<<<<<
 *     anglediff = angle2-angle1
 *     # Check that you are both to the "left" of the discharge angle in a rotaional
 */
  __pyx_t_4 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_sortAnglesCCW(__pyx_v_theta, __pyx_v_t2, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (likely(__pyx_t_4 != Py_None)) {
    PyObject* sequence = __pyx_t_4;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 672, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 672, __pyx_L1_error)
  }
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_angle1 = __pyx_t_6;
  __pyx_v_angle2 = __pyx_t_7;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":673
 *     before_discharge = (cos(theta)*sin(t2)-sin(theta)*cos(t2)>0)
 *     angle1, angle2 = sortAnglesCCW(theta, t2)
 *     anglediff = angle2-angle1             # <<<<<<<<<<<<<<
 *     # Check that you are both to the "left" of the discharge angle in a rotaional
 *     # sense and just to the left of it
 */
  __pyx_v_anglediff = (__pyx_v_angle2 - __pyx_v_angle1);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":676
 *     # Check that you are both to the "left" of the discharge angle in a rotaional
 *     # sense and just to the left of it
 *     if before_discharge and anglediff < 1e-8:             # <<<<<<<<<<<<<<
 *         alpha = getNc(theta, geo, path)
 *         return get_compression_chamber_index(path, alpha)
 */
  __pyx_t_8 = (__pyx_v_before_discharge != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_5 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_8 = ((__pyx_v_anglediff < 1e-8) != 0);
  __pyx_t_5 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":677
 *     # sense and just to the left of it
 *     if before_discharge and anglediff < 1e-8:
 *         alpha = getNc(theta, geo, path)             # <<<<<<<<<<<<<<
 *         return get_compression_chamber_index(path, alpha)
 *     else:
 */
    __pyx_v_alpha = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_getNc(__pyx_v_theta, __pyx_v_geo, __pyx_v_path, 0);

    /* "DanfossPDSim/asymm_scroll_geo.pyx":678
 *     if before_discharge and anglediff < 1e-8:
 *         alpha = getNc(theta, geo, path)
 *         return get_compression_chamber_index(path, alpha)             # <<<<<<<<<<<<<<
 *     else:
 *         return index
 */
    __pyx_r = __pyx_f_5PDSim_6scroll_17common_scroll_geo_get_compression_chamber_index(__pyx_v_path, __pyx_v_alpha, 0);
    goto __pyx_L0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":676
 *     # Check that you are both to the "left" of the discharge angle in a rotaional
 *     # sense and just to the left of it
 *     if before_discharge and anglediff < 1e-8:             # <<<<<<<<<<<<<<
 *         alpha = getNc(theta, geo, path)
 *         return get_compression_chamber_index(path, alpha)
 */
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":680
 *         return get_compression_chamber_index(path, alpha)
 *     else:
 *         return index             # <<<<<<<<<<<<<<
 * 
 * cpdef dict forces(int index, double theta, DanfossGeoVals geo, CVInvolutes angles = None):
 */
  /*else*/ {
    __pyx_r = __pyx_v_index;
    goto __pyx_L0;
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":653
 *     return common.VdV(theta_02PI, geo, angles)
 * 
 * cdef int D_as_C_index(int index, double theta, DanfossGeoVals geo):             # <<<<<<<<<<<<<<
 *     """
 *     This function determines whether the conditions are such that
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("DanfossPDSim.asymm_scroll_geo.D_as_C_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":682
 *         return index
 * 
 * cpdef dict forces(int index, double theta, DanfossGeoVals geo, CVInvolutes angles = None):             # <<<<<<<<<<<<<<
 *     """
 *     Calculate the force terms from the geometry
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_35forces(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_forces(int __pyx_v_index, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_forces *__pyx_optional_args) {
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_angles = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)Py_None);
  double __pyx_v_V;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("forces", 0);
  __Pyx_TraceCall("forces", __pyx_f[0], 682, 0, __PYX_ERR(0, 682, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_angles = __pyx_optional_args->angles;
    }
  }
  __Pyx_INCREF((PyObject *)__pyx_v_angles);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":688
 * 
 *     # Specialized treatments for SA, DD, DDD
 *     if index == common.keyIsa:             # <<<<<<<<<<<<<<
 *         return SA_forces(theta, geo)
 *     elif index == common.keyIdd:
 */
  switch (__pyx_v_index) {
    case __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIsa:

    /* "DanfossPDSim/asymm_scroll_geo.pyx":689
 *     # Specialized treatments for SA, DD, DDD
 *     if index == common.keyIsa:
 *         return SA_forces(theta, geo)             # <<<<<<<<<<<<<<
 *     elif index == common.keyIdd:
 *         return DD_forces(theta, geo)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_SA_forces(__pyx_v_theta, __pyx_v_geo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":688
 * 
 *     # Specialized treatments for SA, DD, DDD
 *     if index == common.keyIsa:             # <<<<<<<<<<<<<<
 *         return SA_forces(theta, geo)
 *     elif index == common.keyIdd:
 */
    break;
    case __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIdd:

    /* "DanfossPDSim/asymm_scroll_geo.pyx":691
 *         return SA_forces(theta, geo)
 *     elif index == common.keyIdd:
 *         return DD_forces(theta, geo)             # <<<<<<<<<<<<<<
 *     elif index == common.keyIddd:
 *         return DDD_forces(theta, geo)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_DD_forces(__pyx_v_theta, __pyx_v_geo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":690
 *     if index == common.keyIsa:
 *         return SA_forces(theta, geo)
 *     elif index == common.keyIdd:             # <<<<<<<<<<<<<<
 *         return DD_forces(theta, geo)
 *     elif index == common.keyIddd:
 */
    break;
    case __pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIddd:

    /* "DanfossPDSim/asymm_scroll_geo.pyx":693
 *         return DD_forces(theta, geo)
 *     elif index == common.keyIddd:
 *         return DDD_forces(theta, geo)             # <<<<<<<<<<<<<<
 *     else:
 *         # Generalized treatment for other chambers
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_DDD_forces(__pyx_v_theta, __pyx_v_geo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":692
 *     elif index == common.keyIdd:
 *         return DD_forces(theta, geo)
 *     elif index == common.keyIddd:             # <<<<<<<<<<<<<<
 *         return DDD_forces(theta, geo)
 *     else:
 */
    break;
    default:

    /* "DanfossPDSim/asymm_scroll_geo.pyx":696
 *     else:
 *         # Generalized treatment for other chambers
 *         if angles is None:             # <<<<<<<<<<<<<<
 *             angles = CVangles(theta, geo, index)
 *         V = common.VdV(theta, geo, angles).V
 */
    __pyx_t_2 = (((PyObject *)__pyx_v_angles) == Py_None);
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "DanfossPDSim/asymm_scroll_geo.pyx":697
 *         # Generalized treatment for other chambers
 *         if angles is None:
 *             angles = CVangles(theta, geo, index)             # <<<<<<<<<<<<<<
 *         V = common.VdV(theta, geo, angles).V
 *         if V == 0.0 and (index == keyIs1 or index == keyIs2):
 */
      __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta, __pyx_v_geo, __pyx_v_index, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 697, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_angles, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "DanfossPDSim/asymm_scroll_geo.pyx":696
 *     else:
 *         # Generalized treatment for other chambers
 *         if angles is None:             # <<<<<<<<<<<<<<
 *             angles = CVangles(theta, geo, index)
 *         V = common.VdV(theta, geo, angles).V
 */
    }

    /* "DanfossPDSim/asymm_scroll_geo.pyx":698
 *         if angles is None:
 *             angles = CVangles(theta, geo, index)
 *         V = common.VdV(theta, geo, angles).V             # <<<<<<<<<<<<<<
 *         if V == 0.0 and (index == keyIs1 or index == keyIs2):
 *             V += 1e-8
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_6scroll_17common_scroll_geo_VdV(__pyx_v_theta, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_angles, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *)__pyx_t_1)->V;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_V = __pyx_t_4;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":699
 *             angles = CVangles(theta, geo, index)
 *         V = common.VdV(theta, geo, angles).V
 *         if V == 0.0 and (index == keyIs1 or index == keyIs2):             # <<<<<<<<<<<<<<
 *             V += 1e-8
 *         if index == keyId1 or index == keyId2:
 */
    __pyx_t_2 = ((__pyx_v_V == 0.0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_keyIs1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_1, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_keyIs2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_6, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_3) {

      /* "DanfossPDSim/asymm_scroll_geo.pyx":700
 *         V = common.VdV(theta, geo, angles).V
 *         if V == 0.0 and (index == keyIs1 or index == keyIs2):
 *             V += 1e-8             # <<<<<<<<<<<<<<
 *         if index == keyId1 or index == keyId2:
 *             # Special case when just before the discharge angle, at which point
 */
      __pyx_v_V = (__pyx_v_V + 1e-8);

      /* "DanfossPDSim/asymm_scroll_geo.pyx":699
 *             angles = CVangles(theta, geo, index)
 *         V = common.VdV(theta, geo, angles).V
 *         if V == 0.0 and (index == keyIs1 or index == keyIs2):             # <<<<<<<<<<<<<<
 *             V += 1e-8
 *         if index == keyId1 or index == keyId2:
 */
    }

    /* "DanfossPDSim/asymm_scroll_geo.pyx":701
 *         if V == 0.0 and (index == keyIs1 or index == keyIs2):
 *             V += 1e-8
 *         if index == keyId1 or index == keyId2:             # <<<<<<<<<<<<<<
 *             # Special case when just before the discharge angle, at which point
 *             # the force function of the c1.alpha or c2.alpha should be used
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_keyId1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_1, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_keyId2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_6, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __pyx_t_2;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_3) {

      /* "DanfossPDSim/asymm_scroll_geo.pyx":705
 *             # the force function of the c1.alpha or c2.alpha should be used
 *             # instead of that of d1 or d2
 *             angles = CVangles(theta, geo, D_as_C_index(index, theta, geo))             # <<<<<<<<<<<<<<
 *             V = common.VdV(theta, geo, angles).V
 *             return common.forces(theta, geo, angles, V/geo.h)
 */
      __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta, __pyx_v_geo, __pyx_f_12DanfossPDSim_16asymm_scroll_geo_D_as_C_index(__pyx_v_index, __pyx_v_theta, __pyx_v_geo), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_angles, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "DanfossPDSim/asymm_scroll_geo.pyx":706
 *             # instead of that of d1 or d2
 *             angles = CVangles(theta, geo, D_as_C_index(index, theta, geo))
 *             V = common.VdV(theta, geo, angles).V             # <<<<<<<<<<<<<<
 *             return common.forces(theta, geo, angles, V/geo.h)
 * 
 */
      __pyx_t_1 = ((PyObject *)__pyx_f_5PDSim_6scroll_17common_scroll_geo_VdV(__pyx_v_theta, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_angles, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 706, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *)__pyx_t_1)->V;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_V = __pyx_t_4;

      /* "DanfossPDSim/asymm_scroll_geo.pyx":707
 *             angles = CVangles(theta, geo, D_as_C_index(index, theta, geo))
 *             V = common.VdV(theta, geo, angles).V
 *             return common.forces(theta, geo, angles, V/geo.h)             # <<<<<<<<<<<<<<
 * 
 *         return common.forces(theta, geo, angles, V/geo.h)
 */
      __Pyx_XDECREF(__pyx_r);
      if (unlikely(__pyx_v_geo->__pyx_base.h == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 707, __pyx_L1_error)
      }
      __pyx_t_1 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_forces(__pyx_v_theta, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_angles, (__pyx_v_V / __pyx_v_geo->__pyx_base.h), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 707, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "DanfossPDSim/asymm_scroll_geo.pyx":701
 *         if V == 0.0 and (index == keyIs1 or index == keyIs2):
 *             V += 1e-8
 *         if index == keyId1 or index == keyId2:             # <<<<<<<<<<<<<<
 *             # Special case when just before the discharge angle, at which point
 *             # the force function of the c1.alpha or c2.alpha should be used
 */
    }

    /* "DanfossPDSim/asymm_scroll_geo.pyx":709
 *             return common.forces(theta, geo, angles, V/geo.h)
 * 
 *         return common.forces(theta, geo, angles, V/geo.h)             # <<<<<<<<<<<<<<
 * 
 * cpdef CVcoords(CVkey, DanfossGeoVals geo, double theta, int Ninv=1000):
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_geo->__pyx_base.h == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 709, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_forces(__pyx_v_theta, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_angles, (__pyx_v_V / __pyx_v_geo->__pyx_base.h), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 709, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":682
 *         return index
 * 
 * cpdef dict forces(int index, double theta, DanfossGeoVals geo, CVInvolutes angles = None):             # <<<<<<<<<<<<<<
 *     """
 *     Calculate the force terms from the geometry
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.forces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_angles);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_35forces(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_34forces[] = "forces(int index, double theta, DanfossGeoVals geo, CVInvolutes angles=None) -> dict\n\n    Calculate the force terms from the geometry\n    ";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_35forces(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index;
  double __pyx_v_theta;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_angles = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("forces (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_theta,&__pyx_n_s_geo,&__pyx_n_s_angles,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = (PyObject *)((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("forces", 0, 3, 4, 1); __PYX_ERR(0, 682, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("forces", 0, 3, 4, 2); __PYX_ERR(0, 682, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angles);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "forces") < 0)) __PYX_ERR(0, 682, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 682, __pyx_L3_error)
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 682, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[2]);
    __pyx_v_angles = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("forces", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 682, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.forces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 682, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_angles), __pyx_ptype_5PDSim_6scroll_17common_scroll_geo_CVInvolutes, 1, "angles", 0))) __PYX_ERR(0, 682, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_34forces(__pyx_self, __pyx_v_index, __pyx_v_theta, __pyx_v_geo, __pyx_v_angles);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_34forces(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_angles) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_forces __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("forces", 0);
  __Pyx_TraceCall("forces (wrapper)", __pyx_f[0], 682, 0, __PYX_ERR(0, 682, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.angles = __pyx_v_angles;
  __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_forces(__pyx_v_index, __pyx_v_theta, __pyx_v_geo, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.forces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":711
 *         return common.forces(theta, geo, angles, V/geo.h)
 * 
 * cpdef CVcoords(CVkey, DanfossGeoVals geo, double theta, int Ninv=1000):             # <<<<<<<<<<<<<<
 *     """
 *     Return a tuple of numpy arrays for x,y coordinates for the curves which
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_37CVcoords(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVcoords(PyObject *__pyx_v_CVkey, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, double __pyx_v_theta, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_CVcoords *__pyx_optional_args) {
  int __pyx_v_Ninv = ((int)0x3E8);
  CYTHON_UNUSED int __pyx_v_Nc1;
  CYTHON_UNUSED int __pyx_v_Nc2;
  double __pyx_v_r;
  PyObject *__pyx_v_xee = NULL;
  PyObject *__pyx_v_yee = NULL;
  PyObject *__pyx_v_xse = NULL;
  PyObject *__pyx_v_yse = NULL;
  PyObject *__pyx_v_xoie = NULL;
  PyObject *__pyx_v_yoie = NULL;
  PyObject *__pyx_v_xooe = NULL;
  PyObject *__pyx_v_yooe = NULL;
  PyObject *__pyx_v_xwall = NULL;
  PyObject *__pyx_v_ywall = NULL;
  PyObject *__pyx_v_xoo = NULL;
  PyObject *__pyx_v_yoo = NULL;
  PyObject *__pyx_v_x0 = NULL;
  PyObject *__pyx_v_y0 = NULL;
  double __pyx_v_beta;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_CV = NULL;
  PyObject *__pyx_v_phi_outer = NULL;
  PyObject *__pyx_v_phi_inner = NULL;
  PyObject *__pyx_v_key_outer = NULL;
  PyObject *__pyx_v_key_inner = NULL;
  PyObject *__pyx_v_x1 = NULL;
  PyObject *__pyx_v_y1 = NULL;
  PyObject *__pyx_v_x2 = NULL;
  PyObject *__pyx_v_y2 = NULL;
  double __pyx_v_theta_m;
  PyObject *__pyx_v_x_farc1 = NULL;
  PyObject *__pyx_v_y_farc1 = NULL;
  PyObject *__pyx_v_x_oarc1 = NULL;
  PyObject *__pyx_v_y_oarc1 = NULL;
  PyObject *__pyx_v_x_farc2 = NULL;
  PyObject *__pyx_v_y_farc2 = NULL;
  PyObject *__pyx_v_x_oarc2 = NULL;
  PyObject *__pyx_v_y_oarc2 = NULL;
  PyObject *__pyx_v_x_farc3 = NULL;
  PyObject *__pyx_v_y_farc3 = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_x_oarc3 = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_y_oarc3 = NULL;
  PyObject *__pyx_v_phi = NULL;
  PyObject *__pyx_v_x_finv = NULL;
  PyObject *__pyx_v_y_finv = NULL;
  PyObject *__pyx_v_x_oinv = NULL;
  PyObject *__pyx_v_y_oinv = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo_coords_inv __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  double __pyx_t_11;
  int __pyx_t_12;
  long __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CVcoords", 0);
  __Pyx_TraceCall("CVcoords", __pyx_f[0], 711, 0, __PYX_ERR(0, 711, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_Ninv = __pyx_optional_args->Ninv;
    }
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":724
 *     """
 * 
 *     cdef int Nc1 = Nc(theta, geo, 1), Nc2 = Nc(theta, geo, 2)             # <<<<<<<<<<<<<<
 * 
 *     if CVkey == 'sa':
 */
  __pyx_v_Nc1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Nc(__pyx_v_theta, __pyx_v_geo, 1, 0);
  __pyx_v_Nc2 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_Nc(__pyx_v_theta, __pyx_v_geo, 2, 0);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":726
 *     cdef int Nc1 = Nc(theta, geo, 1), Nc2 = Nc(theta, geo, 2)
 * 
 *     if CVkey == 'sa':             # <<<<<<<<<<<<<<
 * 
 *         r = (2*pi*geo.rb-geo.t)/2.0
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_CVkey, __pyx_n_s_sa, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 726, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":728
 *     if CVkey == 'sa':
 * 
 *         r = (2*pi*geo.rb-geo.t)/2.0             # <<<<<<<<<<<<<<
 * 
 *         xee, yee = coords_inv(geo.phi_oie + pi, geo, 0.0, 'fi')
 */
    __pyx_v_r = ((((2.0 * M_PI) * __pyx_v_geo->__pyx_base.rb) - __pyx_v_geo->__pyx_base.t) / 2.0);

    /* "DanfossPDSim/asymm_scroll_geo.pyx":730
 *         r = (2*pi*geo.rb-geo.t)/2.0
 * 
 *         xee, yee = coords_inv(geo.phi_oie + pi, geo, 0.0, 'fi')             # <<<<<<<<<<<<<<
 *         xse, yse = coords_inv(geo.phi_oie - pi, geo, 0.0, 'fo')
 *         xoie, yoie = coords_inv(geo.phi_oie, geo, theta, 'oi')
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_geo->__pyx_base.phi_oie + M_PI)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 730, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4.__pyx_n = 1;
    __pyx_t_4.flag = __pyx_n_s_fi;
    __pyx_t_3 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_t_2, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), 0.0, 0, &__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 730, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(__pyx_t_3 != Py_None)) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 730, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 730, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 730, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 730, __pyx_L1_error)
    }
    __pyx_v_xee = __pyx_t_2;
    __pyx_t_2 = 0;
    __pyx_v_yee = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":731
 * 
 *         xee, yee = coords_inv(geo.phi_oie + pi, geo, 0.0, 'fi')
 *         xse, yse = coords_inv(geo.phi_oie - pi, geo, 0.0, 'fo')             # <<<<<<<<<<<<<<
 *         xoie, yoie = coords_inv(geo.phi_oie, geo, theta, 'oi')
 *         xooe, yooe = coords_inv(geo.phi_ooe, geo, theta, 'oo')
 */
    __pyx_t_3 = PyFloat_FromDouble((__pyx_v_geo->__pyx_base.phi_oie - M_PI)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4.__pyx_n = 1;
    __pyx_t_4.flag = __pyx_n_s_fo;
    __pyx_t_5 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_t_3, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), 0.0, 0, &__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_5 != Py_None)) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 731, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 731, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 731, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 731, __pyx_L1_error)
    }
    __pyx_v_xse = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_yse = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":732
 *         xee, yee = coords_inv(geo.phi_oie + pi, geo, 0.0, 'fi')
 *         xse, yse = coords_inv(geo.phi_oie - pi, geo, 0.0, 'fo')
 *         xoie, yoie = coords_inv(geo.phi_oie, geo, theta, 'oi')             # <<<<<<<<<<<<<<
 *         xooe, yooe = coords_inv(geo.phi_ooe, geo, theta, 'oo')
 * 
 */
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.phi_oie); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4.__pyx_n = 1;
    __pyx_t_4.flag = __pyx_n_s_oi;
    __pyx_t_2 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_t_5, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, 0, &__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(__pyx_t_2 != Py_None)) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 732, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 732, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 732, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 732, __pyx_L1_error)
    }
    __pyx_v_xoie = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_v_yoie = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":733
 *         xse, yse = coords_inv(geo.phi_oie - pi, geo, 0.0, 'fo')
 *         xoie, yoie = coords_inv(geo.phi_oie, geo, theta, 'oi')
 *         xooe, yooe = coords_inv(geo.phi_ooe, geo, theta, 'oo')             # <<<<<<<<<<<<<<
 * 
 *         xwall, ywall = coords_inv(np.linspace(geo.phi_fie, geo.phi_oie + pi, 300), geo, 0.0, 'fi')
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.phi_ooe); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4.__pyx_n = 1;
    __pyx_t_4.flag = __pyx_n_s_oo;
    __pyx_t_3 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_t_2, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, 0, &__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(__pyx_t_3 != Py_None)) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 733, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 733, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 733, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 733, __pyx_L1_error)
    }
    __pyx_v_xooe = __pyx_t_2;
    __pyx_t_2 = 0;
    __pyx_v_yooe = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":735
 *         xooe, yooe = coords_inv(geo.phi_ooe, geo, theta, 'oo')
 * 
 *         xwall, ywall = coords_inv(np.linspace(geo.phi_fie, geo.phi_oie + pi, 300), geo, 0.0, 'fi')             # <<<<<<<<<<<<<<
 *         xoo, yoo = coords_inv(np.linspace(geo.phi_oie, phi_s1_sa(theta, geo)[0], 300), geo, theta, 'oo')
 *         x0,y0 = (xee+xse)/2,(yee+yse)/2
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_linspace); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.phi_fie); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble((__pyx_v_geo->__pyx_base.phi_oie + M_PI)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_5, __pyx_t_6, __pyx_int_300};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 735, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_5, __pyx_t_6, __pyx_int_300};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 735, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_6);
      __Pyx_INCREF(__pyx_int_300);
      __Pyx_GIVEREF(__pyx_int_300);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_int_300);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4.__pyx_n = 1;
    __pyx_t_4.flag = __pyx_n_s_fi;
    __pyx_t_2 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_t_3, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), 0.0, 0, &__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2 != Py_None)) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 735, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 735, __pyx_L1_error)
    }
    __pyx_v_xwall = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_ywall = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":736
 * 
 *         xwall, ywall = coords_inv(np.linspace(geo.phi_fie, geo.phi_oie + pi, 300), geo, 0.0, 'fi')
 *         xoo, yoo = coords_inv(np.linspace(geo.phi_oie, phi_s1_sa(theta, geo)[0], 300), geo, theta, 'oo')             # <<<<<<<<<<<<<<
 *         x0,y0 = (xee+xse)/2,(yee+yse)/2
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_linspace); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.phi_oie); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_phi_s1_sa(__pyx_v_theta, __pyx_v_geo, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__pyx_t_6 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 736, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_t_9, __pyx_t_5, __pyx_int_300};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 736, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_t_9, __pyx_t_5, __pyx_int_300};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 736, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 736, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_t_5);
      __Pyx_INCREF(__pyx_int_300);
      __Pyx_GIVEREF(__pyx_int_300);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_8, __pyx_int_300);
      __pyx_t_9 = 0;
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 736, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4.__pyx_n = 1;
    __pyx_t_4.flag = __pyx_n_s_oo;
    __pyx_t_3 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_t_2, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, 0, &__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(__pyx_t_3 != Py_None)) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 736, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 736, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 736, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 736, __pyx_L1_error)
    }
    __pyx_v_xoo = __pyx_t_2;
    __pyx_t_2 = 0;
    __pyx_v_yoo = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":737
 *         xwall, ywall = coords_inv(np.linspace(geo.phi_fie, geo.phi_oie + pi, 300), geo, 0.0, 'fi')
 *         xoo, yoo = coords_inv(np.linspace(geo.phi_oie, phi_s1_sa(theta, geo)[0], 300), geo, theta, 'oo')
 *         x0,y0 = (xee+xse)/2,(yee+yse)/2             # <<<<<<<<<<<<<<
 * 
 *         beta = atan2(yee-y0,xee-x0)
 */
    __pyx_t_3 = PyNumber_Add(__pyx_v_xee, __pyx_v_xse); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_int_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_v_yee, __pyx_v_yse); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_int_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_x0 = __pyx_t_7;
    __pyx_t_7 = 0;
    __pyx_v_y0 = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":739
 *         x0,y0 = (xee+xse)/2,(yee+yse)/2
 * 
 *         beta = atan2(yee-y0,xee-x0)             # <<<<<<<<<<<<<<
 *         t = np.linspace(beta,beta+pi,1000)
 *         x,y = x0+r*np.cos(t),y0+r*np.sin(t)
 */
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_yee, __pyx_v_y0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_xee, __pyx_v_x0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_beta = atan2(__pyx_t_10, __pyx_t_11);

    /* "DanfossPDSim/asymm_scroll_geo.pyx":740
 * 
 *         beta = atan2(yee-y0,xee-x0)
 *         t = np.linspace(beta,beta+pi,1000)             # <<<<<<<<<<<<<<
 *         x,y = x0+r*np.cos(t),y0+r*np.sin(t)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_linspace); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_beta); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_beta + M_PI)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_t_7, __pyx_t_5, __pyx_int_1000};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 740, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_t_7, __pyx_t_5, __pyx_int_1000};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 740, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_8, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_8, __pyx_t_5);
      __Pyx_INCREF(__pyx_int_1000);
      __Pyx_GIVEREF(__pyx_int_1000);
      PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_8, __pyx_int_1000);
      __pyx_t_7 = 0;
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_t = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":741
 *         beta = atan2(yee-y0,xee-x0)
 *         t = np.linspace(beta,beta+pi,1000)
 *         x,y = x0+r*np.cos(t),y0+r*np.sin(t)             # <<<<<<<<<<<<<<
 * 
 *         return np.r_[x,xoie,xooe,xoo,xwall,x[0]],np.r_[y,yoie,yooe,yoo,ywall,y[0]]
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_cos); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_t) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_t);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_v_x0, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_r); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_sin); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_v_t) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_t);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_v_y0, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_x = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_y = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":743
 *         x,y = x0+r*np.cos(t),y0+r*np.sin(t)
 * 
 *         return np.r_[x,xoie,xooe,xoo,xwall,x[0]],np.r_[y,yoie,yooe,yoo,ywall,y[0]]             # <<<<<<<<<<<<<<
 * 
 *     elif (CVkey == 's1' or CVkey == 's2' or CVkey == 'd1' or CVkey == 'd2'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_r_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = PyTuple_New(6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_xoie);
    __Pyx_GIVEREF(__pyx_v_xoie);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_xoie);
    __Pyx_INCREF(__pyx_v_xooe);
    __Pyx_GIVEREF(__pyx_v_xooe);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_xooe);
    __Pyx_INCREF(__pyx_v_xoo);
    __Pyx_GIVEREF(__pyx_v_xoo);
    PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_v_xoo);
    __Pyx_INCREF(__pyx_v_xwall);
    __Pyx_GIVEREF(__pyx_v_xwall);
    PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_v_xwall);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_r_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_y, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyTuple_New(6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_y);
    __Pyx_INCREF(__pyx_v_yoie);
    __Pyx_GIVEREF(__pyx_v_yoie);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_yoie);
    __Pyx_INCREF(__pyx_v_yooe);
    __Pyx_GIVEREF(__pyx_v_yooe);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_yooe);
    __Pyx_INCREF(__pyx_v_yoo);
    __Pyx_GIVEREF(__pyx_v_yoo);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_v_yoo);
    __Pyx_INCREF(__pyx_v_ywall);
    __Pyx_GIVEREF(__pyx_v_ywall);
    PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_v_ywall);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
    __pyx_t_2 = 0;
    __pyx_t_7 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":726
 *     cdef int Nc1 = Nc(theta, geo, 1), Nc2 = Nc(theta, geo, 2)
 * 
 *     if CVkey == 'sa':             # <<<<<<<<<<<<<<
 * 
 *         r = (2*pi*geo.rb-geo.t)/2.0
 */
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":745
 *         return np.r_[x,xoie,xooe,xoo,xwall,x[0]],np.r_[y,yoie,yooe,yoo,ywall,y[0]]
 * 
 *     elif (CVkey == 's1' or CVkey == 's2' or CVkey == 'd1' or CVkey == 'd2'             # <<<<<<<<<<<<<<
 *           or CVkey.startswith('c1.') or CVkey.startswith('c2.')):
 * 
 */
  __pyx_t_12 = (__Pyx_PyString_Equals(__pyx_v_CVkey, __pyx_n_s_s1, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 745, __pyx_L1_error)
  if (!__pyx_t_12) {
  } else {
    __pyx_t_1 = __pyx_t_12;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_12 = (__Pyx_PyString_Equals(__pyx_v_CVkey, __pyx_n_s_s2, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 745, __pyx_L1_error)
  if (!__pyx_t_12) {
  } else {
    __pyx_t_1 = __pyx_t_12;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_12 = (__Pyx_PyString_Equals(__pyx_v_CVkey, __pyx_n_s_d1, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 745, __pyx_L1_error)
  if (!__pyx_t_12) {
  } else {
    __pyx_t_1 = __pyx_t_12;
    goto __pyx_L4_bool_binop_done;
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":746
 * 
 *     elif (CVkey == 's1' or CVkey == 's2' or CVkey == 'd1' or CVkey == 'd2'
 *           or CVkey.startswith('c1.') or CVkey.startswith('c2.')):             # <<<<<<<<<<<<<<
 * 
 *         if common.get_compressor_CV_index(CVkey) < 0:
 */
  __pyx_t_12 = (__Pyx_PyString_Equals(__pyx_v_CVkey, __pyx_n_s_d2, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 745, __pyx_L1_error)
  if (!__pyx_t_12) {
  } else {
    __pyx_t_1 = __pyx_t_12;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_CVkey, __pyx_n_s_startswith); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_2, __pyx_kp_s_c1) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_s_c1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!__pyx_t_12) {
  } else {
    __pyx_t_1 = __pyx_t_12;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_CVkey, __pyx_n_s_startswith); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_2, __pyx_kp_s_c2) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_s_c2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __pyx_t_12;
  __pyx_L4_bool_binop_done:;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":745
 *         return np.r_[x,xoie,xooe,xoo,xwall,x[0]],np.r_[y,yoie,yooe,yoo,ywall,y[0]]
 * 
 *     elif (CVkey == 's1' or CVkey == 's2' or CVkey == 'd1' or CVkey == 'd2'             # <<<<<<<<<<<<<<
 *           or CVkey.startswith('c1.') or CVkey.startswith('c2.')):
 * 
 */
  if (__pyx_t_1) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":748
 *           or CVkey.startswith('c1.') or CVkey.startswith('c2.')):
 * 
 *         if common.get_compressor_CV_index(CVkey) < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('CVkey [{key:s}] is invalid'.format(key = CVkey))
 * 
 */
    __pyx_t_13 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_get_compressor_CV_index(__pyx_v_CVkey, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_13 < 0) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "DanfossPDSim/asymm_scroll_geo.pyx":749
 * 
 *         if common.get_compressor_CV_index(CVkey) < 0:
 *             raise ValueError('CVkey [{key:s}] is invalid'.format(key = CVkey))             # <<<<<<<<<<<<<<
 * 
 *         # Get the bounding involute angles
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_CVkey_key_s_is_invalid, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 749, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 749, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_key, __pyx_v_CVkey) < 0) __PYX_ERR(0, 749, __pyx_L1_error)
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 749, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 749, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 749, __pyx_L1_error)

      /* "DanfossPDSim/asymm_scroll_geo.pyx":748
 *           or CVkey.startswith('c1.') or CVkey.startswith('c2.')):
 * 
 *         if common.get_compressor_CV_index(CVkey) < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('CVkey [{key:s}] is invalid'.format(key = CVkey))
 * 
 */
    }

    /* "DanfossPDSim/asymm_scroll_geo.pyx":752
 * 
 *         # Get the bounding involute angles
 *         CV = CVangles(theta, geo, common.get_compressor_CV_index(CVkey))             # <<<<<<<<<<<<<<
 * 
 *         # Arrays of linearly spaced involute angles on each bounding involute
 */
    __pyx_t_13 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_get_compressor_CV_index(__pyx_v_CVkey, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 752, __pyx_L1_error)
    __pyx_t_7 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta, __pyx_v_geo, __pyx_t_13, 0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 752, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_CV = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":755
 * 
 *         # Arrays of linearly spaced involute angles on each bounding involute
 *         phi_outer = np.linspace(CV.Outer.phi_min, CV.Outer.phi_max, Ninv)             # <<<<<<<<<<<<<<
 *         phi_inner = np.linspace(CV.Inner.phi_max, CV.Inner.phi_min, Ninv)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_linspace); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_CV->Outer->phi_min); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_CV->Outer->phi_max); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_Ninv); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_t_2, __pyx_t_3, __pyx_t_6};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 755, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_t_2, __pyx_t_3, __pyx_t_6};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 755, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_14 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 755, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_8, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_8, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_8, __pyx_t_6);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_6 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_14, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 755, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_phi_outer = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":756
 *         # Arrays of linearly spaced involute angles on each bounding involute
 *         phi_outer = np.linspace(CV.Outer.phi_min, CV.Outer.phi_max, Ninv)
 *         phi_inner = np.linspace(CV.Inner.phi_max, CV.Inner.phi_min, Ninv)             # <<<<<<<<<<<<<<
 * 
 *         # Key for the outer and inner involutes (one of 'fi', 'oo', 'oi', 'fi')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_linspace); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_CV->Inner->phi_max); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_CV->Inner->phi_min); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_Ninv); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_t_5, __pyx_t_6, __pyx_t_3};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 756, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_t_5, __pyx_t_6, __pyx_t_3};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 756, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 756, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_3);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_9, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 756, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_v_phi_inner = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":759
 * 
 *         # Key for the outer and inner involutes (one of 'fi', 'oo', 'oi', 'fi')
 *         key_outer = common.involute_index_to_key(CV.Outer.involute)             # <<<<<<<<<<<<<<
 *         key_inner = common.involute_index_to_key(CV.Inner.involute)
 * 
 */
    __pyx_t_7 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_involute_index_to_key(__pyx_v_CV->Outer->involute, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_key_outer = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":760
 *         # Key for the outer and inner involutes (one of 'fi', 'oo', 'oi', 'fi')
 *         key_outer = common.involute_index_to_key(CV.Outer.involute)
 *         key_inner = common.involute_index_to_key(CV.Inner.involute)             # <<<<<<<<<<<<<<
 * 
 *         x1, y1 = coords_inv(phi_outer, geo, theta, key_outer)
 */
    __pyx_t_7 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_involute_index_to_key(__pyx_v_CV->Inner->involute, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 760, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_key_inner = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":762
 *         key_inner = common.involute_index_to_key(CV.Inner.involute)
 * 
 *         x1, y1 = coords_inv(phi_outer, geo, theta, key_outer)             # <<<<<<<<<<<<<<
 *         x2, y2 = coords_inv(phi_inner, geo, theta, key_inner)
 * 
 */
    __pyx_t_4.__pyx_n = 1;
    __pyx_t_4.flag = __pyx_v_key_outer;
    __pyx_t_7 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_v_phi_outer, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, 0, &__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (likely(__pyx_t_7 != Py_None)) {
      PyObject* sequence = __pyx_t_7;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 762, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_14 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_14 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 762, __pyx_L1_error)
    }
    __pyx_v_x1 = __pyx_t_14;
    __pyx_t_14 = 0;
    __pyx_v_y1 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":763
 * 
 *         x1, y1 = coords_inv(phi_outer, geo, theta, key_outer)
 *         x2, y2 = coords_inv(phi_inner, geo, theta, key_inner)             # <<<<<<<<<<<<<<
 * 
 *         #  Return the coordinates for the CV
 */
    __pyx_t_4.__pyx_n = 1;
    __pyx_t_4.flag = __pyx_v_key_inner;
    __pyx_t_7 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_v_phi_inner, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, 0, &__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (likely(__pyx_t_7 != Py_None)) {
      PyObject* sequence = __pyx_t_7;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 763, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_14 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_14);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_14 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 763, __pyx_L1_error)
    }
    __pyx_v_x2 = __pyx_t_9;
    __pyx_t_9 = 0;
    __pyx_v_y2 = __pyx_t_14;
    __pyx_t_14 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":766
 * 
 *         #  Return the coordinates for the CV
 *         return np.r_[x1,x2],np.r_[y1,y2]             # <<<<<<<<<<<<<<
 * 
 *     elif CVkey == 'dd':
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_r_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_x1);
    __Pyx_GIVEREF(__pyx_v_x1);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_x1);
    __Pyx_INCREF(__pyx_v_x2);
    __Pyx_GIVEREF(__pyx_v_x2);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_x2);
    __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_14, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_r_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_y1);
    __Pyx_GIVEREF(__pyx_v_y1);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_y1);
    __Pyx_INCREF(__pyx_v_y2);
    __Pyx_GIVEREF(__pyx_v_y2);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_y2);
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_14, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
    __pyx_t_9 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":745
 *         return np.r_[x,xoie,xooe,xoo,xwall,x[0]],np.r_[y,yoie,yooe,yoo,ywall,y[0]]
 * 
 *     elif (CVkey == 's1' or CVkey == 's2' or CVkey == 'd1' or CVkey == 'd2'             # <<<<<<<<<<<<<<
 *           or CVkey.startswith('c1.') or CVkey.startswith('c2.')):
 * 
 */
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":768
 *         return np.r_[x1,x2],np.r_[y1,y2]
 * 
 *     elif CVkey == 'dd':             # <<<<<<<<<<<<<<
 *         theta_m = geo.phi_fie - theta - pi/2
 *         t = np.linspace(geo.t1_arc1,geo.t2_arc1,700)
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_CVkey, __pyx_n_s_dd, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 768, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":769
 * 
 *     elif CVkey == 'dd':
 *         theta_m = geo.phi_fie - theta - pi/2             # <<<<<<<<<<<<<<
 *         t = np.linspace(geo.t1_arc1,geo.t2_arc1,700)
 *         (x_farc1,y_farc1)=(
 */
    __pyx_v_theta_m = ((__pyx_v_geo->__pyx_base.phi_fie - __pyx_v_theta) - (M_PI / 2.0));

    /* "DanfossPDSim/asymm_scroll_geo.pyx":770
 *     elif CVkey == 'dd':
 *         theta_m = geo.phi_fie - theta - pi/2
 *         t = np.linspace(geo.t1_arc1,geo.t2_arc1,700)             # <<<<<<<<<<<<<<
 *         (x_farc1,y_farc1)=(
 *             geo.xa_arc1+geo.ra_arc1*np.cos(t),
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_linspace); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.t1_arc1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_14 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.t2_arc1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_6 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_t_3, __pyx_t_14, __pyx_int_700};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_t_3, __pyx_t_14, __pyx_int_700};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_8, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_8, __pyx_t_14);
      __Pyx_INCREF(__pyx_int_700);
      __Pyx_GIVEREF(__pyx_int_700);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_8, __pyx_int_700);
      __pyx_t_3 = 0;
      __pyx_t_14 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_t = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":772
 *         t = np.linspace(geo.t1_arc1,geo.t2_arc1,700)
 *         (x_farc1,y_farc1)=(
 *             geo.xa_arc1+geo.ra_arc1*np.cos(t),             # <<<<<<<<<<<<<<
 *             geo.ya_arc1+geo.ra_arc1*np.sin(t))
 *         (x_oarc1,y_oarc1)=(
 */
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.xa_arc1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.ra_arc1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_cos); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_5 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_14, __pyx_v_t) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_t);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_9, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":773
 *         (x_farc1,y_farc1)=(
 *             geo.xa_arc1+geo.ra_arc1*np.cos(t),
 *             geo.ya_arc1+geo.ra_arc1*np.sin(t))             # <<<<<<<<<<<<<<
 *         (x_oarc1,y_oarc1)=(
 *            -geo.xa_arc1-geo.ra_arc1*np.cos(t)+geo.ro*cos(theta_m),
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.ya_arc1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.ra_arc1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_sin); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_9 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_14, __pyx_v_t) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_t);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_7, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Add(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_x_farc1 = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_v_y_farc1 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":775
 *             geo.ya_arc1+geo.ra_arc1*np.sin(t))
 *         (x_oarc1,y_oarc1)=(
 *            -geo.xa_arc1-geo.ra_arc1*np.cos(t)+geo.ro*cos(theta_m),             # <<<<<<<<<<<<<<
 *            -geo.ya_arc1-geo.ra_arc1*np.sin(t)+geo.ro*sin(theta_m))
 * 
 */
    __pyx_t_9 = PyFloat_FromDouble((-__pyx_v_geo->__pyx_base.xa_arc1)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.ra_arc1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_cos); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_6 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_3, __pyx_v_t) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_t);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Subtract(__pyx_t_9, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyFloat_FromDouble((__pyx_v_geo->__pyx_base.ro * cos(__pyx_v_theta_m))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = PyNumber_Add(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":776
 *         (x_oarc1,y_oarc1)=(
 *            -geo.xa_arc1-geo.ra_arc1*np.cos(t)+geo.ro*cos(theta_m),
 *            -geo.ya_arc1-geo.ra_arc1*np.sin(t)+geo.ro*sin(theta_m))             # <<<<<<<<<<<<<<
 * 
 *         t=np.linspace(geo.t2_arc2,geo.t1_arc2,300)
 */
    __pyx_t_7 = PyFloat_FromDouble((-__pyx_v_geo->__pyx_base.ya_arc1)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.ra_arc1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sin); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_3, __pyx_v_t) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_t);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Subtract(__pyx_t_7, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyFloat_FromDouble((__pyx_v_geo->__pyx_base.ro * sin(__pyx_v_theta_m))); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_7 = PyNumber_Add(__pyx_t_5, __pyx_t_14); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_v_x_oarc1 = __pyx_t_9;
    __pyx_t_9 = 0;
    __pyx_v_y_oarc1 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":778
 *            -geo.ya_arc1-geo.ra_arc1*np.sin(t)+geo.ro*sin(theta_m))
 * 
 *         t=np.linspace(geo.t2_arc2,geo.t1_arc2,300)             # <<<<<<<<<<<<<<
 *         (x_farc2,y_farc2)=(
 *             geo.xa_arc2+geo.ra_arc2*np.cos(t),
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_linspace); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.t2_arc2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.t1_arc2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_t_9, __pyx_t_5, __pyx_int_300};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_t_9, __pyx_t_5, __pyx_int_300};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_8, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_8, __pyx_t_5);
      __Pyx_INCREF(__pyx_int_300);
      __Pyx_GIVEREF(__pyx_int_300);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_8, __pyx_int_300);
      __pyx_t_9 = 0;
      __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF_SET(__pyx_v_t, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":780
 *         t=np.linspace(geo.t2_arc2,geo.t1_arc2,300)
 *         (x_farc2,y_farc2)=(
 *             geo.xa_arc2+geo.ra_arc2*np.cos(t),             # <<<<<<<<<<<<<<
 *             geo.ya_arc2+geo.ra_arc2*np.sin(t))
 *         (x_oarc2,y_oarc2)=(
 */
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.xa_arc2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.ra_arc2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_cos); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_v_t) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_t);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Multiply(__pyx_t_14, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_7, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":781
 *         (x_farc2,y_farc2)=(
 *             geo.xa_arc2+geo.ra_arc2*np.cos(t),
 *             geo.ya_arc2+geo.ra_arc2*np.sin(t))             # <<<<<<<<<<<<<<
 *         (x_oarc2,y_oarc2)=(
 *            -geo.xa_arc2-geo.ra_arc2*np.cos(t)+geo.ro*cos(theta_m),
 */
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.ya_arc2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.ra_arc2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sin); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_14 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_t) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_t);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_7, __pyx_t_14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyNumber_Add(__pyx_t_9, __pyx_t_6); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_x_farc2 = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_y_farc2 = __pyx_t_14;
    __pyx_t_14 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":783
 *             geo.ya_arc2+geo.ra_arc2*np.sin(t))
 *         (x_oarc2,y_oarc2)=(
 *            -geo.xa_arc2-geo.ra_arc2*np.cos(t)+geo.ro*cos(theta_m),             # <<<<<<<<<<<<<<
 *            -geo.ya_arc2-geo.ra_arc2*np.sin(t)+geo.ro*sin(theta_m))
 * 
 */
    __pyx_t_14 = PyFloat_FromDouble((-__pyx_v_geo->__pyx_base.xa_arc2)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.ra_arc2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_cos); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_6 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_9, __pyx_v_t) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_t);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Subtract(__pyx_t_14, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyFloat_FromDouble((__pyx_v_geo->__pyx_base.ro * cos(__pyx_v_theta_m))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = PyNumber_Add(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":784
 *         (x_oarc2,y_oarc2)=(
 *            -geo.xa_arc2-geo.ra_arc2*np.cos(t)+geo.ro*cos(theta_m),
 *            -geo.ya_arc2-geo.ra_arc2*np.sin(t)+geo.ro*sin(theta_m))             # <<<<<<<<<<<<<<
 * 
 *         t = np.linspace(geo.t1_arc3,geo.t2_arc3,700)
 */
    __pyx_t_7 = PyFloat_FromDouble((-__pyx_v_geo->__pyx_base.ya_arc2)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.ra_arc2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_sin); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_9, __pyx_v_t) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_t);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_geo->__pyx_base.ro * sin(__pyx_v_theta_m))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyNumber_Add(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_x_oarc2 = __pyx_t_14;
    __pyx_t_14 = 0;
    __pyx_v_y_oarc2 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":786
 *            -geo.ya_arc2-geo.ra_arc2*np.sin(t)+geo.ro*sin(theta_m))
 * 
 *         t = np.linspace(geo.t1_arc3,geo.t2_arc3,700)             # <<<<<<<<<<<<<<
 *         (x_farc3,y_farc3)=(
 *             geo.xa_arc3+geo.ra_arc3*np.cos(t),
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_linspace); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyFloat_FromDouble(__pyx_v_geo->t1_arc3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_geo->t2_arc3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_t_14, __pyx_t_3, __pyx_int_700};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 786, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_t_14, __pyx_t_3, __pyx_int_700};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 786, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 786, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_3);
      __Pyx_INCREF(__pyx_int_700);
      __Pyx_GIVEREF(__pyx_int_700);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_int_700);
      __pyx_t_14 = 0;
      __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 786, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_t, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":788
 *         t = np.linspace(geo.t1_arc3,geo.t2_arc3,700)
 *         (x_farc3,y_farc3)=(
 *             geo.xa_arc3+geo.ra_arc3*np.cos(t),             # <<<<<<<<<<<<<<
 *             geo.ya_arc3+geo.ra_arc3*np.sin(t))
 *         (x_oarc3,y_oarc3)=(
 */
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_geo->xa_arc3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_geo->ra_arc3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_cos); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
      }
    }
    __pyx_t_9 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_3, __pyx_v_t) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_t);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyNumber_Multiply(__pyx_t_5, __pyx_t_9); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Add(__pyx_t_7, __pyx_t_14); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":789
 *         (x_farc3,y_farc3)=(
 *             geo.xa_arc3+geo.ra_arc3*np.cos(t),
 *             geo.ya_arc3+geo.ra_arc3*np.sin(t))             # <<<<<<<<<<<<<<
 *         (x_oarc3,y_oarc3)=(
 *            -geo.xa_arc3-geo.ra_arc3*np.cos(t)+geo.ro*cos(theta_m),
 */
    __pyx_t_14 = PyFloat_FromDouble(__pyx_v_geo->ya_arc3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_geo->ra_arc3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sin); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_3, __pyx_v_t) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_t);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_14, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_x_farc3 = __pyx_t_9;
    __pyx_t_9 = 0;
    __pyx_v_y_farc3 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":791
 *             geo.ya_arc3+geo.ra_arc3*np.sin(t))
 *         (x_oarc3,y_oarc3)=(
 *            -geo.xa_arc3-geo.ra_arc3*np.cos(t)+geo.ro*cos(theta_m),             # <<<<<<<<<<<<<<
 *            -geo.ya_arc3-geo.ra_arc3*np.sin(t)+geo.ro*sin(theta_m))
 * 
 */
    __pyx_t_5 = PyFloat_FromDouble((-__pyx_v_geo->xa_arc3)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_geo->ra_arc3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_cos); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_6 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_14, __pyx_v_t) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_t);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_9, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Subtract(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyFloat_FromDouble((__pyx_v_geo->__pyx_base.ro * cos(__pyx_v_theta_m))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyNumber_Add(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":792
 *         (x_oarc3,y_oarc3)=(
 *            -geo.xa_arc3-geo.ra_arc3*np.cos(t)+geo.ro*cos(theta_m),
 *            -geo.ya_arc3-geo.ra_arc3*np.sin(t)+geo.ro*sin(theta_m))             # <<<<<<<<<<<<<<
 * 
 *         phi=np.linspace(geo.phi_fis,geo.phi_fos+pi,Ninv)
 */
    __pyx_t_7 = PyFloat_FromDouble((-__pyx_v_geo->ya_arc3)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_geo->ra_arc3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_sin); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_9 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_14, __pyx_v_t) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_t);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Subtract(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble((__pyx_v_geo->__pyx_base.ro * sin(__pyx_v_theta_m))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyNumber_Add(__pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_x_oarc3 = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_v_y_oarc3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":794
 *            -geo.ya_arc3-geo.ra_arc3*np.sin(t)+geo.ro*sin(theta_m))
 * 
 *         phi=np.linspace(geo.phi_fis,geo.phi_fos+pi,Ninv)             # <<<<<<<<<<<<<<
 *         (x_finv,y_finv)=coords_inv(phi,geo,theta,'fi')
 *         (x_oinv,y_oinv)=coords_inv(phi,geo,theta,'oi')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_linspace); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_geo->__pyx_base.phi_fis); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyFloat_FromDouble((__pyx_v_geo->__pyx_base.phi_fos + M_PI)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_Ninv); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_14 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_t_5, __pyx_t_9, __pyx_t_6};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 794, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_t_5, __pyx_t_9, __pyx_t_6};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 794, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 794, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_14) {
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_14); __pyx_t_14 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_8, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_8, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_8, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_9 = 0;
      __pyx_t_6 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 794, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_phi = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":795
 * 
 *         phi=np.linspace(geo.phi_fis,geo.phi_fos+pi,Ninv)
 *         (x_finv,y_finv)=coords_inv(phi,geo,theta,'fi')             # <<<<<<<<<<<<<<
 *         (x_oinv,y_oinv)=coords_inv(phi,geo,theta,'oi')
 * 
 */
    __pyx_t_4.__pyx_n = 1;
    __pyx_t_4.flag = __pyx_n_s_fi;
    __pyx_t_7 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_v_phi, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, 0, &__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (likely(__pyx_t_7 != Py_None)) {
      PyObject* sequence = __pyx_t_7;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 795, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 795, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 795, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 795, __pyx_L1_error)
    }
    __pyx_v_x_finv = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_y_finv = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":796
 *         phi=np.linspace(geo.phi_fis,geo.phi_fos+pi,Ninv)
 *         (x_finv,y_finv)=coords_inv(phi,geo,theta,'fi')
 *         (x_oinv,y_oinv)=coords_inv(phi,geo,theta,'oi')             # <<<<<<<<<<<<<<
 * 
 *         x=np.r_[x_farc2,x_farc3,x_farc1,x_finv,x_oarc2,x_oarc1,x_oinv,x_farc2[0]]
 */
    __pyx_t_4.__pyx_n = 1;
    __pyx_t_4.flag = __pyx_n_s_oi;
    __pyx_t_7 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv(__pyx_v_phi, ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *)__pyx_v_geo), __pyx_v_theta, 0, &__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (likely(__pyx_t_7 != Py_None)) {
      PyObject* sequence = __pyx_t_7;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 796, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 796, __pyx_L1_error)
    }
    __pyx_v_x_oinv = __pyx_t_2;
    __pyx_t_2 = 0;
    __pyx_v_y_oinv = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":798
 *         (x_oinv,y_oinv)=coords_inv(phi,geo,theta,'oi')
 * 
 *         x=np.r_[x_farc2,x_farc3,x_farc1,x_finv,x_oarc2,x_oarc1,x_oinv,x_farc2[0]]             # <<<<<<<<<<<<<<
 *         y=np.r_[y_farc2,y_farc3,y_farc1,y_finv,y_oarc2,y_oarc1,y_oinv,y_farc2[0]]
 *         return x,y
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_r_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_x_farc2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = PyTuple_New(8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_x_farc2);
    __Pyx_GIVEREF(__pyx_v_x_farc2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_x_farc2);
    __Pyx_INCREF(__pyx_v_x_farc3);
    __Pyx_GIVEREF(__pyx_v_x_farc3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_x_farc3);
    __Pyx_INCREF(__pyx_v_x_farc1);
    __Pyx_GIVEREF(__pyx_v_x_farc1);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_x_farc1);
    __Pyx_INCREF(__pyx_v_x_finv);
    __Pyx_GIVEREF(__pyx_v_x_finv);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_x_finv);
    __Pyx_INCREF(__pyx_v_x_oarc2);
    __Pyx_GIVEREF(__pyx_v_x_oarc2);
    PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_x_oarc2);
    __Pyx_INCREF(__pyx_v_x_oarc1);
    __Pyx_GIVEREF(__pyx_v_x_oarc1);
    PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_v_x_oarc1);
    __Pyx_INCREF(__pyx_v_x_oinv);
    __Pyx_GIVEREF(__pyx_v_x_oinv);
    PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_v_x_oinv);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_2, 7, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_x = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":799
 * 
 *         x=np.r_[x_farc2,x_farc3,x_farc1,x_finv,x_oarc2,x_oarc1,x_oinv,x_farc2[0]]
 *         y=np.r_[y_farc2,y_farc3,y_farc1,y_finv,y_oarc2,y_oarc1,y_oinv,y_farc2[0]]             # <<<<<<<<<<<<<<
 *         return x,y
 *     else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_r_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_y_farc2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = PyTuple_New(8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_y_farc2);
    __Pyx_GIVEREF(__pyx_v_y_farc2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_y_farc2);
    __Pyx_INCREF(__pyx_v_y_farc3);
    __Pyx_GIVEREF(__pyx_v_y_farc3);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_y_farc3);
    __Pyx_INCREF(__pyx_v_y_farc1);
    __Pyx_GIVEREF(__pyx_v_y_farc1);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_y_farc1);
    __Pyx_INCREF(__pyx_v_y_finv);
    __Pyx_GIVEREF(__pyx_v_y_finv);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_y_finv);
    __Pyx_INCREF(__pyx_v_y_oarc2);
    __Pyx_GIVEREF(__pyx_v_y_oarc2);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_v_y_oarc2);
    __Pyx_INCREF(__pyx_v_y_oarc1);
    __Pyx_GIVEREF(__pyx_v_y_oarc1);
    PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_v_y_oarc1);
    __Pyx_INCREF(__pyx_v_y_oinv);
    __Pyx_GIVEREF(__pyx_v_y_oinv);
    PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_v_y_oinv);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 7, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_y = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":800
 *         x=np.r_[x_farc2,x_farc3,x_farc1,x_finv,x_oarc2,x_oarc1,x_oinv,x_farc2[0]]
 *         y=np.r_[y_farc2,y_farc3,y_farc1,y_finv,y_oarc2,y_oarc1,y_oinv,y_farc2[0]]
 *         return x,y             # <<<<<<<<<<<<<<
 *     else:
 *         raise KeyError('Could not match this CVkey: '+CVkey)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_y);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":768
 *         return np.r_[x1,x2],np.r_[y1,y2]
 * 
 *     elif CVkey == 'dd':             # <<<<<<<<<<<<<<
 *         theta_m = geo.phi_fie - theta - pi/2
 *         t = np.linspace(geo.t1_arc1,geo.t2_arc1,700)
 */
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":802
 *         return x,y
 *     else:
 *         raise KeyError('Could not match this CVkey: '+CVkey)             # <<<<<<<<<<<<<<
 * 
 * cpdef HTAnglesClass HT_angles(double theta, DanfossGeoVals geo, key):
 */
  /*else*/ {
    __pyx_t_7 = PyNumber_Add(__pyx_kp_s_Could_not_match_this_CVkey, __pyx_v_CVkey); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 802, __pyx_L1_error)
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":711
 *         return common.forces(theta, geo, angles, V/geo.h)
 * 
 * cpdef CVcoords(CVkey, DanfossGeoVals geo, double theta, int Ninv=1000):             # <<<<<<<<<<<<<<
 *     """
 *     Return a tuple of numpy arrays for x,y coordinates for the curves which
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.CVcoords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_xee);
  __Pyx_XDECREF(__pyx_v_yee);
  __Pyx_XDECREF(__pyx_v_xse);
  __Pyx_XDECREF(__pyx_v_yse);
  __Pyx_XDECREF(__pyx_v_xoie);
  __Pyx_XDECREF(__pyx_v_yoie);
  __Pyx_XDECREF(__pyx_v_xooe);
  __Pyx_XDECREF(__pyx_v_yooe);
  __Pyx_XDECREF(__pyx_v_xwall);
  __Pyx_XDECREF(__pyx_v_ywall);
  __Pyx_XDECREF(__pyx_v_xoo);
  __Pyx_XDECREF(__pyx_v_yoo);
  __Pyx_XDECREF(__pyx_v_x0);
  __Pyx_XDECREF(__pyx_v_y0);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF((PyObject *)__pyx_v_CV);
  __Pyx_XDECREF(__pyx_v_phi_outer);
  __Pyx_XDECREF(__pyx_v_phi_inner);
  __Pyx_XDECREF(__pyx_v_key_outer);
  __Pyx_XDECREF(__pyx_v_key_inner);
  __Pyx_XDECREF(__pyx_v_x1);
  __Pyx_XDECREF(__pyx_v_y1);
  __Pyx_XDECREF(__pyx_v_x2);
  __Pyx_XDECREF(__pyx_v_y2);
  __Pyx_XDECREF(__pyx_v_x_farc1);
  __Pyx_XDECREF(__pyx_v_y_farc1);
  __Pyx_XDECREF(__pyx_v_x_oarc1);
  __Pyx_XDECREF(__pyx_v_y_oarc1);
  __Pyx_XDECREF(__pyx_v_x_farc2);
  __Pyx_XDECREF(__pyx_v_y_farc2);
  __Pyx_XDECREF(__pyx_v_x_oarc2);
  __Pyx_XDECREF(__pyx_v_y_oarc2);
  __Pyx_XDECREF(__pyx_v_x_farc3);
  __Pyx_XDECREF(__pyx_v_y_farc3);
  __Pyx_XDECREF(__pyx_v_x_oarc3);
  __Pyx_XDECREF(__pyx_v_y_oarc3);
  __Pyx_XDECREF(__pyx_v_phi);
  __Pyx_XDECREF(__pyx_v_x_finv);
  __Pyx_XDECREF(__pyx_v_y_finv);
  __Pyx_XDECREF(__pyx_v_x_oinv);
  __Pyx_XDECREF(__pyx_v_y_oinv);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_37CVcoords(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_36CVcoords[] = "CVcoords(CVkey, DanfossGeoVals geo, double theta, int Ninv=1000)\n \n    Return a tuple of numpy arrays for x,y coordinates for the curves which \n    determine the boundary of the control volume\n\n    Returns\n    -------\n    x : numpy array\n        X-coordinates of the outline of the control volume\n    y : numpy array\n        Y-coordinates of the outline of the control volume\n    ";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_37CVcoords(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_CVkey = 0;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  double __pyx_v_theta;
  int __pyx_v_Ninv;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CVcoords (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_CVkey,&__pyx_n_s_geo,&__pyx_n_s_theta,&__pyx_n_s_Ninv,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_CVkey)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CVcoords", 0, 3, 4, 1); __PYX_ERR(0, 711, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CVcoords", 0, 3, 4, 2); __PYX_ERR(0, 711, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ninv);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "CVcoords") < 0)) __PYX_ERR(0, 711, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_CVkey = values[0];
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[1]);
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 711, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_Ninv = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_Ninv == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 711, __pyx_L3_error)
    } else {
      __pyx_v_Ninv = ((int)0x3E8);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CVcoords", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 711, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.CVcoords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 711, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_36CVcoords(__pyx_self, __pyx_v_CVkey, __pyx_v_geo, __pyx_v_theta, __pyx_v_Ninv);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_36CVcoords(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_CVkey, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, double __pyx_v_theta, int __pyx_v_Ninv) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_CVcoords __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CVcoords", 0);
  __Pyx_TraceCall("CVcoords (wrapper)", __pyx_f[0], 711, 0, __PYX_ERR(0, 711, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.Ninv = __pyx_v_Ninv;
  __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVcoords(__pyx_v_CVkey, __pyx_v_geo, __pyx_v_theta, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.CVcoords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":804
 *         raise KeyError('Could not match this CVkey: '+CVkey)
 * 
 * cpdef HTAnglesClass HT_angles(double theta, DanfossGeoVals geo, key):             # <<<<<<<<<<<<<<
 *     """
 *     Return the heat transfer bounding angles for the given control volume
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_39HT_angles(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_HTAnglesClass *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_HT_angles(double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, PyObject *__pyx_v_key, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_HTAnglesClass *__pyx_v_angles = 0;
  int __pyx_v_index;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_CV = 0;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_HTAnglesClass *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("HT_angles", 0);
  __Pyx_TraceCall("HT_angles", __pyx_f[0], 804, 0, __PYX_ERR(0, 804, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":845
 *     If key is not valid, raises a KeyError
 *     """
 *     cdef HTAnglesClass angles = HTAnglesClass.__new__(HTAnglesClass)             # <<<<<<<<<<<<<<
 *     cdef int index = common.get_compressor_CV_index(key)
 *     cdef CVInvolutes CV = CVangles(theta, geo, index)
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_HTAnglesClass), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5PDSim_6scroll_17common_scroll_geo_HTAnglesClass)))) __PYX_ERR(0, 845, __pyx_L1_error)
  __pyx_v_angles = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_HTAnglesClass *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":846
 *     """
 *     cdef HTAnglesClass angles = HTAnglesClass.__new__(HTAnglesClass)
 *     cdef int index = common.get_compressor_CV_index(key)             # <<<<<<<<<<<<<<
 *     cdef CVInvolutes CV = CVangles(theta, geo, index)
 * 
 */
  __pyx_t_2 = __pyx_f_5PDSim_6scroll_17common_scroll_geo_get_compressor_CV_index(__pyx_v_key, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 846, __pyx_L1_error)
  __pyx_v_index = __pyx_t_2;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":847
 *     cdef HTAnglesClass angles = HTAnglesClass.__new__(HTAnglesClass)
 *     cdef int index = common.get_compressor_CV_index(key)
 *     cdef CVInvolutes CV = CVangles(theta, geo, index)             # <<<<<<<<<<<<<<
 * 
 *     angles.phi_1_i = CV.Outer.phi_max
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta, __pyx_v_geo, __pyx_v_index, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_CV = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":849
 *     cdef CVInvolutes CV = CVangles(theta, geo, index)
 * 
 *     angles.phi_1_i = CV.Outer.phi_max             # <<<<<<<<<<<<<<
 *     angles.phi_2_i = CV.Outer.phi_min
 *     angles.phi_i0 = CV.Outer.phi_0
 */
  __pyx_t_3 = __pyx_v_CV->Outer->phi_max;
  __pyx_v_angles->phi_1_i = __pyx_t_3;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":850
 * 
 *     angles.phi_1_i = CV.Outer.phi_max
 *     angles.phi_2_i = CV.Outer.phi_min             # <<<<<<<<<<<<<<
 *     angles.phi_i0 = CV.Outer.phi_0
 * 
 */
  __pyx_t_3 = __pyx_v_CV->Outer->phi_min;
  __pyx_v_angles->phi_2_i = __pyx_t_3;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":851
 *     angles.phi_1_i = CV.Outer.phi_max
 *     angles.phi_2_i = CV.Outer.phi_min
 *     angles.phi_i0 = CV.Outer.phi_0             # <<<<<<<<<<<<<<
 * 
 *     angles.phi_1_o = CV.Inner.phi_max
 */
  __pyx_t_3 = __pyx_v_CV->Outer->phi_0;
  __pyx_v_angles->phi_i0 = __pyx_t_3;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":853
 *     angles.phi_i0 = CV.Outer.phi_0
 * 
 *     angles.phi_1_o = CV.Inner.phi_max             # <<<<<<<<<<<<<<
 *     angles.phi_2_o = CV.Inner.phi_min
 *     angles.phi_o0 = CV.Inner.phi_0
 */
  __pyx_t_3 = __pyx_v_CV->Inner->phi_max;
  __pyx_v_angles->phi_1_o = __pyx_t_3;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":854
 * 
 *     angles.phi_1_o = CV.Inner.phi_max
 *     angles.phi_2_o = CV.Inner.phi_min             # <<<<<<<<<<<<<<
 *     angles.phi_o0 = CV.Inner.phi_0
 * 
 */
  __pyx_t_3 = __pyx_v_CV->Inner->phi_min;
  __pyx_v_angles->phi_2_o = __pyx_t_3;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":855
 *     angles.phi_1_o = CV.Inner.phi_max
 *     angles.phi_2_o = CV.Inner.phi_min
 *     angles.phi_o0 = CV.Inner.phi_0             # <<<<<<<<<<<<<<
 * 
 *     return angles
 */
  __pyx_t_3 = __pyx_v_CV->Inner->phi_0;
  __pyx_v_angles->phi_o0 = __pyx_t_3;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":857
 *     angles.phi_o0 = CV.Inner.phi_0
 * 
 *     return angles             # <<<<<<<<<<<<<<
 * 
 * cdef _radial_leakage_angles(CVInvolutes CV_up, CVInvolutes CV_down, double *angle_min, double *angle_max):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_angles));
  __pyx_r = __pyx_v_angles;
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":804
 *         raise KeyError('Could not match this CVkey: '+CVkey)
 * 
 * cpdef HTAnglesClass HT_angles(double theta, DanfossGeoVals geo, key):             # <<<<<<<<<<<<<<
 *     """
 *     Return the heat transfer bounding angles for the given control volume
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.HT_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_angles);
  __Pyx_XDECREF((PyObject *)__pyx_v_CV);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_39HT_angles(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_38HT_angles[] = "HT_angles(double theta, DanfossGeoVals geo, key) -> HTAnglesClass\n\n    Return the heat transfer bounding angles for the given control volume\n\n    Parameters\n    ----------\n    theta : float\n        Crank angle in the range [:math:`0,2\\pi`]\n    geo : DanfossGeoVals instance\n    key : string\n        Key for the control volume following the scroll compressor\n        naming conventions\n\n    Returns\n    -------\n    angles : HTAngles Class\n        with the attributes:\n        phi_1_i: maximum involute angle on the inner involute of the wrap\n        that forms the outer wall of the CV\n\n        phi_2_i: minimum involute angle on the inner involute of the wrap\n        that forms the outer wall of the CV\n\n        phi_1_o: maximum involute angle on the outer involute of the wrap\n        that forms the inner wall of the CV\n\n        phi_2_o: minimum involute angle on the outer involute of the wrap\n        that forms the inner wall of the CV\n\n    Notes\n    -----\n    The keys s1, c1.x, and d1 have as their outer wrap the fixed scroll\n\n    The keys s2, c2.x, and d2 have as their outer wrap the orbiting scroll\n\n    \"Minimum\", and \"Maximum\" refer to absolute values of the angles\n\n    Raises\n    ------\n    If key is not valid, raises a KeyError\n    ";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_39HT_angles(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_theta;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  PyObject *__pyx_v_key = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("HT_angles (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_geo,&__pyx_n_s_key,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("HT_angles", 1, 3, 3, 1); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("HT_angles", 1, 3, 3, 2); __PYX_ERR(0, 804, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "HT_angles") < 0)) __PYX_ERR(0, 804, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 804, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[1]);
    __pyx_v_key = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("HT_angles", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 804, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.HT_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 804, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_38HT_angles(__pyx_self, __pyx_v_theta, __pyx_v_geo, __pyx_v_key);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_38HT_angles(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("HT_angles", 0);
  __Pyx_TraceCall("HT_angles (wrapper)", __pyx_f[0], 804, 0, __PYX_ERR(0, 804, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_HT_angles(__pyx_v_theta, __pyx_v_geo, __pyx_v_key, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.HT_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":859
 *     return angles
 * 
 * cdef _radial_leakage_angles(CVInvolutes CV_up, CVInvolutes CV_down, double *angle_min, double *angle_max):             # <<<<<<<<<<<<<<
 *     return overlap(CV_down.Inner.phi_min, CV_down.Inner.phi_max, CV_up.Outer.phi_min, CV_up.Outer.phi_max, angle_min, angle_max)
 * 
 */

static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo__radial_leakage_angles(struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_CV_up, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_CV_down, double *__pyx_v_angle_min, double *__pyx_v_angle_max) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_radial_leakage_angles", 0);
  __Pyx_TraceCall("_radial_leakage_angles", __pyx_f[0], 859, 0, __PYX_ERR(0, 859, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":860
 * 
 * cdef _radial_leakage_angles(CVInvolutes CV_up, CVInvolutes CV_down, double *angle_min, double *angle_max):
 *     return overlap(CV_down.Inner.phi_min, CV_down.Inner.phi_max, CV_up.Outer.phi_min, CV_up.Outer.phi_max, angle_min, angle_max)             # <<<<<<<<<<<<<<
 * 
 * cpdef get_radial_leakage_angles(double theta, DanfossGeoVals geo, long index_up, long index_down):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_12DanfossPDSim_16asymm_scroll_geo_overlap(__pyx_v_CV_down->Inner->phi_min, __pyx_v_CV_down->Inner->phi_max, __pyx_v_CV_up->Outer->phi_min, __pyx_v_CV_up->Outer->phi_max, __pyx_v_angle_min, __pyx_v_angle_max)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":859
 *     return angles
 * 
 * cdef _radial_leakage_angles(CVInvolutes CV_up, CVInvolutes CV_down, double *angle_min, double *angle_max):             # <<<<<<<<<<<<<<
 *     return overlap(CV_down.Inner.phi_min, CV_down.Inner.phi_max, CV_up.Outer.phi_min, CV_up.Outer.phi_max, angle_min, angle_max)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo._radial_leakage_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":862
 *     return overlap(CV_down.Inner.phi_min, CV_down.Inner.phi_max, CV_up.Outer.phi_min, CV_up.Outer.phi_max, angle_min, angle_max)
 * 
 * cpdef get_radial_leakage_angles(double theta, DanfossGeoVals geo, long index_up, long index_down):             # <<<<<<<<<<<<<<
 * 
 *     cdef double phi_min, phi_max
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_41get_radial_leakage_angles(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo_get_radial_leakage_angles(double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, long __pyx_v_index_up, long __pyx_v_index_down, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_phi_min;
  double __pyx_v_phi_max;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_CV_up = 0;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_CV_down = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_radial_leakage_angles", 0);
  __Pyx_TraceCall("get_radial_leakage_angles", __pyx_f[0], 862, 0, __PYX_ERR(0, 862, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":867
 * 
 *     # Bounding angles for each control volume to be considered here
 *     cdef CVInvolutes CV_up = CVangles(theta, geo, index_up)             # <<<<<<<<<<<<<<
 *     cdef CVInvolutes CV_down = CVangles(theta, geo, index_down)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta, __pyx_v_geo, __pyx_v_index_up, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_CV_up = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":868
 *     # Bounding angles for each control volume to be considered here
 *     cdef CVInvolutes CV_up = CVangles(theta, geo, index_up)
 *     cdef CVInvolutes CV_down = CVangles(theta, geo, index_down)             # <<<<<<<<<<<<<<
 * 
 *     return _radial_leakage_angles(CV_up, CV_down, &phi_min, &phi_max)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta, __pyx_v_geo, __pyx_v_index_down, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_CV_down = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":870
 *     cdef CVInvolutes CV_down = CVangles(theta, geo, index_down)
 * 
 *     return _radial_leakage_angles(CV_up, CV_down, &phi_min, &phi_max)             # <<<<<<<<<<<<<<
 * 
 * cpdef double radial_leakage_area(double theta, DanfossGeoVals geo, int index_up, int index_down, int location = common.UP) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo__radial_leakage_angles(__pyx_v_CV_up, __pyx_v_CV_down, (&__pyx_v_phi_min), (&__pyx_v_phi_max)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":862
 *     return overlap(CV_down.Inner.phi_min, CV_down.Inner.phi_max, CV_up.Outer.phi_min, CV_up.Outer.phi_max, angle_min, angle_max)
 * 
 * cpdef get_radial_leakage_angles(double theta, DanfossGeoVals geo, long index_up, long index_down):             # <<<<<<<<<<<<<<
 * 
 *     cdef double phi_min, phi_max
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.get_radial_leakage_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_CV_up);
  __Pyx_XDECREF((PyObject *)__pyx_v_CV_down);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_41get_radial_leakage_angles(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_40get_radial_leakage_angles[] = "get_radial_leakage_angles(double theta, DanfossGeoVals geo, long index_up, long index_down)";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_41get_radial_leakage_angles(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_theta;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  long __pyx_v_index_up;
  long __pyx_v_index_down;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_radial_leakage_angles (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_geo,&__pyx_n_s_index_up,&__pyx_n_s_index_down,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_radial_leakage_angles", 1, 4, 4, 1); __PYX_ERR(0, 862, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index_up)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_radial_leakage_angles", 1, 4, 4, 2); __PYX_ERR(0, 862, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index_down)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_radial_leakage_angles", 1, 4, 4, 3); __PYX_ERR(0, 862, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_radial_leakage_angles") < 0)) __PYX_ERR(0, 862, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 862, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[1]);
    __pyx_v_index_up = __Pyx_PyInt_As_long(values[2]); if (unlikely((__pyx_v_index_up == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 862, __pyx_L3_error)
    __pyx_v_index_down = __Pyx_PyInt_As_long(values[3]); if (unlikely((__pyx_v_index_down == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 862, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_radial_leakage_angles", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 862, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.get_radial_leakage_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 862, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_40get_radial_leakage_angles(__pyx_self, __pyx_v_theta, __pyx_v_geo, __pyx_v_index_up, __pyx_v_index_down);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_40get_radial_leakage_angles(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, long __pyx_v_index_up, long __pyx_v_index_down) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_radial_leakage_angles", 0);
  __Pyx_TraceCall("get_radial_leakage_angles (wrapper)", __pyx_f[0], 862, 0, __PYX_ERR(0, 862, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_get_radial_leakage_angles(__pyx_v_theta, __pyx_v_geo, __pyx_v_index_up, __pyx_v_index_down, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.get_radial_leakage_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "DanfossPDSim/asymm_scroll_geo.pyx":872
 *     return _radial_leakage_angles(CV_up, CV_down, &phi_min, &phi_max)
 * 
 * cpdef double radial_leakage_area(double theta, DanfossGeoVals geo, int index_up, int index_down, int location = common.UP) except *:             # <<<<<<<<<<<<<<
 *     """
 *     Notes
 */

static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_43radial_leakage_area(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_12DanfossPDSim_16asymm_scroll_geo_radial_leakage_area(double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, int __pyx_v_index_up, int __pyx_v_index_down, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_radial_leakage_area *__pyx_optional_args) {
  double __pyx_v_phi_min;
  double __pyx_v_phi_max;
  double __pyx_v_phi_0;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_CV_up = 0;
  struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *__pyx_v_CV_down = 0;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("radial_leakage_area", 0);
  __Pyx_TraceCall("radial_leakage_area", __pyx_f[0], 872, 0, __PYX_ERR(0, 872, __pyx_L1_error));
  if (__pyx_optional_args) {
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":883
 * 
 *     # Bounding angles for each control volume to be considered here
 *     cdef CVInvolutes CV_up = CVangles(theta, geo, index_up)             # <<<<<<<<<<<<<<
 *     cdef CVInvolutes CV_down = CVangles(theta, geo, index_down)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta, __pyx_v_geo, __pyx_v_index_up, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_CV_up = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":884
 *     # Bounding angles for each control volume to be considered here
 *     cdef CVInvolutes CV_up = CVangles(theta, geo, index_up)
 *     cdef CVInvolutes CV_down = CVangles(theta, geo, index_down)             # <<<<<<<<<<<<<<
 * 
 *     phi_0 = (CV_up.Outer.phi_0 + CV_down.Inner.phi_0)/2
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles(__pyx_v_theta, __pyx_v_geo, __pyx_v_index_down, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_CV_down = ((struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":886
 *     cdef CVInvolutes CV_down = CVangles(theta, geo, index_down)
 * 
 *     phi_0 = (CV_up.Outer.phi_0 + CV_down.Inner.phi_0)/2             # <<<<<<<<<<<<<<
 * 
 *     if _radial_leakage_angles(CV_up, CV_down, &phi_min, &phi_max):
 */
  __pyx_v_phi_0 = ((__pyx_v_CV_up->Outer->phi_0 + __pyx_v_CV_down->Inner->phi_0) / 2.0);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":888
 *     phi_0 = (CV_up.Outer.phi_0 + CV_down.Inner.phi_0)/2
 * 
 *     if _radial_leakage_angles(CV_up, CV_down, &phi_min, &phi_max):             # <<<<<<<<<<<<<<
 *         return geo.delta_radial*geo.rb*((phi_max**2-phi_min**2)/2-phi_0*(phi_max-phi_min))
 *     else:
 */
  __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo__radial_leakage_angles(__pyx_v_CV_up, __pyx_v_CV_down, (&__pyx_v_phi_min), (&__pyx_v_phi_max)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "DanfossPDSim/asymm_scroll_geo.pyx":889
 * 
 *     if _radial_leakage_angles(CV_up, CV_down, &phi_min, &phi_max):
 *         return geo.delta_radial*geo.rb*((phi_max**2-phi_min**2)/2-phi_0*(phi_max-phi_min))             # <<<<<<<<<<<<<<
 *     else:
 *         return 0.0
 */
    __pyx_r = ((__pyx_v_geo->__pyx_base.delta_radial * __pyx_v_geo->__pyx_base.rb) * (((pow(__pyx_v_phi_max, 2.0) - pow(__pyx_v_phi_min, 2.0)) / 2.0) - (__pyx_v_phi_0 * (__pyx_v_phi_max - __pyx_v_phi_min))));
    goto __pyx_L0;

    /* "DanfossPDSim/asymm_scroll_geo.pyx":888
 *     phi_0 = (CV_up.Outer.phi_0 + CV_down.Inner.phi_0)/2
 * 
 *     if _radial_leakage_angles(CV_up, CV_down, &phi_min, &phi_max):             # <<<<<<<<<<<<<<
 *         return geo.delta_radial*geo.rb*((phi_max**2-phi_min**2)/2-phi_0*(phi_max-phi_min))
 *     else:
 */
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":891
 *         return geo.delta_radial*geo.rb*((phi_max**2-phi_min**2)/2-phi_0*(phi_max-phi_min))
 *     else:
 *         return 0.0             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __pyx_r = 0.0;
    goto __pyx_L0;
  }

  /* "DanfossPDSim/asymm_scroll_geo.pyx":872
 *     return _radial_leakage_angles(CV_up, CV_down, &phi_min, &phi_max)
 * 
 * cpdef double radial_leakage_area(double theta, DanfossGeoVals geo, int index_up, int index_down, int location = common.UP) except *:             # <<<<<<<<<<<<<<
 *     """
 *     Notes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.radial_leakage_area", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_CV_up);
  __Pyx_XDECREF((PyObject *)__pyx_v_CV_down);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_43radial_leakage_area(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_42radial_leakage_area[] = "radial_leakage_area(double theta, DanfossGeoVals geo, int index_up, int index_down, int location=common.UP) -> double\n\n    Notes\n    -----\n    Normally the higher pressure chamber is inside and the lower pressure chamber is outside.  But this might not be the case for some CV for theta<pi\n\n    Also, you can tell which involute is outside by comparing radii of curvature.  The larger radius will always be towards the outside. (Right?)\n    ";
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_43radial_leakage_area(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_theta;
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo = 0;
  int __pyx_v_index_up;
  int __pyx_v_index_down;
  int __pyx_v_location;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("radial_leakage_area (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_theta,&__pyx_n_s_geo,&__pyx_n_s_index_up,&__pyx_n_s_index_down,&__pyx_n_s_location,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("radial_leakage_area", 0, 4, 5, 1); __PYX_ERR(0, 872, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index_up)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("radial_leakage_area", 0, 4, 5, 2); __PYX_ERR(0, 872, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index_down)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("radial_leakage_area", 0, 4, 5, 3); __PYX_ERR(0, 872, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_location);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "radial_leakage_area") < 0)) __PYX_ERR(0, 872, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_theta = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_theta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 872, __pyx_L3_error)
    __pyx_v_geo = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)values[1]);
    __pyx_v_index_up = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_index_up == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 872, __pyx_L3_error)
    __pyx_v_index_down = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_index_down == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 872, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_location = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_location == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 872, __pyx_L3_error)
    } else {
      __pyx_v_location = __pyx_k__4;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("radial_leakage_area", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 872, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.radial_leakage_area", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geo), __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, 1, "geo", 0))) __PYX_ERR(0, 872, __pyx_L1_error)
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_42radial_leakage_area(__pyx_self, __pyx_v_theta, __pyx_v_geo, __pyx_v_index_up, __pyx_v_index_down, __pyx_v_location);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_42radial_leakage_area(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_theta, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v_geo, int __pyx_v_index_up, int __pyx_v_index_down, int __pyx_v_location) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_radial_leakage_area __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("radial_leakage_area", 0);
  __Pyx_TraceCall("radial_leakage_area (wrapper)", __pyx_f[0], 872, 0, __PYX_ERR(0, 872, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.location = __pyx_v_location;
  __pyx_t_1 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo_radial_leakage_area(__pyx_v_theta, __pyx_v_geo, __pyx_v_index_up, __pyx_v_index_down, 0, &__pyx_t_2); if (unlikely(__pyx_t_1 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 872, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.radial_leakage_area", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_DanfossGeoVals(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_45__pyx_unpickle_DanfossGeoVals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_44__pyx_unpickle_DanfossGeoVals[] = "__pyx_unpickle_DanfossGeoVals(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_12DanfossPDSim_16asymm_scroll_geo_45__pyx_unpickle_DanfossGeoVals = {"__pyx_unpickle_DanfossGeoVals", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_45__pyx_unpickle_DanfossGeoVals, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_44__pyx_unpickle_DanfossGeoVals};
static PyObject *__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_45__pyx_unpickle_DanfossGeoVals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_DanfossGeoVals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_DanfossGeoVals", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_DanfossGeoVals", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_DanfossGeoVals") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_DanfossGeoVals", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.__pyx_unpickle_DanfossGeoVals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12DanfossPDSim_16asymm_scroll_geo_44__pyx_unpickle_DanfossGeoVals(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12DanfossPDSim_16asymm_scroll_geo_44__pyx_unpickle_DanfossGeoVals(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__5)
  __Pyx_RefNannySetupContext("__pyx_unpickle_DanfossGeoVals", 0);
  __Pyx_TraceCall("__pyx_unpickle_DanfossGeoVals", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb9a57b5, 0x9123f88, 0x5c2c894):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb9a57b5, 0x9123f88, 0x5c2c894) = (V_scroll, Vremove, b_line, cx_scroll, cy_scroll, delta_flank, delta_radial, delta_suction_offset, h, m_line, phi_fi0, phi_fie, phi_fis, phi_fo0, phi_foe, phi_fos, phi_ie_offset, phi_oi0, phi_oie, phi_ois, phi_oo0, phi_ooe, phi_oos, r_wall, ra_arc1, ra_arc2, ra_arc3, rb, ro, t, t1_arc1, t1_arc2, t1_arc3, t1_line, t2_arc1, t2_arc2, t2_arc3, t2_line, x0_wall, xa_arc1, xa_arc2, xa_arc3, xvec_disc_port, y0_wall, ya_arc1, ya_arc2, ya_arc3, yvec_disc_port))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__6, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb9a57b5, 0x9123f88, 0x5c2c894):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb9a57b5, 0x9123f88, 0x5c2c894) = (V_scroll, Vremove, b_line, cx_scroll, cy_scroll, delta_flank, delta_radial, delta_suction_offset, h, m_line, phi_fi0, phi_fie, phi_fis, phi_fo0, phi_foe, phi_fos, phi_ie_offset, phi_oi0, phi_oie, phi_ois, phi_oo0, phi_ooe, phi_oos, r_wall, ra_arc1, ra_arc2, ra_arc3, rb, ro, t, t1_arc1, t1_arc2, t1_arc3, t1_line, t2_arc1, t2_arc2, t2_arc3, t2_line, x0_wall, xa_arc1, xa_arc2, xa_arc3, xvec_disc_port, y0_wall, ya_arc1, ya_arc2, ya_arc3, yvec_disc_port))" % __pyx_checksum)
 *     __pyx_result = DanfossGeoVals.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xb9a57b5, 0x9123f88, 0x5c2c894):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb9a57b5, 0x9123f88, 0x5c2c894) = (V_scroll, Vremove, b_line, cx_scroll, cy_scroll, delta_flank, delta_radial, delta_suction_offset, h, m_line, phi_fi0, phi_fie, phi_fis, phi_fo0, phi_foe, phi_fos, phi_ie_offset, phi_oi0, phi_oie, phi_ois, phi_oo0, phi_ooe, phi_oos, r_wall, ra_arc1, ra_arc2, ra_arc3, rb, ro, t, t1_arc1, t1_arc2, t1_arc3, t1_line, t2_arc1, t2_arc2, t2_arc3, t2_line, x0_wall, xa_arc1, xa_arc2, xa_arc3, xvec_disc_port, y0_wall, ya_arc1, ya_arc2, ya_arc3, yvec_disc_port))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = DanfossGeoVals.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb9a57b5, 0x9123f88, 0x5c2c894):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb9a57b5, 0x9123f88, 0x5c2c894) = (V_scroll, Vremove, b_line, cx_scroll, cy_scroll, delta_flank, delta_radial, delta_suction_offset, h, m_line, phi_fi0, phi_fie, phi_fis, phi_fo0, phi_foe, phi_fos, phi_ie_offset, phi_oi0, phi_oie, phi_ois, phi_oo0, phi_ooe, phi_oos, r_wall, ra_arc1, ra_arc2, ra_arc3, rb, ro, t, t1_arc1, t1_arc2, t1_arc3, t1_line, t2_arc1, t2_arc2, t2_arc3, t2_line, x0_wall, xa_arc1, xa_arc2, xa_arc3, xvec_disc_port, y0_wall, ya_arc1, ya_arc2, ya_arc3, yvec_disc_port))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb9a57b5, 0x9123f88, 0x5c2c894) = (V_scroll, Vremove, b_line, cx_scroll, cy_scroll, delta_flank, delta_radial, delta_suction_offset, h, m_line, phi_fi0, phi_fie, phi_fis, phi_fo0, phi_foe, phi_fos, phi_ie_offset, phi_oi0, phi_oie, phi_ois, phi_oo0, phi_ooe, phi_oos, r_wall, ra_arc1, ra_arc2, ra_arc3, rb, ro, t, t1_arc1, t1_arc2, t1_arc3, t1_line, t2_arc1, t2_arc2, t2_arc3, t2_line, x0_wall, xa_arc1, xa_arc2, xa_arc3, xvec_disc_port, y0_wall, ya_arc1, ya_arc2, ya_arc3, yvec_disc_port))" % __pyx_checksum)
 *     __pyx_result = DanfossGeoVals.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_DanfossGeoVals__set_state(<DanfossGeoVals> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb9a57b5, 0x9123f88, 0x5c2c894) = (V_scroll, Vremove, b_line, cx_scroll, cy_scroll, delta_flank, delta_radial, delta_suction_offset, h, m_line, phi_fi0, phi_fie, phi_fis, phi_fo0, phi_foe, phi_fos, phi_ie_offset, phi_oi0, phi_oie, phi_ois, phi_oo0, phi_ooe, phi_oos, r_wall, ra_arc1, ra_arc2, ra_arc3, rb, ro, t, t1_arc1, t1_arc2, t1_arc3, t1_line, t2_arc1, t2_arc2, t2_arc3, t2_line, x0_wall, xa_arc1, xa_arc2, xa_arc3, xvec_disc_port, y0_wall, ya_arc1, ya_arc2, ya_arc3, yvec_disc_port))" % __pyx_checksum)
 *     __pyx_result = DanfossGeoVals.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_DanfossGeoVals__set_state(<DanfossGeoVals> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = DanfossGeoVals.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_DanfossGeoVals__set_state(<DanfossGeoVals> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_DanfossGeoVals__set_state(DanfossGeoVals __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_12DanfossPDSim_16asymm_scroll_geo___pyx_unpickle_DanfossGeoVals__set_state(((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb9a57b5, 0x9123f88, 0x5c2c894) = (V_scroll, Vremove, b_line, cx_scroll, cy_scroll, delta_flank, delta_radial, delta_suction_offset, h, m_line, phi_fi0, phi_fie, phi_fis, phi_fo0, phi_foe, phi_fos, phi_ie_offset, phi_oi0, phi_oie, phi_ois, phi_oo0, phi_ooe, phi_oos, r_wall, ra_arc1, ra_arc2, ra_arc3, rb, ro, t, t1_arc1, t1_arc2, t1_arc3, t1_line, t2_arc1, t2_arc2, t2_arc3, t2_line, x0_wall, xa_arc1, xa_arc2, xa_arc3, xvec_disc_port, y0_wall, ya_arc1, ya_arc2, ya_arc3, yvec_disc_port))" % __pyx_checksum)
 *     __pyx_result = DanfossGeoVals.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_DanfossGeoVals__set_state(<DanfossGeoVals> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_DanfossGeoVals__set_state(<DanfossGeoVals> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_DanfossGeoVals__set_state(DanfossGeoVals __pyx_result, tuple __pyx_state):
 *     __pyx_result.V_scroll = __pyx_state[0]; __pyx_result.Vremove = __pyx_state[1]; __pyx_result.b_line = __pyx_state[2]; __pyx_result.cx_scroll = __pyx_state[3]; __pyx_result.cy_scroll = __pyx_state[4]; __pyx_result.delta_flank = __pyx_state[5]; __pyx_result.delta_radial = __pyx_state[6]; __pyx_result.delta_suction_offset = __pyx_state[7]; __pyx_result.h = __pyx_state[8]; __pyx_result.m_line = __pyx_state[9]; __pyx_result.phi_fi0 = __pyx_state[10]; __pyx_result.phi_fie = __pyx_state[11]; __pyx_result.phi_fis = __pyx_state[12]; __pyx_result.phi_fo0 = __pyx_state[13]; __pyx_result.phi_foe = __pyx_state[14]; __pyx_result.phi_fos = __pyx_state[15]; __pyx_result.phi_ie_offset = __pyx_state[16]; __pyx_result.phi_oi0 = __pyx_state[17]; __pyx_result.phi_oie = __pyx_state[18]; __pyx_result.phi_ois = __pyx_state[19]; __pyx_result.phi_oo0 = __pyx_state[20]; __pyx_result.phi_ooe = __pyx_state[21]; __pyx_result.phi_oos = __pyx_state[22]; __pyx_result.r_wall = __pyx_state[23]; __pyx_result.ra_arc1 = __pyx_state[24]; __pyx_result.ra_arc2 = __pyx_state[25]; __pyx_result.ra_arc3 = __pyx_state[26]; __pyx_result.rb = __pyx_state[27]; __pyx_result.ro = __pyx_state[28]; __pyx_result.t = __pyx_state[29]; __pyx_result.t1_arc1 = __pyx_state[30]; __pyx_result.t1_arc2 = __pyx_state[31]; __pyx_result.t1_arc3 = __pyx_state[32]; __pyx_result.t1_line = __pyx_state[33]; __pyx_result.t2_arc1 = __pyx_state[34]; __pyx_result.t2_arc2 = __pyx_state[35]; __pyx_result.t2_arc3 = __pyx_state[36]; __pyx_result.t2_line = __pyx_state[37]; __pyx_result.x0_wall = __pyx_state[38]; __pyx_result.xa_arc1 = __pyx_state[39]; __pyx_result.xa_arc2 = __pyx_state[40]; __pyx_result.xa_arc3 = __pyx_state[41]; __pyx_result.xvec_disc_port = __pyx_state[42]; __pyx_result.y0_wall = __pyx_state[43]; __pyx_result.ya_arc1 = __pyx_state[44]; __pyx_result.ya_arc2 = __pyx_state[45]; __pyx_result.ya_arc3 = __pyx_state[46]; __pyx_result.yvec_disc_port = __pyx_state[47]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_DanfossGeoVals(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.__pyx_unpickle_DanfossGeoVals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_DanfossGeoVals__set_state(<DanfossGeoVals> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_DanfossGeoVals__set_state(DanfossGeoVals __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.V_scroll = __pyx_state[0]; __pyx_result.Vremove = __pyx_state[1]; __pyx_result.b_line = __pyx_state[2]; __pyx_result.cx_scroll = __pyx_state[3]; __pyx_result.cy_scroll = __pyx_state[4]; __pyx_result.delta_flank = __pyx_state[5]; __pyx_result.delta_radial = __pyx_state[6]; __pyx_result.delta_suction_offset = __pyx_state[7]; __pyx_result.h = __pyx_state[8]; __pyx_result.m_line = __pyx_state[9]; __pyx_result.phi_fi0 = __pyx_state[10]; __pyx_result.phi_fie = __pyx_state[11]; __pyx_result.phi_fis = __pyx_state[12]; __pyx_result.phi_fo0 = __pyx_state[13]; __pyx_result.phi_foe = __pyx_state[14]; __pyx_result.phi_fos = __pyx_state[15]; __pyx_result.phi_ie_offset = __pyx_state[16]; __pyx_result.phi_oi0 = __pyx_state[17]; __pyx_result.phi_oie = __pyx_state[18]; __pyx_result.phi_ois = __pyx_state[19]; __pyx_result.phi_oo0 = __pyx_state[20]; __pyx_result.phi_ooe = __pyx_state[21]; __pyx_result.phi_oos = __pyx_state[22]; __pyx_result.r_wall = __pyx_state[23]; __pyx_result.ra_arc1 = __pyx_state[24]; __pyx_result.ra_arc2 = __pyx_state[25]; __pyx_result.ra_arc3 = __pyx_state[26]; __pyx_result.rb = __pyx_state[27]; __pyx_result.ro = __pyx_state[28]; __pyx_result.t = __pyx_state[29]; __pyx_result.t1_arc1 = __pyx_state[30]; __pyx_result.t1_arc2 = __pyx_state[31]; __pyx_result.t1_arc3 = __pyx_state[32]; __pyx_result.t1_line = __pyx_state[33]; __pyx_result.t2_arc1 = __pyx_state[34]; __pyx_result.t2_arc2 = __pyx_state[35]; __pyx_result.t2_arc3 = __pyx_state[36]; __pyx_result.t2_line = __pyx_state[37]; __pyx_result.x0_wall = __pyx_state[38]; __pyx_result.xa_arc1 = __pyx_state[39]; __pyx_result.xa_arc2 = __pyx_state[40]; __pyx_result.xa_arc3 = __pyx_state[41]; __pyx_result.xvec_disc_port = __pyx_state[42]; __pyx_result.y0_wall = __pyx_state[43]; __pyx_result.ya_arc1 = __pyx_state[44]; __pyx_result.ya_arc2 = __pyx_state[45]; __pyx_result.ya_arc3 = __pyx_state[46]; __pyx_result.yvec_disc_port = __pyx_state[47]
 *     if len(__pyx_state) > 48 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_12DanfossPDSim_16asymm_scroll_geo___pyx_unpickle_DanfossGeoVals__set_state(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_DanfossGeoVals__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_DanfossGeoVals__set_state", __pyx_f[2], 11, 0, __PYX_ERR(2, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_DanfossGeoVals__set_state(DanfossGeoVals __pyx_result, tuple __pyx_state):
 *     __pyx_result.V_scroll = __pyx_state[0]; __pyx_result.Vremove = __pyx_state[1]; __pyx_result.b_line = __pyx_state[2]; __pyx_result.cx_scroll = __pyx_state[3]; __pyx_result.cy_scroll = __pyx_state[4]; __pyx_result.delta_flank = __pyx_state[5]; __pyx_result.delta_radial = __pyx_state[6]; __pyx_result.delta_suction_offset = __pyx_state[7]; __pyx_result.h = __pyx_state[8]; __pyx_result.m_line = __pyx_state[9]; __pyx_result.phi_fi0 = __pyx_state[10]; __pyx_result.phi_fie = __pyx_state[11]; __pyx_result.phi_fis = __pyx_state[12]; __pyx_result.phi_fo0 = __pyx_state[13]; __pyx_result.phi_foe = __pyx_state[14]; __pyx_result.phi_fos = __pyx_state[15]; __pyx_result.phi_ie_offset = __pyx_state[16]; __pyx_result.phi_oi0 = __pyx_state[17]; __pyx_result.phi_oie = __pyx_state[18]; __pyx_result.phi_ois = __pyx_state[19]; __pyx_result.phi_oo0 = __pyx_state[20]; __pyx_result.phi_ooe = __pyx_state[21]; __pyx_result.phi_oos = __pyx_state[22]; __pyx_result.r_wall = __pyx_state[23]; __pyx_result.ra_arc1 = __pyx_state[24]; __pyx_result.ra_arc2 = __pyx_state[25]; __pyx_result.ra_arc3 = __pyx_state[26]; __pyx_result.rb = __pyx_state[27]; __pyx_result.ro = __pyx_state[28]; __pyx_result.t = __pyx_state[29]; __pyx_result.t1_arc1 = __pyx_state[30]; __pyx_result.t1_arc2 = __pyx_state[31]; __pyx_result.t1_arc3 = __pyx_state[32]; __pyx_result.t1_line = __pyx_state[33]; __pyx_result.t2_arc1 = __pyx_state[34]; __pyx_result.t2_arc2 = __pyx_state[35]; __pyx_result.t2_arc3 = __pyx_state[36]; __pyx_result.t2_line = __pyx_state[37]; __pyx_result.x0_wall = __pyx_state[38]; __pyx_result.xa_arc1 = __pyx_state[39]; __pyx_result.xa_arc2 = __pyx_state[40]; __pyx_result.xa_arc3 = __pyx_state[41]; __pyx_result.xvec_disc_port = __pyx_state[42]; __pyx_result.y0_wall = __pyx_state[43]; __pyx_result.ya_arc1 = __pyx_state[44]; __pyx_result.ya_arc2 = __pyx_state[45]; __pyx_result.ya_arc3 = __pyx_state[46]; __pyx_result.yvec_disc_port = __pyx_state[47]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 48 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[48])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.V_scroll = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.Vremove = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.b_line = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.cx_scroll = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.cy_scroll = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.delta_flank = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.delta_radial = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.delta_suction_offset = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.h = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.m_line = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.phi_fi0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.phi_fie = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.phi_fis = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.phi_fo0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.phi_foe = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 15, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.phi_fos = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 16, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.phi_ie_offset = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 17, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.phi_oi0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 18, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.phi_oie = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 19, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.phi_ois = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 20, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.phi_oo0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 21, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.phi_ooe = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 22, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.phi_oos = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 23, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.r_wall = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 24, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.ra_arc1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 25, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.ra_arc2 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 26, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->ra_arc3 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 27, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.rb = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 28, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.ro = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 29, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.t = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 30, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.t1_arc1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 31, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.t1_arc2 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 32, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->t1_arc3 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 33, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.t1_line = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 34, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.t2_arc1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 35, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.t2_arc2 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 36, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->t2_arc3 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 37, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.t2_line = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 38, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.x0_wall = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 39, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.xa_arc1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 40, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.xa_arc2 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 41, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->xa_arc3 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 42, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.xvec_disc_port);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->__pyx_base.xvec_disc_port));
  __pyx_v___pyx_result->__pyx_base.xvec_disc_port = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 43, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.y0_wall = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 44, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.ya_arc1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 45, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.ya_arc2 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 46, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->ya_arc3 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 47, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.yvec_disc_port);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->__pyx_base.yvec_disc_port));
  __pyx_v___pyx_result->__pyx_base.yvec_disc_port = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_DanfossGeoVals__set_state(DanfossGeoVals __pyx_result, tuple __pyx_state):
 *     __pyx_result.V_scroll = __pyx_state[0]; __pyx_result.Vremove = __pyx_state[1]; __pyx_result.b_line = __pyx_state[2]; __pyx_result.cx_scroll = __pyx_state[3]; __pyx_result.cy_scroll = __pyx_state[4]; __pyx_result.delta_flank = __pyx_state[5]; __pyx_result.delta_radial = __pyx_state[6]; __pyx_result.delta_suction_offset = __pyx_state[7]; __pyx_result.h = __pyx_state[8]; __pyx_result.m_line = __pyx_state[9]; __pyx_result.phi_fi0 = __pyx_state[10]; __pyx_result.phi_fie = __pyx_state[11]; __pyx_result.phi_fis = __pyx_state[12]; __pyx_result.phi_fo0 = __pyx_state[13]; __pyx_result.phi_foe = __pyx_state[14]; __pyx_result.phi_fos = __pyx_state[15]; __pyx_result.phi_ie_offset = __pyx_state[16]; __pyx_result.phi_oi0 = __pyx_state[17]; __pyx_result.phi_oie = __pyx_state[18]; __pyx_result.phi_ois = __pyx_state[19]; __pyx_result.phi_oo0 = __pyx_state[20]; __pyx_result.phi_ooe = __pyx_state[21]; __pyx_result.phi_oos = __pyx_state[22]; __pyx_result.r_wall = __pyx_state[23]; __pyx_result.ra_arc1 = __pyx_state[24]; __pyx_result.ra_arc2 = __pyx_state[25]; __pyx_result.ra_arc3 = __pyx_state[26]; __pyx_result.rb = __pyx_state[27]; __pyx_result.ro = __pyx_state[28]; __pyx_result.t = __pyx_state[29]; __pyx_result.t1_arc1 = __pyx_state[30]; __pyx_result.t1_arc2 = __pyx_state[31]; __pyx_result.t1_arc3 = __pyx_state[32]; __pyx_result.t1_line = __pyx_state[33]; __pyx_result.t2_arc1 = __pyx_state[34]; __pyx_result.t2_arc2 = __pyx_state[35]; __pyx_result.t2_arc3 = __pyx_state[36]; __pyx_result.t2_line = __pyx_state[37]; __pyx_result.x0_wall = __pyx_state[38]; __pyx_result.xa_arc1 = __pyx_state[39]; __pyx_result.xa_arc2 = __pyx_state[40]; __pyx_result.xa_arc3 = __pyx_state[41]; __pyx_result.xvec_disc_port = __pyx_state[42]; __pyx_result.y0_wall = __pyx_state[43]; __pyx_result.ya_arc1 = __pyx_state[44]; __pyx_result.ya_arc2 = __pyx_state[45]; __pyx_result.ya_arc3 = __pyx_state[46]; __pyx_result.yvec_disc_port = __pyx_state[47]
 *     if len(__pyx_state) > 48 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[48])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 48) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.V_scroll = __pyx_state[0]; __pyx_result.Vremove = __pyx_state[1]; __pyx_result.b_line = __pyx_state[2]; __pyx_result.cx_scroll = __pyx_state[3]; __pyx_result.cy_scroll = __pyx_state[4]; __pyx_result.delta_flank = __pyx_state[5]; __pyx_result.delta_radial = __pyx_state[6]; __pyx_result.delta_suction_offset = __pyx_state[7]; __pyx_result.h = __pyx_state[8]; __pyx_result.m_line = __pyx_state[9]; __pyx_result.phi_fi0 = __pyx_state[10]; __pyx_result.phi_fie = __pyx_state[11]; __pyx_result.phi_fis = __pyx_state[12]; __pyx_result.phi_fo0 = __pyx_state[13]; __pyx_result.phi_foe = __pyx_state[14]; __pyx_result.phi_fos = __pyx_state[15]; __pyx_result.phi_ie_offset = __pyx_state[16]; __pyx_result.phi_oi0 = __pyx_state[17]; __pyx_result.phi_oie = __pyx_state[18]; __pyx_result.phi_ois = __pyx_state[19]; __pyx_result.phi_oo0 = __pyx_state[20]; __pyx_result.phi_ooe = __pyx_state[21]; __pyx_result.phi_oos = __pyx_state[22]; __pyx_result.r_wall = __pyx_state[23]; __pyx_result.ra_arc1 = __pyx_state[24]; __pyx_result.ra_arc2 = __pyx_state[25]; __pyx_result.ra_arc3 = __pyx_state[26]; __pyx_result.rb = __pyx_state[27]; __pyx_result.ro = __pyx_state[28]; __pyx_result.t = __pyx_state[29]; __pyx_result.t1_arc1 = __pyx_state[30]; __pyx_result.t1_arc2 = __pyx_state[31]; __pyx_result.t1_arc3 = __pyx_state[32]; __pyx_result.t1_line = __pyx_state[33]; __pyx_result.t2_arc1 = __pyx_state[34]; __pyx_result.t2_arc2 = __pyx_state[35]; __pyx_result.t2_arc3 = __pyx_state[36]; __pyx_result.t2_line = __pyx_state[37]; __pyx_result.x0_wall = __pyx_state[38]; __pyx_result.xa_arc1 = __pyx_state[39]; __pyx_result.xa_arc2 = __pyx_state[40]; __pyx_result.xa_arc3 = __pyx_state[41]; __pyx_result.xvec_disc_port = __pyx_state[42]; __pyx_result.y0_wall = __pyx_state[43]; __pyx_result.ya_arc1 = __pyx_state[44]; __pyx_result.ya_arc2 = __pyx_state[45]; __pyx_result.ya_arc3 = __pyx_state[46]; __pyx_result.yvec_disc_port = __pyx_state[47]
 *     if len(__pyx_state) > 48 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[48])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 48, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_DanfossGeoVals__set_state(DanfossGeoVals __pyx_result, tuple __pyx_state):
 *     __pyx_result.V_scroll = __pyx_state[0]; __pyx_result.Vremove = __pyx_state[1]; __pyx_result.b_line = __pyx_state[2]; __pyx_result.cx_scroll = __pyx_state[3]; __pyx_result.cy_scroll = __pyx_state[4]; __pyx_result.delta_flank = __pyx_state[5]; __pyx_result.delta_radial = __pyx_state[6]; __pyx_result.delta_suction_offset = __pyx_state[7]; __pyx_result.h = __pyx_state[8]; __pyx_result.m_line = __pyx_state[9]; __pyx_result.phi_fi0 = __pyx_state[10]; __pyx_result.phi_fie = __pyx_state[11]; __pyx_result.phi_fis = __pyx_state[12]; __pyx_result.phi_fo0 = __pyx_state[13]; __pyx_result.phi_foe = __pyx_state[14]; __pyx_result.phi_fos = __pyx_state[15]; __pyx_result.phi_ie_offset = __pyx_state[16]; __pyx_result.phi_oi0 = __pyx_state[17]; __pyx_result.phi_oie = __pyx_state[18]; __pyx_result.phi_ois = __pyx_state[19]; __pyx_result.phi_oo0 = __pyx_state[20]; __pyx_result.phi_ooe = __pyx_state[21]; __pyx_result.phi_oos = __pyx_state[22]; __pyx_result.r_wall = __pyx_state[23]; __pyx_result.ra_arc1 = __pyx_state[24]; __pyx_result.ra_arc2 = __pyx_state[25]; __pyx_result.ra_arc3 = __pyx_state[26]; __pyx_result.rb = __pyx_state[27]; __pyx_result.ro = __pyx_state[28]; __pyx_result.t = __pyx_state[29]; __pyx_result.t1_arc1 = __pyx_state[30]; __pyx_result.t1_arc2 = __pyx_state[31]; __pyx_result.t1_arc3 = __pyx_state[32]; __pyx_result.t1_line = __pyx_state[33]; __pyx_result.t2_arc1 = __pyx_state[34]; __pyx_result.t2_arc2 = __pyx_state[35]; __pyx_result.t2_arc3 = __pyx_state[36]; __pyx_result.t2_line = __pyx_state[37]; __pyx_result.x0_wall = __pyx_state[38]; __pyx_result.xa_arc1 = __pyx_state[39]; __pyx_result.xa_arc2 = __pyx_state[40]; __pyx_result.xa_arc3 = __pyx_state[41]; __pyx_result.xvec_disc_port = __pyx_state[42]; __pyx_result.y0_wall = __pyx_state[43]; __pyx_result.ya_arc1 = __pyx_state[44]; __pyx_result.ya_arc2 = __pyx_state[45]; __pyx_result.ya_arc3 = __pyx_state[46]; __pyx_result.yvec_disc_port = __pyx_state[47]
 *     if len(__pyx_state) > 48 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[48])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_DanfossGeoVals__set_state(<DanfossGeoVals> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_DanfossGeoVals__set_state(DanfossGeoVals __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.V_scroll = __pyx_state[0]; __pyx_result.Vremove = __pyx_state[1]; __pyx_result.b_line = __pyx_state[2]; __pyx_result.cx_scroll = __pyx_state[3]; __pyx_result.cy_scroll = __pyx_state[4]; __pyx_result.delta_flank = __pyx_state[5]; __pyx_result.delta_radial = __pyx_state[6]; __pyx_result.delta_suction_offset = __pyx_state[7]; __pyx_result.h = __pyx_state[8]; __pyx_result.m_line = __pyx_state[9]; __pyx_result.phi_fi0 = __pyx_state[10]; __pyx_result.phi_fie = __pyx_state[11]; __pyx_result.phi_fis = __pyx_state[12]; __pyx_result.phi_fo0 = __pyx_state[13]; __pyx_result.phi_foe = __pyx_state[14]; __pyx_result.phi_fos = __pyx_state[15]; __pyx_result.phi_ie_offset = __pyx_state[16]; __pyx_result.phi_oi0 = __pyx_state[17]; __pyx_result.phi_oie = __pyx_state[18]; __pyx_result.phi_ois = __pyx_state[19]; __pyx_result.phi_oo0 = __pyx_state[20]; __pyx_result.phi_ooe = __pyx_state[21]; __pyx_result.phi_oos = __pyx_state[22]; __pyx_result.r_wall = __pyx_state[23]; __pyx_result.ra_arc1 = __pyx_state[24]; __pyx_result.ra_arc2 = __pyx_state[25]; __pyx_result.ra_arc3 = __pyx_state[26]; __pyx_result.rb = __pyx_state[27]; __pyx_result.ro = __pyx_state[28]; __pyx_result.t = __pyx_state[29]; __pyx_result.t1_arc1 = __pyx_state[30]; __pyx_result.t1_arc2 = __pyx_state[31]; __pyx_result.t1_arc3 = __pyx_state[32]; __pyx_result.t1_line = __pyx_state[33]; __pyx_result.t2_arc1 = __pyx_state[34]; __pyx_result.t2_arc2 = __pyx_state[35]; __pyx_result.t2_arc3 = __pyx_state[36]; __pyx_result.t2_line = __pyx_state[37]; __pyx_result.x0_wall = __pyx_state[38]; __pyx_result.xa_arc1 = __pyx_state[39]; __pyx_result.xa_arc2 = __pyx_state[40]; __pyx_result.xa_arc3 = __pyx_state[41]; __pyx_result.xvec_disc_port = __pyx_state[42]; __pyx_result.y0_wall = __pyx_state[43]; __pyx_result.ya_arc1 = __pyx_state[44]; __pyx_result.ya_arc2 = __pyx_state[45]; __pyx_result.ya_arc3 = __pyx_state[46]; __pyx_result.yvec_disc_port = __pyx_state[47]
 *     if len(__pyx_state) > 48 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("DanfossPDSim.asymm_scroll_geo.__pyx_unpickle_DanfossGeoVals__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew1", __pyx_f[3], 734, 0, __PYX_ERR(3, 734, __pyx_L1_error));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew2", __pyx_f[3], 737, 0, __PYX_ERR(3, 737, __pyx_L1_error));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew3", __pyx_f[3], 740, 0, __PYX_ERR(3, 740, __pyx_L1_error));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew4", __pyx_f[3], 743, 0, __PYX_ERR(3, 743, __pyx_L1_error));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew5", __pyx_f[3], 746, 0, __PYX_ERR(3, 746, __pyx_L1_error));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);
  __Pyx_TraceCall("PyDataType_SHAPE", __pyx_f[3], 749, 0, __PYX_ERR(3, 749, __pyx_L1_error));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":751
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":753
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.PyDataType_SHAPE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":928
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_array_base", 0);
  __Pyx_TraceCall("set_array_base", __pyx_f[3], 928, 0, __PYX_ERR(3, 928, __pyx_L1_error));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":929
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":930
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":928
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":932
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_array_base", 0);
  __Pyx_TraceCall("get_array_base", __pyx_f[3], 932, 0, __PYX_ERR(3, 932, __pyx_L1_error));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":933
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":934
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":935
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":934
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":936
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":932
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.get_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":940
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);
  __Pyx_TraceCall("import_array", __pyx_f[3], 940, 0, __PYX_ERR(3, 940, __pyx_L1_error));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":942
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 942, __pyx_L3_error)

      /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":943
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 943, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":944
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 944, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 944, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":940
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":946
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);
  __Pyx_TraceCall("import_umath", __pyx_f[3], 946, 0, __PYX_ERR(3, 946, __pyx_L1_error));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":948
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 948, __pyx_L3_error)

      /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":949
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 949, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":950
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 950, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 950, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":946
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":952
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);
  __Pyx_TraceCall("import_ufunc", __pyx_f[3], 952, 0, __PYX_ERR(3, 952, __pyx_L1_error));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":954
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 954, __pyx_L3_error)

      /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":955
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 955, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":956
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 956, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 956, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":952
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);
  __Pyx_TraceCall("is_timedelta64_object", __pyx_f[3], 966, 0, __PYX_ERR(3, 966, __pyx_L1_error));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":978
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.is_timedelta64_object", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":981
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);
  __Pyx_TraceCall("is_datetime64_object", __pyx_f[3], 981, 0, __PYX_ERR(3, 981, __pyx_L1_error));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":993
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":981
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.is_datetime64_object", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":996
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("get_datetime64_value", __pyx_f[3], 996, 1, __PYX_ERR(3, 996, __pyx_L1_error));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":1003
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":996
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.get_datetime64_value", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":1006
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("get_timedelta64_value", __pyx_f[3], 1006, 1, __PYX_ERR(3, 1006, __pyx_L1_error));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":1010
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":1006
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.get_timedelta64_value", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":1013
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("get_datetime64_unit", __pyx_f[3], 1013, 1, __PYX_ERR(3, 1013, __pyx_L1_error));

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":1017
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":1013
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.get_datetime64_unit", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = (NPY_DATETIMEUNIT) 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "PDSim/scroll/common_scroll_geo.pxd":141
 * cpdef long get_compression_chamber_index(long path, long alpha)
 * 
 * cdef inline bint matchpair(long key1, long key2, long target1, long target2):             # <<<<<<<<<<<<<<
 *     return (key1 == target1 and key2 == target2) or (key2 == target1 and key1 == target2)
 * 
 */

static CYTHON_INLINE int __pyx_f_5PDSim_6scroll_17common_scroll_geo_matchpair(long __pyx_v_key1, long __pyx_v_key2, long __pyx_v_target1, long __pyx_v_target2) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("matchpair", 0);
  __Pyx_TraceCall("matchpair", __pyx_f[4], 141, 0, __PYX_ERR(4, 141, __pyx_L1_error));

  /* "PDSim/scroll/common_scroll_geo.pxd":142
 * 
 * cdef inline bint matchpair(long key1, long key2, long target1, long target2):
 *     return (key1 == target1 and key2 == target2) or (key2 == target1 and key1 == target2)             # <<<<<<<<<<<<<<
 * 
 * cpdef inline double min2(double a, double b):
 */
  __pyx_t_2 = ((__pyx_v_key1 == __pyx_v_target1) != 0);
  if (!__pyx_t_2) {
    goto __pyx_L4_next_or;
  } else {
  }
  __pyx_t_2 = ((__pyx_v_key2 == __pyx_v_target2) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_L4_next_or:;
  __pyx_t_2 = ((__pyx_v_key2 == __pyx_v_target1) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_key1 == __pyx_v_target2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "PDSim/scroll/common_scroll_geo.pxd":141
 * cpdef long get_compression_chamber_index(long path, long alpha)
 * 
 * cdef inline bint matchpair(long key1, long key2, long target1, long target2):             # <<<<<<<<<<<<<<
 *     return (key1 == target1 and key2 == target2) or (key2 == target1 and key1 == target2)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("PDSim.scroll.common_scroll_geo.matchpair", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/scroll/common_scroll_geo.pxd":144
 *     return (key1 == target1 and key2 == target2) or (key2 == target1 and key1 == target2)
 * 
 * cpdef inline double min2(double a, double b):             # <<<<<<<<<<<<<<
 *     return a if a<b else b
 * 
 */

static PyObject *__pyx_pw_5PDSim_6scroll_17common_scroll_geo_1min2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE double __pyx_f_5PDSim_6scroll_17common_scroll_geo_min2(double __pyx_v_a, double __pyx_v_b, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("min2", 0);
  __Pyx_TraceCall("min2", __pyx_f[4], 144, 0, __PYX_ERR(4, 144, __pyx_L1_error));

  /* "PDSim/scroll/common_scroll_geo.pxd":145
 * 
 * cpdef inline double min2(double a, double b):
 *     return a if a<b else b             # <<<<<<<<<<<<<<
 * 
 * cpdef inline double max2(double a, double b):
 */
  if (((__pyx_v_a < __pyx_v_b) != 0)) {
    __pyx_t_1 = __pyx_v_a;
  } else {
    __pyx_t_1 = __pyx_v_b;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "PDSim/scroll/common_scroll_geo.pxd":144
 *     return (key1 == target1 and key2 == target2) or (key2 == target1 and key1 == target2)
 * 
 * cpdef inline double min2(double a, double b):             # <<<<<<<<<<<<<<
 *     return a if a<b else b
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("PDSim.scroll.common_scroll_geo.min2", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_6scroll_17common_scroll_geo_1min2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_6scroll_17common_scroll_geo_min2[] = "min2(double a, double b) -> double";
static PyObject *__pyx_pw_5PDSim_6scroll_17common_scroll_geo_1min2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  double __pyx_v_b;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("min2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("min2", 1, 2, 2, 1); __PYX_ERR(4, 144, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "min2") < 0)) __PYX_ERR(4, 144, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 144, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 144, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("min2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 144, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.scroll.common_scroll_geo.min2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_6scroll_17common_scroll_geo_min2(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_6scroll_17common_scroll_geo_min2(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("min2", 0);
  __Pyx_TraceCall("min2 (wrapper)", __pyx_f[4], 144, 0, __PYX_ERR(4, 144, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5PDSim_6scroll_17common_scroll_geo_min2(__pyx_v_a, __pyx_v_b, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.scroll.common_scroll_geo.min2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PDSim/scroll/common_scroll_geo.pxd":147
 *     return a if a<b else b
 * 
 * cpdef inline double max2(double a, double b):             # <<<<<<<<<<<<<<
 *     return a if a>b else b
 * 
 */

static PyObject *__pyx_pw_5PDSim_6scroll_17common_scroll_geo_3max2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE double __pyx_f_5PDSim_6scroll_17common_scroll_geo_max2(double __pyx_v_a, double __pyx_v_b, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("max2", 0);
  __Pyx_TraceCall("max2", __pyx_f[4], 147, 0, __PYX_ERR(4, 147, __pyx_L1_error));

  /* "PDSim/scroll/common_scroll_geo.pxd":148
 * 
 * cpdef inline double max2(double a, double b):
 *     return a if a>b else b             # <<<<<<<<<<<<<<
 * 
 * cpdef double_or_numpy plus_one(double_or_numpy x)
 */
  if (((__pyx_v_a > __pyx_v_b) != 0)) {
    __pyx_t_1 = __pyx_v_a;
  } else {
    __pyx_t_1 = __pyx_v_b;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "PDSim/scroll/common_scroll_geo.pxd":147
 *     return a if a<b else b
 * 
 * cpdef inline double max2(double a, double b):             # <<<<<<<<<<<<<<
 *     return a if a>b else b
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("PDSim.scroll.common_scroll_geo.max2", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5PDSim_6scroll_17common_scroll_geo_3max2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5PDSim_6scroll_17common_scroll_geo_2max2[] = "max2(double a, double b) -> double";
static PyObject *__pyx_pw_5PDSim_6scroll_17common_scroll_geo_3max2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  double __pyx_v_b;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("max2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("max2", 1, 2, 2, 1); __PYX_ERR(4, 147, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "max2") < 0)) __PYX_ERR(4, 147, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 147, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 147, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("max2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 147, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PDSim.scroll.common_scroll_geo.max2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5PDSim_6scroll_17common_scroll_geo_2max2(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5PDSim_6scroll_17common_scroll_geo_2max2(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_a, double __pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("max2", 0);
  __Pyx_TraceCall("max2 (wrapper)", __pyx_f[4], 147, 0, __PYX_ERR(4, 147, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5PDSim_6scroll_17common_scroll_geo_max2(__pyx_v_a, __pyx_v_b, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PDSim.scroll.common_scroll_geo.max2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals __pyx_vtable_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals;

static PyObject *__pyx_tp_new_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *p;
  PyObject *o = __pyx_ptype_5PDSim_6scroll_17common_scroll_geo_geoVals->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5PDSim_6scroll_17common_scroll_geo_geoVals*)__pyx_vtabptr_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals;
  return o;
}

static void __pyx_tp_dealloc_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_geoVals)) __pyx_ptype_5PDSim_6scroll_17common_scroll_geo_geoVals->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals);
}

static int __pyx_tp_traverse_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_geoVals)) ? ((__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_geoVals->tp_traverse) ? __pyx_ptype_5PDSim_6scroll_17common_scroll_geo_geoVals->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals(PyObject *o) {
  if (likely(__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_geoVals)) { if (__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_geoVals->tp_clear) __pyx_ptype_5PDSim_6scroll_17common_scroll_geo_geoVals->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals);
  return 0;
}

static PyObject *__pyx_getprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_xa_arc3(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7xa_arc3_1__get__(o);
}

static int __pyx_setprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_xa_arc3(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7xa_arc3_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_ya_arc3(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ya_arc3_1__get__(o);
}

static int __pyx_setprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_ya_arc3(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ya_arc3_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_ra_arc3(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ra_arc3_1__get__(o);
}

static int __pyx_setprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_ra_arc3(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7ra_arc3_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_t1_arc3(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t1_arc3_1__get__(o);
}

static int __pyx_setprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_t1_arc3(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t1_arc3_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_t2_arc3(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t2_arc3_1__get__(o);
}

static int __pyx_setprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_t2_arc3(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_7t2_arc3_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_3__reduce_cython__, METH_NOARGS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_5__setstate_cython__, METH_O, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals[] = {
  {(char *)"xa_arc3", __pyx_getprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_xa_arc3, __pyx_setprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_xa_arc3, (char *)"xa_arc3: 'double'", 0},
  {(char *)"ya_arc3", __pyx_getprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_ya_arc3, __pyx_setprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_ya_arc3, (char *)"ya_arc3: 'double'", 0},
  {(char *)"ra_arc3", __pyx_getprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_ra_arc3, __pyx_setprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_ra_arc3, (char *)"ra_arc3: 'double'", 0},
  {(char *)"t1_arc3", __pyx_getprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_t1_arc3, __pyx_setprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_t1_arc3, (char *)"t1_arc3: 'double'", 0},
  {(char *)"t2_arc3", __pyx_getprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_t2_arc3, __pyx_setprop_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_t2_arc3, (char *)"t2_arc3: 'double'", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals = {
  PyVarObject_HEAD_INIT(0, 0)
  "DanfossPDSim.asymm_scroll_geo.DanfossGeoVals", /*tp_name*/
  sizeof(struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_12DanfossPDSim_16asymm_scroll_geo_14DanfossGeoVals_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    This is a custom class that add the geometric parameters that are\n    required for the three-arc PMP\n    ", /*tp_doc*/
  __pyx_tp_traverse_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, /*tp_traverse*/
  __pyx_tp_clear_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"Danfossmin2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_1Danfossmin2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_Danfossmin2},
  {"Danfossmax2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_3Danfossmax2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_2Danfossmax2},
  {"sortAnglesCCW", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_5sortAnglesCCW, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_4sortAnglesCCW},
  {"phi_s1_sa", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_7phi_s1_sa, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_6phi_s1_sa},
  {"phi_s2_sa", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_9phi_s2_sa, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_8phi_s2_sa},
  {"CVangles", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_11CVangles, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_10CVangles},
  {"theta_d", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_13theta_d, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_12theta_d},
  {"Nc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_15Nc, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_14Nc},
  {"getNc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_17getNc, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_16getNc},
  {"Green_circle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_19Green_circle, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_18Green_circle},
  {"SA", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_21SA, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_20SA},
  {"SA_forces", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_23SA_forces, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_22SA_forces},
  {"DD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_25DD, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_24DD},
  {"DD_forces", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_27DD_forces, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_26DD_forces},
  {"DDD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_29DDD, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_28DDD},
  {"DDD_forces", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_31DDD_forces, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_30DDD_forces},
  {"VdV", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_33VdV, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_32VdV},
  {"forces", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_35forces, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_34forces},
  {"CVcoords", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_37CVcoords, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_36CVcoords},
  {"HT_angles", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_39HT_angles, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_38HT_angles},
  {"get_radial_leakage_angles", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_41get_radial_leakage_angles, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_40get_radial_leakage_angles},
  {"radial_leakage_area", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12DanfossPDSim_16asymm_scroll_geo_43radial_leakage_area, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12DanfossPDSim_16asymm_scroll_geo_42radial_leakage_area},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_asymm_scroll_geo(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_asymm_scroll_geo},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "asymm_scroll_geo",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_CVkey, __pyx_k_CVkey, sizeof(__pyx_k_CVkey), 0, 0, 1, 1},
  {&__pyx_kp_s_CVkey_key_s_is_invalid, __pyx_k_CVkey_key_s_is_invalid, sizeof(__pyx_k_CVkey_key_s_is_invalid), 0, 0, 1, 0},
  {&__pyx_kp_s_Could_not_match_this_CVkey, __pyx_k_Could_not_match_this_CVkey, sizeof(__pyx_k_Could_not_match_this_CVkey), 0, 0, 1, 0},
  {&__pyx_n_s_DanfossGeoVals, __pyx_k_DanfossGeoVals, sizeof(__pyx_k_DanfossGeoVals), 0, 0, 1, 1},
  {&__pyx_n_s_DanfossPDSim_asymm_scroll_geo, __pyx_k_DanfossPDSim_asymm_scroll_geo, sizeof(__pyx_k_DanfossPDSim_asymm_scroll_geo), 0, 0, 1, 1},
  {&__pyx_kp_s_Danfoss_hybrid, __pyx_k_Danfoss_hybrid, sizeof(__pyx_k_Danfoss_hybrid), 0, 0, 1, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_M_O_p, __pyx_k_M_O_p, sizeof(__pyx_k_M_O_p), 0, 0, 1, 1},
  {&__pyx_n_s_Ninv, __pyx_k_Ninv, sizeof(__pyx_k_Ninv), 0, 0, 1, 1},
  {&__pyx_n_s_PDSim_scroll_common_scroll_geo, __pyx_k_PDSim_scroll_common_scroll_geo, sizeof(__pyx_k_PDSim_scroll_common_scroll_geo), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_kp_s_Requested_alpha_0_d_is_not_possi, __pyx_k_Requested_alpha_0_d_is_not_possi, sizeof(__pyx_k_Requested_alpha_0_d_is_not_possi), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_n_s__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_angles, __pyx_k_angles, sizeof(__pyx_k_angles), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_kp_s_c1, __pyx_k_c1, sizeof(__pyx_k_c1), 0, 0, 1, 0},
  {&__pyx_kp_s_c2, __pyx_k_c2, sizeof(__pyx_k_c2), 0, 0, 1, 0},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_cos, __pyx_k_cos, sizeof(__pyx_k_cos), 0, 0, 1, 1},
  {&__pyx_n_s_cross, __pyx_k_cross, sizeof(__pyx_k_cross), 0, 0, 1, 1},
  {&__pyx_n_s_cx, __pyx_k_cx, sizeof(__pyx_k_cx), 0, 0, 1, 1},
  {&__pyx_n_s_cy, __pyx_k_cy, sizeof(__pyx_k_cy), 0, 0, 1, 1},
  {&__pyx_n_s_d1, __pyx_k_d1, sizeof(__pyx_k_d1), 0, 0, 1, 1},
  {&__pyx_n_s_d2, __pyx_k_d2, sizeof(__pyx_k_d2), 0, 0, 1, 1},
  {&__pyx_n_s_dd, __pyx_k_dd, sizeof(__pyx_k_dd), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_fi, __pyx_k_fi, sizeof(__pyx_k_fi), 0, 0, 1, 1},
  {&__pyx_n_s_fo, __pyx_k_fo, sizeof(__pyx_k_fo), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fx_p, __pyx_k_fx_p, sizeof(__pyx_k_fx_p), 0, 0, 1, 1},
  {&__pyx_n_s_fy_p, __pyx_k_fy_p, sizeof(__pyx_k_fy_p), 0, 0, 1, 1},
  {&__pyx_n_s_fz_p, __pyx_k_fz_p, sizeof(__pyx_k_fz_p), 0, 0, 1, 1},
  {&__pyx_n_s_geo, __pyx_k_geo, sizeof(__pyx_k_geo), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_index_down, __pyx_k_index_down, sizeof(__pyx_k_index_down), 0, 0, 1, 1},
  {&__pyx_kp_s_index_s_d_not_valid, __pyx_k_index_s_d_not_valid, sizeof(__pyx_k_index_s_d_not_valid), 0, 0, 1, 0},
  {&__pyx_n_s_index_up, __pyx_k_index_up, sizeof(__pyx_k_index_up), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_keyIc1_1, __pyx_k_keyIc1_1, sizeof(__pyx_k_keyIc1_1), 0, 0, 1, 1},
  {&__pyx_n_s_keyIc1_2, __pyx_k_keyIc1_2, sizeof(__pyx_k_keyIc1_2), 0, 0, 1, 1},
  {&__pyx_n_s_keyIc1_3, __pyx_k_keyIc1_3, sizeof(__pyx_k_keyIc1_3), 0, 0, 1, 1},
  {&__pyx_n_s_keyIc1_4, __pyx_k_keyIc1_4, sizeof(__pyx_k_keyIc1_4), 0, 0, 1, 1},
  {&__pyx_n_s_keyIc1_5, __pyx_k_keyIc1_5, sizeof(__pyx_k_keyIc1_5), 0, 0, 1, 1},
  {&__pyx_n_s_keyIc2_1, __pyx_k_keyIc2_1, sizeof(__pyx_k_keyIc2_1), 0, 0, 1, 1},
  {&__pyx_n_s_keyIc2_2, __pyx_k_keyIc2_2, sizeof(__pyx_k_keyIc2_2), 0, 0, 1, 1},
  {&__pyx_n_s_keyIc2_3, __pyx_k_keyIc2_3, sizeof(__pyx_k_keyIc2_3), 0, 0, 1, 1},
  {&__pyx_n_s_keyIc2_4, __pyx_k_keyIc2_4, sizeof(__pyx_k_keyIc2_4), 0, 0, 1, 1},
  {&__pyx_n_s_keyIc2_5, __pyx_k_keyIc2_5, sizeof(__pyx_k_keyIc2_5), 0, 0, 1, 1},
  {&__pyx_n_s_keyId1, __pyx_k_keyId1, sizeof(__pyx_k_keyId1), 0, 0, 1, 1},
  {&__pyx_n_s_keyId2, __pyx_k_keyId2, sizeof(__pyx_k_keyId2), 0, 0, 1, 1},
  {&__pyx_n_s_keyIdd, __pyx_k_keyIdd, sizeof(__pyx_k_keyIdd), 0, 0, 1, 1},
  {&__pyx_n_s_keyIddd, __pyx_k_keyIddd, sizeof(__pyx_k_keyIddd), 0, 0, 1, 1},
  {&__pyx_n_s_keyIs1, __pyx_k_keyIs1, sizeof(__pyx_k_keyIs1), 0, 0, 1, 1},
  {&__pyx_n_s_keyIs2, __pyx_k_keyIs2, sizeof(__pyx_k_keyIs2), 0, 0, 1, 1},
  {&__pyx_n_s_keyIsa, __pyx_k_keyIsa, sizeof(__pyx_k_keyIsa), 0, 0, 1, 1},
  {&__pyx_n_s_linspace, __pyx_k_linspace, sizeof(__pyx_k_linspace), 0, 0, 1, 1},
  {&__pyx_n_s_location, __pyx_k_location, sizeof(__pyx_k_location), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_matplotlib_pyplot, __pyx_k_matplotlib_pyplot, sizeof(__pyx_k_matplotlib_pyplot), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_oi, __pyx_k_oi, sizeof(__pyx_k_oi), 0, 0, 1, 1},
  {&__pyx_n_s_oo, __pyx_k_oo, sizeof(__pyx_k_oo), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_kp_s_path_is_invalid, __pyx_k_path_is_invalid, sizeof(__pyx_k_path_is_invalid), 0, 0, 1, 0},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_plt, __pyx_k_plt, sizeof(__pyx_k_plt), 0, 0, 1, 1},
  {&__pyx_n_s_polyarea, __pyx_k_polyarea, sizeof(__pyx_k_polyarea), 0, 0, 1, 1},
  {&__pyx_n_s_polycentroid, __pyx_k_polycentroid, sizeof(__pyx_k_polycentroid), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_DanfossGeoVals, __pyx_k_pyx_unpickle_DanfossGeoVals, sizeof(__pyx_k_pyx_unpickle_DanfossGeoVals), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_r_2, __pyx_k_r_2, sizeof(__pyx_k_r_2), 0, 0, 1, 1},
  {&__pyx_n_s_ra_arc3, __pyx_k_ra_arc3, sizeof(__pyx_k_ra_arc3), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_repr, __pyx_k_repr, sizeof(__pyx_k_repr), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_s1, __pyx_k_s1, sizeof(__pyx_k_s1), 0, 0, 1, 1},
  {&__pyx_n_s_s2, __pyx_k_s2, sizeof(__pyx_k_s2), 0, 0, 1, 1},
  {&__pyx_n_s_sa, __pyx_k_sa, sizeof(__pyx_k_sa), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_sin, __pyx_k_sin, sizeof(__pyx_k_sin), 0, 0, 1, 1},
  {&__pyx_n_s_startswith, __pyx_k_startswith, sizeof(__pyx_k_startswith), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_t1, __pyx_k_t1, sizeof(__pyx_k_t1), 0, 0, 1, 1},
  {&__pyx_n_s_t1_arc3, __pyx_k_t1_arc3, sizeof(__pyx_k_t1_arc3), 0, 0, 1, 1},
  {&__pyx_n_s_t2, __pyx_k_t2, sizeof(__pyx_k_t2), 0, 0, 1, 1},
  {&__pyx_n_s_t2_arc3, __pyx_k_t2_arc3, sizeof(__pyx_k_t2_arc3), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_theta, __pyx_k_theta, sizeof(__pyx_k_theta), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_x0, __pyx_k_x0, sizeof(__pyx_k_x0), 0, 0, 1, 1},
  {&__pyx_n_s_xa_arc3, __pyx_k_xa_arc3, sizeof(__pyx_k_xa_arc3), 0, 0, 1, 1},
  {&__pyx_n_s_y0, __pyx_k_y0, sizeof(__pyx_k_y0), 0, 0, 1, 1},
  {&__pyx_n_s_ya_arc3, __pyx_k_ya_arc3, sizeof(__pyx_k_ya_arc3), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 137, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 240, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 944, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "DanfossPDSim/asymm_scroll_geo.pyx":88
 *     def __repr__(self):
 *         s = "(Danfoss-hybrid)" + geoVals.__repr__(self)
 *         for atr in ['xa_arc3','ya_arc3','ra_arc3','t1_arc3','t2_arc3']:             # <<<<<<<<<<<<<<
 *             s += atr+': '+str(getattr(self,atr))+'\n'
 *         return s
 */
  __pyx_tuple_ = PyTuple_Pack(5, __pyx_n_s_xa_arc3, __pyx_n_s_ya_arc3, __pyx_n_s_ra_arc3, __pyx_n_s_t1_arc3, __pyx_n_s_t2_arc3); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb9a57b5, 0x9123f88, 0x5c2c894):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb9a57b5, 0x9123f88, 0x5c2c894) = (V_scroll, Vremove, b_line, cx_scroll, cy_scroll, delta_flank, delta_radial, delta_suction_offset, h, m_line, phi_fi0, phi_fie, phi_fis, phi_fo0, phi_foe, phi_fos, phi_ie_offset, phi_oi0, phi_oie, phi_ois, phi_oo0, phi_ooe, phi_oos, r_wall, ra_arc1, ra_arc2, ra_arc3, rb, ro, t, t1_arc1, t1_arc2, t1_arc3, t1_line, t2_arc1, t2_arc2, t2_arc3, t2_line, x0_wall, xa_arc1, xa_arc2, xa_arc3, xvec_disc_port, y0_wall, ya_arc1, ya_arc2, ya_arc3, yvec_disc_port))" % __pyx_checksum)
 */
  __pyx_tuple__6 = PyTuple_Pack(3, __pyx_int_194664373, __pyx_int_152190856, __pyx_int_96651412); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":944
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(3, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "../../miniconda3/envs/3s/lib/site-packages/numpy/__init__.pxd":950
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(3, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":1
 * def __pyx_unpickle_DanfossGeoVals(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__10 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_DanfossGeoVals, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_300 = PyInt_FromLong(300); if (unlikely(!__pyx_int_300)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_700 = PyInt_FromLong(700); if (unlikely(!__pyx_int_700)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_96651412 = PyInt_FromLong(96651412L); if (unlikely(!__pyx_int_96651412)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_152190856 = PyInt_FromLong(152190856L); if (unlikely(!__pyx_int_152190856)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_194664373 = PyInt_FromLong(194664373L); if (unlikely(!__pyx_int_194664373)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("theta_d", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_theta_d, "double (struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("Nc", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_Nc, "int (double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("getNc", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_getNc, "int (double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("phi_s1_sa", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_phi_s1_sa, "PyObject *(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("phi_s2_sa", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_phi_s2_sa, "PyObject *(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("CVangles", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVangles, "struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("HT_angles", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_HT_angles, "struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_HTAnglesClass *(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, PyObject *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_radial_leakage_angles", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo__radial_leakage_angles, "PyObject *(struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *, double *, double *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("get_radial_leakage_angles", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_get_radial_leakage_angles, "PyObject *(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, long, long, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("CVcoords", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_CVcoords, "PyObject *(PyObject *, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, double, int __pyx_skip_dispatch, struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_CVcoords *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("SA", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_SA, "struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("SA_forces", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_SA_forces, "PyObject *(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("DD", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_DD, "struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("DD_forces", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_DD_forces, "PyObject *(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("DDD", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_DDD, "struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("DDD_forces", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_DDD_forces, "PyObject *(double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("VdV", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_VdV, "struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *(int, double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("forces", (void (*)(void))__pyx_f_12DanfossPDSim_16asymm_scroll_geo_forces, "PyObject *(int, double, struct __pyx_obj_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals *, int __pyx_skip_dispatch, struct __pyx_opt_args_12DanfossPDSim_16asymm_scroll_geo_forces *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("PDSim.scroll.common_scroll_geo"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5PDSim_6scroll_17common_scroll_geo_geoVals = __Pyx_ImportType(__pyx_t_1, "PDSim.scroll.common_scroll_geo", "geoVals", sizeof(struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_geoVals) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_5PDSim_6scroll_17common_scroll_geo_geoVals = (struct __pyx_vtabstruct_5PDSim_6scroll_17common_scroll_geo_geoVals*)__Pyx_GetVtable(__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_geoVals->tp_dict); if (unlikely(!__pyx_vtabptr_5PDSim_6scroll_17common_scroll_geo_geoVals)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals = &__pyx_vtable_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals;
  __pyx_vtable_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals.__pyx_base = *__pyx_vtabptr_5PDSim_6scroll_17common_scroll_geo_geoVals;
  __pyx_type_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals.tp_base = __pyx_ptype_5PDSim_6scroll_17common_scroll_geo_geoVals;
  if (PyType_Ready(&__pyx_type_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals.tp_dictoffset && __pyx_type_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals.tp_dict, __pyx_vtabptr_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DanfossGeoVals, (PyObject *)&__pyx_type_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
  __pyx_ptype_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals = &__pyx_type_12DanfossPDSim_16asymm_scroll_geo_DanfossGeoVals;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(5, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(3, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(3, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(3, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(3, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(3, 770, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(3, 772, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(3, 774, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(3, 776, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(3, 778, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(3, 780, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(3, 782, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(3, 784, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(3, 786, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(3, 788, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(3, 826, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("PDSim.scroll.common_scroll_geo"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5PDSim_6scroll_17common_scroll_geo_VdVstruct = __Pyx_ImportType(__pyx_t_1, "PDSim.scroll.common_scroll_geo", "VdVstruct", sizeof(struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_VdVstruct) __PYX_ERR(4, 10, __pyx_L1_error)
  __pyx_ptype_5PDSim_6scroll_17common_scroll_geo_HTAnglesClass = __Pyx_ImportType(__pyx_t_1, "PDSim.scroll.common_scroll_geo", "HTAnglesClass", sizeof(struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_HTAnglesClass), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_HTAnglesClass) __PYX_ERR(4, 21, __pyx_L1_error)
  __pyx_ptype_5PDSim_6scroll_17common_scroll_geo_CVInvolute = __Pyx_ImportType(__pyx_t_1, "PDSim.scroll.common_scroll_geo", "CVInvolute", sizeof(struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolute), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_CVInvolute) __PYX_ERR(4, 51, __pyx_L1_error)
  __pyx_ptype_5PDSim_6scroll_17common_scroll_geo_CVInvolutes = __Pyx_ImportType(__pyx_t_1, "PDSim.scroll.common_scroll_geo", "CVInvolutes", sizeof(struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5PDSim_6scroll_17common_scroll_geo_CVInvolutes) __PYX_ERR(4, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("PDSim.scroll.common_scroll_geo"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "involute_index_to_key", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo_involute_index_to_key, "PyObject *(int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "coords_norm", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_norm, "PyObject *(PyObject *, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo_coords_norm *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "coords_inv", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv, "PyObject *(PyObject *, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo_coords_inv *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_coords_inv_d", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo__coords_inv_d, "PyObject *(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_6scroll_17common_scroll_geo__coords_inv_d *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_coords_inv_d_int", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo__coords_inv_d_int, "PyObject *(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int, double *, double *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "coords_inv_dtheta", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo_coords_inv_dtheta, "PyObject *(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int, double *, double *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_dcoords_inv_dphi_int", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo__dcoords_inv_dphi_int, "PyObject *(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int, double *, double *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_compressor_CV_index", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo_get_compressor_CV_index, "long (PyObject *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_compression_chamber_index", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo_get_compression_chamber_index, "long (long, long, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "Gr", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo_Gr, "double (double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "dGr_dphi", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo_dGr_dphi, "double (double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "dGr_dtheta", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo_dGr_dtheta, "double (double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "VdV", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo_VdV, "struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_VdVstruct *(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "forces", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo_forces, "PyObject *(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_CVInvolutes *, double, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "fFx_p", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo_fFx_p, "double (double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_involute_index, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "fFy_p", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo_fFy_p, "double (double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_involute_index, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "fMO_p", (void (**)(void))&__pyx_f_5PDSim_6scroll_17common_scroll_geo_fMO_p, "double (double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, double, enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_involute_index, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("PDSim.scroll.symm_scroll_geo"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "DD_forces", (void (**)(void))&__pyx_f_5PDSim_6scroll_15symm_scroll_geo_DD_forces, "PyObject *(double, struct __pyx_obj_5PDSim_6scroll_17common_scroll_geo_geoVals *, int __pyx_skip_dispatch, struct __pyx_opt_args_5PDSim_6scroll_15symm_scroll_geo_DD_forces *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initasymm_scroll_geo(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initasymm_scroll_geo(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_asymm_scroll_geo(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_asymm_scroll_geo(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_asymm_scroll_geo(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'asymm_scroll_geo' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_asymm_scroll_geo(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("asymm_scroll_geo", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_DanfossPDSim__asymm_scroll_geo) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "DanfossPDSim.asymm_scroll_geo")) {
      if (unlikely(PyDict_SetItemString(modules, "DanfossPDSim.asymm_scroll_geo", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_asymm_scroll_geo(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "DanfossPDSim/asymm_scroll_geo.pyx":7
 * cimport PDSim.scroll.symm_scroll_geo as symm_scroll_geo
 * 
 * from PDSim.scroll.common_scroll_geo import polycentroid, polyarea             # <<<<<<<<<<<<<<
 * 
 * from libc.math cimport sqrt,sin,cos,tan,atan2,acos,floor,M_PI as pi,pow,atan
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_polycentroid);
  __Pyx_GIVEREF(__pyx_n_s_polycentroid);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_polycentroid);
  __Pyx_INCREF(__pyx_n_s_polyarea);
  __Pyx_GIVEREF(__pyx_n_s_polyarea);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_polyarea);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_PDSim_scroll_common_scroll_geo, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_polycentroid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_polycentroid, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_polyarea); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_polyarea, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":11
 * from libc.math cimport sqrt,sin,cos,tan,atan2,acos,floor,M_PI as pi,pow,atan
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * import matplotlib.pyplot as plt
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":13
 * import numpy as np
 * cimport numpy as np
 * import matplotlib.pyplot as plt             # <<<<<<<<<<<<<<
 * 
 * # Define python variables in this module for the integer
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s__9);
  __Pyx_GIVEREF(__pyx_n_s__9);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__9);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_matplotlib_pyplot, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_plt, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":17
 * # Define python variables in this module for the integer
 * # constants for the control volumes
 * keyIsa = common.keyIsa             # <<<<<<<<<<<<<<
 * keyIs1 = common.keyIs1
 * keyIs2 = common.keyIs2
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIsa); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyIsa, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":18
 * # constants for the control volumes
 * keyIsa = common.keyIsa
 * keyIs1 = common.keyIs1             # <<<<<<<<<<<<<<
 * keyIs2 = common.keyIs2
 * keyId1 = common.keyId1
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIs1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyIs1, __pyx_t_1) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":19
 * keyIsa = common.keyIsa
 * keyIs1 = common.keyIs1
 * keyIs2 = common.keyIs2             # <<<<<<<<<<<<<<
 * keyId1 = common.keyId1
 * keyId2 = common.keyId2
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIs2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyIs2, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":20
 * keyIs1 = common.keyIs1
 * keyIs2 = common.keyIs2
 * keyId1 = common.keyId1             # <<<<<<<<<<<<<<
 * keyId2 = common.keyId2
 * keyIdd = common.keyIdd
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyId1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyId1, __pyx_t_1) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":21
 * keyIs2 = common.keyIs2
 * keyId1 = common.keyId1
 * keyId2 = common.keyId2             # <<<<<<<<<<<<<<
 * keyIdd = common.keyIdd
 * keyIddd = common.keyIddd
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyId2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyId2, __pyx_t_1) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":22
 * keyId1 = common.keyId1
 * keyId2 = common.keyId2
 * keyIdd = common.keyIdd             # <<<<<<<<<<<<<<
 * keyIddd = common.keyIddd
 * keyIc1_1 = common.keyIc1_1
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIdd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyIdd, __pyx_t_1) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":23
 * keyId2 = common.keyId2
 * keyIdd = common.keyIdd
 * keyIddd = common.keyIddd             # <<<<<<<<<<<<<<
 * keyIc1_1 = common.keyIc1_1
 * keyIc1_2 = common.keyIc1_2
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIddd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyIddd, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":24
 * keyIdd = common.keyIdd
 * keyIddd = common.keyIddd
 * keyIc1_1 = common.keyIc1_1             # <<<<<<<<<<<<<<
 * keyIc1_2 = common.keyIc1_2
 * keyIc1_3 = common.keyIc1_3
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyIc1_1, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":25
 * keyIddd = common.keyIddd
 * keyIc1_1 = common.keyIc1_1
 * keyIc1_2 = common.keyIc1_2             # <<<<<<<<<<<<<<
 * keyIc1_3 = common.keyIc1_3
 * keyIc1_4 = common.keyIc1_4
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyIc1_2, __pyx_t_1) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":26
 * keyIc1_1 = common.keyIc1_1
 * keyIc1_2 = common.keyIc1_2
 * keyIc1_3 = common.keyIc1_3             # <<<<<<<<<<<<<<
 * keyIc1_4 = common.keyIc1_4
 * keyIc1_5 = common.keyIc1_5
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyIc1_3, __pyx_t_1) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":27
 * keyIc1_2 = common.keyIc1_2
 * keyIc1_3 = common.keyIc1_3
 * keyIc1_4 = common.keyIc1_4             # <<<<<<<<<<<<<<
 * keyIc1_5 = common.keyIc1_5
 * keyIc2_1 = common.keyIc2_1
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyIc1_4, __pyx_t_1) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":28
 * keyIc1_3 = common.keyIc1_3
 * keyIc1_4 = common.keyIc1_4
 * keyIc1_5 = common.keyIc1_5             # <<<<<<<<<<<<<<
 * keyIc2_1 = common.keyIc2_1
 * keyIc2_2 = common.keyIc2_2
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc1_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyIc1_5, __pyx_t_1) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":29
 * keyIc1_4 = common.keyIc1_4
 * keyIc1_5 = common.keyIc1_5
 * keyIc2_1 = common.keyIc2_1             # <<<<<<<<<<<<<<
 * keyIc2_2 = common.keyIc2_2
 * keyIc2_3 = common.keyIc2_3
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyIc2_1, __pyx_t_1) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":30
 * keyIc1_5 = common.keyIc1_5
 * keyIc2_1 = common.keyIc2_1
 * keyIc2_2 = common.keyIc2_2             # <<<<<<<<<<<<<<
 * keyIc2_3 = common.keyIc2_3
 * keyIc2_4 = common.keyIc2_4
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyIc2_2, __pyx_t_1) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":31
 * keyIc2_1 = common.keyIc2_1
 * keyIc2_2 = common.keyIc2_2
 * keyIc2_3 = common.keyIc2_3             # <<<<<<<<<<<<<<
 * keyIc2_4 = common.keyIc2_4
 * keyIc2_5 = common.keyIc2_5
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyIc2_3, __pyx_t_1) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":32
 * keyIc2_2 = common.keyIc2_2
 * keyIc2_3 = common.keyIc2_3
 * keyIc2_4 = common.keyIc2_4             # <<<<<<<<<<<<<<
 * keyIc2_5 = common.keyIc2_5
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyIc2_4, __pyx_t_1) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":33
 * keyIc2_3 = common.keyIc2_3
 * keyIc2_4 = common.keyIc2_4
 * keyIc2_5 = common.keyIc2_5             # <<<<<<<<<<<<<<
 * 
 * cpdef inline double Danfossmin2(double a, double b):
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(__pyx_e_5PDSim_6scroll_17common_scroll_geo_keyIc2_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keyIc2_5, __pyx_t_1) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":872
 *     return _radial_leakage_angles(CV_up, CV_down, &phi_min, &phi_max)
 * 
 * cpdef double radial_leakage_area(double theta, DanfossGeoVals geo, int index_up, int index_down, int location = common.UP) except *:             # <<<<<<<<<<<<<<
 *     """
 *     Notes
 */
  __pyx_k__4 = __pyx_e_5PDSim_6scroll_17common_scroll_geo_UP;
  __pyx_k__4 = __pyx_e_5PDSim_6scroll_17common_scroll_geo_UP;

  /* "(tree fragment)":1
 * def __pyx_unpickle_DanfossGeoVals(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_12DanfossPDSim_16asymm_scroll_geo_45__pyx_unpickle_DanfossGeoVals, NULL, __pyx_n_s_DanfossPDSim_asymm_scroll_geo); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_DanfossGeoVals, __pyx_t_1) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "DanfossPDSim/asymm_scroll_geo.pyx":1
 * cimport PDSim.scroll.common_scroll_geo as common             # <<<<<<<<<<<<<<
 * from PDSim.scroll.common_scroll_geo cimport _dcoords_inv_dphi_int,_coords_inv_d, coords_inv, coords_inv_dtheta, coords_norm, get_compression_chamber_index
 * from PDSim.scroll.common_scroll_geo cimport Gr, dGr_dtheta, dGr_dphi, INVOLUTE_FI, INVOLUTE_FO, INVOLUTE_OI, INVOLUTE_OO
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PDSim/scroll/common_scroll_geo.pxd":147
 *     return a if a<b else b
 * 
 * cpdef inline double max2(double a, double b):             # <<<<<<<<<<<<<<
 *     return a if a>b else b
 * 
 */
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init DanfossPDSim.asymm_scroll_geo", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init DanfossPDSim.asymm_scroll_geo");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    __Pyx_EnterTracing(tstate);
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    __Pyx_LeaveTracing(tstate);
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return __Pyx_IsTracing(tstate, 0, 0) && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* ModFloat[double] */
static CYTHON_INLINE double __Pyx_mod_double(double a, double b) {
    double r = fmod(a, b);
    r += ((r != 0) & ((r < 0) ^ (b < 0))) * b;
    return r;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices(enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices neg_one = (enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices) -1, const_zero = (enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum __pyx_t_5PDSim_6scroll_17common_scroll_geo_compressor_CV_indices),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
